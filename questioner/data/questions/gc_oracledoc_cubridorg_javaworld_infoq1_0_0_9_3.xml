<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_9_3" name="GC_Oracledoc_cubridorg_javaworld_infoq" nofquestions="2" nofsubcategories="0" filename="gc_oracledoc_cubridorg_javaworld_infoq1_0_0_9_3.xml">
  <question id="1_0_0_9_3:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;JVM&amp;nbsp;:&amp;nbsp;When&amp;nbsp;does&amp;nbsp;System.gc()&amp;nbsp;do&amp;nbsp;anything&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>In&amp;nbsp;practice,&amp;nbsp;it&amp;nbsp;usually&amp;nbsp;decides&amp;nbsp;to&amp;nbsp;do&amp;nbsp;a&amp;nbsp;garbage&amp;nbsp;collection.&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;varies&amp;nbsp;depending&amp;nbsp;on&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;factors,&amp;nbsp;like&lt;br&gt;
which&amp;nbsp;JVM&amp;nbsp;you're&amp;nbsp;running&amp;nbsp;on,&amp;nbsp;which&amp;nbsp;mode&amp;nbsp;it's&amp;nbsp;in,&amp;nbsp;and&amp;nbsp;which&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;algorithm&amp;nbsp;it's&amp;nbsp;using.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
I&amp;nbsp;wouldn't&amp;nbsp;depend&amp;nbsp;on&amp;nbsp;it&amp;nbsp;in&amp;nbsp;your&amp;nbsp;code.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;is&amp;nbsp;about&amp;nbsp;to&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;OutOfMemoryError,&amp;nbsp;calling&amp;nbsp;System.gc()&lt;br&gt;
won't&amp;nbsp;stop&amp;nbsp;it,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;will&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;free&amp;nbsp;as&amp;nbsp;much&amp;nbsp;as&amp;nbsp;it&amp;nbsp;can&amp;nbsp;before&amp;nbsp;it&amp;nbsp;goes&amp;nbsp;to&amp;nbsp;that&lt;br&gt;
extreme.&amp;nbsp;The&amp;nbsp;only&amp;nbsp;time&amp;nbsp;I've&amp;nbsp;seen&amp;nbsp;it&amp;nbsp;used&amp;nbsp;in&amp;nbsp;practice&amp;nbsp;is&amp;nbsp;in&amp;nbsp;IDEs&amp;nbsp;where&amp;nbsp;it's&amp;nbsp;attached&amp;nbsp;to&amp;nbsp;a&amp;nbsp;button&amp;nbsp;that&amp;nbsp;a&amp;nbsp;user&lt;br&gt;
can&amp;nbsp;click,&amp;nbsp;but&amp;nbsp;even&amp;nbsp;there&amp;nbsp;it's&amp;nbsp;not&amp;nbsp;terribly&amp;nbsp;useful.&lt;br&gt;
==========================================&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;Popular&amp;nbsp;question&amp;nbsp;in&amp;nbsp;tests&amp;nbsp;and&amp;nbsp;on&amp;nbsp;Interviews&amp;nbsp;:&amp;nbsp;&lt;br&gt;
How&amp;nbsp;we&amp;nbsp;can&amp;nbsp;force&amp;nbsp;Garbage&amp;nbsp;Collection&amp;nbsp;?&lt;br&gt;
&lt;br&gt;
Answer&amp;nbsp;:&amp;nbsp;We&amp;nbsp;cant&amp;nbsp;force&amp;nbsp;GC&amp;nbsp;.&amp;nbsp;JVM&amp;nbsp;know&amp;nbsp;then&amp;nbsp;perform&amp;nbsp;GC&amp;nbsp;,&amp;nbsp;&lt;br&gt;
we&amp;nbsp;can&amp;nbsp;only&amp;nbsp;suggest&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;gc&amp;nbsp;with&amp;nbsp;System.gc().&lt;br&gt;
&lt;br&gt;
=======================&lt;br&gt;
You&amp;nbsp;have&amp;nbsp;no&amp;nbsp;control&amp;nbsp;over&amp;nbsp;GC&amp;nbsp;in&amp;nbsp;java&amp;nbsp;--&amp;nbsp;the&amp;nbsp;VM&amp;nbsp;decides.&amp;nbsp;I've&amp;nbsp;never&amp;nbsp;run&amp;nbsp;across&amp;nbsp;a&amp;nbsp;case&amp;nbsp;where&amp;nbsp;System.gc()&lt;br&gt;
is&amp;nbsp;needed.&amp;nbsp;Since&amp;nbsp;a&amp;nbsp;System.gc()&amp;nbsp;call&amp;nbsp;simply&amp;nbsp;SUGGESTS&amp;nbsp;that&amp;nbsp;the&amp;nbsp;VM&amp;nbsp;do&amp;nbsp;a&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;and&amp;nbsp;it&amp;nbsp;also&lt;br&gt;
does&amp;nbsp;a&amp;nbsp;FULL&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;(old&amp;nbsp;and&amp;nbsp;new&amp;nbsp;generations&amp;nbsp;in&amp;nbsp;a&amp;nbsp;multi-generational&amp;nbsp;heap),&amp;nbsp;then&amp;nbsp;it&amp;nbsp;can&lt;br&gt;
actually&amp;nbsp;cause&amp;nbsp;MORE&amp;nbsp;cpu&amp;nbsp;cycles&amp;nbsp;to&amp;nbsp;be&amp;nbsp;consumed&amp;nbsp;than&amp;nbsp;necessary.</questionanswer>
  </question>
  <question id="1_0_0_9_3:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;JVM&amp;nbsp;:&amp;nbsp;GC&amp;nbsp;:&amp;nbsp;Java&amp;nbsp;Memory&amp;nbsp;Model,&amp;nbsp;describe&amp;nbsp;main&amp;nbsp;concepts&amp;nbsp;and&amp;nbsp;terms.&lt;br&gt;
What&amp;nbsp;are&amp;nbsp;the&amp;nbsp;types&amp;nbsp;OutOfMemoryError&amp;nbsp;(and&amp;nbsp;their&amp;nbsp;reasons)?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>With&amp;nbsp;Java&amp;nbsp;problems&amp;nbsp;like&amp;nbsp;deallocating&amp;nbsp;memory&amp;nbsp;too&amp;nbsp;early&amp;nbsp;(corrupted&amp;nbsp;pointer)&amp;nbsp;or&amp;nbsp;too&amp;nbsp;late&amp;nbsp;(memory&amp;nbsp;leak)&amp;nbsp;cannot&lt;br&gt;
occur&amp;nbsp;BY&amp;nbsp;specification.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;problem&amp;nbsp;is&amp;nbsp;that&amp;nbsp;even&amp;nbsp;with&amp;nbsp;an&amp;nbsp;implicit&amp;nbsp;memory&amp;nbsp;management&amp;nbsp;integrated,&amp;nbsp;Java&amp;nbsp;cannot&amp;nbsp;prevent&amp;nbsp;application&lt;br&gt;
of&amp;nbsp;being&amp;nbsp;corrupt&amp;nbsp;in&amp;nbsp;sense&amp;nbsp;of&amp;nbsp;memory&amp;nbsp;management,&amp;nbsp;even&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;explicitly&amp;nbsp;allocate&amp;nbsp;memory&amp;nbsp;in&amp;nbsp;Java.&lt;br&gt;
The&amp;nbsp;result&amp;nbsp;of&amp;nbsp;such&amp;nbsp;wrongly&amp;nbsp;programmed&amp;nbsp;code&amp;nbsp;normally&amp;nbsp;is&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;of&amp;nbsp;type:&amp;nbsp;java.lang.OutOfMemoryError.&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='575'&amp;nbsp;height='150'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/MemoryStructure.png'/&gt;&lt;br&gt;
&lt;br&gt;
Lets&amp;nbsp;have&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;the&amp;nbsp;Sun&amp;nbsp;HotSpot&amp;nbsp;implementation&amp;nbsp;as&amp;nbsp;an&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='480'&amp;nbsp;height='300'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/sun-hotspot-memory-1.jpg'/&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HOTSPOT&amp;nbsp;Heap&amp;nbsp;Structure&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='480'&amp;nbsp;height='320'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/Slide5.PNG'/&gt;&lt;br&gt;
The&amp;nbsp;Young&amp;nbsp;Generation&amp;nbsp;is&amp;nbsp;where&amp;nbsp;all&amp;nbsp;new&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;allocated&amp;nbsp;and&amp;nbsp;aged.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;young&amp;nbsp;generation&amp;nbsp;fills&amp;nbsp;up,&amp;nbsp;this&lt;br&gt;
causes&amp;nbsp;a&amp;nbsp;minor&amp;nbsp;garbage&amp;nbsp;collection.&amp;nbsp;Minor&amp;nbsp;collections&amp;nbsp;can&amp;nbsp;be&amp;nbsp;optimized&amp;nbsp;assuming&amp;nbsp;a&amp;nbsp;high&amp;nbsp;object&amp;nbsp;mortality&amp;nbsp;rate.&lt;br&gt;
A&amp;nbsp;young&amp;nbsp;generation&amp;nbsp;full&amp;nbsp;of&amp;nbsp;dead&amp;nbsp;objects&amp;nbsp;is&amp;nbsp;collected&amp;nbsp;very&amp;nbsp;quickly.&amp;nbsp;Some&amp;nbsp;surviving&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;aged&amp;nbsp;and&lt;br&gt;
eventually&amp;nbsp;move&amp;nbsp;to&amp;nbsp;the&amp;nbsp;old&amp;nbsp;generation.&lt;br&gt;
&lt;br&gt;
Stop&amp;nbsp;the&amp;nbsp;World&amp;nbsp;Event&amp;nbsp;-&amp;nbsp;All&amp;nbsp;minor&amp;nbsp;garbage&amp;nbsp;collections&amp;nbsp;are&amp;nbsp;"Stop&amp;nbsp;the&amp;nbsp;World"&amp;nbsp;events.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;all&lt;br&gt;
application&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;stopped&amp;nbsp;until&amp;nbsp;the&amp;nbsp;operation&amp;nbsp;completes.&amp;nbsp;Minor&amp;nbsp;garbage&amp;nbsp;collections&amp;nbsp;are&amp;nbsp;always&amp;nbsp;Stop&lt;br&gt;
the&amp;nbsp;World&amp;nbsp;events.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Old&amp;nbsp;Generation&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;long&amp;nbsp;surviving&amp;nbsp;objects.&amp;nbsp;Typically,&amp;nbsp;a&amp;nbsp;threshold&amp;nbsp;is&amp;nbsp;set&amp;nbsp;for&amp;nbsp;young&amp;nbsp;generation&lt;br&gt;
object&amp;nbsp;and&amp;nbsp;when&amp;nbsp;that&amp;nbsp;age&amp;nbsp;is&amp;nbsp;met,&amp;nbsp;the&amp;nbsp;object&amp;nbsp;gets&amp;nbsp;moved&amp;nbsp;to&amp;nbsp;the&amp;nbsp;old&amp;nbsp;generation.&amp;nbsp;Eventually&amp;nbsp;the&amp;nbsp;old&lt;br&gt;
generation&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;collected.&amp;nbsp;This&amp;nbsp;event&amp;nbsp;is&amp;nbsp;called&amp;nbsp;a&amp;nbsp;major&amp;nbsp;garbage&amp;nbsp;collection.&lt;br&gt;
&lt;br&gt;
Major&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;are&amp;nbsp;also&amp;nbsp;Stop&amp;nbsp;the&amp;nbsp;World&amp;nbsp;events.&amp;nbsp;Often&amp;nbsp;a&amp;nbsp;major&amp;nbsp;collection&amp;nbsp;is&amp;nbsp;much&amp;nbsp;slower&amp;nbsp;because&amp;nbsp;it&lt;br&gt;
involves&amp;nbsp;all&amp;nbsp;live&amp;nbsp;objects.&amp;nbsp;So&amp;nbsp;for&amp;nbsp;Responsive&amp;nbsp;applications,&amp;nbsp;major&amp;nbsp;garbage&amp;nbsp;collections&amp;nbsp;should&amp;nbsp;be&amp;nbsp;minimized.&lt;br&gt;
Also&amp;nbsp;note,&amp;nbsp;that&amp;nbsp;the&amp;nbsp;length&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Stop&amp;nbsp;the&amp;nbsp;World&amp;nbsp;event&amp;nbsp;for&amp;nbsp;a&amp;nbsp;major&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;is&amp;nbsp;affected&amp;nbsp;by&amp;nbsp;the&lt;br&gt;
kind&amp;nbsp;of&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;that&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;the&amp;nbsp;old&amp;nbsp;generation&amp;nbsp;space.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Permanent&amp;nbsp;generation&amp;nbsp;contains&amp;nbsp;metadata&amp;nbsp;required&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;to&amp;nbsp;describe&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;used&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;application.&amp;nbsp;The&amp;nbsp;permanent&amp;nbsp;generation&amp;nbsp;is&amp;nbsp;populated&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;based&amp;nbsp;on&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;use&lt;br&gt;
by&amp;nbsp;the&amp;nbsp;application.&amp;nbsp;In&amp;nbsp;addition,&amp;nbsp;Java&amp;nbsp;SE&amp;nbsp;library&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;may&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;here.&lt;br&gt;
&lt;br&gt;
Classes&amp;nbsp;may&amp;nbsp;get&amp;nbsp;collected&amp;nbsp;(unloaded)&amp;nbsp;if&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;finds&amp;nbsp;they&amp;nbsp;are&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;needed&amp;nbsp;and&amp;nbsp;space&amp;nbsp;may&amp;nbsp;be&amp;nbsp;needed&lt;br&gt;
for&amp;nbsp;other&amp;nbsp;classes.&amp;nbsp;The&amp;nbsp;permanent&amp;nbsp;generation&amp;nbsp;is&amp;nbsp;included&amp;nbsp;in&amp;nbsp;a&amp;nbsp;full&amp;nbsp;garbage&amp;nbsp;collection.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;of&amp;nbsp;today,&amp;nbsp;there&amp;nbsp;are&amp;nbsp;--&gt;&gt;&amp;nbsp;4&amp;nbsp;GC&amp;nbsp;algorithms&amp;nbsp;&lt;&lt;---&amp;nbsp;available&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Hotspot&amp;nbsp;VM:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Serial&amp;nbsp;GC&amp;nbsp;-&amp;nbsp;recommended&amp;nbsp;for&amp;nbsp;client-style&amp;nbsp;applications&amp;nbsp;that&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&amp;nbsp;low&amp;nbsp;pause&amp;nbsp;time&amp;nbsp;requirements.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Parallel&amp;nbsp;GC&amp;nbsp;-&amp;nbsp;use&amp;nbsp;when&amp;nbsp;the&amp;nbsp;throughput&amp;nbsp;matters.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Mostly-Concurrent&amp;nbsp;GC&amp;nbsp;(also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;Concurrent&amp;nbsp;Mark-Sweep&amp;nbsp;GC(CMS))&amp;nbsp;-&amp;nbsp;use&amp;nbsp;when&amp;nbsp;the&amp;nbsp;latency&amp;nbsp;matters.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Garbage&amp;nbsp;First&amp;nbsp;GC&amp;nbsp;(G1)&amp;nbsp;-&amp;nbsp;new&amp;nbsp;GC&amp;nbsp;algorithm,&amp;nbsp;for&amp;nbsp;CMS&amp;nbsp;replacement.&lt;br&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
==================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Types&amp;nbsp;OutOfMemoryError&amp;nbsp;&amp;nbsp;(and&amp;nbsp;their&amp;nbsp;reasons)&lt;br&gt;
1.&amp;nbsp;java.lang.OutOfMemoryError:&amp;nbsp;Java&amp;nbsp;heap&amp;nbsp;space&lt;br&gt;
Not&amp;nbsp;enough&amp;nbsp;space&amp;nbsp;in&amp;nbsp;the&amp;nbsp;heap,&amp;nbsp;namely&amp;nbsp;in&amp;nbsp;the&amp;nbsp;area&amp;nbsp;of&amp;nbsp;??memory&amp;nbsp;in&amp;nbsp;which&amp;nbsp;to&amp;nbsp;place&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;created&lt;br&gt;
programmatically&amp;nbsp;in&amp;nbsp;your&amp;nbsp;application.&amp;nbsp;Size&amp;nbsp;is&amp;nbsp;set&amp;nbsp;parameters-Xms&amp;nbsp;and-Xmx.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;create&amp;nbsp;an&amp;nbsp;object,&lt;br&gt;
and&amp;nbsp;place&amp;nbsp;in&amp;nbsp;a&amp;nbsp;pile&amp;nbsp;of&amp;nbsp;left,&amp;nbsp;you&amp;nbsp;get&amp;nbsp;this&amp;nbsp;error.&amp;nbsp;Usually&amp;nbsp;the&amp;nbsp;problem&amp;nbsp;is&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;leak,&amp;nbsp;of&amp;nbsp;which&amp;nbsp;is&amp;nbsp;a&amp;nbsp;great&lt;br&gt;
multitude,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;Internet&amp;nbsp;is&amp;nbsp;full&amp;nbsp;of&amp;nbsp;articles&amp;nbsp;just&amp;nbsp;on&amp;nbsp;this&amp;nbsp;topic.&lt;br&gt;
&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;solve&amp;nbsp;java.lang.OutOfMemoryError:&amp;nbsp;Java&amp;nbsp;heap&amp;nbsp;space&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&amp;nbsp;1)&amp;nbsp;Easy&amp;nbsp;way&amp;nbsp;to&amp;nbsp;solve&amp;nbsp;OutOfMemoryError&amp;nbsp;in&amp;nbsp;java&amp;nbsp;is&amp;nbsp;to&amp;nbsp;increase&amp;nbsp;the&amp;nbsp;maximum&amp;nbsp;heap&amp;nbsp;size&amp;nbsp;by&amp;nbsp;using&amp;nbsp;JVM&amp;nbsp;options&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"-Xmx512M",&amp;nbsp;this&amp;nbsp;will&amp;nbsp;immediately&amp;nbsp;solve&amp;nbsp;your&amp;nbsp;OutOfMemoryError.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Also&amp;nbsp;its&amp;nbsp;better&amp;nbsp;to&amp;nbsp;keep&amp;nbsp;-Xmx&amp;nbsp;to&amp;nbsp;-Xms&amp;nbsp;ration&amp;nbsp;either&amp;nbsp;1:1&amp;nbsp;or&amp;nbsp;1:1.5&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java&amp;nbsp;-Xms512m&amp;nbsp;-Xmx1024m&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2)&amp;nbsp;Second&amp;nbsp;way&amp;nbsp;to&amp;nbsp;resolve&amp;nbsp;OutOfMemoryError&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;rather&amp;nbsp;hard&amp;nbsp;and&amp;nbsp;&amp;nbsp;comes&amp;nbsp;when&amp;nbsp;you&amp;nbsp;don't&amp;nbsp;have&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;much&amp;nbsp;memory&amp;nbsp;and&amp;nbsp;even&amp;nbsp;after&amp;nbsp;increase&amp;nbsp;maximum&amp;nbsp;heap&amp;nbsp;size&amp;nbsp;you&amp;nbsp;are&amp;nbsp;still&amp;nbsp;getting&amp;nbsp;java.lang.OutOfMemoryError,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case&amp;nbsp;you&amp;nbsp;probably&amp;nbsp;want&amp;nbsp;to&amp;nbsp;profile&amp;nbsp;your&amp;nbsp;application&amp;nbsp;and&amp;nbsp;look&amp;nbsp;for&amp;nbsp;any&amp;nbsp;memory&amp;nbsp;leak.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;use&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Eclipse&amp;nbsp;Memory&amp;nbsp;Analyzer&amp;nbsp;to&amp;nbsp;examine&amp;nbsp;your&amp;nbsp;heap&amp;nbsp;dump&amp;nbsp;or&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;any&amp;nbsp;profiler&amp;nbsp;like&amp;nbsp;Netbeans&amp;nbsp;or&amp;nbsp;JProbe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This&amp;nbsp;is&amp;nbsp;tough&amp;nbsp;solution&amp;nbsp;and&amp;nbsp;requires&amp;nbsp;some&amp;nbsp;time&amp;nbsp;to&amp;nbsp;analyze&amp;nbsp;and&amp;nbsp;find&amp;nbsp;memory&amp;nbsp;leaks.&lt;br&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
2.&amp;nbsp;java.lang.OutOfMemoryError:&amp;nbsp;PermGen&amp;nbsp;space&lt;br&gt;
This&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;when&amp;nbsp;not&amp;nbsp;enough&amp;nbsp;space&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Permanent&amp;nbsp;field,&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;which&amp;nbsp;is&amp;nbsp;defined&amp;nbsp;by&amp;nbsp;the&lt;br&gt;
parameters-XX:&amp;nbsp;PermSize&amp;nbsp;and-XX:&amp;nbsp;MaxPermSize.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;there&amp;nbsp;and&amp;nbsp;how&amp;nbsp;to&amp;nbsp;deal&amp;nbsp;with&amp;nbsp;OutOfMemoryError&amp;nbsp;occurring&lt;br&gt;
there.&lt;br&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
3.&amp;nbsp;java.lang.OutOfMemoryError:&amp;nbsp;GC&amp;nbsp;overhead&amp;nbsp;limit&amp;nbsp;exceeded&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;error&amp;nbsp;can&amp;nbsp;be&amp;nbsp;caused&amp;nbsp;by&amp;nbsp;the&amp;nbsp;overflow&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Heap&amp;nbsp;and&amp;nbsp;PermGen&amp;nbsp;regions.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;connected&amp;nbsp;with&amp;nbsp;the&amp;nbsp;fact&amp;nbsp;that&lt;br&gt;
memory&amp;nbsp;is&amp;nbsp;low&amp;nbsp;and&amp;nbsp;GC&amp;nbsp;is&amp;nbsp;constantly&amp;nbsp;working,&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;free&amp;nbsp;up&amp;nbsp;some&amp;nbsp;space.&amp;nbsp;This&amp;nbsp;error&amp;nbsp;can&amp;nbsp;be&amp;nbsp;disabled&amp;nbsp;by&amp;nbsp;using&lt;br&gt;
the-XX:-UseGCOverheadLimit,&amp;nbsp;but&amp;nbsp;of&amp;nbsp;course,&amp;nbsp;it&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;turned&amp;nbsp;off&amp;nbsp;and&amp;nbsp;either&amp;nbsp;solve&amp;nbsp;the&amp;nbsp;problem&amp;nbsp;of&lt;br&gt;
memory&amp;nbsp;leaks,&amp;nbsp;or&amp;nbsp;allocate&amp;nbsp;more&amp;nbsp;volume,&amp;nbsp;or&amp;nbsp;change&amp;nbsp;the&amp;nbsp;settings&amp;nbsp;of&amp;nbsp;GC.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
-XX:+UseGCOverheadLimit&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Use&amp;nbsp;a&amp;nbsp;policy&amp;nbsp;that&amp;nbsp;limits&amp;nbsp;the&amp;nbsp;proportion&amp;nbsp;of&amp;nbsp;the&amp;nbsp;VM's&amp;nbsp;time&amp;nbsp;that&amp;nbsp;is&amp;nbsp;spent&amp;nbsp;in&amp;nbsp;GC&lt;br&gt;
before&amp;nbsp;an&amp;nbsp;OutOfMemory&amp;nbsp;error&amp;nbsp;is&amp;nbsp;thrown.&amp;nbsp;(Introduced&amp;nbsp;in&amp;nbsp;6.)&lt;br&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
4.&amp;nbsp;java.lang.OutOfMemoryError:&amp;nbsp;unable&amp;nbsp;to&amp;nbsp;create&amp;nbsp;new&amp;nbsp;native&amp;nbsp;thread&lt;br&gt;
&lt;br&gt;
(interesting&amp;nbsp;explanation&amp;nbsp;on&amp;nbsp;habrahabr)&amp;nbsp;:&lt;br&gt;
I&amp;nbsp;first&amp;nbsp;encountered&amp;nbsp;this&amp;nbsp;bug&amp;nbsp;a&amp;nbsp;few&amp;nbsp;years&amp;nbsp;ago&amp;nbsp;when&amp;nbsp;doing&amp;nbsp;load&amp;nbsp;testing&amp;nbsp;and&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;figure&amp;nbsp;out&amp;nbsp;the&amp;nbsp;maximum&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;users&amp;nbsp;who&amp;nbsp;can&amp;nbsp;work&amp;nbsp;with&amp;nbsp;our&amp;nbsp;web&amp;nbsp;application.&amp;nbsp;I&amp;nbsp;used&amp;nbsp;a&amp;nbsp;special&amp;nbsp;TOOLS&amp;nbsp;,&amp;nbsp;which&amp;nbsp;allowed&amp;nbsp;the&amp;nbsp;user&lt;br&gt;
login&amp;nbsp;and&amp;nbsp;emulate&amp;nbsp;their&amp;nbsp;standard&amp;nbsp;actions.&amp;nbsp;At&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;number&amp;nbsp;of&amp;nbsp;clients&amp;nbsp;,&amp;nbsp;I&amp;nbsp;started&amp;nbsp;getting&amp;nbsp;OutOfMemoryError.&lt;br&gt;
Not&amp;nbsp;really&amp;nbsp;getting&amp;nbsp;a&amp;nbsp;grasp&amp;nbsp;in&amp;nbsp;the&amp;nbsp;body&amp;nbsp;and&amp;nbsp;thinking&amp;nbsp;that&amp;nbsp;I&amp;nbsp;did&amp;nbsp;not&amp;nbsp;have&amp;nbsp;enough&amp;nbsp;memory&amp;nbsp;to&amp;nbsp;create&amp;nbsp;the&amp;nbsp;user's&lt;br&gt;
session&amp;nbsp;and&amp;nbsp;other&amp;nbsp;necessary&amp;nbsp;facilities&amp;nbsp;,&amp;nbsp;I&amp;nbsp;increased&amp;nbsp;the&amp;nbsp;application&amp;nbsp;heap&amp;nbsp;size&amp;nbsp;(-Xmx).&amp;nbsp;Imagine&amp;nbsp;my&amp;nbsp;surprise&amp;nbsp;when,&lt;br&gt;
after&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;users&amp;nbsp;working&amp;nbsp;simultaneously&amp;nbsp;on&amp;nbsp;the&amp;nbsp;system&amp;nbsp;only&amp;nbsp;decreased.&lt;br&gt;
Let&amp;nbsp;us&amp;nbsp;understand&amp;nbsp;in&amp;nbsp;detail&amp;nbsp;how&amp;nbsp;this&amp;nbsp;happened.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;fact&amp;nbsp;it&amp;nbsp;is&amp;nbsp;very&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;reproduce&amp;nbsp;on&amp;nbsp;windows&amp;nbsp;32-bit&amp;nbsp;machine,&amp;nbsp;since&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;more&amp;nbsp;process&amp;nbsp;is&amp;nbsp;given&amp;nbsp;2GB.&lt;br&gt;
&lt;br&gt;
Suppose&amp;nbsp;you&amp;nbsp;have&amp;nbsp;an&amp;nbsp;application&amp;nbsp;with&amp;nbsp;a&amp;nbsp;large&amp;nbsp;number&amp;nbsp;of&amp;nbsp;concurrent&amp;nbsp;users&amp;nbsp;,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;invoked&amp;nbsp;with&lt;br&gt;
-Xmx1024M-XX:&amp;nbsp;MaxPermSize&amp;nbsp;=&amp;nbsp;256M-Xss512K.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;entire&amp;nbsp;process&amp;nbsp;is&amp;nbsp;available&amp;nbsp;2G,&amp;nbsp;it&amp;nbsp;still&amp;nbsp;remains&amp;nbsp;free&amp;nbsp;colo&amp;nbsp;768M.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;in&amp;nbsp;this&amp;nbsp;balance&amp;nbsp;of&amp;nbsp;memory&amp;nbsp;and&amp;nbsp;thread&amp;nbsp;stacks&amp;nbsp;are&amp;nbsp;created&amp;nbsp;.&amp;nbsp;Thus,&amp;nbsp;approximately&amp;nbsp;,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;create&amp;nbsp;no&amp;nbsp;more&lt;br&gt;
than&amp;nbsp;768&amp;nbsp;*&amp;nbsp;(1024/512)&amp;nbsp;=&amp;nbsp;1536&amp;nbsp;(&amp;nbsp;when&amp;nbsp;I&amp;nbsp;have&amp;nbsp;managed&amp;nbsp;to&amp;nbsp;create&amp;nbsp;such&amp;nbsp;parameters&amp;nbsp;1316&amp;nbsp;)&amp;nbsp;filaments&amp;nbsp;(&amp;nbsp;see&amp;nbsp;figure&lt;br&gt;
at&amp;nbsp;the&amp;nbsp;beginning&amp;nbsp;of&amp;nbsp;the&amp;nbsp;article)&amp;nbsp;,&amp;nbsp;then&amp;nbsp;you&amp;nbsp;get&amp;nbsp;OutOfMemoryError.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;increase&amp;nbsp;the&amp;nbsp;-Xmx,&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&lt;br&gt;
&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;create&amp;nbsp;is&amp;nbsp;reduced&amp;nbsp;accordingly&amp;nbsp;.&amp;nbsp;Variant&amp;nbsp;with&amp;nbsp;reduced&amp;nbsp;-Xss,&amp;nbsp;for&amp;nbsp;the&amp;nbsp;possibility&amp;nbsp;of&amp;nbsp;creating&lt;br&gt;
more&amp;nbsp;threads&amp;nbsp;does&amp;nbsp;not&amp;nbsp;always&amp;nbsp;yield&amp;nbsp;as&amp;nbsp;possible&amp;nbsp;,&amp;nbsp;you&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;the&amp;nbsp;system&amp;nbsp;flows&amp;nbsp;require&amp;nbsp;a&amp;nbsp;fairly&amp;nbsp;large&amp;nbsp;stacks&amp;nbsp;.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;thread&amp;nbsp;or&amp;nbsp;any&amp;nbsp;background&amp;nbsp;tasks&amp;nbsp;.&amp;nbsp;Yet&amp;nbsp;there&amp;nbsp;is&amp;nbsp;a&amp;nbsp;solution&amp;nbsp;.&amp;nbsp;It&amp;nbsp;turns&amp;nbsp;out&amp;nbsp;when&amp;nbsp;you&lt;br&gt;
programmatically&amp;nbsp;create&amp;nbsp;flow&amp;nbsp;,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;:&amp;nbsp;Thread&amp;nbsp;(ThreadGroup&amp;nbsp;group,&amp;nbsp;Runnable&amp;nbsp;target,&lt;br&gt;
String&amp;nbsp;name,&amp;nbsp;long&amp;nbsp;stackSize).&amp;nbsp;So&amp;nbsp;you&amp;nbsp;can&amp;nbsp;set&amp;nbsp;-Xss&amp;nbsp;quite&amp;nbsp;small&amp;nbsp;,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;actions&amp;nbsp;requiring&amp;nbsp;large&amp;nbsp;stacks&amp;nbsp;,&amp;nbsp;to&amp;nbsp;act&amp;nbsp;as&lt;br&gt;
separate&amp;nbsp;streams&amp;nbsp;created&amp;nbsp;via&amp;nbsp;the&amp;nbsp;above&amp;nbsp;constructor.&lt;br&gt;
&lt;br&gt;
Sure,&amp;nbsp;it&amp;nbsp;may&amp;nbsp;seem&amp;nbsp;a&amp;nbsp;little&amp;nbsp;far-fetched&amp;nbsp;this&amp;nbsp;problem,&amp;nbsp;since&amp;nbsp;most&amp;nbsp;servers&amp;nbsp;now&amp;nbsp;rotated&amp;nbsp;on&amp;nbsp;64-bit&amp;nbsp;architecture,&lt;br&gt;
but&amp;nbsp;still&amp;nbsp;think&amp;nbsp;this&amp;nbsp;example&amp;nbsp;is&amp;nbsp;very&amp;nbsp;useful,&amp;nbsp;since&amp;nbsp;it&amp;nbsp;helps&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;what&amp;nbsp;parts&amp;nbsp;is&amp;nbsp;java-memory&amp;nbsp;process.&lt;br&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------</questionanswer>
  </question>
</questions>
