<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_0_0" name="CoreSyntax_SJSP6_R.Raposa" nofquestions="38" nofsubcategories="0" filename="coresyntax_sjsp6_r.raposa1_0_0_0_0.xml">
  <question id="1_0_0_0_0:0" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;appears&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Book.java&amp;nbsp;.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;compiling&lt;br&gt;
this&amp;nbsp;source&amp;nbsp;file?&amp;nbsp;(Select&amp;nbsp;one&amp;nbsp;answer.)&lt;br&gt;
&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;private&amp;nbsp;int&amp;nbsp;pageNumber;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;class&amp;nbsp;BookReader&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getPage()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;pageNumber;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;one&amp;nbsp;bytecode&amp;nbsp;file&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;.&amp;nbsp;$v0end$&lt;br&gt;
$v1$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
BookReader.class&amp;nbsp;.$v1end$&lt;br&gt;
$v2$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;two&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
Book$BookReader.class&amp;nbsp;.$v2end$&lt;br&gt;
$v3$A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:1" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;TV&amp;nbsp;class:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TV&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;model;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TV(String&amp;nbsp;make,&amp;nbsp;String&amp;nbsp;model)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.make&amp;nbsp;=&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.model&amp;nbsp;=&amp;nbsp;model;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(TV&amp;nbsp;other)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.equals(other.make)&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;model.equals(other.model);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.length()&amp;nbsp;*&amp;nbsp;+model.length();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
TV&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
TV&amp;nbsp;b&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
if(a.equals(b))&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;equal&amp;#8221;);&lt;br&gt;
}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;not&amp;nbsp;equal&amp;#8221;);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;equal&amp;nbsp;$v0end$&lt;br&gt;
$v1$not&amp;nbsp;equal$v1end$&lt;br&gt;
$v2$Line&amp;nbsp;10&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.$v2end$&lt;br&gt;
$v3$Line&amp;nbsp;11&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:2" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;does&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;&amp;nbsp;hi&amp;nbsp;&amp;#8221;&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;2&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;garbage&lt;br&gt;
collection?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Hello&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;greeting&amp;nbsp;=&amp;nbsp;&amp;#8220;hi&amp;#8221;;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hello&amp;nbsp;h&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Hello();&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.greeting&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.gc();&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v0end$&lt;br&gt;
$v1$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;$v1end$&lt;br&gt;
$v2$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;7$v2end$&lt;br&gt;
$v3$Immediately&amp;nbsp;after&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;line&amp;nbsp;8$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:3" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;byte&amp;nbsp;x&amp;nbsp;=&amp;nbsp;23,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
7.&amp;nbsp;int&amp;nbsp;z&amp;nbsp;=&amp;nbsp;23&amp;nbsp;%&amp;nbsp;4;&lt;br&gt;
8.&amp;nbsp;System.out.println(z);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;4.75&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;4&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:4" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Vehicle&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;used;&lt;br&gt;
3.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vehicle&amp;nbsp;v&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Vehicle();&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(v.used)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make);&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make.length());&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;null&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;0&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;10&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:5" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;many&amp;nbsp;classes&amp;nbsp;definitions&amp;nbsp;&amp;nbsp;can&amp;nbsp;one&amp;nbsp;.java&amp;nbsp;file&amp;nbsp;contains&amp;nbsp;?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;2&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;As&amp;nbsp;many&amp;nbsp;,&amp;nbsp;as&amp;nbsp;you&amp;nbsp;need&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;:What&amp;nbsp;does&amp;nbsp;'-d'&amp;nbsp;option&amp;nbsp;mean&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Suppose&amp;nbsp;you&amp;nbsp;want&amp;nbsp;the&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;to&amp;nbsp;be&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory.&amp;nbsp;You&lt;br&gt;
can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;of&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;to&amp;nbsp;achieve&amp;nbsp;this.&amp;nbsp;The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;has&amp;nbsp;two&amp;nbsp;effects:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;will&amp;nbsp;be&amp;nbsp;output&amp;nbsp;in&amp;nbsp;the&amp;nbsp;directory&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&amp;nbsp;that&amp;nbsp;matches&amp;nbsp;the&amp;nbsp;package&amp;nbsp;names&amp;nbsp;of&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;is&lt;br&gt;
created&amp;nbsp;automatically&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory.&lt;br&gt;
&lt;br&gt;
Consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;command,&amp;nbsp;executed&amp;nbsp;from&amp;nbsp;the&amp;nbsp;c:\myproject\src&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;c:\myproject\build&amp;nbsp;.\com\sybex\payroll\Employee.java&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag&amp;nbsp;specifies&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory&amp;nbsp;as&amp;nbsp;c:\myproject\build&amp;nbsp;.&amp;nbsp;Assuming&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
compiles&amp;nbsp;successfully,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;creates&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;Employee.class&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
c:\myproject\build\com\sybex\payroll\Employee.class</questionanswer>
  </question>
  <question id="1_0_0_0_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compile&amp;nbsp;java&amp;nbsp;code&amp;nbsp;in&amp;nbsp;console,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;classpath&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Create&amp;nbsp;file&amp;nbsp;Program.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Program{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;arg){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(11*11);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Compile&amp;nbsp;code&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;Program.java&lt;br&gt;
Execute&amp;nbsp;:&amp;nbsp;java&amp;nbsp;Program&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;will&amp;nbsp;get&amp;nbsp;result&amp;nbsp;:&amp;nbsp;121&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;bin&amp;nbsp;-cp&amp;nbsp;libs/joda-time-2.2.jar&amp;nbsp;src/your/package/*.java&lt;br&gt;
This&amp;nbsp;assumes&amp;nbsp;you&amp;nbsp;run&amp;nbsp;it&amp;nbsp;in&amp;nbsp;your&amp;nbsp;project's&amp;nbsp;directory.&lt;br&gt;
(!!!&amp;nbsp;You&amp;nbsp;can&amp;nbsp;set&amp;nbsp;-cp&amp;nbsp;as&amp;nbsp;___&amp;nbsp;all&amp;nbsp;folder&amp;nbsp;___&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;-d&amp;nbsp;-cp&amp;nbsp;d:\lib\*&amp;nbsp;Program.java)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-d&amp;nbsp;flag&amp;nbsp;tells&amp;nbsp;javac&amp;nbsp;where&amp;nbsp;to&amp;nbsp;put&amp;nbsp;the&amp;nbsp;output&amp;nbsp;files.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;-cp&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;a&amp;nbsp;shorthand&amp;nbsp;for&amp;nbsp;-classpath.&amp;nbsp;I&amp;nbsp;got&amp;nbsp;these&amp;nbsp;parameters&lt;br&gt;
based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;.classpath&amp;nbsp;file&amp;nbsp;in&amp;nbsp;your&amp;nbsp;question.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;general&amp;nbsp;you&amp;nbsp;can&amp;nbsp;figure&amp;nbsp;out&amp;nbsp;what&amp;nbsp;is&amp;nbsp;needed&amp;nbsp;by&lt;br&gt;
reading&amp;nbsp;and&amp;nbsp;understanding&amp;nbsp;the&amp;nbsp;errors&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;javac.&lt;br&gt;
I&amp;nbsp;bet&amp;nbsp;you&amp;nbsp;got&amp;nbsp;many&amp;nbsp;cannot&amp;nbsp;find&amp;nbsp;symbol&amp;nbsp;errors&amp;nbsp;&lt;br&gt;
at&amp;nbsp;first,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;"symbols"&amp;nbsp;were&amp;nbsp;not&amp;nbsp;on&amp;nbsp;your&amp;nbsp;&lt;br&gt;
classpath,&amp;nbsp;so&amp;nbsp;javac&amp;nbsp;could&amp;nbsp;not&amp;nbsp;possibly&amp;nbsp;know&amp;nbsp;how&amp;nbsp;to&amp;nbsp;find&amp;nbsp;them.</questionanswer>
  </question>
  <question id="1_0_0_0_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;are&amp;nbsp;*.jar&amp;nbsp;files&amp;nbsp;?&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;.jar&amp;nbsp;file&amp;nbsp;with&amp;nbsp;bytecode&amp;nbsp;inside&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Bytecode&amp;nbsp;can&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;archived,&lt;br&gt;
compressed&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;known&amp;nbsp;as&amp;nbsp;JAR&amp;nbsp;files.&lt;br&gt;
JAR&amp;nbsp;is&amp;nbsp;short&amp;nbsp;for&amp;nbsp;Java&amp;nbsp;archive.&amp;nbsp;The&amp;nbsp;compiler&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;fi&amp;nbsp;nd&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;in&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;without&lt;br&gt;
needing&amp;nbsp;to&amp;nbsp;uncompress&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;onto&amp;nbsp;your&amp;nbsp;file&amp;nbsp;system.&lt;br&gt;
JAR&amp;nbsp;files&amp;nbsp;are&amp;nbsp;the&amp;nbsp;most&amp;nbsp;common&amp;nbsp;way&lt;br&gt;
to&amp;nbsp;distribute&amp;nbsp;Java&amp;nbsp;code,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;tests&amp;nbsp;your&lt;br&gt;
understanding&amp;nbsp;of&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;and&amp;nbsp;how&amp;nbsp;they&lt;br&gt;
relate&amp;nbsp;to&amp;nbsp;CLASSPATH.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;JDK&amp;nbsp;comes&amp;nbsp;with&amp;nbsp;the&amp;nbsp;tool&amp;nbsp;jar.exe&amp;nbsp;for&amp;nbsp;creating&lt;br&gt;
and&amp;nbsp;extracting&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;les.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;command&amp;nbsp;adds&lt;br&gt;
the&amp;nbsp;bytecode&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;of&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&lt;br&gt;
JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;named&amp;nbsp;myproject.jar&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
C:\myproject\build&amp;nbsp;&gt;&amp;nbsp;jar&amp;nbsp;-cvf&amp;nbsp;myproject.jar&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;ProgramLib.jar&amp;nbsp;file&amp;nbsp;on&amp;nbsp;Desktop(which&amp;nbsp;contains&amp;nbsp;class&amp;nbsp;Program)&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;file&amp;nbsp;/home/andrew/UsingProgramJava.java&amp;nbsp;,&amp;nbsp;which&amp;nbsp;use&amp;nbsp;Program&amp;nbsp;class&lt;br&gt;
&amp;nbsp;from&amp;nbsp;ProgramLib.jar&lt;br&gt;
&lt;br&gt;
Compilation:&lt;br&gt;
javac&amp;nbsp;-cp&amp;nbsp;~/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava.java&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Execution:&lt;br&gt;
java&amp;nbsp;-cp&amp;nbsp;.:/home/andrew/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
JAR&amp;nbsp;Files&amp;nbsp;and&amp;nbsp;Package&amp;nbsp;Names&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;class&amp;nbsp;is&amp;nbsp;in&amp;nbsp;a&amp;nbsp;package,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;must&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;.class&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;is&amp;nbsp;included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
Notice&amp;nbsp;in&amp;nbsp;the&amp;nbsp;verbose&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;jar&lt;br&gt;
command&amp;nbsp;shown&amp;nbsp;earlier,&amp;nbsp;the&amp;nbsp;necessary&amp;nbsp;\com&amp;nbsp;directory&lt;br&gt;
and&amp;nbsp;subdirectories&amp;nbsp;matching&amp;nbsp;our&lt;br&gt;
package&amp;nbsp;names&amp;nbsp;are&amp;nbsp;added&amp;nbsp;to&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;add&amp;nbsp;a&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;to&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;In&amp;nbsp;fact,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;common&amp;nbsp;to&amp;nbsp;have&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;JAR&lt;br&gt;
fi&amp;nbsp;les&amp;nbsp;in&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;demonstrates&lt;br&gt;
adding&amp;nbsp;myproject.jar&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;CLASSPATH&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Windows&amp;nbsp;machine,&amp;nbsp;then&amp;nbsp;running&amp;nbsp;the&amp;nbsp;&lt;br&gt;
TestColors&amp;nbsp;program&amp;nbsp;(which&amp;nbsp;is&amp;nbsp;in&lt;br&gt;
myproject.jar&amp;nbsp;):&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;set&amp;nbsp;CLASSPATH=c:\myproject\build\myproject.jar;&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;java&amp;nbsp;com.sybex.demos.TestColors</questionanswer>
  </question>
  <question id="1_0_0_0_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;-&amp;nbsp;Line&amp;nbsp;Arguments&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.exe&amp;nbsp;executable&amp;nbsp;starts&amp;nbsp;the&amp;nbsp;JVM,&amp;nbsp;and&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;you&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;name&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;main&amp;nbsp;method.&amp;nbsp;The&amp;nbsp;command-line&lt;br&gt;
arguments&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;main&amp;nbsp;method&amp;nbsp;as&amp;nbsp;a&amp;nbsp;single&amp;nbsp;array&amp;nbsp;of&amp;nbsp;String&amp;nbsp;objects.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;PrintGreetings&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;main&lt;br&gt;
and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;executed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;in&amp;nbsp;Figure&amp;nbsp;1.4&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
java&amp;nbsp;com.sybex.demos.PrintGreetings&amp;nbsp;hi&amp;nbsp;goodbye&amp;nbsp;see&amp;nbsp;you&amp;nbsp;later&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;com.sybex.demos;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;PrintGreetings&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;args.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(args[i]);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Result&amp;nbsp;:&lt;br&gt;
hi&lt;br&gt;
goodbye&lt;br&gt;
see&lt;br&gt;
you&lt;br&gt;
later&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
All&amp;nbsp;command&amp;nbsp;-&amp;nbsp;line&amp;nbsp;arguments&amp;nbsp;are&amp;nbsp;treated&amp;nbsp;as&amp;nbsp;String&lt;br&gt;
objects,&amp;nbsp;even&amp;nbsp;if&amp;nbsp;they&amp;nbsp;represent&amp;nbsp;another&amp;nbsp;data&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;wrapper&lt;br&gt;
classes&amp;nbsp;in&amp;nbsp;java.lang&amp;nbsp;contain&amp;nbsp;helpful&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;parsing&lt;br&gt;
strings&amp;nbsp;into&amp;nbsp;other&amp;nbsp;data&amp;nbsp;types.</questionanswer>
  </question>
  <question id="1_0_0_0_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reference&amp;nbsp;vs.&amp;nbsp;Primitive&amp;nbsp;Types&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;applications&amp;nbsp;contain&amp;nbsp;two&amp;nbsp;types&amp;nbsp;of&amp;nbsp;data:&amp;nbsp;primitive&amp;nbsp;types&lt;br&gt;
and&amp;nbsp;reference&amp;nbsp;types&amp;nbsp;.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;section,&amp;nbsp;we&amp;nbsp;will&amp;nbsp;discuss&amp;nbsp;the&amp;nbsp;differences&lt;br&gt;
between&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
Primitive&amp;nbsp;Types&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;eight&amp;nbsp;built-in&amp;nbsp;data&amp;nbsp;types,&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;.&lt;br&gt;
byte&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;?128&amp;nbsp;to&amp;nbsp;127&lt;br&gt;
short&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;?32768&amp;nbsp;to&amp;nbsp;32767&lt;br&gt;
int&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;?2147483648&amp;nbsp;to&amp;nbsp;2147483647&lt;br&gt;
long&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;?9223372036854775808&amp;nbsp;to&amp;nbsp;9223372036854775807&lt;br&gt;
float&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;2?149&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;?&amp;nbsp;2?23)&amp;nbsp;?&amp;nbsp;2127&lt;br&gt;
double&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;2?1074&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;?&amp;nbsp;2?52)&amp;nbsp;?&amp;nbsp;21023&lt;br&gt;
char&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;'\u0000'&amp;nbsp;to&amp;nbsp;'\uffff'&amp;nbsp;(0&amp;nbsp;to&amp;nbsp;65535)&lt;br&gt;
boolean&amp;nbsp;unspecified&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Not&amp;nbsp;all&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;Don&amp;nbsp;?&amp;nbsp;t&amp;nbsp;try&amp;nbsp;to&amp;nbsp;memorize&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&amp;nbsp;values&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;long&amp;nbsp;,&amp;nbsp;float&amp;nbsp;,&amp;nbsp;or&amp;nbsp;double&amp;nbsp;,&amp;nbsp;but&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;know&amp;nbsp;their&amp;nbsp;size&amp;nbsp;in&amp;nbsp;bits.&amp;nbsp;However,&amp;nbsp;you&lt;br&gt;
should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;state&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;byte&amp;nbsp;exactly&amp;nbsp;and&amp;nbsp;recognize&amp;nbsp;when&amp;nbsp;a&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int&amp;nbsp;has&amp;nbsp;likely&amp;nbsp;gone&lt;br&gt;
beyond&amp;nbsp;its&amp;nbsp;range.&amp;nbsp;Expect&amp;nbsp;a&amp;nbsp;question&amp;nbsp;involving&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;a&amp;nbsp;char&amp;nbsp;,&lt;br&gt;
especially&amp;nbsp;because&amp;nbsp;a&amp;nbsp;char&amp;nbsp;in&amp;nbsp;C/C++&amp;nbsp;is&amp;nbsp;only&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;and&lt;br&gt;
uses&amp;nbsp;the&amp;nbsp;ASCII&amp;nbsp;format,&amp;nbsp;while&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;char&amp;nbsp;is&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;and&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;UNICODE&amp;nbsp;format.&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
Reference&amp;nbsp;Types&lt;br&gt;
Reference&amp;nbsp;types&amp;nbsp;are&amp;nbsp;variables&amp;nbsp;that&amp;nbsp;are&amp;nbsp;class&amp;nbsp;types,&amp;nbsp;interface&amp;nbsp;types,&amp;nbsp;and&amp;nbsp;array&amp;nbsp;types.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;(an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class).&amp;nbsp;Unlike&lt;br&gt;
primitive&amp;nbsp;types&amp;nbsp;that&amp;nbsp;hold&amp;nbsp;their&amp;nbsp;values&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;where&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;allocated,&lt;br&gt;
references&amp;nbsp;do&amp;nbsp;not&amp;nbsp;hold&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;they&amp;nbsp;refer&amp;nbsp;to.&amp;nbsp;Instead,&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;?&amp;nbsp;points&amp;nbsp;?&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;by&amp;nbsp;storing&amp;nbsp;the&amp;nbsp;memory&lt;br&gt;
address&amp;nbsp;where&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;located,&amp;nbsp;a&amp;nbsp;concept&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;pointer&amp;nbsp;.&lt;br&gt;
However,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&amp;nbsp;does&amp;nbsp;not&amp;nbsp;allow&amp;nbsp;a&amp;nbsp;programmer&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&lt;br&gt;
physical&amp;nbsp;memory&amp;nbsp;address&amp;nbsp;in&amp;nbsp;any&amp;nbsp;way,&amp;nbsp;so&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;a&amp;nbsp;pointer,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;use&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;gain&amp;nbsp;access&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;it&amp;nbsp;refers&amp;nbsp;to.&amp;nbsp;&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;address&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;of&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;variable.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;?&amp;nbsp;s&amp;nbsp;take&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;some&amp;nbsp;examples&amp;nbsp;that&amp;nbsp;declare&amp;nbsp;and&amp;nbsp;initialize&amp;nbsp;reference&amp;nbsp;types.&amp;nbsp;Suppose&lt;br&gt;
we&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Date&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
java.util.Date&amp;nbsp;today;&lt;br&gt;
String&amp;nbsp;greeting;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;today&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Date&amp;nbsp;object.&amp;nbsp;The&lt;br&gt;
greeting&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;that&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;value&amp;nbsp;is&amp;nbsp;assigned&lt;br&gt;
to&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;in&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;ways:&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;type.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;using&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;assign&amp;nbsp;these&amp;nbsp;references&amp;nbsp;to&amp;nbsp;new&amp;nbsp;objects:&lt;br&gt;
&lt;br&gt;
today&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.util.Date();&lt;br&gt;
greeting&amp;nbsp;=&amp;nbsp;?How&amp;nbsp;are&amp;nbsp;you??;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
In&amp;nbsp;addition,&amp;nbsp;__&amp;nbsp;arrays&amp;nbsp;__&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;have&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;Java&lt;br&gt;
language&amp;nbsp;implicitly&amp;nbsp;defi&amp;nbsp;nes&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type&amp;nbsp;for&amp;nbsp;each&amp;nbsp;possible&amp;nbsp;array&amp;nbsp;type:&amp;nbsp;one&amp;nbsp;for&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
eight&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;and&amp;nbsp;also&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;array.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;references&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;type:&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;[]&amp;nbsp;grades;&lt;br&gt;
String&amp;nbsp;[]&amp;nbsp;args;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(&amp;nbsp;&amp;nbsp;):&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;imas&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[]{1,1,1};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(imas.length);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer[]&amp;nbsp;Imas2&amp;nbsp;=&amp;nbsp;imas;&amp;nbsp;//&amp;nbsp;!!!!!!!!!!!!!&amp;nbsp;Error&amp;nbsp;required:&amp;nbsp;Integer[]&amp;nbsp;found:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int[]&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;can&amp;nbsp;also&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;their&amp;nbsp;data&amp;nbsp;types&amp;nbsp;are&lt;br&gt;
compatible.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;assigns&amp;nbsp;two&amp;nbsp;ArrayList&amp;nbsp;references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other:&lt;br&gt;
&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a1&amp;nbsp;=&lt;br&gt;
new&amp;nbsp;java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a2&amp;nbsp;=&amp;nbsp;a1;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;references&amp;nbsp;a1&amp;nbsp;and&amp;nbsp;a2&amp;nbsp;both&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;an&amp;nbsp;ArrayList&amp;nbsp;that&amp;nbsp;contains&lt;br&gt;
Integer&amp;nbsp;objects.&amp;nbsp;(Two&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object&amp;nbsp;is&amp;nbsp;a&amp;nbsp;common&amp;nbsp;occurrence&amp;nbsp;in&lt;br&gt;
Java.)&amp;nbsp;The&amp;nbsp;ArrayList&amp;nbsp;object&amp;nbsp;can&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;using&amp;nbsp;either&amp;nbsp;reference.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;?&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;different&amp;nbsp;example.&amp;nbsp;Examine&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;that&amp;nbsp;assigns&amp;nbsp;two&lt;br&gt;
references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other&amp;nbsp;and&amp;nbsp;determine&amp;nbsp;if&amp;nbsp;it&amp;nbsp;compiles&amp;nbsp;successfully:&lt;br&gt;
&lt;br&gt;
java.math.BigDecimal&amp;nbsp;bd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.math.BigDecimal(2.75);&lt;br&gt;
String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;bd;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;bd&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;BigDecimal&amp;nbsp;,&amp;nbsp;and&amp;nbsp;s&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;.&amp;nbsp;These&amp;nbsp;two&amp;nbsp;classes&amp;nbsp;are&lt;br&gt;
not&amp;nbsp;compatible,&amp;nbsp;so&amp;nbsp;assigning&amp;nbsp;s&amp;nbsp;to&amp;nbsp;bd&amp;nbsp;generates&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;error:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
The&amp;nbsp;null&amp;nbsp;Type&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;a&amp;nbsp;special&amp;nbsp;data&amp;nbsp;type&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;for&amp;nbsp;null&amp;nbsp;.&amp;nbsp;The&amp;nbsp;null&amp;nbsp;type&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;be&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type.&amp;nbsp;However,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;assign&amp;nbsp;any&amp;nbsp;reference&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type:&lt;br&gt;
String&amp;nbsp;firstName&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Primitive&amp;nbsp;types&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;null&amp;nbsp;,&amp;nbsp;only&amp;nbsp;references.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;valid:&lt;br&gt;
int&amp;nbsp;x=&amp;nbsp;null;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile</questionanswer>
  </question>
  <question id="1_0_0_0_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;Literals&amp;nbsp;and&amp;nbsp;the&amp;nbsp;String&amp;nbsp;Pool&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Which&amp;nbsp;GOF&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;related&amp;nbsp;to&amp;nbsp;String&amp;nbsp;poll&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;new&amp;nbsp;keyword&amp;nbsp;is&amp;nbsp;not&amp;nbsp;required&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you?&amp;#8221;&amp;nbsp;because&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;string&amp;nbsp;literal.&amp;nbsp;String&amp;nbsp;literals&amp;nbsp;get&amp;nbsp;special&amp;nbsp;treatment&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Behind&amp;nbsp;the&amp;nbsp;scenes,&lt;br&gt;
the&amp;nbsp;JVM&amp;nbsp;instantiates&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object&amp;nbsp;for&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;you?&amp;#8221;&amp;nbsp;and&amp;nbsp;stores&amp;nbsp;it&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;pool.&lt;br&gt;
The&amp;nbsp;greeting&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;this&amp;nbsp;String&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;Because&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;immutable&amp;nbsp;(which&amp;nbsp;means&amp;nbsp;they&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;changed),&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optimize&amp;nbsp;the&lt;br&gt;
use&amp;nbsp;of&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;by&amp;nbsp;allowing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;two&amp;nbsp;String&amp;nbsp;references&amp;nbsp;actually&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pool,&amp;nbsp;as&lt;br&gt;
shown&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;might&amp;nbsp;think&amp;nbsp;if&amp;nbsp;the&amp;nbsp;two&amp;nbsp;references&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;then&amp;nbsp;changing&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;one&amp;nbsp;object&lt;br&gt;
would&amp;nbsp;inadvertently&amp;nbsp;change&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;other.&amp;nbsp;But&amp;nbsp;String&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable,&amp;nbsp;so&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;only&amp;nbsp;changes&amp;nbsp;s2:&lt;br&gt;
&lt;br&gt;
s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;s2&amp;nbsp;now&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;,&amp;nbsp;but&amp;nbsp;s1&amp;nbsp;still&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='680'&amp;nbsp;height='600'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/java_string_pool.png'/&gt;&lt;br&gt;
&lt;br&gt;
!!!!!&amp;nbsp;___&amp;nbsp;Stackofervlow:&lt;br&gt;
The&amp;nbsp;string&amp;nbsp;pool&amp;nbsp;is&amp;nbsp;the&amp;nbsp;JVM's&amp;nbsp;particular&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;interning:&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;science,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;a&amp;nbsp;method&amp;nbsp;of&amp;nbsp;storing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;each&amp;nbsp;distinct&amp;nbsp;string&amp;nbsp;value,&amp;nbsp;which&amp;nbsp;must&amp;nbsp;be&amp;nbsp;immutable.&amp;nbsp;Interning&amp;nbsp;strings&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;makes&amp;nbsp;some&amp;nbsp;string&amp;nbsp;processing&amp;nbsp;tasks&amp;nbsp;more&amp;nbsp;time-&amp;nbsp;or&amp;nbsp;space-efficient&amp;nbsp;at&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;requiring&amp;nbsp;more&amp;nbsp;time&amp;nbsp;when&amp;nbsp;the&amp;nbsp;string&amp;nbsp;is&amp;nbsp;created&amp;nbsp;or&amp;nbsp;interned.&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;distinct&amp;nbsp;values&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool.&lt;br&gt;
&lt;br&gt;
Basically,&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;runtime&amp;nbsp;to&amp;nbsp;save&amp;nbsp;memory&amp;nbsp;by&amp;nbsp;preserving&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable&amp;nbsp;strings&amp;nbsp;in&amp;nbsp;a&amp;nbsp;pool&amp;nbsp;so&amp;nbsp;that&amp;nbsp;areas&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&amp;nbsp;can&amp;nbsp;reuse&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;common&amp;nbsp;strings&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;multiple&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;an&amp;nbsp;interesting&amp;nbsp;side&amp;nbsp;note,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;flyweight&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;design&amp;nbsp;pattern:&lt;br&gt;
&lt;br&gt;
__&amp;nbsp;Flyweight&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern.&amp;nbsp;A&amp;nbsp;flyweight&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&lt;br&gt;
that&amp;nbsp;minimizes&amp;nbsp;memory&amp;nbsp;use&amp;nbsp;by&amp;nbsp;sharing&amp;nbsp;as&amp;nbsp;much&amp;nbsp;data&amp;nbsp;as&amp;nbsp;possible&lt;br&gt;
with&amp;nbsp;other&amp;nbsp;similar&amp;nbsp;objects;&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;use&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;large&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;repeated&amp;nbsp;representation&amp;nbsp;would&amp;nbsp;use&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unacceptable&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_0_0:12" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Garbage&amp;nbsp;Collection&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
Describe&amp;nbsp;System.gc()&amp;nbsp;&amp;nbsp;method.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>All&amp;nbsp;Java&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;your&amp;nbsp;program&amp;nbsp;memory?s&amp;nbsp;heap.&lt;br&gt;
The&amp;nbsp;heap,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;also&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;&amp;nbsp;free&amp;nbsp;store,&lt;br&gt;
represents&amp;nbsp;a&amp;nbsp;large&amp;nbsp;pool&amp;nbsp;of&amp;nbsp;unused&amp;nbsp;memory&amp;nbsp;allocated&amp;nbsp;to&amp;nbsp;your&amp;nbsp;&lt;br&gt;
Java&amp;nbsp;application.&amp;nbsp;The&amp;nbsp;heap&amp;nbsp;may&amp;nbsp;be&amp;nbsp;quite&amp;nbsp;large,&amp;nbsp;depending&lt;br&gt;
on&amp;nbsp;your&amp;nbsp;environment,&amp;nbsp;but&amp;nbsp;there&amp;nbsp;is&amp;nbsp;always&amp;nbsp;a&amp;nbsp;limit&amp;nbsp;to&amp;nbsp;its&amp;nbsp;size.&amp;nbsp;If&lt;br&gt;
your&amp;nbsp;program&amp;nbsp;keeps&amp;nbsp;instantiating&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;leaving&amp;nbsp;them&amp;nbsp;on&amp;nbsp;&lt;br&gt;
the&amp;nbsp;heap,&amp;nbsp;eventually&amp;nbsp;it&amp;nbsp;will&amp;nbsp;run&amp;nbsp;out&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
Garbage&amp;nbsp;collection&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;process&amp;nbsp;of&amp;nbsp;automatically&lt;br&gt;
freeing&amp;nbsp;memory&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap&amp;nbsp;by&amp;nbsp;deleting&lt;br&gt;
objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;reachable&amp;nbsp;in&amp;nbsp;your&amp;nbsp;program.&amp;nbsp;Every&lt;br&gt;
JVM&amp;nbsp;has&amp;nbsp;a&amp;nbsp;garbage&amp;nbsp;collector,&amp;nbsp;and&amp;nbsp;many&lt;br&gt;
different&amp;nbsp;algorithms&amp;nbsp;are&amp;nbsp;used&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;efficiency&amp;nbsp;and&amp;nbsp;timing&amp;nbsp;of&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collection.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;&lt;b&gt;&amp;nbsp;new&amp;nbsp;&lt;/b&gt;&amp;nbsp;keyword&amp;nbsp;instantiates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;heap&amp;nbsp;and&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object.&amp;nbsp;Typically&lt;br&gt;
you&amp;nbsp;will&amp;nbsp;save&amp;nbsp;that&amp;nbsp;object?s&amp;nbsp;reference&amp;nbsp;in&amp;nbsp;a&amp;nbsp;variable.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;will&amp;nbsp;remain&amp;nbsp;on&amp;nbsp;&lt;br&gt;
the&amp;nbsp;heap&amp;nbsp;until&amp;nbsp;it&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;reachable.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;is&amp;nbsp;no&lt;br&gt;
longer&amp;nbsp;reachable&amp;nbsp;when&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;situations&amp;nbsp;occurs:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;object&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;has&amp;nbsp;any&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;All&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&amp;nbsp;have&amp;nbsp;gone&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
Objects&amp;nbsp;vs.&amp;nbsp;References&lt;br&gt;
Do&amp;nbsp;not&amp;nbsp;confuse&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;with&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;it&amp;nbsp;refers&amp;nbsp;to.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;two&amp;nbsp;different&amp;nbsp;enti-ties.&amp;nbsp;The&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;has&lt;br&gt;
a&amp;nbsp;name&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&amp;nbsp;contents&amp;nbsp;&lt;br&gt;
of&amp;nbsp;an&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference,&lt;br&gt;
passed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;method,&amp;nbsp;or&amp;nbsp;returned&amp;nbsp;from&amp;nbsp;a&amp;nbsp;method.&lt;br&gt;
All&amp;nbsp;references&amp;nbsp;are&amp;nbsp;the&amp;nbsp;same&amp;nbsp;size,&amp;nbsp;no&amp;nbsp;matter&amp;nbsp;what&amp;nbsp;their&amp;nbsp;type&amp;nbsp;is.&amp;nbsp;&lt;br&gt;
A&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;most&amp;nbsp;likely&amp;nbsp;32&amp;nbsp;bits,&amp;nbsp;but&amp;nbsp;their&amp;nbsp;actual&amp;nbsp;size&amp;nbsp;depends&amp;nbsp;on&amp;nbsp;your&amp;nbsp;JVM.&amp;nbsp;&lt;br&gt;
An&amp;nbsp;object&amp;nbsp;sits&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap&amp;nbsp;and&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name.&lt;br&gt;
Therefore,&amp;nbsp;you&amp;nbsp;have&amp;nbsp;no&amp;nbsp;way&amp;nbsp;to&amp;nbsp;access&amp;nbsp;an&amp;nbsp;object&amp;nbsp;except&lt;br&gt;
through&amp;nbsp;a&amp;nbsp;reference.&amp;nbsp;Objects&amp;nbsp;come&amp;nbsp;in&amp;nbsp;all&amp;nbsp;different&amp;nbsp;shapes&amp;nbsp;and&amp;nbsp;&lt;br&gt;
sizes&amp;nbsp;and&amp;nbsp;consume&amp;nbsp;varying&amp;nbsp;amounts&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;object,&amp;nbsp;nor&amp;nbsp;can&amp;nbsp;an&amp;nbsp;object&amp;nbsp;be&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
method&amp;nbsp;or&amp;nbsp;returned&amp;nbsp;from&amp;nbsp;a&amp;nbsp;method.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;garbage&lt;br&gt;
collected,&amp;nbsp;not&amp;nbsp;its&amp;nbsp;reference.&lt;br&gt;
=========================&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.GregorianCalendar;&lt;br&gt;
2.&amp;nbsp;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GCDemo&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GregorianCalendar&amp;nbsp;christmas,&amp;nbsp;newyears;&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2009,12,25);&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newyears&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2010,1,1);&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;newyears;&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GregorianCalendar&amp;nbsp;d&amp;nbsp;=&amp;nbsp;christmas;&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;two&amp;nbsp;GregorianCalendar&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;created&amp;nbsp;on&amp;nbsp;lines&amp;nbsp;6&amp;nbsp;and&amp;nbsp;7,&amp;nbsp;resulting&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
references&amp;nbsp;and&amp;nbsp;objects&lt;br&gt;
On&amp;nbsp;line&amp;nbsp;9,&amp;nbsp;the&amp;nbsp;christmas&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;newyears,&lt;br&gt;
which&amp;nbsp;results&amp;nbsp;in&amp;nbsp;no&amp;nbsp;more&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
from&amp;nbsp;line&amp;nbsp;6,&amp;nbsp;so&amp;nbsp;this&amp;nbsp;object&amp;nbsp;immediately&amp;nbsp;becomes&amp;nbsp;available&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
collection&amp;nbsp;after&amp;nbsp;line&amp;nbsp;9.&amp;nbsp;There&amp;nbsp;is&amp;nbsp;now&amp;nbsp;only&amp;nbsp;one&amp;nbsp;GregorianCalendar&lt;br&gt;
object&amp;nbsp;(from&amp;nbsp;line&amp;nbsp;7)&amp;nbsp;reachable&amp;nbsp;in&amp;nbsp;memory,&amp;nbsp;and&amp;nbsp;after&amp;nbsp;line&amp;nbsp;10&lt;br&gt;
there&amp;nbsp;are&amp;nbsp;three&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it&lt;br&gt;
Setting&amp;nbsp;christmas&amp;nbsp;to&amp;nbsp;null&amp;nbsp;on&amp;nbsp;line&amp;nbsp;11&amp;nbsp;does&amp;nbsp;not&amp;nbsp;cause&amp;nbsp;the&amp;nbsp;object&amp;nbsp;from&lt;br&gt;
line&amp;nbsp;7&amp;nbsp;to&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&lt;br&gt;
because&amp;nbsp;there&amp;nbsp;are&amp;nbsp;still&amp;nbsp;two&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it:&amp;nbsp;dand&amp;nbsp;&lt;br&gt;
newyears&amp;nbsp;.&amp;nbsp;However,&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12&amp;nbsp;the&amp;nbsp;mainmethod&amp;nbsp;ends&amp;nbsp;and&amp;nbsp;both&lt;br&gt;
dand&amp;nbsp;newyears&amp;nbsp;go&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;7&amp;nbsp;becomes&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
What&amp;nbsp;does&amp;nbsp;it&amp;nbsp;mean&amp;nbsp;to&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection?&lt;br&gt;
Why&amp;nbsp;not&amp;nbsp;simply&amp;nbsp;have&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;immediately&lt;br&gt;
free&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;instead?&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;that&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;&lt;br&gt;
guarantee&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;as&amp;nbsp;to&amp;nbsp;exactly&amp;nbsp;when&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;garbage&lt;br&gt;
collected.&amp;nbsp;The&amp;nbsp;JVM&amp;nbsp;specification&amp;nbsp;does&amp;nbsp;not&amp;nbsp;define&amp;nbsp;how&amp;nbsp;a&lt;br&gt;
garbage&amp;nbsp;collector&amp;nbsp;accomplishes&amp;nbsp;the&amp;nbsp;task&amp;nbsp;of&amp;nbsp;freeing&amp;nbsp;&lt;br&gt;
memory.&amp;nbsp;The&amp;nbsp;specification&amp;nbsp;only&amp;nbsp;states&amp;nbsp;that&amp;nbsp;when&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&lt;br&gt;
eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection,&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;must&lt;br&gt;
eventually&amp;nbsp;free&amp;nbsp;the&amp;nbsp;memory.&amp;nbsp;As&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;coder,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;specifically&lt;br&gt;
free&amp;nbsp;memory&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;only&amp;nbsp;ensure&amp;nbsp;that&lt;br&gt;
your&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;you&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;want&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;are&lt;br&gt;
no&amp;nbsp;longer&amp;nbsp;reachable.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;you&amp;nbsp;don?t&amp;nbsp;have&lt;br&gt;
any&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;are&amp;nbsp;still&amp;nbsp;in&amp;nbsp;scope.&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
The&amp;nbsp;System.gc&amp;nbsp;Method&amp;nbsp;&lt;br&gt;
The&amp;nbsp;java.lang.System&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;called&lt;br&gt;
gc&amp;nbsp;that&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector.&amp;nbsp;System.gc&amp;nbsp;is&lt;br&gt;
the&amp;nbsp;only&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;API&amp;nbsp;that&amp;nbsp;communicates&amp;nbsp;with&amp;nbsp;the&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collector.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;what&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;SE&amp;nbsp;API&amp;nbsp;documentation&lt;br&gt;
says&amp;nbsp;about&amp;nbsp;the&amp;nbsp;System.gc&amp;nbsp;method:&lt;br&gt;
&lt;br&gt;
Calling&amp;nbsp;the&amp;nbsp;gc&amp;nbsp;method&amp;nbsp;suggests&amp;nbsp;that&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;Machine&amp;nbsp;expend&amp;nbsp;&lt;br&gt;
effort&amp;nbsp;toward&amp;nbsp;recycling&amp;nbsp;unused&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;they&amp;nbsp;&lt;br&gt;
currently&amp;nbsp;occupy&amp;nbsp;available&amp;nbsp;for&amp;nbsp;quick&amp;nbsp;reuse.&amp;nbsp;When&amp;nbsp;control&amp;nbsp;returns&amp;nbsp;from&amp;nbsp;the&amp;nbsp;&lt;br&gt;
method&amp;nbsp;call,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;Machine&amp;nbsp;has&amp;nbsp;made&amp;nbsp;a&amp;nbsp;best&amp;nbsp;effort&amp;nbsp;to&amp;nbsp;reclaim&amp;nbsp;&lt;br&gt;
space&amp;nbsp;from&amp;nbsp;all&amp;nbsp;discarded&amp;nbsp;objects.&lt;br&gt;
&lt;br&gt;
!!!!!&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;the&amp;nbsp;gc&amp;nbsp;method&amp;nbsp;does&amp;nbsp;not&amp;nbsp;guarantee&amp;nbsp;anything!&lt;br&gt;
The&amp;nbsp;method&amp;nbsp;might&amp;nbsp;be&amp;nbsp;useful&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;familiar&amp;nbsp;with&lt;br&gt;
the&amp;nbsp;intricate&amp;nbsp;details&amp;nbsp;of&amp;nbsp;your&amp;nbsp;JVM&amp;nbsp;and&amp;nbsp;how&amp;nbsp;it&amp;nbsp;implements&amp;nbsp;this&amp;nbsp;method.&lt;br&gt;
But&amp;nbsp;the&amp;nbsp;end&amp;nbsp;result&amp;nbsp;is&amp;nbsp;that&amp;nbsp;as&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;programmer&amp;nbsp;you&amp;nbsp;cannot&lt;br&gt;
free&amp;nbsp;memory&amp;nbsp;specifically&amp;nbsp;in&amp;nbsp;your&amp;nbsp;code.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;only&lt;br&gt;
ensure&amp;nbsp;that&amp;nbsp;your&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection,&amp;nbsp;and&amp;nbsp;then&lt;br&gt;
assume&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;will&amp;nbsp;do&amp;nbsp;its&amp;nbsp;job!&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(with&amp;nbsp;gc&amp;nbsp;and&amp;nbsp;finalize&amp;nbsp;methods&amp;nbsp;)&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Dog&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Dog(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
7.&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(name&amp;nbsp;+&amp;nbsp;?&amp;nbsp;is&amp;nbsp;being&amp;nbsp;garbage&amp;nbsp;collected?);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.Vector;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GCDemo3&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;Vector&amp;nbsp;&lt;&amp;nbsp;Dog&amp;nbsp;&gt;&amp;nbsp;vector&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Vector&amp;nbsp;&lt;&amp;nbsp;Dog&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
5.&amp;nbsp;Dog&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dog(?Snoopy?,&amp;nbsp;10);&lt;br&gt;
6.&amp;nbsp;Dog&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dog(?Lassie?,&amp;nbsp;12);&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;vector.add(one);&lt;br&gt;
9.&amp;nbsp;vector.add(two);&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;one&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;once...?);&lt;br&gt;
13.&amp;nbsp;System.gc();&lt;br&gt;
14.&lt;br&gt;
15.&amp;nbsp;vector&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
16.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;twice...?);&lt;br&gt;
17.&amp;nbsp;System.gc();&lt;br&gt;
18.&lt;br&gt;
19.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
20.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;again...?);&lt;br&gt;
21.&amp;nbsp;System.gc();&lt;br&gt;
22.&amp;nbsp;System.out.println(?End&amp;nbsp;of&amp;nbsp;main...?);&lt;br&gt;
23.&lt;br&gt;
24.&amp;nbsp;}&lt;br&gt;
25.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;once...&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;twice...&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;again...&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;main...&lt;br&gt;
Lassie&amp;nbsp;is&amp;nbsp;being&amp;nbsp;garbage&amp;nbsp;collected&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;gc&amp;nbsp;are&amp;nbsp;an&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;force&amp;nbsp;garbage&amp;nbsp;collection&lt;br&gt;
so&amp;nbsp;we&amp;nbsp;can&amp;nbsp;see&amp;nbsp;when&amp;nbsp;finalize&amp;nbsp;is&amp;nbsp;invoked&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Dog&amp;nbsp;objects.&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;step&amp;nbsp;is&amp;nbsp;determining&amp;nbsp;when&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collection.&amp;nbsp;Adding&amp;nbsp;the&amp;nbsp;two&amp;nbsp;Dogobjects&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Vector&lt;br&gt;
creates&amp;nbsp;additional&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;objects.&amp;nbsp;&lt;br&gt;
On&amp;nbsp;line&amp;nbsp;11&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;one&amp;nbsp;is&amp;nbsp;set&amp;nbsp;to&amp;nbsp;null&amp;nbsp;,&amp;nbsp;but&amp;nbsp;Snoopy&amp;nbsp;is&amp;nbsp;not&lt;br&gt;
eligible&amp;nbsp;yet&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;because&amp;nbsp;of&amp;nbsp;line&amp;nbsp;8.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;Vector&amp;nbsp;still&amp;nbsp;has&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Snoopy&amp;nbsp;object&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;when&amp;nbsp;you&amp;nbsp;set&amp;nbsp;vector&amp;nbsp;to&amp;nbsp;null&amp;nbsp;on&amp;nbsp;line&amp;nbsp;15,&lt;br&gt;
it&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;Snoopy&amp;nbsp;object&amp;nbsp;to&amp;nbsp;immediately&amp;nbsp;become&amp;nbsp;eligible&lt;br&gt;
for&amp;nbsp;garbage&amp;nbsp;collection.&amp;nbsp;The&amp;nbsp;Lassie&amp;nbsp;object&amp;nbsp;still&amp;nbsp;has&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;two&lt;br&gt;
pointing&amp;nbsp;to&amp;nbsp;it,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;until&amp;nbsp;after&amp;nbsp;line&amp;nbsp;19.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;a&amp;nbsp;&lt;br&gt;
sample&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;GCDemo3&amp;nbsp;program.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
The&amp;nbsp;finalizeMethod&amp;nbsp;Is&amp;nbsp;Only&amp;nbsp;Invoked&amp;nbsp;Once&lt;br&gt;
Expect&amp;nbsp;at&amp;nbsp;least&amp;nbsp;one&amp;nbsp;question&amp;nbsp;on&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;about&amp;nbsp;the&lt;br&gt;
finalize&amp;nbsp;method.&amp;nbsp;Keep&amp;nbsp;in&amp;nbsp;mind&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;called&amp;nbsp;once&lt;br&gt;
on&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;only&amp;nbsp;gets&amp;nbsp;called&amp;nbsp;by&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&lt;br&gt;
after&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;but&amp;nbsp;before&lt;br&gt;
the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;garbage&amp;nbsp;collected.</questionanswer>
  </question>
  <question id="1_0_0_0_0:13" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Passing&amp;nbsp;arguments&amp;nbsp;to&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;pass&amp;nbsp;all&amp;nbsp;arguments&amp;nbsp;by&amp;nbsp;value,&amp;nbsp;References&amp;nbsp;are&amp;nbsp;also&amp;nbsp;passed&amp;nbsp;by&amp;nbsp;value&amp;nbsp;=)&lt;br&gt;
&lt;br&gt;
Passing&amp;nbsp;Primitives&amp;nbsp;vs.&amp;nbsp;Passing&amp;nbsp;References&lt;br&gt;
&lt;br&gt;
Sun&amp;nbsp;seems&amp;nbsp;to&amp;nbsp;enjoy&amp;nbsp;questions&amp;nbsp;on&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;regarding&amp;nbsp;call&amp;nbsp;by&amp;nbsp;value&lt;br&gt;
and&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;change&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;argument.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type,&amp;nbsp;it&lt;br&gt;
is&amp;nbsp;impossible&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;for&amp;nbsp;the&amp;nbsp;method&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;original&amp;nbsp;primitive.&amp;nbsp;&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type,&amp;nbsp;the&amp;nbsp;same&amp;nbsp;rule&amp;nbsp;&lt;br&gt;
applies:&amp;nbsp;___&amp;nbsp;it&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;for&amp;nbsp;a&amp;nbsp;method&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;the&amp;nbsp;original&amp;nbsp;reference&amp;nbsp;___&amp;nbsp;!!!.&amp;nbsp;&lt;br&gt;
However,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;&amp;nbsp;method&amp;nbsp;now&amp;nbsp;has&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
object&amp;nbsp;that&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;points&amp;nbsp;to,&amp;nbsp;the&amp;nbsp;method&amp;nbsp;&lt;br&gt;
can&amp;nbsp;change&amp;nbsp;the&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;an&amp;nbsp;important&amp;nbsp;difference&amp;nbsp;to&amp;nbsp;understand.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;know&amp;nbsp;"&amp;nbsp;the&amp;nbsp;effect&amp;nbsp;upon&amp;nbsp;object&amp;nbsp;references&amp;nbsp;and&amp;nbsp;&lt;br&gt;
primitive&amp;nbsp;values&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;perform&amp;nbsp;assignments&amp;nbsp;or&amp;nbsp;other&amp;nbsp;&lt;br&gt;
modifying&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;the&amp;nbsp;parameters.&amp;nbsp;"&amp;nbsp;A&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called&amp;nbsp;&lt;br&gt;
an&amp;nbsp;&amp;nbsp;argument&amp;nbsp;.&amp;nbsp;___&amp;nbsp;Java&amp;nbsp;simplifies&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;passing&amp;nbsp;arguments&amp;nbsp;into&amp;nbsp;methods&amp;nbsp;by&amp;nbsp;providing&amp;nbsp;&lt;br&gt;
only&amp;nbsp;one&amp;nbsp;way&amp;nbsp;to&amp;nbsp;pass&amp;nbsp;arguments:&amp;nbsp;by&amp;nbsp;value.&amp;nbsp;Passing&amp;nbsp;arguments&amp;nbsp;&amp;nbsp;by&amp;nbsp;valuemeans&amp;nbsp;that&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;method&amp;nbsp;___.&amp;nbsp;Method&amp;nbsp;return&amp;nbsp;values&amp;nbsp;are&amp;nbsp;also&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;value,&amp;nbsp;&lt;br&gt;
meaning&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;returned.&amp;nbsp;The&amp;nbsp;SCJP&amp;nbsp;exam&amp;nbsp;requires&amp;nbsp;an&amp;nbsp;understanding&amp;nbsp;of&amp;nbsp;&lt;br&gt;
what&amp;nbsp;call&amp;nbsp;by&amp;nbsp;value&amp;nbsp;means,&amp;nbsp;and&amp;nbsp;we&amp;nbsp;will&amp;nbsp;discuss&amp;nbsp;the&amp;nbsp;details&amp;nbsp;now.&amp;nbsp;&lt;br&gt;
An&amp;nbsp;argument&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;corresponding&amp;nbsp;method&amp;nbsp;parameter.&amp;nbsp;A&amp;nbsp;&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;the&amp;nbsp;&lt;br&gt;
name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;in&amp;nbsp;the&amp;nbsp;method&amp;nbsp;signature&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;assigned&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;argument.&lt;br&gt;
&lt;br&gt;
================&amp;nbsp;!!!!!&lt;br&gt;
The&amp;nbsp;Call&amp;nbsp;Stack&lt;br&gt;
Every&amp;nbsp;method&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;invoked&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;pushed&lt;br&gt;
onto&amp;nbsp;the&amp;nbsp;thread's&amp;nbsp;method&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;.&amp;nbsp;The&amp;nbsp;method&amp;nbsp;at&amp;nbsp;the&amp;nbsp;top&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;method.&amp;nbsp;Each&amp;nbsp;method&amp;nbsp;on&amp;nbsp;the&amp;nbsp;call&lt;br&gt;
stack&amp;nbsp;gets&amp;nbsp;its&amp;nbsp;own&amp;nbsp;small&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;method&amp;nbsp;finishes&amp;nbsp;&lt;br&gt;
executing&amp;nbsp;(by&amp;nbsp;running&amp;nbsp;to&amp;nbsp;completion,&amp;nbsp;returning&amp;nbsp;a&amp;nbsp;value,&amp;nbsp;or&amp;nbsp;throwing&amp;nbsp;an&amp;nbsp;exception),&amp;nbsp;the&amp;nbsp;&lt;br&gt;
method&amp;nbsp;gets&amp;nbsp;popped&amp;nbsp;off&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;and&amp;nbsp;its&amp;nbsp;memory&amp;nbsp;is&amp;nbsp;freed.&amp;nbsp;Any&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;local&amp;nbsp;&lt;br&gt;
variables&amp;nbsp;are&amp;nbsp;destroyed&amp;nbsp;and&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program's&amp;nbsp;memory.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;staff;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;JavaPassAllArgumentsByVALUE&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Editor&amp;nbsp;ed&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Editor("1234");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tryToChangeReference(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;"123";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tryToChangeString(s);&amp;nbsp;//&amp;nbsp;doesnt&amp;nbsp;affect&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(s);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;!!!&amp;nbsp;We&amp;nbsp;can't&amp;nbsp;change&amp;nbsp;reference&amp;nbsp;address&amp;nbsp;inside&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;tryToChangeReference(Editor&amp;nbsp;e){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Editor("eeeeeee");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Object&amp;nbsp;inside&amp;nbsp;method&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;e);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;method&amp;nbsp;doesnt&amp;nbsp;affect&amp;nbsp;origin&amp;nbsp;string&amp;nbsp;value&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;tryToChangeString(String&amp;nbsp;str){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;".";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Editor{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Editor(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
&lt;br&gt;
1234&lt;br&gt;
Object&amp;nbsp;inside&amp;nbsp;method&amp;nbsp;:&amp;nbsp;eeeeeee&lt;br&gt;
1234&lt;br&gt;
123&lt;br&gt;
======</questionanswer>
  </question>
  <question id="1_0_0_0_0:14" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;Java&amp;nbsp;Call&amp;nbsp;stack&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Call&amp;nbsp;Stack&amp;nbsp;&lt;br&gt;
Every&amp;nbsp;method&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;invoked&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;pushed&lt;br&gt;
onto&amp;nbsp;the&amp;nbsp;thread's&amp;nbsp;method&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;.&amp;nbsp;The&amp;nbsp;method&amp;nbsp;at&amp;nbsp;the&amp;nbsp;top&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;method.&amp;nbsp;Each&amp;nbsp;method&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;gets&amp;nbsp;its&amp;nbsp;own&amp;nbsp;small&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;method&amp;nbsp;finishes&amp;nbsp;&lt;br&gt;
executing&amp;nbsp;(by&amp;nbsp;running&amp;nbsp;to&amp;nbsp;completion,&amp;nbsp;returning&amp;nbsp;a&amp;nbsp;value,&lt;br&gt;
or&amp;nbsp;throwing&amp;nbsp;an&amp;nbsp;exception),&amp;nbsp;the&amp;nbsp;method&amp;nbsp;gets&amp;nbsp;popped&amp;nbsp;off&amp;nbsp;the&lt;br&gt;
call&amp;nbsp;stack&amp;nbsp;and&amp;nbsp;its&amp;nbsp;memory&amp;nbsp;is&amp;nbsp;freed.&amp;nbsp;Any&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;local&amp;nbsp;&lt;br&gt;
variables&amp;nbsp;are&amp;nbsp;destroyed&amp;nbsp;and&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program's&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Call&amp;nbsp;stack&amp;nbsp;from&amp;nbsp;WIKI:&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;science,&amp;nbsp;a&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;a&amp;nbsp;stack&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;that&lt;br&gt;
stores&amp;nbsp;information&amp;nbsp;about&amp;nbsp;the&amp;nbsp;active&amp;nbsp;subroutines&amp;nbsp;of&amp;nbsp;a&amp;nbsp;computer&amp;nbsp;program.&amp;nbsp;This&lt;br&gt;
kind&amp;nbsp;of&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;an&amp;nbsp;execution&amp;nbsp;stack,&amp;nbsp;control&amp;nbsp;stack,&lt;br&gt;
run-time&amp;nbsp;stack,&amp;nbsp;or&amp;nbsp;machine&amp;nbsp;stack,&amp;nbsp;and&amp;nbsp;is&amp;nbsp;often&amp;nbsp;shortened&amp;nbsp;to&amp;nbsp;just&amp;nbsp;"the&amp;nbsp;stack".&lt;br&gt;
Although&amp;nbsp;maintenance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;important&amp;nbsp;for&lt;br&gt;
the&amp;nbsp;proper&amp;nbsp;functioning&amp;nbsp;of&amp;nbsp;most&amp;nbsp;software,&amp;nbsp;the&amp;nbsp;details&amp;nbsp;are&amp;nbsp;normally&lt;br&gt;
hidden&amp;nbsp;and&amp;nbsp;automatic&amp;nbsp;in&amp;nbsp;high-level&amp;nbsp;programming&amp;nbsp;languages.&lt;br&gt;
A&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;several&amp;nbsp;related&amp;nbsp;purposes,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;main&amp;nbsp;reason&lt;br&gt;
for&amp;nbsp;having&amp;nbsp;one&amp;nbsp;is&amp;nbsp;to&amp;nbsp;keep&amp;nbsp;track&amp;nbsp;of&amp;nbsp;the&amp;nbsp;point&amp;nbsp;to&amp;nbsp;which&amp;nbsp;each&lt;br&gt;
active&amp;nbsp;subroutine&amp;nbsp;should&amp;nbsp;return&amp;nbsp;control&amp;nbsp;when&amp;nbsp;it&amp;nbsp;finishes&amp;nbsp;executing.&lt;br&gt;
An&amp;nbsp;active&amp;nbsp;subroutine&amp;nbsp;is&amp;nbsp;one&amp;nbsp;that&amp;nbsp;has&amp;nbsp;been&amp;nbsp;called&amp;nbsp;but&amp;nbsp;is&amp;nbsp;yet&amp;nbsp;to&lt;br&gt;
complete&amp;nbsp;execution&amp;nbsp;after&amp;nbsp;which&amp;nbsp;control&amp;nbsp;should&amp;nbsp;be&amp;nbsp;handed&amp;nbsp;back&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;point&amp;nbsp;of&amp;nbsp;call.&amp;nbsp;Such&amp;nbsp;activations&amp;nbsp;of&amp;nbsp;subroutines&amp;nbsp;may&amp;nbsp;be&lt;br&gt;
nested&amp;nbsp;to&amp;nbsp;any&amp;nbsp;level&amp;nbsp;(recursive&amp;nbsp;as&amp;nbsp;a&amp;nbsp;special&amp;nbsp;case),&amp;nbsp;hence&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;structure.&lt;br&gt;
If,&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;a&amp;nbsp;subroutine&amp;nbsp;DrawSquare&amp;nbsp;calls&amp;nbsp;a&amp;nbsp;subroutine&lt;br&gt;
DrawLine&amp;nbsp;from&amp;nbsp;four&amp;nbsp;different&amp;nbsp;places,&amp;nbsp;DrawLine&amp;nbsp;must&amp;nbsp;know&amp;nbsp;where&amp;nbsp;to&lt;br&gt;
return&amp;nbsp;when&amp;nbsp;its&amp;nbsp;execution&amp;nbsp;completes.&amp;nbsp;To&amp;nbsp;accomplish&amp;nbsp;this,&amp;nbsp;the&amp;nbsp;address&lt;br&gt;
following&amp;nbsp;the&amp;nbsp;call&amp;nbsp;instruction,&amp;nbsp;the&amp;nbsp;return&amp;nbsp;address,&amp;nbsp;is&amp;nbsp;pushed&amp;nbsp;onto&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;with&amp;nbsp;each&amp;nbsp;call.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;get&amp;nbsp;Java&amp;nbsp;Call&amp;nbsp;Stack&amp;nbsp;of&amp;nbsp;a&amp;nbsp;running&amp;nbsp;application&lt;br&gt;
&lt;br&gt;
Method&amp;nbsp;1:&amp;nbsp;Use&amp;nbsp;jstack&amp;nbsp;utility&amp;nbsp;from&amp;nbsp;command&amp;nbsp;line&amp;nbsp;(part&amp;nbsp;of&amp;nbsp;JRE&amp;nbsp;distro).&lt;br&gt;
Method&amp;nbsp;2:&amp;nbsp;Send&amp;nbsp;signal&amp;nbsp;3&amp;nbsp;to&amp;nbsp;the&amp;nbsp;java&amp;nbsp;process,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;dump&amp;nbsp;stack&amp;nbsp;traces&amp;nbsp;on&amp;nbsp;stdout.&lt;br&gt;
Method&amp;nbsp;3:&amp;nbsp;Call&amp;nbsp;Thread.getAllStackTraces&amp;nbsp;()&amp;nbsp;from&amp;nbsp;within&amp;nbsp;application:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;StackTraceDumper&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;dumpAllStackTraces&amp;nbsp;()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Map.Entry&amp;nbsp;&lt;Thread,&amp;nbsp;StackTraceElement&amp;nbsp;[]&gt;&amp;nbsp;entry:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.getAllStackTraces().entrySet&amp;nbsp;())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println&amp;nbsp;(entry.getKey&amp;nbsp;().getName&amp;nbsp;()&amp;nbsp;+&amp;nbsp;":");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(StackTraceElement&amp;nbsp;element:&amp;nbsp;entry.getValue&amp;nbsp;())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println&amp;nbsp;("\t"&amp;nbsp;+&amp;nbsp;element);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
Then&amp;nbsp;use&amp;nbsp;StackTraceDumper.dumpAllStackTraces()&amp;nbsp;where&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;dump&amp;nbsp;stack&amp;nbsp;traces.</questionanswer>
  </question>
  <question id="1_0_0_0_0:15" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Operators,&amp;nbsp;describe.&amp;nbsp;(list&amp;nbsp;operators,&amp;nbsp;priority,&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Operators&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='720'&amp;nbsp;height='900'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/9869882.png'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Assignment&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;12&amp;nbsp;&amp;nbsp;assignment&amp;nbsp;operators&amp;nbsp;:&amp;nbsp;the&amp;nbsp;&amp;nbsp;simple&amp;nbsp;assignment=&amp;nbsp;and&lt;br&gt;
11&amp;nbsp;compound&amp;nbsp;assignment&amp;nbsp;operators:&amp;nbsp;+=,&amp;nbsp;-&amp;nbsp;=,&amp;nbsp;*=&amp;nbsp;,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
An&amp;nbsp;assignment&amp;nbsp;stores&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;right&amp;nbsp;&amp;nbsp;-&amp;nbsp;hand&amp;nbsp;side&amp;nbsp;of&amp;nbsp;&lt;br&gt;
the&amp;nbsp;expression&amp;nbsp;into&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;on&amp;nbsp;the&amp;nbsp;left&amp;nbsp;-&amp;nbsp;hand&amp;nbsp;side.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;using&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;&lt;br&gt;
assignment:&lt;br&gt;
&amp;nbsp;byte&amp;nbsp;b&amp;nbsp;=&amp;nbsp;120;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;b;&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;12.5;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;(int)&amp;nbsp;12.5;&amp;nbsp;//compiles&amp;nbsp;fine&amp;nbsp;&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;y&amp;nbsp;is&amp;nbsp;12&amp;nbsp;after&amp;nbsp;this&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&amp;nbsp;executes.&amp;nbsp;The&amp;nbsp;decimal&amp;nbsp;value&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;simply&amp;nbsp;&lt;br&gt;
truncated&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;sometimes&amp;nbsp;the&amp;nbsp;compound&amp;nbsp;operator&amp;nbsp;can&amp;nbsp;save&amp;nbsp;us&amp;nbsp;from&lt;br&gt;
needing&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;a&amp;nbsp;value&amp;nbsp;before&amp;nbsp;the&amp;nbsp;assignment.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;statements&amp;nbsp;generate&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;Do&amp;nbsp;&lt;br&gt;
you&amp;nbsp;see&amp;nbsp;why?&amp;nbsp;&lt;br&gt;
15.&amp;nbsp;long&amp;nbsp;m&amp;nbsp;=&amp;nbsp;1000;&lt;br&gt;
16.&amp;nbsp;int&amp;nbsp;n&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
17.&amp;nbsp;n&amp;nbsp;=&amp;nbsp;n&amp;nbsp;*&amp;nbsp;m;&amp;nbsp;//compiler&amp;nbsp;error&amp;nbsp;here&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!&amp;nbsp;______&lt;br&gt;
The&amp;nbsp;expression&amp;nbsp;n&amp;nbsp;*&amp;nbsp;mis&amp;nbsp;an&amp;nbsp;inttimes&amp;nbsp;a&amp;nbsp;long&amp;nbsp;.Before&amp;nbsp;the&amp;nbsp;multiplication&amp;nbsp;can&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;evaluated,&amp;nbsp;&lt;br&gt;
the&amp;nbsp;int&amp;nbsp;is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;long&amp;nbsp;.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;therefore&amp;nbsp;a&amp;nbsp;long&amp;nbsp;,&lt;br&gt;
so&amp;nbsp;we&amp;nbsp;need&amp;nbsp;a&amp;nbsp;cast&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;&lt;br&gt;
compiler&amp;nbsp;happy:&lt;br&gt;
18.&amp;nbsp;n&amp;nbsp;=&amp;nbsp;(int)&amp;nbsp;(n&amp;nbsp;*&amp;nbsp;m);&lt;br&gt;
The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;n&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;5000.&amp;nbsp;&amp;nbsp;!!!!!!&amp;nbsp;&amp;nbsp;However,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;__&amp;nbsp;compound&amp;nbsp;__&lt;br&gt;
operator&amp;nbsp;avoids&amp;nbsp;the&amp;nbsp;cast.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;compile&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;assign&amp;nbsp;n&amp;nbsp;to&amp;nbsp;5000:&lt;br&gt;
19.&amp;nbsp;long&amp;nbsp;m&amp;nbsp;=&amp;nbsp;1000;&lt;br&gt;
20.&amp;nbsp;int&amp;nbsp;n&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
21.&amp;nbsp;n&amp;nbsp;*=&amp;nbsp;m;&lt;br&gt;
====================&lt;br&gt;
The&amp;nbsp;Arithmetic&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;specifically&amp;nbsp;mention&amp;nbsp;having&amp;nbsp;working&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;following&amp;nbsp;&lt;br&gt;
arithmetic&amp;nbsp;operators:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;#8212;&amp;nbsp;&amp;nbsp;:&amp;nbsp;addition&amp;nbsp;and&amp;nbsp;subtraction&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;/&amp;nbsp;:&amp;nbsp;multiplication&amp;nbsp;and&amp;nbsp;division&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;%&amp;nbsp;:&amp;nbsp;modulus&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;++&amp;nbsp;&amp;#8212;&amp;nbsp;&amp;#8212;&amp;nbsp;:&amp;nbsp;increment&amp;nbsp;and&amp;nbsp;decrement&amp;nbsp;&lt;br&gt;
We&amp;nbsp;will&amp;nbsp;now&amp;nbsp;discuss&amp;nbsp;each&amp;nbsp;of&amp;nbsp;these&amp;nbsp;operators&amp;nbsp;in&amp;nbsp;detail.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;of&amp;nbsp;different&amp;nbsp;types,&amp;nbsp;the&amp;nbsp;smaller&amp;nbsp;operand&lt;br&gt;
is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;the&amp;nbsp;larger.&amp;nbsp;At&amp;nbsp;a&amp;nbsp;minimum,&amp;nbsp;the&amp;nbsp;operands&amp;nbsp;are&lt;br&gt;
promoted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;innocent&amp;nbsp;-&amp;nbsp;looking&amp;nbsp;&lt;br&gt;
code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;Can&amp;nbsp;you&amp;nbsp;see&amp;nbsp;why?&amp;nbsp;&lt;br&gt;
short&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;12;&lt;br&gt;
short&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;s1&amp;nbsp;+&amp;nbsp;s2;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile!&amp;nbsp;&lt;br&gt;
Because&amp;nbsp;a&amp;nbsp;short&amp;nbsp;is&amp;nbsp;smaller&amp;nbsp;than&amp;nbsp;an&amp;nbsp;int,&amp;nbsp;both&amp;nbsp;s1and&amp;nbsp;s2&amp;nbsp;are&lt;br&gt;
promoted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s&amp;nbsp;before&amp;nbsp;the&amp;nbsp;addition.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;of&amp;nbsp;&lt;br&gt;
s1&amp;nbsp;+&amp;nbsp;s2is&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;store&amp;nbsp;the&amp;nbsp;result&amp;nbsp;in&amp;nbsp;a&amp;nbsp;shortif&amp;nbsp;you&lt;br&gt;
&lt;br&gt;
use&amp;nbsp;the&amp;nbsp;cast&amp;nbsp;operator.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;complains&amp;nbsp;about&amp;nbsp;a&amp;nbsp;possible&lt;br&gt;
loss&amp;nbsp;of&amp;nbsp;precision,&amp;nbsp;but&amp;nbsp;casting&amp;nbsp;fixes&amp;nbsp;the&amp;nbsp;problem:&lt;br&gt;
short&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;12;&lt;br&gt;
short&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;(short)&amp;nbsp;(s1&amp;nbsp;+&amp;nbsp;s2);&amp;nbsp;&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;sum&amp;nbsp;is&amp;nbsp;22&amp;nbsp;after&amp;nbsp;this&amp;nbsp;code&amp;nbsp;executes.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
==================================&lt;br&gt;
A&amp;nbsp;Note&amp;nbsp;about&amp;nbsp;Casting&lt;br&gt;
I&amp;nbsp;want&amp;nbsp;to&amp;nbsp;take&amp;nbsp;a&amp;nbsp;moment&amp;nbsp;to&amp;nbsp;point&amp;nbsp;out&amp;nbsp;something&amp;nbsp;subtle&amp;nbsp;but&amp;nbsp;important&amp;nbsp;about&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cast&amp;nbsp;oper-ator.&amp;nbsp;The&amp;nbsp;sole&amp;nbsp;purpose&amp;nbsp;of&amp;nbsp;casting&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;is&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;happy.&amp;nbsp;When&amp;nbsp;&lt;br&gt;
you&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;larger&amp;nbsp;data&amp;nbsp;type&amp;nbsp;to&amp;nbsp;a&amp;nbsp;smaller&amp;nbsp;one,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;complains&amp;nbsp;about&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;possible&amp;nbsp;&lt;br&gt;
loss&amp;nbsp;of&amp;nbsp;precision.&amp;nbsp;&lt;br&gt;
However,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;aware&amp;nbsp;and&amp;nbsp;comfortable&amp;nbsp;with&amp;nbsp;the&amp;nbsp;possible&amp;nbsp;loss&amp;nbsp;of&amp;nbsp;precision&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&amp;nbsp;runtime,&amp;nbsp;&lt;br&gt;
then&amp;nbsp;you&amp;nbsp;simply&amp;nbsp;cast&amp;nbsp;the&amp;nbsp;result,&amp;nbsp;which&amp;nbsp;tells&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;you&amp;nbsp;know&amp;nbsp;what&amp;nbsp;you&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;are&amp;nbsp;doing.&amp;nbsp;At&amp;nbsp;&lt;br&gt;
runtime,&amp;nbsp;the&amp;nbsp;data&amp;nbsp;may&amp;nbsp;very&amp;nbsp;well&amp;nbsp;be&amp;nbsp;invalid.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiles&amp;nbsp;and&amp;nbsp;&lt;br&gt;
runs,&amp;nbsp;but&amp;nbsp;you&amp;nbsp;might&amp;nbsp;be&amp;nbsp;surprised&amp;nbsp;by&amp;nbsp;the&amp;nbsp;output:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte&amp;nbsp;b1&amp;nbsp;=&amp;nbsp;70,&amp;nbsp;b2&amp;nbsp;=&amp;nbsp;70;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte&amp;nbsp;product&amp;nbsp;=&amp;nbsp;(byte)&amp;nbsp;(b1&amp;nbsp;+&amp;nbsp;b2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(product);&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;-116&lt;br&gt;
Because&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;70+70&amp;nbsp;=&amp;nbsp;140&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;140&amp;nbsp;it&amp;nbsp;is&amp;nbsp;10001100&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;'10001100'&amp;nbsp;it&amp;nbsp;is&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;&amp;nbsp;byte&amp;nbsp;contains&amp;nbsp;7&amp;nbsp;values&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;and&amp;nbsp;1&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sign&amp;nbsp;bit&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;so&amp;nbsp;'10001100'&amp;nbsp;it&amp;nbsp;is&amp;nbsp;negative&amp;nbsp;value&amp;nbsp;(first&amp;nbsp;bit&amp;nbsp;is&amp;nbsp;'1')&amp;nbsp;,&amp;nbsp;convert&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value&amp;nbsp;(revert&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;and&amp;nbsp;add&amp;nbsp;1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10001100&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110011&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110011&amp;nbsp;&lt;br&gt;
+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110100&amp;nbsp;=&amp;nbsp;-116.&lt;br&gt;
============================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;JVM&amp;nbsp;ensures&amp;nbsp;order&amp;nbsp;of&amp;nbsp;operations&amp;nbsp;is&amp;nbsp;evaluated&lt;br&gt;
left&amp;nbsp;-&amp;nbsp;to&amp;nbsp;-&amp;nbsp;right&amp;nbsp;when&amp;nbsp;operators&amp;nbsp;share&amp;nbsp;the&amp;nbsp;&lt;br&gt;
same&amp;nbsp;precedence.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;value&lt;br&gt;
of&amp;nbsp;xafter&amp;nbsp;this&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&amp;nbsp;executes?&amp;nbsp;&lt;br&gt;
String&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&amp;nbsp;-&amp;nbsp;6&amp;nbsp;+&amp;nbsp;&amp;#8220;Hello&amp;#8221;&amp;nbsp;+&amp;nbsp;7&amp;nbsp;+&amp;nbsp;5;&amp;nbsp;&lt;br&gt;
//x&amp;nbsp;equals&amp;nbsp;&amp;quot;6Hello75&amp;quot;&lt;br&gt;
&lt;br&gt;
==============================&lt;br&gt;
The&amp;nbsp;Multiplicative&amp;nbsp;Operators&lt;br&gt;
As&amp;nbsp;with&amp;nbsp;+&amp;nbsp;and&amp;nbsp;&amp;#8211;&amp;nbsp;&amp;nbsp;,&amp;nbsp;the&amp;nbsp;multiplicative&amp;nbsp;operators&amp;nbsp;promote&lt;br&gt;
both&amp;nbsp;operands&amp;nbsp;to&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;larger&amp;nbsp;operand.&lt;br&gt;
If&amp;nbsp;both&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;smaller&amp;nbsp;than&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;both&amp;nbsp;operands&lt;br&gt;
are&amp;nbsp;converted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s&amp;nbsp;before&amp;nbsp;the&amp;nbsp;multiplication&amp;nbsp;occurs.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;&lt;br&gt;
statements?&amp;nbsp;&lt;br&gt;
4.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;26,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;5;&amp;nbsp;&amp;nbsp;&lt;br&gt;
5.&amp;nbsp;double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;a&amp;nbsp;/&amp;nbsp;b;&amp;nbsp;&amp;nbsp;//&amp;nbsp;5.0&lt;br&gt;
&lt;br&gt;
8.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;26;&lt;br&gt;
9.&amp;nbsp;float&amp;nbsp;f&amp;nbsp;=&amp;nbsp;a&amp;nbsp;/&amp;nbsp;5.0F;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;5.2&lt;br&gt;
Because&amp;nbsp;5.0&amp;nbsp;is&amp;nbsp;a&amp;nbsp;float&amp;nbsp;(by&amp;nbsp;virtue&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&amp;quot;F&amp;quot;&amp;nbsp;&amp;nbsp;appended&amp;nbsp;to&amp;nbsp;it),&lt;br&gt;
the&amp;nbsp;int&amp;nbsp;a&amp;nbsp;is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;floatand&amp;nbsp;floating&amp;nbsp;&lt;br&gt;
-&amp;nbsp;point&amp;nbsp;division&amp;nbsp;is&amp;nbsp;performed.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;f&amp;nbsp;is&amp;nbsp;5.2&amp;nbsp;after&amp;nbsp;this&amp;nbsp;code&amp;nbsp;&lt;br&gt;
executes.&amp;nbsp;&lt;br&gt;
=================================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;MODULUS&amp;nbsp;Operator&amp;nbsp;&lt;br&gt;
The&amp;nbsp;modulus&amp;nbsp;operator,&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&amp;nbsp;remainder&lt;br&gt;
operator,&amp;nbsp;evaluates&amp;nbsp;the&amp;nbsp;remainder&amp;nbsp;&lt;br&gt;
of&amp;nbsp;two&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;divided.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;expression?&amp;nbsp;&lt;br&gt;
int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&amp;nbsp;%&amp;nbsp;5;&amp;nbsp;&lt;br&gt;
The&amp;nbsp;remainder&amp;nbsp;of&amp;nbsp;12&amp;nbsp;divided&amp;nbsp;by&amp;nbsp;5&amp;nbsp;is&amp;nbsp;2,&amp;nbsp;so&amp;nbsp;x&amp;nbsp;is&amp;nbsp;2.&amp;nbsp;&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;first&amp;nbsp;operand&amp;nbsp;is&amp;nbsp;negative,&amp;nbsp;so&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;modulus.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;yafter&amp;nbsp;the&amp;nbsp;&lt;br&gt;
following&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;&amp;#8211;&amp;nbsp;1:&lt;br&gt;
int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;-17&amp;nbsp;%&amp;nbsp;4;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(12&amp;nbsp;%&amp;nbsp;5);&amp;nbsp;//&amp;nbsp;2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If&amp;nbsp;the&amp;nbsp;first&amp;nbsp;operand&amp;nbsp;is&amp;nbsp;negative,&amp;nbsp;so&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;modulus&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;negative&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(-12&amp;nbsp;%&amp;nbsp;5);&amp;nbsp;//-2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(12.4&amp;nbsp;%&amp;nbsp;3.2);//&amp;nbsp;2.8&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(5.2&amp;nbsp;%&amp;nbsp;2.5);&amp;nbsp;//&amp;nbsp;0.20000000000000018&lt;br&gt;
==========================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Increment&amp;nbsp;and&amp;nbsp;Decrement&amp;nbsp;Operators&lt;br&gt;
The&amp;nbsp;operators&amp;nbsp;++&amp;nbsp;and&amp;nbsp;&amp;#8211;&amp;nbsp;&amp;#8211;&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;increment&amp;nbsp;and&lt;br&gt;
decrement&amp;nbsp;operators&amp;nbsp;because&amp;nbsp;they&amp;nbsp;increment&amp;nbsp;and&amp;nbsp;decrement&lt;br&gt;
(respectively)&amp;nbsp;a&amp;nbsp;numeric&amp;nbsp;type&amp;nbsp;by&amp;nbsp;1.&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;6;&lt;br&gt;
4.&amp;nbsp;System.out.println(x++);&amp;nbsp;//&amp;nbsp;6&lt;br&gt;
5.&amp;nbsp;System.out.println(x);&amp;nbsp;//&amp;nbsp;7&lt;br&gt;
Adding&amp;nbsp;or&amp;nbsp;subtracting&amp;nbsp;1&amp;nbsp;seems&amp;nbsp;simple&amp;nbsp;enough,&amp;nbsp;but&amp;nbsp;these&lt;br&gt;
operators&amp;nbsp;can&amp;nbsp;be&amp;nbsp;confusing&amp;nbsp;because&amp;nbsp;of&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;evaluated!&lt;br&gt;
&lt;br&gt;
Example&lt;br&gt;
10.&amp;nbsp;char&amp;nbsp;c&amp;nbsp;=&amp;nbsp;'A';&lt;br&gt;
11.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.print(c++&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;&amp;#8220;);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;System.out.print(c);&amp;nbsp;&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;value&amp;nbsp;printed&amp;nbsp;is&amp;nbsp;'A',&amp;nbsp;then&amp;nbsp;c&amp;nbsp;is&amp;nbsp;incremented,&amp;nbsp;which&amp;nbsp;results&amp;nbsp;in&amp;nbsp;'B'&lt;br&gt;
&amp;nbsp;printed&amp;nbsp;on&amp;nbsp;the&amp;nbsp;second&amp;nbsp;iteration&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop.&amp;nbsp;&lt;br&gt;
In&amp;nbsp;total,&amp;nbsp;11&amp;nbsp;char&amp;nbsp;s&amp;nbsp;are&amp;nbsp;printed&amp;nbsp;and&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
A&amp;nbsp;B&amp;nbsp;C&amp;nbsp;D&amp;nbsp;E&amp;nbsp;F&amp;nbsp;G&amp;nbsp;H&amp;nbsp;I&amp;nbsp;J&amp;nbsp;K&lt;br&gt;
=========================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;instanceof&amp;nbsp;Operator&lt;br&gt;
The&amp;nbsp;instanceof&amp;nbsp;operator&amp;nbsp;compares&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
class&amp;nbsp;or&amp;nbsp;interface&amp;nbsp;data&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;true&amp;nbsp;if&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;an&lt;br&gt;
instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type;&amp;nbsp;otherwise,&amp;nbsp;the&amp;nbsp;result&amp;nbsp;is&amp;nbsp;false.&amp;nbsp;The&amp;nbsp;&lt;br&gt;
syntax&amp;nbsp;for&amp;nbsp;the&amp;nbsp;instanceof&amp;nbsp;operator&amp;nbsp;looks&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
reference&amp;nbsp;instanceof&amp;nbsp;ClassOrInterfaceName&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;&amp;quot;Hello,&amp;nbsp;World&amp;quot;;&lt;br&gt;
4.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;String)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.print(&amp;quot;one&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;Object)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.print(&amp;quot;two&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;java.io.Serializable)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.print(&amp;quot;three&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
12.&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
====================&lt;br&gt;
The&amp;nbsp;Bitwise&amp;nbsp;and&amp;nbsp;Logical&amp;nbsp;Operators&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;amp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;AND&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;^&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;exclusive&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;&amp;nbsp;|&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;inclusive&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;conditional&amp;nbsp;AND&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;||&amp;nbsp;:&amp;nbsp;the&amp;nbsp;conditional&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;&amp;nbsp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;^&amp;nbsp;,&amp;nbsp;and&amp;nbsp;|&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;expressions&amp;nbsp;where&amp;nbsp;both&lt;br&gt;
operands&amp;nbsp;are&amp;nbsp;either&amp;nbsp;primitive&amp;nbsp;numeric&amp;nbsp;&lt;br&gt;
types&amp;nbsp;or&amp;nbsp;both&amp;nbsp;are&amp;nbsp;boolean&amp;nbsp;expressions.&amp;nbsp;When&amp;nbsp;operating&lt;br&gt;
on&amp;nbsp;numeric&amp;nbsp;types,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;bitwise&amp;nbsp;operators.&lt;br&gt;
When&amp;nbsp;operating&amp;nbsp;on&amp;nbsp;boolean&amp;nbsp;types,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;logical&amp;nbsp;&lt;br&gt;
operators.&amp;nbsp;The&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&amp;nbsp;||&amp;nbsp;operators&amp;nbsp;&lt;br&gt;
require&amp;nbsp;both&amp;nbsp;operands&amp;nbsp;to&amp;nbsp;be&amp;nbsp;boolean&amp;nbsp;expressions,&amp;nbsp;so&amp;nbsp;they&amp;nbsp;are&amp;nbsp;strictly&amp;nbsp;logical&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;operators.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;bitwise&amp;nbsp;operators&amp;nbsp;are&amp;nbsp;evaluated&amp;nbsp;on&amp;nbsp;integer&amp;nbsp;types.&lt;br&gt;
To&amp;nbsp;compute&amp;nbsp;the&amp;nbsp;result,&amp;nbsp;you&amp;nbsp;need&amp;nbsp;&lt;br&gt;
to&amp;nbsp;know&amp;nbsp;the&amp;nbsp;binary&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;values.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;expression?&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;result&amp;nbsp;=&amp;nbsp;12&amp;nbsp;^&amp;nbsp;45;&amp;nbsp;&amp;nbsp;//&amp;nbsp;33&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;5,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;c&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
4.&amp;nbsp;boolean&amp;nbsp;one&amp;nbsp;=&amp;nbsp;a&amp;nbsp;&lt;&amp;nbsp;b&amp;nbsp;&amp;amp;&amp;nbsp;c&amp;nbsp;!=&amp;nbsp;0;&lt;br&gt;
5.&amp;nbsp;System.out.println(one);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
6.&amp;nbsp;boolean&amp;nbsp;two&amp;nbsp;=&amp;nbsp;true&amp;nbsp;|&amp;nbsp;true&amp;nbsp;&amp;amp;&amp;nbsp;false;&lt;br&gt;
7.&amp;nbsp;System.out.println(two);&amp;nbsp;//&amp;nbsp;false&lt;br&gt;
8.&amp;nbsp;boolean&amp;nbsp;three&amp;nbsp;=&amp;nbsp;(c&amp;nbsp;!=&amp;nbsp;0)&amp;nbsp;&amp;amp;&amp;nbsp;(a&amp;nbsp;/&amp;nbsp;c&amp;nbsp;&gt;&amp;nbsp;1);&lt;br&gt;
9.&amp;nbsp;System.out.println(three);&amp;nbsp;&amp;nbsp;//&amp;nbsp;exception&amp;nbsp;,&amp;nbsp;divide&amp;nbsp;by&amp;nbsp;0&lt;br&gt;
&lt;br&gt;
============================&lt;br&gt;
The&amp;nbsp;Conditional&amp;nbsp;Operator&lt;br&gt;
Syntax&amp;nbsp;:&lt;br&gt;
boolean_expression&amp;nbsp;?&amp;nbsp;true_expression&amp;nbsp;:&amp;nbsp;false_expression&amp;nbsp;&lt;br&gt;
&lt;br&gt;
double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;0.36;&lt;br&gt;
System.out.println(&amp;nbsp;d&amp;nbsp;&gt;&amp;nbsp;0&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;d&amp;nbsp;&lt;&amp;nbsp;1&amp;nbsp;?&amp;nbsp;d&amp;nbsp;*=&amp;nbsp;100&amp;nbsp;:&amp;nbsp;&amp;quot;not&amp;nbsp;a&amp;nbsp;percent&amp;quot;);&amp;nbsp;//&amp;nbsp;36&lt;br&gt;
&amp;nbsp;==============&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_0_0:16" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Equals&amp;nbsp;operators&amp;nbsp;(=,equals&amp;nbsp;method),&amp;nbsp;describe.&lt;br&gt;
Hashcode&amp;nbsp;method,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Equality&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
&amp;nbsp;The&amp;nbsp;==&amp;nbsp;(equal&amp;nbsp;to)&amp;nbsp;and&amp;nbsp;!=&amp;nbsp;(not&amp;nbsp;equal&amp;nbsp;to)&amp;nbsp;operators&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;equality&amp;nbsp;operators.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;equality&amp;nbsp;operators&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;three&amp;nbsp;situations,&amp;nbsp;all&amp;nbsp;of&amp;nbsp;which&amp;nbsp;return&amp;nbsp;a&amp;nbsp;&lt;br&gt;
boolean:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;numerical&amp;nbsp;primitive&amp;nbsp;types.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;boolean&amp;nbsp;types.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;references&amp;nbsp;types&amp;nbsp;or&amp;nbsp;null&amp;nbsp;types&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;57;&lt;br&gt;
7.&amp;nbsp;float&amp;nbsp;f&amp;nbsp;=&amp;nbsp;57.0F;&lt;br&gt;
8.&amp;nbsp;double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;5.70;&lt;br&gt;
9.&amp;nbsp;boolean&amp;nbsp;b&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;boolean&amp;nbsp;one&amp;nbsp;=&amp;nbsp;x&amp;nbsp;==&amp;nbsp;57;&lt;br&gt;
12.&amp;nbsp;System.out.println(one);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
13.&amp;nbsp;boolean&amp;nbsp;two&amp;nbsp;=&amp;nbsp;(f&amp;nbsp;!=&amp;nbsp;d);&lt;br&gt;
14.&amp;nbsp;System.out.println(two);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
15.&amp;nbsp;boolean&amp;nbsp;three&amp;nbsp;=&amp;nbsp;(b&amp;nbsp;=&amp;nbsp;true);&lt;br&gt;
16.&amp;nbsp;System.out.println(three);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;The&amp;nbsp;equality&amp;nbsp;operators&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;evaluated&amp;nbsp;on&amp;nbsp;reference&amp;nbsp;types.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;that&amp;nbsp;evaluating&amp;nbsp;==and&amp;nbsp;!=&amp;nbsp;on&amp;nbsp;two&lt;br&gt;
references&amp;nbsp;compares&amp;nbsp;the&amp;nbsp;references,&amp;nbsp;not&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;they&amp;nbsp;point&amp;nbsp;to.&lt;br&gt;
Two&amp;nbsp;references&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;if&amp;nbsp;and&amp;nbsp;only&amp;nbsp;if&amp;nbsp;they&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object&amp;nbsp;&lt;br&gt;
(or&amp;nbsp;both&amp;nbsp;point&amp;nbsp;to&amp;nbsp;null&amp;nbsp;);&amp;nbsp;otherwise,&amp;nbsp;the&amp;nbsp;two&amp;nbsp;references&amp;nbsp;are&amp;nbsp;not&amp;nbsp;equal.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
Comparing&amp;nbsp;String&amp;nbsp;references&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;tends&amp;nbsp;to&amp;nbsp;be&amp;nbsp;confusing&lt;br&gt;
because&amp;nbsp;of&amp;nbsp;how&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;treats&amp;nbsp;string&amp;nbsp;literals.&amp;nbsp;Because&amp;nbsp;String&lt;br&gt;
objects&amp;nbsp;are&amp;nbsp;immutable,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;reuse&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;for&amp;nbsp;efficiency&lt;br&gt;
and&amp;nbsp;to&amp;nbsp;save&amp;nbsp;memory.&amp;nbsp;Because&amp;nbsp;"Hello"&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Stringliteral&amp;nbsp;known&amp;nbsp;at&amp;nbsp;&lt;br&gt;
compile&amp;nbsp;time,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;only&amp;nbsp;creates&amp;nbsp;one&amp;nbsp;"Hello"&amp;nbsp;object&amp;nbsp;in&amp;nbsp;memory,&amp;nbsp;and&amp;nbsp;s1and&amp;nbsp;s2&amp;nbsp;both&lt;br&gt;
refer&amp;nbsp;to&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
System.out.println(s1&amp;nbsp;==&amp;nbsp;s2);&amp;nbsp;//&amp;nbsp;true&amp;nbsp;,&amp;nbsp;because&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;String&amp;nbsp;Pool&amp;nbsp;!!!!!&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String("hello");&lt;br&gt;
System.out.println(s1&amp;nbsp;==&amp;nbsp;s2);&amp;nbsp;//&amp;nbsp;false&amp;nbsp;,&amp;nbsp;because&amp;nbsp;s1&amp;nbsp;is&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;Pool,&amp;nbsp;and&amp;nbsp;s2&amp;nbsp;is&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;Heap&lt;br&gt;
&lt;br&gt;
=====================&lt;br&gt;
&amp;nbsp;Equality&amp;nbsp;of&amp;nbsp;Objects&lt;br&gt;
&amp;nbsp;The&amp;nbsp;java.lang.Object&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;equals&lt;br&gt;
method&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&amp;nbsp;signature:&lt;br&gt;
public&amp;nbsp;boolean&amp;nbsp;equals&amp;nbsp;(Object&amp;nbsp;obj)&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Dog&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Dog(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
7.&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;Dog))&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
13.&amp;nbsp;Dog&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(Dog)&amp;nbsp;obj;&lt;br&gt;
14.&amp;nbsp;if(this.name.equals(other.name)&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;br&gt;
15.&amp;nbsp;(this.age&amp;nbsp;==&amp;nbsp;other.age))&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;return&amp;nbsp;true;&lt;br&gt;
17.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
18.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==============&lt;br&gt;
The&amp;nbsp;hashCode&amp;nbsp;&amp;nbsp;Method&amp;nbsp;&amp;nbsp;!!!!&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Objectclass&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;method&amp;nbsp;named&amp;nbsp;hashCodewith&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;signature:&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;hashCode()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;used&amp;nbsp;by&amp;nbsp;__&amp;nbsp;hash&amp;nbsp;table&amp;nbsp;__&amp;nbsp;data&amp;nbsp;structures.&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;hashCode&amp;nbsp;and&amp;nbsp;equals&amp;nbsp;__&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;related&amp;nbsp;in&amp;nbsp;the&amp;nbsp;sense&amp;nbsp;that&lt;br&gt;
two&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;should&amp;nbsp;generate&amp;nbsp;the&amp;nbsp;same&amp;nbsp;hash&amp;nbsp;&lt;br&gt;
code.&amp;nbsp;Therefore,&amp;nbsp;any&amp;nbsp;time&amp;nbsp;you&amp;nbsp;override&amp;nbsp;equals&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class,&lt;br&gt;
you&amp;nbsp;should&amp;nbsp;also&amp;nbsp;override&amp;nbsp;hashCode.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;Dogclass,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;&lt;br&gt;
hashCode&amp;nbsp;method&amp;nbsp;maintains&amp;nbsp;this&amp;nbsp;required&amp;nbsp;relationship&amp;nbsp;of&amp;nbsp;equalsand&amp;nbsp;hashCode:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
If&amp;nbsp;two&amp;nbsp;Dog&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;in&amp;nbsp;our&amp;nbsp;example,&amp;nbsp;they&amp;nbsp;have&lt;br&gt;
the&amp;nbsp;same&amp;nbsp;ageand&amp;nbsp;therefore&amp;nbsp;will&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;hash&amp;nbsp;code.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
HashCODE&amp;nbsp;from&amp;nbsp;WIKI&amp;nbsp;:&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language,&amp;nbsp;every&amp;nbsp;class&amp;nbsp;implicitly&amp;nbsp;or&amp;nbsp;explicitly&amp;nbsp;provides&lt;br&gt;
a&amp;nbsp;hashCode()&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;digests&amp;nbsp;the&amp;nbsp;data&amp;nbsp;stored&lt;br&gt;
in&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;into&amp;nbsp;a&amp;nbsp;single&amp;nbsp;hash&amp;nbsp;value&lt;br&gt;
(a&amp;nbsp;32-bit&amp;nbsp;signed&amp;nbsp;integer).&amp;nbsp;This&amp;nbsp;hash&amp;nbsp;is&amp;nbsp;used&amp;nbsp;by&amp;nbsp;other&amp;nbsp;code&amp;nbsp;when&amp;nbsp;&lt;br&gt;
storing&amp;nbsp;or&amp;nbsp;manipulating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;?&amp;nbsp;the&amp;nbsp;values&amp;nbsp;are&amp;nbsp;intended&amp;nbsp;to&amp;nbsp;&lt;br&gt;
be&amp;nbsp;evenly&amp;nbsp;distributed&amp;nbsp;for&amp;nbsp;varied&amp;nbsp;inputs&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;use&amp;nbsp;in&amp;nbsp;clustering.&lt;br&gt;
This&amp;nbsp;property&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;the&amp;nbsp;performance&amp;nbsp;of&amp;nbsp;hash&amp;nbsp;tables&amp;nbsp;and&lt;br&gt;
other&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;that&amp;nbsp;store&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;groups&amp;nbsp;("buckets")&amp;nbsp;___&lt;br&gt;
&amp;nbsp;based&amp;nbsp;on&amp;nbsp;their&amp;nbsp;computed&amp;nbsp;hash&amp;nbsp;values.&amp;nbsp;Technically,&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;hashCode()&lt;br&gt;
by&amp;nbsp;default&amp;nbsp;is&amp;nbsp;a&amp;nbsp;__&amp;nbsp;native&amp;nbsp;__&amp;nbsp;method,&amp;nbsp;meaning,&amp;nbsp;it&amp;nbsp;has&amp;nbsp;the&amp;nbsp;modifier&amp;nbsp;'native',&lt;br&gt;
as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;directly&amp;nbsp;in&amp;nbsp;the&amp;nbsp;native&amp;nbsp;code&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JVM.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Equals&amp;nbsp;rules&amp;nbsp;(and&amp;nbsp;alse&amp;nbsp;hashcode&amp;nbsp;rules)&amp;nbsp;:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Symmetry:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x&amp;nbsp;and&amp;nbsp;y,&amp;nbsp;x.equals(y)&amp;nbsp;is&amp;nbsp;true&amp;nbsp;implies&lt;br&gt;
that&amp;nbsp;y.equals(x)&amp;nbsp;is&amp;nbsp;also&amp;nbsp;true.&lt;br&gt;
-&amp;nbsp;Reflectivity:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;value&amp;nbsp;x,&amp;nbsp;x.equals(x)&amp;nbsp;must&amp;nbsp;always&amp;nbsp;return&amp;nbsp;true.&lt;br&gt;
-&amp;nbsp;Consistency:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x&amp;nbsp;and&amp;nbsp;y,&amp;nbsp;x.equals(y)&lt;br&gt;
consistently&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;or&amp;nbsp;consistently&amp;nbsp;returns&amp;nbsp;false,&amp;nbsp;provided&amp;nbsp;no&lt;br&gt;
information&amp;nbsp;used&amp;nbsp;in&amp;nbsp;equals&amp;nbsp;comparisons&amp;nbsp;on&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;modified.&lt;br&gt;
-&amp;nbsp;Transitivity:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;and&amp;nbsp;z,&amp;nbsp;if&amp;nbsp;x.equals(y)&lt;br&gt;
returns&amp;nbsp;true&amp;nbsp;and&amp;nbsp;y.equals(z)&amp;nbsp;returns&amp;nbsp;true,&amp;nbsp;then&amp;nbsp;x.equals(z)&amp;nbsp;must&amp;nbsp;return&amp;nbsp;true.&lt;br&gt;
Note&amp;nbsp;that&amp;nbsp;all&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;being&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;above&amp;nbsp;must&lt;br&gt;
be&amp;nbsp;non&amp;nbsp;null.&amp;nbsp;The&amp;nbsp;rule&amp;nbsp;for&amp;nbsp;the&amp;nbsp;null&amp;nbsp;reference&amp;nbsp;is&lt;br&gt;
-For&amp;nbsp;any&amp;nbsp;non-null&amp;nbsp;reference&amp;nbsp;value&amp;nbsp;x,&amp;nbsp;x.equals(null)&amp;nbsp;must&amp;nbsp;return&amp;nbsp;false.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
P.S&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;using&amp;nbsp;HotSpot&amp;nbsp;you&amp;nbsp;can&amp;nbsp;select&amp;nbsp;Object.hashCode&amp;nbsp;algorithm&amp;nbsp;&lt;br&gt;
with&amp;nbsp;option&amp;nbsp;:&amp;nbsp;&amp;nbsp;-XX:hashCode=n&lt;br&gt;
&amp;nbsp;0&amp;nbsp;?&amp;nbsp;Park-Miller&amp;nbsp;RNG&amp;nbsp;(default)&lt;br&gt;
&amp;nbsp;&amp;nbsp;1&amp;nbsp;?&amp;nbsp;f(address)&lt;br&gt;
&amp;nbsp;&amp;nbsp;2&amp;nbsp;?&amp;nbsp;Constant&amp;nbsp;'1'&lt;br&gt;
&amp;nbsp;&amp;nbsp;3&amp;nbsp;?&amp;nbsp;counter&lt;br&gt;
&amp;nbsp;&amp;nbsp;4&amp;nbsp;?&amp;nbsp;object&amp;nbsp;address&lt;br&gt;
&amp;nbsp;&amp;nbsp;5&amp;nbsp;?&amp;nbsp;Thread-local&amp;nbsp;Xorshift&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:17" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;appears&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Plant.java&amp;nbsp;.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;of&amp;nbsp;compiling&amp;nbsp;&lt;br&gt;
this&amp;nbsp;source&amp;nbsp;file?&amp;nbsp;(Select&amp;nbsp;one&amp;nbsp;answer.)&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Plant&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;flowering;&lt;br&gt;
3.&amp;nbsp;&amp;nbsp;public&amp;nbsp;Leaf&amp;nbsp;[]&amp;nbsp;leaves;&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;class&amp;nbsp;Leaf&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;color;&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;length;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated:&amp;nbsp;Plant.class&amp;nbsp;and&amp;nbsp;&lt;br&gt;
Leaf.class&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;one&amp;nbsp;bytecode&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file&amp;nbsp;is&amp;nbsp;generated:&amp;nbsp;Plant.class.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
&lt;br&gt;
Two&amp;nbsp;.class&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:18" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;a&amp;nbsp;class&amp;nbsp;named&amp;nbsp;com.mycompany.Main&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
Java&amp;nbsp;application,&amp;nbsp;and&amp;nbsp;Main.classis&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;directory:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
\projects\build\com\mycompany&lt;br&gt;
&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;commands&amp;nbsp;successfully&amp;nbsp;executes&amp;nbsp;Main&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;classpath=\projects\build&amp;nbsp;com.mycompany.Main&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;java&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;classpath&amp;nbsp;\projects\build\com\mycompany&amp;nbsp;Main&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classpath&amp;nbsp;\projects\build&amp;nbsp;com.mycompany.Main&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classpath&amp;nbsp;\projects\build\com&amp;nbsp;mycompany.Main&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
&lt;br&gt;
Also&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;short&amp;nbsp;'-cp'&amp;nbsp;intead&amp;nbsp;of&amp;nbsp;'-classpath'&lt;br&gt;
&lt;br&gt;
&amp;nbsp;java&amp;nbsp;-&amp;nbsp;cp&amp;nbsp;\projects\build&amp;nbsp;com.mycompany.Main</questionanswer>
  </question>
  <question id="1_0_0_0_0:19" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;class&amp;nbsp;named&amp;nbsp;Testis&amp;nbsp;in&amp;nbsp;the&amp;nbsp;a.b.c&amp;nbsp;package,&amp;nbsp;defined&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Test.javaand&amp;nbsp;saved&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;directory:&lt;br&gt;
&lt;br&gt;
c:\abcproject\src\Test.java&lt;br&gt;
&lt;br&gt;
Assuming&amp;nbsp;the&amp;nbsp;code&amp;nbsp;in&amp;nbsp;Test.java&amp;nbsp;uses&amp;nbsp;only&amp;nbsp;classes&amp;nbsp;from&lt;br&gt;
java.lang&amp;nbsp;and&amp;nbsp;contains&amp;nbsp;no&amp;nbsp;com-piler&amp;nbsp;errors,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;command&amp;nbsp;line?&lt;br&gt;
&lt;br&gt;
c:\abcproject\src&amp;nbsp;&gt;&amp;nbsp;javac&amp;nbsp;-d&amp;nbsp;c:\abcproject\deploy&amp;nbsp;Test.java&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;NoClassDefFoundError&amp;nbsp;occurs.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy&amp;nbsp;directory.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy\abc&amp;nbsp;directory&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy\a\b\c&amp;nbsp;directory&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:20" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;compiling&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class?&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;ISBN;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;title,&amp;nbsp;author;&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;pageCount;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;return&amp;nbsp;ISBN;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;Book))&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;Book&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(Book)&amp;nbsp;obj;&lt;br&gt;
15.&amp;nbsp;return&amp;nbsp;this.ISBN&amp;nbsp;==&amp;nbsp;other.ISBN;&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;The&amp;nbsp;class&amp;nbsp;compiles&amp;nbsp;successfully.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;6&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;because&amp;nbsp;hashCode&amp;nbsp;does&amp;nbsp;not&amp;nbsp;return&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;value.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;10&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;because&amp;nbsp;the&amp;nbsp;equals&amp;nbsp;method&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;does&amp;nbsp;not&amp;nbsp;override&amp;nbsp;the&amp;nbsp;par-ent&amp;nbsp;method&amp;nbsp;correctly&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;15&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;because&amp;nbsp;other.ISBNis&amp;nbsp;a&amp;nbsp;private&amp;nbsp;field.&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:21" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;outcome&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&amp;#8220;Canada&amp;#8221;;&lt;br&gt;
7.&amp;nbsp;String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String(s1);&lt;br&gt;
8.&amp;nbsp;if(s1&amp;nbsp;==&amp;nbsp;s2)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(&amp;#8220;s1&amp;nbsp;==&amp;nbsp;s2&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;if(s1.equals(s2))&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.println(&amp;#8220;s1.equals(s2)&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;s1&amp;nbsp;==&amp;nbsp;s2&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s1.equals(s2)&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;Both&amp;nbsp;B&amp;nbsp;and&amp;nbsp;C&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:22" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;GC:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.Date;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GC&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;Date&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
6.&amp;nbsp;Date&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
7.&amp;nbsp;Date&amp;nbsp;three&amp;nbsp;=&amp;nbsp;one;&lt;br&gt;
8.&amp;nbsp;one&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
9.&amp;nbsp;Date&amp;nbsp;four&amp;nbsp;=&amp;nbsp;one;&lt;br&gt;
10.&amp;nbsp;three&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
11.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;true?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;8&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;10.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;13.&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:23" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;private&amp;nbsp;class&amp;nbsp;Squares&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;long&amp;nbsp;square(int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;long&amp;nbsp;y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;*&amp;nbsp;(long)&amp;nbsp;x;&lt;br&gt;
4.&amp;nbsp;x&amp;nbsp;=&amp;nbsp;-1;&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;y;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;int&amp;nbsp;value&amp;nbsp;=&amp;nbsp;9;&lt;br&gt;
10.&amp;nbsp;long&amp;nbsp;result&amp;nbsp;=&amp;nbsp;square(value);&lt;br&gt;
11.&amp;nbsp;System.out.println(value);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;This&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;81&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
Because&amp;nbsp;top&amp;nbsp;level&amp;nbsp;class&amp;nbsp;cant&amp;nbsp;be&amp;nbsp;private</questionanswer>
  </question>
  <question id="1_0_0_0_0:24" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;TestDrive&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;go(Car&amp;nbsp;c)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;c.velocity&amp;nbsp;+=&amp;nbsp;10;&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;Car&amp;nbsp;porsche&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Car();&lt;br&gt;
9.&amp;nbsp;go(porsche);&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;Car&amp;nbsp;stolen&amp;nbsp;=&amp;nbsp;porsche;&lt;br&gt;
12.&amp;nbsp;go(stolen);&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;System.out.println(porsche.velocity);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;class&amp;nbsp;Car&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;velocity&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;0&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;10&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;20&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;30&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:25" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.*;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;DateSwap&amp;nbsp;{&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;swap(GregorianCalendar&amp;nbsp;a,&amp;nbsp;GregorianCalendar&amp;nbsp;b)&amp;nbsp;&lt;br&gt;
6.&amp;nbsp;{&amp;nbsp;&lt;br&gt;
7.&amp;nbsp;GregorianCalendar&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;a;&lt;br&gt;
8.&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2012,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
9.&amp;nbsp;b&amp;nbsp;=&amp;nbsp;temp;&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;GregorianCalendar&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2010,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
14.&amp;nbsp;GregorianCalendar&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2011,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;swap(one,&amp;nbsp;two);&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;System.out.print(one.get(Calendar.YEAR));&lt;br&gt;
19.&amp;nbsp;System.out.println(two.get(Calendar.YEAR));&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;20112010&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;20102011&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;20122011&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;20122010&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:26" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;does&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;garbage&amp;nbsp;collection?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ReturnDemo&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;String&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String(&amp;#8220;Jane&amp;nbsp;Doe&amp;#8221;);&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;temp;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;String&amp;nbsp;result;&lt;br&gt;
10.&amp;nbsp;result&amp;nbsp;=&amp;nbsp;getName();&lt;br&gt;
11.&amp;nbsp;System.out.println(result);&lt;br&gt;
12.&amp;nbsp;result&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
13.&amp;nbsp;System.gc();&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;4&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;after&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;10&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:27" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
4.&amp;nbsp;byte&amp;nbsp;a&amp;nbsp;=&amp;nbsp;40,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;50;&lt;br&gt;
5.&amp;nbsp;byte&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;(byte)&amp;nbsp;a&amp;nbsp;+&amp;nbsp;b;&lt;br&gt;
6.&amp;nbsp;System.out.println(sum);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;40&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;50&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;90&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:28" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;5&amp;nbsp;*&amp;nbsp;4&amp;nbsp;%&amp;nbsp;3;&lt;br&gt;
6.&amp;nbsp;System.out.println(x);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;2&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;5&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:29" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;byte&amp;nbsp;y&amp;nbsp;=&amp;nbsp;14&amp;nbsp;&amp;amp;&amp;nbsp;9;&lt;br&gt;
4.&amp;nbsp;System.out.println(y);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;15&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;4&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:30" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;FinalTest&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;House&amp;nbsp;h&amp;nbsp;=&amp;nbsp;new&amp;nbsp;House();&lt;br&gt;
5.&amp;nbsp;h.address&amp;nbsp;=&amp;nbsp;&amp;#8220;123&amp;nbsp;Main&amp;nbsp;Street&amp;#8221;;&lt;br&gt;
6.&amp;nbsp;h&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;System.gc();&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;&lt;br&gt;
11.&amp;nbsp;class&amp;nbsp;House&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;address;&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;House&amp;#8221;);&lt;br&gt;
16.&amp;nbsp;address&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;The&amp;nbsp;output&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;determined.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;most&amp;nbsp;cases&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output&amp;nbsp;on&amp;nbsp;my&amp;nbsp;Netbook&amp;nbsp;,&amp;nbsp;because&amp;nbsp;'main'&amp;nbsp;method&amp;nbsp;ends,&lt;br&gt;
and&amp;nbsp;only&amp;nbsp;then&amp;nbsp;Garbage&amp;nbsp;collection&amp;nbsp;is&amp;nbsp;performed&amp;nbsp;.&amp;nbsp;But&amp;nbsp;sometimes&amp;nbsp;finalize&amp;nbsp;mehtod&amp;nbsp;is&amp;nbsp;&lt;br&gt;
executed.</questionanswer>
  </question>
  <question id="1_0_0_0_0:31" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;House&amp;nbsp;,&amp;nbsp;which&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true?&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;House&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;address&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String();&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;House&amp;#8221;);&lt;br&gt;
6.&amp;nbsp;address&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;&amp;#8220;&amp;nbsp;Inside&amp;nbsp;House&amp;nbsp;&amp;#8221;&amp;nbsp;&amp;nbsp;is&amp;nbsp;displayed&amp;nbsp;twice&amp;nbsp;just&amp;nbsp;before&amp;nbsp;a&amp;nbsp;House&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;is&amp;nbsp;garbage&amp;nbsp;collected.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;finalize&amp;nbsp;method&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;never&amp;nbsp;actually&amp;nbsp;gets&amp;nbsp;called&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;address&amp;nbsp;to&amp;nbsp;nullon&amp;nbsp;line&amp;nbsp;6.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:32" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true&amp;nbsp;about&amp;nbsp;the&amp;nbsp;following&amp;nbsp;BaseballTeam&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class?&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;BaseballTeam&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;city,&amp;nbsp;mascot;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;numberOfPlayers;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;BaseballTeam))&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;BaseballTeam&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(BaseballTeam)&amp;nbsp;obj;&lt;br&gt;
10.&amp;nbsp;return&amp;nbsp;(city.equals(other.city)&amp;nbsp;&lt;br&gt;
11.&amp;nbsp;&amp;amp;&amp;nbsp;&amp;amp;&amp;nbsp;mascot.equals(other.mascot));&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;return&amp;nbsp;numberOfPlayers;&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;class&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiles&amp;nbsp;but&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;improper&amp;nbsp;equals&amp;nbsp;method.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;compiles&amp;nbsp;but&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;improper&amp;nbsp;hashCode&amp;nbsp;method.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:33" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
4.&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
5.&amp;nbsp;if(x&amp;nbsp;==&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.println(&amp;#8220;Success&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Failure&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Success&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Failure&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:34" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&amp;nbsp;&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x1&amp;nbsp;=&amp;nbsp;50,&amp;nbsp;x2&amp;nbsp;=&amp;nbsp;75;&lt;br&gt;
4.&amp;nbsp;boolean&amp;nbsp;b&amp;nbsp;=&amp;nbsp;x1&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;x2;&lt;br&gt;
5.&amp;nbsp;if(b&amp;nbsp;=&amp;nbsp;true)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.println(&amp;#8220;Success&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Failure&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Success&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Failure&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:35" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;c&amp;nbsp;=&amp;nbsp;7;&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;result&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
7.&amp;nbsp;result&amp;nbsp;+=&amp;nbsp;++c;&lt;br&gt;
8.&amp;nbsp;System.out.print(result);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;8&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;12&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;16&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:36" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Determine&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;when&amp;nbsp;executed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;command:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
java&amp;nbsp;HelloWorld&amp;nbsp;hello&amp;nbsp;world&amp;nbsp;goodbye&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;HelloWorld&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.println(args[1]&amp;nbsp;+&amp;nbsp;args[2]);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;hello&amp;nbsp;world&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;world&amp;nbsp;goodbye&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;An&amp;nbsp;ArrayIndexOutOfBoundsException&amp;nbsp;occurs&amp;nbsp;at&amp;nbsp;runtime.&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;class&amp;nbsp;declaration&amp;nbsp;on&amp;nbsp;line&amp;nbsp;1&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;static&amp;nbsp;modifier,&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;modifier&amp;nbsp;for&amp;nbsp;a&amp;nbsp;top-level&amp;nbsp;class.</questionanswer>
  </question>
</questions>
