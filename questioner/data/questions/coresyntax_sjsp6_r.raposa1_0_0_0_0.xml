<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_0_0" name="CoreSyntax_SJSP6_R.Raposa" nofquestions="88" nofsubcategories="0" filename="coresyntax_sjsp6_r.raposa1_0_0_0_0.xml">
  <question id="1_0_0_0_0:0" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;appears&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Book.java&amp;nbsp;.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;compiling&lt;br&gt;
this&amp;nbsp;source&amp;nbsp;file?&amp;nbsp;(Select&amp;nbsp;one&amp;nbsp;answer.)&lt;br&gt;
&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;private&amp;nbsp;int&amp;nbsp;pageNumber;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;class&amp;nbsp;BookReader&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getPage()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;pageNumber;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;one&amp;nbsp;bytecode&amp;nbsp;file&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;.&amp;nbsp;$v0end$&lt;br&gt;
$v1$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
BookReader.class&amp;nbsp;.$v1end$&lt;br&gt;
$v2$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;two&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
Book$BookReader.class&amp;nbsp;.$v2end$&lt;br&gt;
$v3$A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:1" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;TV&amp;nbsp;class:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TV&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;model;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TV(String&amp;nbsp;make,&amp;nbsp;String&amp;nbsp;model)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.make&amp;nbsp;=&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.model&amp;nbsp;=&amp;nbsp;model;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(TV&amp;nbsp;other)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.equals(other.make)&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;model.equals(other.model);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.length()&amp;nbsp;*&amp;nbsp;+model.length();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
TV&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
TV&amp;nbsp;b&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
if(a.equals(b))&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;equal&amp;#8221;);&lt;br&gt;
}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;not&amp;nbsp;equal&amp;#8221;);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;equal&amp;nbsp;$v0end$&lt;br&gt;
$v1$not&amp;nbsp;equal$v1end$&lt;br&gt;
$v2$Line&amp;nbsp;10&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.$v2end$&lt;br&gt;
$v3$Line&amp;nbsp;11&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:2" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;does&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;&amp;nbsp;hi&amp;nbsp;&amp;#8221;&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;2&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;garbage&lt;br&gt;
collection?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Hello&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;greeting&amp;nbsp;=&amp;nbsp;&amp;#8220;hi&amp;#8221;;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hello&amp;nbsp;h&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Hello();&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.greeting&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.gc();&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v0end$&lt;br&gt;
$v1$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;$v1end$&lt;br&gt;
$v2$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;7$v2end$&lt;br&gt;
$v3$Immediately&amp;nbsp;after&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;line&amp;nbsp;8$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:3" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;byte&amp;nbsp;x&amp;nbsp;=&amp;nbsp;23,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
7.&amp;nbsp;int&amp;nbsp;z&amp;nbsp;=&amp;nbsp;23&amp;nbsp;%&amp;nbsp;4;&lt;br&gt;
8.&amp;nbsp;System.out.println(z);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;4.75&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;4&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:4" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Vehicle&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;used;&lt;br&gt;
3.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vehicle&amp;nbsp;v&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Vehicle();&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(v.used)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make);&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make.length());&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;null&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;0&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;10&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:5" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;many&amp;nbsp;classes&amp;nbsp;definitions&amp;nbsp;&amp;nbsp;can&amp;nbsp;one&amp;nbsp;.java&amp;nbsp;file&amp;nbsp;contains&amp;nbsp;?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;2&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;As&amp;nbsp;many&amp;nbsp;,&amp;nbsp;as&amp;nbsp;you&amp;nbsp;need&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;:What&amp;nbsp;does&amp;nbsp;'-d'&amp;nbsp;option&amp;nbsp;mean&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Suppose&amp;nbsp;you&amp;nbsp;want&amp;nbsp;the&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;to&amp;nbsp;be&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory.&amp;nbsp;You&lt;br&gt;
can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;of&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;to&amp;nbsp;achieve&amp;nbsp;this.&amp;nbsp;The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;has&amp;nbsp;two&amp;nbsp;effects:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;will&amp;nbsp;be&amp;nbsp;output&amp;nbsp;in&amp;nbsp;the&amp;nbsp;directory&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&amp;nbsp;that&amp;nbsp;matches&amp;nbsp;the&amp;nbsp;package&amp;nbsp;names&amp;nbsp;of&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;is&lt;br&gt;
created&amp;nbsp;automatically&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory.&lt;br&gt;
&lt;br&gt;
Consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;command,&amp;nbsp;executed&amp;nbsp;from&amp;nbsp;the&amp;nbsp;c:\myproject\src&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;c:\myproject\build&amp;nbsp;.\com\sybex\payroll\Employee.java&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag&amp;nbsp;specifies&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory&amp;nbsp;as&amp;nbsp;c:\myproject\build&amp;nbsp;.&amp;nbsp;Assuming&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
compiles&amp;nbsp;successfully,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;creates&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;Employee.class&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
c:\myproject\build\com\sybex\payroll\Employee.class</questionanswer>
  </question>
  <question id="1_0_0_0_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compile&amp;nbsp;java&amp;nbsp;code&amp;nbsp;in&amp;nbsp;console,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;classpath&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Create&amp;nbsp;file&amp;nbsp;Program.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Program{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;arg){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(11*11);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Compile&amp;nbsp;code&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;Program.java&lt;br&gt;
Execute&amp;nbsp;:&amp;nbsp;java&amp;nbsp;Program&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;will&amp;nbsp;get&amp;nbsp;result&amp;nbsp;:&amp;nbsp;121&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;bin&amp;nbsp;-cp&amp;nbsp;libs/joda-time-2.2.jar&amp;nbsp;src/your/package/*.java&lt;br&gt;
This&amp;nbsp;assumes&amp;nbsp;you&amp;nbsp;run&amp;nbsp;it&amp;nbsp;in&amp;nbsp;your&amp;nbsp;project's&amp;nbsp;directory.&lt;br&gt;
(!!!&amp;nbsp;You&amp;nbsp;can&amp;nbsp;set&amp;nbsp;-cp&amp;nbsp;as&amp;nbsp;___&amp;nbsp;all&amp;nbsp;folder&amp;nbsp;___&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;-d&amp;nbsp;-cp&amp;nbsp;d:\lib\*&amp;nbsp;Program.java)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-d&amp;nbsp;flag&amp;nbsp;tells&amp;nbsp;javac&amp;nbsp;where&amp;nbsp;to&amp;nbsp;put&amp;nbsp;the&amp;nbsp;output&amp;nbsp;files.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;-cp&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;a&amp;nbsp;shorthand&amp;nbsp;for&amp;nbsp;-classpath.&amp;nbsp;I&amp;nbsp;got&amp;nbsp;these&amp;nbsp;parameters&lt;br&gt;
based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;.classpath&amp;nbsp;file&amp;nbsp;in&amp;nbsp;your&amp;nbsp;question.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;general&amp;nbsp;you&amp;nbsp;can&amp;nbsp;figure&amp;nbsp;out&amp;nbsp;what&amp;nbsp;is&amp;nbsp;needed&amp;nbsp;by&lt;br&gt;
reading&amp;nbsp;and&amp;nbsp;understanding&amp;nbsp;the&amp;nbsp;errors&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;javac.&lt;br&gt;
I&amp;nbsp;bet&amp;nbsp;you&amp;nbsp;got&amp;nbsp;many&amp;nbsp;cannot&amp;nbsp;find&amp;nbsp;symbol&amp;nbsp;errors&amp;nbsp;&lt;br&gt;
at&amp;nbsp;first,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;"symbols"&amp;nbsp;were&amp;nbsp;not&amp;nbsp;on&amp;nbsp;your&amp;nbsp;&lt;br&gt;
classpath,&amp;nbsp;so&amp;nbsp;javac&amp;nbsp;could&amp;nbsp;not&amp;nbsp;possibly&amp;nbsp;know&amp;nbsp;how&amp;nbsp;to&amp;nbsp;find&amp;nbsp;them.</questionanswer>
  </question>
  <question id="1_0_0_0_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;are&amp;nbsp;*.jar&amp;nbsp;files&amp;nbsp;?&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;.jar&amp;nbsp;file&amp;nbsp;with&amp;nbsp;bytecode&amp;nbsp;inside&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Bytecode&amp;nbsp;can&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;archived,&lt;br&gt;
compressed&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;known&amp;nbsp;as&amp;nbsp;JAR&amp;nbsp;files.&lt;br&gt;
JAR&amp;nbsp;is&amp;nbsp;short&amp;nbsp;for&amp;nbsp;Java&amp;nbsp;archive.&amp;nbsp;The&amp;nbsp;compiler&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;fi&amp;nbsp;nd&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;in&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;without&lt;br&gt;
needing&amp;nbsp;to&amp;nbsp;uncompress&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;onto&amp;nbsp;your&amp;nbsp;file&amp;nbsp;system.&lt;br&gt;
JAR&amp;nbsp;files&amp;nbsp;are&amp;nbsp;the&amp;nbsp;most&amp;nbsp;common&amp;nbsp;way&lt;br&gt;
to&amp;nbsp;distribute&amp;nbsp;Java&amp;nbsp;code,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;tests&amp;nbsp;your&lt;br&gt;
understanding&amp;nbsp;of&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;and&amp;nbsp;how&amp;nbsp;they&lt;br&gt;
relate&amp;nbsp;to&amp;nbsp;CLASSPATH.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;JDK&amp;nbsp;comes&amp;nbsp;with&amp;nbsp;the&amp;nbsp;tool&amp;nbsp;jar.exe&amp;nbsp;for&amp;nbsp;creating&lt;br&gt;
and&amp;nbsp;extracting&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;les.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;command&amp;nbsp;adds&lt;br&gt;
the&amp;nbsp;bytecode&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;of&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&lt;br&gt;
JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;named&amp;nbsp;myproject.jar&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
C:\myproject\build&amp;nbsp;&gt;&amp;nbsp;jar&amp;nbsp;-cvf&amp;nbsp;myproject.jar&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;ProgramLib.jar&amp;nbsp;file&amp;nbsp;on&amp;nbsp;Desktop(which&amp;nbsp;contains&amp;nbsp;class&amp;nbsp;Program)&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;file&amp;nbsp;/home/andrew/UsingProgramJava.java&amp;nbsp;,&amp;nbsp;which&amp;nbsp;use&amp;nbsp;Program&amp;nbsp;class&lt;br&gt;
&amp;nbsp;from&amp;nbsp;ProgramLib.jar&lt;br&gt;
&lt;br&gt;
Compilation:&lt;br&gt;
javac&amp;nbsp;-cp&amp;nbsp;~/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava.java&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Execution:&lt;br&gt;
java&amp;nbsp;-cp&amp;nbsp;.:/home/andrew/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
JAR&amp;nbsp;Files&amp;nbsp;and&amp;nbsp;Package&amp;nbsp;Names&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;class&amp;nbsp;is&amp;nbsp;in&amp;nbsp;a&amp;nbsp;package,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;must&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;.class&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;is&amp;nbsp;included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
Notice&amp;nbsp;in&amp;nbsp;the&amp;nbsp;verbose&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;jar&lt;br&gt;
command&amp;nbsp;shown&amp;nbsp;earlier,&amp;nbsp;the&amp;nbsp;necessary&amp;nbsp;\com&amp;nbsp;directory&lt;br&gt;
and&amp;nbsp;subdirectories&amp;nbsp;matching&amp;nbsp;our&lt;br&gt;
package&amp;nbsp;names&amp;nbsp;are&amp;nbsp;added&amp;nbsp;to&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;add&amp;nbsp;a&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;to&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;In&amp;nbsp;fact,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;common&amp;nbsp;to&amp;nbsp;have&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;JAR&lt;br&gt;
fi&amp;nbsp;les&amp;nbsp;in&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;demonstrates&lt;br&gt;
adding&amp;nbsp;myproject.jar&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;CLASSPATH&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Windows&amp;nbsp;machine,&amp;nbsp;then&amp;nbsp;running&amp;nbsp;the&amp;nbsp;&lt;br&gt;
TestColors&amp;nbsp;program&amp;nbsp;(which&amp;nbsp;is&amp;nbsp;in&lt;br&gt;
myproject.jar&amp;nbsp;):&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;set&amp;nbsp;CLASSPATH=c:\myproject\build\myproject.jar;&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;java&amp;nbsp;com.sybex.demos.TestColors</questionanswer>
  </question>
  <question id="1_0_0_0_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;-&amp;nbsp;Line&amp;nbsp;Arguments&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.exe&amp;nbsp;executable&amp;nbsp;starts&amp;nbsp;the&amp;nbsp;JVM,&amp;nbsp;and&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;you&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;name&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;main&amp;nbsp;method.&amp;nbsp;The&amp;nbsp;command-line&lt;br&gt;
arguments&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;main&amp;nbsp;method&amp;nbsp;as&amp;nbsp;a&amp;nbsp;single&amp;nbsp;array&amp;nbsp;of&amp;nbsp;String&amp;nbsp;objects.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;PrintGreetings&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;main&lt;br&gt;
and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;executed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;in&amp;nbsp;Figure&amp;nbsp;1.4&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
java&amp;nbsp;com.sybex.demos.PrintGreetings&amp;nbsp;hi&amp;nbsp;goodbye&amp;nbsp;see&amp;nbsp;you&amp;nbsp;later&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;com.sybex.demos;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;PrintGreetings&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;args.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(args[i]);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Result&amp;nbsp;:&lt;br&gt;
hi&lt;br&gt;
goodbye&lt;br&gt;
see&lt;br&gt;
you&lt;br&gt;
later&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
All&amp;nbsp;command&amp;nbsp;-&amp;nbsp;line&amp;nbsp;arguments&amp;nbsp;are&amp;nbsp;treated&amp;nbsp;as&amp;nbsp;String&lt;br&gt;
objects,&amp;nbsp;even&amp;nbsp;if&amp;nbsp;they&amp;nbsp;represent&amp;nbsp;another&amp;nbsp;data&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;wrapper&lt;br&gt;
classes&amp;nbsp;in&amp;nbsp;java.lang&amp;nbsp;contain&amp;nbsp;helpful&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;parsing&lt;br&gt;
strings&amp;nbsp;into&amp;nbsp;other&amp;nbsp;data&amp;nbsp;types.</questionanswer>
  </question>
  <question id="1_0_0_0_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reference&amp;nbsp;vs.&amp;nbsp;Primitive&amp;nbsp;Types&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;applications&amp;nbsp;contain&amp;nbsp;two&amp;nbsp;types&amp;nbsp;of&amp;nbsp;data:&amp;nbsp;primitive&amp;nbsp;types&lt;br&gt;
and&amp;nbsp;reference&amp;nbsp;types&amp;nbsp;.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;section,&amp;nbsp;we&amp;nbsp;will&amp;nbsp;discuss&amp;nbsp;the&amp;nbsp;differences&lt;br&gt;
between&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
Primitive&amp;nbsp;Types&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;eight&amp;nbsp;built-in&amp;nbsp;data&amp;nbsp;types,&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;.&lt;br&gt;
byte&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;?128&amp;nbsp;to&amp;nbsp;127&lt;br&gt;
short&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;?32768&amp;nbsp;to&amp;nbsp;32767&lt;br&gt;
int&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;?2147483648&amp;nbsp;to&amp;nbsp;2147483647&lt;br&gt;
long&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;?9223372036854775808&amp;nbsp;to&amp;nbsp;9223372036854775807&lt;br&gt;
float&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;2?149&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;?&amp;nbsp;2?23)&amp;nbsp;?&amp;nbsp;2127&lt;br&gt;
double&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;2?1074&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;?&amp;nbsp;2?52)&amp;nbsp;?&amp;nbsp;21023&lt;br&gt;
char&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;'\u0000'&amp;nbsp;to&amp;nbsp;'\uffff'&amp;nbsp;(0&amp;nbsp;to&amp;nbsp;65535)&lt;br&gt;
boolean&amp;nbsp;unspecified&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Not&amp;nbsp;all&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;Don&amp;nbsp;?&amp;nbsp;t&amp;nbsp;try&amp;nbsp;to&amp;nbsp;memorize&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&amp;nbsp;values&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;long&amp;nbsp;,&amp;nbsp;float&amp;nbsp;,&amp;nbsp;or&amp;nbsp;double&amp;nbsp;,&amp;nbsp;but&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;know&amp;nbsp;their&amp;nbsp;size&amp;nbsp;in&amp;nbsp;bits.&amp;nbsp;However,&amp;nbsp;you&lt;br&gt;
should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;state&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;byte&amp;nbsp;exactly&amp;nbsp;and&amp;nbsp;recognize&amp;nbsp;when&amp;nbsp;a&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int&amp;nbsp;has&amp;nbsp;likely&amp;nbsp;gone&lt;br&gt;
beyond&amp;nbsp;its&amp;nbsp;range.&amp;nbsp;Expect&amp;nbsp;a&amp;nbsp;question&amp;nbsp;involving&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;a&amp;nbsp;char&amp;nbsp;,&lt;br&gt;
especially&amp;nbsp;because&amp;nbsp;a&amp;nbsp;char&amp;nbsp;in&amp;nbsp;C/C++&amp;nbsp;is&amp;nbsp;only&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;and&lt;br&gt;
uses&amp;nbsp;the&amp;nbsp;ASCII&amp;nbsp;format,&amp;nbsp;while&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;char&amp;nbsp;is&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;and&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;UNICODE&amp;nbsp;format.&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
Reference&amp;nbsp;Types&lt;br&gt;
Reference&amp;nbsp;types&amp;nbsp;are&amp;nbsp;variables&amp;nbsp;that&amp;nbsp;are&amp;nbsp;class&amp;nbsp;types,&amp;nbsp;interface&amp;nbsp;types,&amp;nbsp;and&amp;nbsp;array&amp;nbsp;types.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;(an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class).&amp;nbsp;Unlike&lt;br&gt;
primitive&amp;nbsp;types&amp;nbsp;that&amp;nbsp;hold&amp;nbsp;their&amp;nbsp;values&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;where&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;allocated,&lt;br&gt;
references&amp;nbsp;do&amp;nbsp;not&amp;nbsp;hold&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;they&amp;nbsp;refer&amp;nbsp;to.&amp;nbsp;Instead,&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;?&amp;nbsp;points&amp;nbsp;?&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;by&amp;nbsp;storing&amp;nbsp;the&amp;nbsp;memory&lt;br&gt;
address&amp;nbsp;where&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;located,&amp;nbsp;a&amp;nbsp;concept&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;pointer&amp;nbsp;.&lt;br&gt;
However,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&amp;nbsp;does&amp;nbsp;not&amp;nbsp;allow&amp;nbsp;a&amp;nbsp;programmer&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&lt;br&gt;
physical&amp;nbsp;memory&amp;nbsp;address&amp;nbsp;in&amp;nbsp;any&amp;nbsp;way,&amp;nbsp;so&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;a&amp;nbsp;pointer,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;use&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;gain&amp;nbsp;access&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;it&amp;nbsp;refers&amp;nbsp;to.&amp;nbsp;&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;address&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;of&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;variable.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;?&amp;nbsp;s&amp;nbsp;take&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;some&amp;nbsp;examples&amp;nbsp;that&amp;nbsp;declare&amp;nbsp;and&amp;nbsp;initialize&amp;nbsp;reference&amp;nbsp;types.&amp;nbsp;Suppose&lt;br&gt;
we&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Date&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
java.util.Date&amp;nbsp;today;&lt;br&gt;
String&amp;nbsp;greeting;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;today&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Date&amp;nbsp;object.&amp;nbsp;The&lt;br&gt;
greeting&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;that&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;value&amp;nbsp;is&amp;nbsp;assigned&lt;br&gt;
to&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;in&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;ways:&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;type.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;using&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;assign&amp;nbsp;these&amp;nbsp;references&amp;nbsp;to&amp;nbsp;new&amp;nbsp;objects:&lt;br&gt;
&lt;br&gt;
today&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.util.Date();&lt;br&gt;
greeting&amp;nbsp;=&amp;nbsp;?How&amp;nbsp;are&amp;nbsp;you??;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
In&amp;nbsp;addition,&amp;nbsp;__&amp;nbsp;arrays&amp;nbsp;__&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;have&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;Java&lt;br&gt;
language&amp;nbsp;implicitly&amp;nbsp;defi&amp;nbsp;nes&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type&amp;nbsp;for&amp;nbsp;each&amp;nbsp;possible&amp;nbsp;array&amp;nbsp;type:&amp;nbsp;one&amp;nbsp;for&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
eight&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;and&amp;nbsp;also&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;array.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;references&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;type:&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;[]&amp;nbsp;grades;&lt;br&gt;
String&amp;nbsp;[]&amp;nbsp;args;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(&amp;nbsp;&amp;nbsp;):&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;imas&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[]{1,1,1};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(imas.length);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer[]&amp;nbsp;Imas2&amp;nbsp;=&amp;nbsp;imas;&amp;nbsp;//&amp;nbsp;!!!!!!!!!!!!!&amp;nbsp;Error&amp;nbsp;required:&amp;nbsp;Integer[]&amp;nbsp;found:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int[]&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;can&amp;nbsp;also&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;their&amp;nbsp;data&amp;nbsp;types&amp;nbsp;are&lt;br&gt;
compatible.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;assigns&amp;nbsp;two&amp;nbsp;ArrayList&amp;nbsp;references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other:&lt;br&gt;
&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a1&amp;nbsp;=&lt;br&gt;
new&amp;nbsp;java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a2&amp;nbsp;=&amp;nbsp;a1;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;references&amp;nbsp;a1&amp;nbsp;and&amp;nbsp;a2&amp;nbsp;both&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;an&amp;nbsp;ArrayList&amp;nbsp;that&amp;nbsp;contains&lt;br&gt;
Integer&amp;nbsp;objects.&amp;nbsp;(Two&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object&amp;nbsp;is&amp;nbsp;a&amp;nbsp;common&amp;nbsp;occurrence&amp;nbsp;in&lt;br&gt;
Java.)&amp;nbsp;The&amp;nbsp;ArrayList&amp;nbsp;object&amp;nbsp;can&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;using&amp;nbsp;either&amp;nbsp;reference.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;?&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;different&amp;nbsp;example.&amp;nbsp;Examine&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;that&amp;nbsp;assigns&amp;nbsp;two&lt;br&gt;
references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other&amp;nbsp;and&amp;nbsp;determine&amp;nbsp;if&amp;nbsp;it&amp;nbsp;compiles&amp;nbsp;successfully:&lt;br&gt;
&lt;br&gt;
java.math.BigDecimal&amp;nbsp;bd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.math.BigDecimal(2.75);&lt;br&gt;
String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;bd;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;bd&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;BigDecimal&amp;nbsp;,&amp;nbsp;and&amp;nbsp;s&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;.&amp;nbsp;These&amp;nbsp;two&amp;nbsp;classes&amp;nbsp;are&lt;br&gt;
not&amp;nbsp;compatible,&amp;nbsp;so&amp;nbsp;assigning&amp;nbsp;s&amp;nbsp;to&amp;nbsp;bd&amp;nbsp;generates&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;error:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
The&amp;nbsp;null&amp;nbsp;Type&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;a&amp;nbsp;special&amp;nbsp;data&amp;nbsp;type&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;for&amp;nbsp;null&amp;nbsp;.&amp;nbsp;The&amp;nbsp;null&amp;nbsp;type&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;be&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type.&amp;nbsp;However,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;assign&amp;nbsp;any&amp;nbsp;reference&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type:&lt;br&gt;
String&amp;nbsp;firstName&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Primitive&amp;nbsp;types&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;null&amp;nbsp;,&amp;nbsp;only&amp;nbsp;references.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;valid:&lt;br&gt;
int&amp;nbsp;x=&amp;nbsp;null;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile</questionanswer>
  </question>
  <question id="1_0_0_0_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;Literals&amp;nbsp;and&amp;nbsp;the&amp;nbsp;String&amp;nbsp;Pool&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Which&amp;nbsp;GOF&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;related&amp;nbsp;to&amp;nbsp;String&amp;nbsp;poll&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;new&amp;nbsp;keyword&amp;nbsp;is&amp;nbsp;not&amp;nbsp;required&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you?&amp;#8221;&amp;nbsp;because&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;string&amp;nbsp;literal.&amp;nbsp;String&amp;nbsp;literals&amp;nbsp;get&amp;nbsp;special&amp;nbsp;treatment&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Behind&amp;nbsp;the&amp;nbsp;scenes,&lt;br&gt;
the&amp;nbsp;JVM&amp;nbsp;instantiates&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object&amp;nbsp;for&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;you?&amp;#8221;&amp;nbsp;and&amp;nbsp;stores&amp;nbsp;it&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;pool.&lt;br&gt;
The&amp;nbsp;greeting&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;this&amp;nbsp;String&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;Because&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;immutable&amp;nbsp;(which&amp;nbsp;means&amp;nbsp;they&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;changed),&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optimize&amp;nbsp;the&lt;br&gt;
use&amp;nbsp;of&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;by&amp;nbsp;allowing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;two&amp;nbsp;String&amp;nbsp;references&amp;nbsp;actually&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pool,&amp;nbsp;as&lt;br&gt;
shown&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;might&amp;nbsp;think&amp;nbsp;if&amp;nbsp;the&amp;nbsp;two&amp;nbsp;references&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;then&amp;nbsp;changing&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;one&amp;nbsp;object&lt;br&gt;
would&amp;nbsp;inadvertently&amp;nbsp;change&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;other.&amp;nbsp;But&amp;nbsp;String&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable,&amp;nbsp;so&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;only&amp;nbsp;changes&amp;nbsp;s2:&lt;br&gt;
&lt;br&gt;
s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;s2&amp;nbsp;now&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;,&amp;nbsp;but&amp;nbsp;s1&amp;nbsp;still&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='680'&amp;nbsp;height='600'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/java_string_pool.png'/&gt;&lt;br&gt;
&lt;br&gt;
!!!!!&amp;nbsp;___&amp;nbsp;Stackofervlow:&lt;br&gt;
The&amp;nbsp;string&amp;nbsp;pool&amp;nbsp;is&amp;nbsp;the&amp;nbsp;JVM's&amp;nbsp;particular&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;interning:&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;science,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;a&amp;nbsp;method&amp;nbsp;of&amp;nbsp;storing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;each&amp;nbsp;distinct&amp;nbsp;string&amp;nbsp;value,&amp;nbsp;which&amp;nbsp;must&amp;nbsp;be&amp;nbsp;immutable.&amp;nbsp;Interning&amp;nbsp;strings&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;makes&amp;nbsp;some&amp;nbsp;string&amp;nbsp;processing&amp;nbsp;tasks&amp;nbsp;more&amp;nbsp;time-&amp;nbsp;or&amp;nbsp;space-efficient&amp;nbsp;at&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;requiring&amp;nbsp;more&amp;nbsp;time&amp;nbsp;when&amp;nbsp;the&amp;nbsp;string&amp;nbsp;is&amp;nbsp;created&amp;nbsp;or&amp;nbsp;interned.&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;distinct&amp;nbsp;values&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool.&lt;br&gt;
&lt;br&gt;
Basically,&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;runtime&amp;nbsp;to&amp;nbsp;save&amp;nbsp;memory&amp;nbsp;by&amp;nbsp;preserving&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable&amp;nbsp;strings&amp;nbsp;in&amp;nbsp;a&amp;nbsp;pool&amp;nbsp;so&amp;nbsp;that&amp;nbsp;areas&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&amp;nbsp;can&amp;nbsp;reuse&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;common&amp;nbsp;strings&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;multiple&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;an&amp;nbsp;interesting&amp;nbsp;side&amp;nbsp;note,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;flyweight&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;design&amp;nbsp;pattern:&lt;br&gt;
&lt;br&gt;
__&amp;nbsp;Flyweight&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern.&amp;nbsp;A&amp;nbsp;flyweight&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&lt;br&gt;
that&amp;nbsp;minimizes&amp;nbsp;memory&amp;nbsp;use&amp;nbsp;by&amp;nbsp;sharing&amp;nbsp;as&amp;nbsp;much&amp;nbsp;data&amp;nbsp;as&amp;nbsp;possible&lt;br&gt;
with&amp;nbsp;other&amp;nbsp;similar&amp;nbsp;objects;&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;use&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;large&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;repeated&amp;nbsp;representation&amp;nbsp;would&amp;nbsp;use&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unacceptable&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_0_0:12" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Garbage&amp;nbsp;Collection&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
Describe&amp;nbsp;System.gc()&amp;nbsp;&amp;nbsp;method.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>All&amp;nbsp;Java&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;your&amp;nbsp;program&amp;nbsp;memory?s&amp;nbsp;heap.&lt;br&gt;
The&amp;nbsp;heap,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;also&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;&amp;nbsp;free&amp;nbsp;store,&lt;br&gt;
represents&amp;nbsp;a&amp;nbsp;large&amp;nbsp;pool&amp;nbsp;of&amp;nbsp;unused&amp;nbsp;memory&amp;nbsp;allocated&amp;nbsp;to&amp;nbsp;your&amp;nbsp;&lt;br&gt;
Java&amp;nbsp;application.&amp;nbsp;The&amp;nbsp;heap&amp;nbsp;may&amp;nbsp;be&amp;nbsp;quite&amp;nbsp;large,&amp;nbsp;depending&lt;br&gt;
on&amp;nbsp;your&amp;nbsp;environment,&amp;nbsp;but&amp;nbsp;there&amp;nbsp;is&amp;nbsp;always&amp;nbsp;a&amp;nbsp;limit&amp;nbsp;to&amp;nbsp;its&amp;nbsp;size.&amp;nbsp;If&lt;br&gt;
your&amp;nbsp;program&amp;nbsp;keeps&amp;nbsp;instantiating&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;leaving&amp;nbsp;them&amp;nbsp;on&amp;nbsp;&lt;br&gt;
the&amp;nbsp;heap,&amp;nbsp;eventually&amp;nbsp;it&amp;nbsp;will&amp;nbsp;run&amp;nbsp;out&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
Garbage&amp;nbsp;collection&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;process&amp;nbsp;of&amp;nbsp;automatically&lt;br&gt;
freeing&amp;nbsp;memory&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap&amp;nbsp;by&amp;nbsp;deleting&lt;br&gt;
objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;reachable&amp;nbsp;in&amp;nbsp;your&amp;nbsp;program.&amp;nbsp;Every&lt;br&gt;
JVM&amp;nbsp;has&amp;nbsp;a&amp;nbsp;garbage&amp;nbsp;collector,&amp;nbsp;and&amp;nbsp;many&lt;br&gt;
different&amp;nbsp;algorithms&amp;nbsp;are&amp;nbsp;used&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;efficiency&amp;nbsp;and&amp;nbsp;timing&amp;nbsp;of&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collection.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;&lt;b&gt;&amp;nbsp;new&amp;nbsp;&lt;/b&gt;&amp;nbsp;keyword&amp;nbsp;instantiates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;heap&amp;nbsp;and&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object.&amp;nbsp;Typically&lt;br&gt;
you&amp;nbsp;will&amp;nbsp;save&amp;nbsp;that&amp;nbsp;object?s&amp;nbsp;reference&amp;nbsp;in&amp;nbsp;a&amp;nbsp;variable.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;will&amp;nbsp;remain&amp;nbsp;on&amp;nbsp;&lt;br&gt;
the&amp;nbsp;heap&amp;nbsp;until&amp;nbsp;it&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;reachable.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;is&amp;nbsp;no&lt;br&gt;
longer&amp;nbsp;reachable&amp;nbsp;when&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;situations&amp;nbsp;occurs:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;object&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;has&amp;nbsp;any&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;All&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&amp;nbsp;have&amp;nbsp;gone&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
Objects&amp;nbsp;vs.&amp;nbsp;References&lt;br&gt;
Do&amp;nbsp;not&amp;nbsp;confuse&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;with&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;it&amp;nbsp;refers&amp;nbsp;to.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;two&amp;nbsp;different&amp;nbsp;enti-ties.&amp;nbsp;The&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;has&lt;br&gt;
a&amp;nbsp;name&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&amp;nbsp;contents&amp;nbsp;&lt;br&gt;
of&amp;nbsp;an&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference,&lt;br&gt;
passed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;method,&amp;nbsp;or&amp;nbsp;returned&amp;nbsp;from&amp;nbsp;a&amp;nbsp;method.&lt;br&gt;
All&amp;nbsp;references&amp;nbsp;are&amp;nbsp;the&amp;nbsp;same&amp;nbsp;size,&amp;nbsp;no&amp;nbsp;matter&amp;nbsp;what&amp;nbsp;their&amp;nbsp;type&amp;nbsp;is.&amp;nbsp;&lt;br&gt;
A&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;most&amp;nbsp;likely&amp;nbsp;32&amp;nbsp;bits,&amp;nbsp;but&amp;nbsp;their&amp;nbsp;actual&amp;nbsp;size&amp;nbsp;depends&amp;nbsp;on&amp;nbsp;your&amp;nbsp;JVM.&amp;nbsp;&lt;br&gt;
An&amp;nbsp;object&amp;nbsp;sits&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap&amp;nbsp;and&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name.&lt;br&gt;
Therefore,&amp;nbsp;you&amp;nbsp;have&amp;nbsp;no&amp;nbsp;way&amp;nbsp;to&amp;nbsp;access&amp;nbsp;an&amp;nbsp;object&amp;nbsp;except&lt;br&gt;
through&amp;nbsp;a&amp;nbsp;reference.&amp;nbsp;Objects&amp;nbsp;come&amp;nbsp;in&amp;nbsp;all&amp;nbsp;different&amp;nbsp;shapes&amp;nbsp;and&amp;nbsp;&lt;br&gt;
sizes&amp;nbsp;and&amp;nbsp;consume&amp;nbsp;varying&amp;nbsp;amounts&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;An&amp;nbsp;object&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;object,&amp;nbsp;nor&amp;nbsp;can&amp;nbsp;an&amp;nbsp;object&amp;nbsp;be&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
method&amp;nbsp;or&amp;nbsp;returned&amp;nbsp;from&amp;nbsp;a&amp;nbsp;method.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;garbage&lt;br&gt;
collected,&amp;nbsp;not&amp;nbsp;its&amp;nbsp;reference.&lt;br&gt;
=========================&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.GregorianCalendar;&lt;br&gt;
2.&amp;nbsp;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GCDemo&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GregorianCalendar&amp;nbsp;christmas,&amp;nbsp;newyears;&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2009,12,25);&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newyears&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2010,1,1);&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;newyears;&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GregorianCalendar&amp;nbsp;d&amp;nbsp;=&amp;nbsp;christmas;&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;christmas&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;two&amp;nbsp;GregorianCalendar&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;created&amp;nbsp;on&amp;nbsp;lines&amp;nbsp;6&amp;nbsp;and&amp;nbsp;7,&amp;nbsp;resulting&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
references&amp;nbsp;and&amp;nbsp;objects&lt;br&gt;
On&amp;nbsp;line&amp;nbsp;9,&amp;nbsp;the&amp;nbsp;christmas&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;newyears,&lt;br&gt;
which&amp;nbsp;results&amp;nbsp;in&amp;nbsp;no&amp;nbsp;more&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
from&amp;nbsp;line&amp;nbsp;6,&amp;nbsp;so&amp;nbsp;this&amp;nbsp;object&amp;nbsp;immediately&amp;nbsp;becomes&amp;nbsp;available&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
collection&amp;nbsp;after&amp;nbsp;line&amp;nbsp;9.&amp;nbsp;There&amp;nbsp;is&amp;nbsp;now&amp;nbsp;only&amp;nbsp;one&amp;nbsp;GregorianCalendar&lt;br&gt;
object&amp;nbsp;(from&amp;nbsp;line&amp;nbsp;7)&amp;nbsp;reachable&amp;nbsp;in&amp;nbsp;memory,&amp;nbsp;and&amp;nbsp;after&amp;nbsp;line&amp;nbsp;10&lt;br&gt;
there&amp;nbsp;are&amp;nbsp;three&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it&lt;br&gt;
Setting&amp;nbsp;christmas&amp;nbsp;to&amp;nbsp;null&amp;nbsp;on&amp;nbsp;line&amp;nbsp;11&amp;nbsp;does&amp;nbsp;not&amp;nbsp;cause&amp;nbsp;the&amp;nbsp;object&amp;nbsp;from&lt;br&gt;
line&amp;nbsp;7&amp;nbsp;to&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&lt;br&gt;
because&amp;nbsp;there&amp;nbsp;are&amp;nbsp;still&amp;nbsp;two&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;it:&amp;nbsp;dand&amp;nbsp;&lt;br&gt;
newyears&amp;nbsp;.&amp;nbsp;However,&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12&amp;nbsp;the&amp;nbsp;mainmethod&amp;nbsp;ends&amp;nbsp;and&amp;nbsp;both&lt;br&gt;
dand&amp;nbsp;newyears&amp;nbsp;go&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;7&amp;nbsp;becomes&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
What&amp;nbsp;does&amp;nbsp;it&amp;nbsp;mean&amp;nbsp;to&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection?&lt;br&gt;
Why&amp;nbsp;not&amp;nbsp;simply&amp;nbsp;have&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;immediately&lt;br&gt;
free&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;instead?&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;that&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;&lt;br&gt;
guarantee&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;as&amp;nbsp;to&amp;nbsp;exactly&amp;nbsp;when&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;garbage&lt;br&gt;
collected.&amp;nbsp;The&amp;nbsp;JVM&amp;nbsp;specification&amp;nbsp;does&amp;nbsp;not&amp;nbsp;define&amp;nbsp;how&amp;nbsp;a&lt;br&gt;
garbage&amp;nbsp;collector&amp;nbsp;accomplishes&amp;nbsp;the&amp;nbsp;task&amp;nbsp;of&amp;nbsp;freeing&amp;nbsp;&lt;br&gt;
memory.&amp;nbsp;The&amp;nbsp;specification&amp;nbsp;only&amp;nbsp;states&amp;nbsp;that&amp;nbsp;when&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&lt;br&gt;
eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection,&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;must&lt;br&gt;
eventually&amp;nbsp;free&amp;nbsp;the&amp;nbsp;memory.&amp;nbsp;As&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;coder,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;specifically&lt;br&gt;
free&amp;nbsp;memory&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;only&amp;nbsp;ensure&amp;nbsp;that&lt;br&gt;
your&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;you&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;want&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;are&lt;br&gt;
no&amp;nbsp;longer&amp;nbsp;reachable.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;you&amp;nbsp;don?t&amp;nbsp;have&lt;br&gt;
any&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;are&amp;nbsp;still&amp;nbsp;in&amp;nbsp;scope.&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
The&amp;nbsp;System.gc&amp;nbsp;Method&amp;nbsp;&lt;br&gt;
The&amp;nbsp;java.lang.System&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;called&lt;br&gt;
gc&amp;nbsp;that&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;run&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector.&amp;nbsp;System.gc&amp;nbsp;is&lt;br&gt;
the&amp;nbsp;only&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;API&amp;nbsp;that&amp;nbsp;communicates&amp;nbsp;with&amp;nbsp;the&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collector.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;what&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;SE&amp;nbsp;API&amp;nbsp;documentation&lt;br&gt;
says&amp;nbsp;about&amp;nbsp;the&amp;nbsp;System.gc&amp;nbsp;method:&lt;br&gt;
&lt;br&gt;
Calling&amp;nbsp;the&amp;nbsp;gc&amp;nbsp;method&amp;nbsp;suggests&amp;nbsp;that&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;Machine&amp;nbsp;expend&amp;nbsp;&lt;br&gt;
effort&amp;nbsp;toward&amp;nbsp;recycling&amp;nbsp;unused&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;they&amp;nbsp;&lt;br&gt;
currently&amp;nbsp;occupy&amp;nbsp;available&amp;nbsp;for&amp;nbsp;quick&amp;nbsp;reuse.&amp;nbsp;When&amp;nbsp;control&amp;nbsp;returns&amp;nbsp;from&amp;nbsp;the&amp;nbsp;&lt;br&gt;
method&amp;nbsp;call,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;Machine&amp;nbsp;has&amp;nbsp;made&amp;nbsp;a&amp;nbsp;best&amp;nbsp;effort&amp;nbsp;to&amp;nbsp;reclaim&amp;nbsp;&lt;br&gt;
space&amp;nbsp;from&amp;nbsp;all&amp;nbsp;discarded&amp;nbsp;objects.&lt;br&gt;
&lt;br&gt;
!!!!!&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;the&amp;nbsp;gc&amp;nbsp;method&amp;nbsp;does&amp;nbsp;not&amp;nbsp;guarantee&amp;nbsp;anything!&lt;br&gt;
The&amp;nbsp;method&amp;nbsp;might&amp;nbsp;be&amp;nbsp;useful&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;familiar&amp;nbsp;with&lt;br&gt;
the&amp;nbsp;intricate&amp;nbsp;details&amp;nbsp;of&amp;nbsp;your&amp;nbsp;JVM&amp;nbsp;and&amp;nbsp;how&amp;nbsp;it&amp;nbsp;implements&amp;nbsp;this&amp;nbsp;method.&lt;br&gt;
But&amp;nbsp;the&amp;nbsp;end&amp;nbsp;result&amp;nbsp;is&amp;nbsp;that&amp;nbsp;as&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;programmer&amp;nbsp;you&amp;nbsp;cannot&lt;br&gt;
free&amp;nbsp;memory&amp;nbsp;specifically&amp;nbsp;in&amp;nbsp;your&amp;nbsp;code.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;only&lt;br&gt;
ensure&amp;nbsp;that&amp;nbsp;your&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection,&amp;nbsp;and&amp;nbsp;then&lt;br&gt;
assume&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&amp;nbsp;will&amp;nbsp;do&amp;nbsp;its&amp;nbsp;job!&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(with&amp;nbsp;gc&amp;nbsp;and&amp;nbsp;finalize&amp;nbsp;methods&amp;nbsp;)&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Dog&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Dog(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
7.&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(name&amp;nbsp;+&amp;nbsp;?&amp;nbsp;is&amp;nbsp;being&amp;nbsp;garbage&amp;nbsp;collected?);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.Vector;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GCDemo3&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;Vector&amp;nbsp;&lt;&amp;nbsp;Dog&amp;nbsp;&gt;&amp;nbsp;vector&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Vector&amp;nbsp;&lt;&amp;nbsp;Dog&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
5.&amp;nbsp;Dog&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dog(?Snoopy?,&amp;nbsp;10);&lt;br&gt;
6.&amp;nbsp;Dog&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dog(?Lassie?,&amp;nbsp;12);&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;vector.add(one);&lt;br&gt;
9.&amp;nbsp;vector.add(two);&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;one&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;once...?);&lt;br&gt;
13.&amp;nbsp;System.gc();&lt;br&gt;
14.&lt;br&gt;
15.&amp;nbsp;vector&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
16.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;twice...?);&lt;br&gt;
17.&amp;nbsp;System.gc();&lt;br&gt;
18.&lt;br&gt;
19.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
20.&amp;nbsp;System.out.println(?Calling&amp;nbsp;gc&amp;nbsp;again...?);&lt;br&gt;
21.&amp;nbsp;System.gc();&lt;br&gt;
22.&amp;nbsp;System.out.println(?End&amp;nbsp;of&amp;nbsp;main...?);&lt;br&gt;
23.&lt;br&gt;
24.&amp;nbsp;}&lt;br&gt;
25.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;once...&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;twice...&lt;br&gt;
Calling&amp;nbsp;gc&amp;nbsp;again...&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;main...&lt;br&gt;
Lassie&amp;nbsp;is&amp;nbsp;being&amp;nbsp;garbage&amp;nbsp;collected&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;gc&amp;nbsp;are&amp;nbsp;an&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;force&amp;nbsp;garbage&amp;nbsp;collection&lt;br&gt;
so&amp;nbsp;we&amp;nbsp;can&amp;nbsp;see&amp;nbsp;when&amp;nbsp;finalize&amp;nbsp;is&amp;nbsp;invoked&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Dog&amp;nbsp;objects.&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;step&amp;nbsp;is&amp;nbsp;determining&amp;nbsp;when&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;&lt;br&gt;
garbage&amp;nbsp;collection.&amp;nbsp;Adding&amp;nbsp;the&amp;nbsp;two&amp;nbsp;Dogobjects&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Vector&lt;br&gt;
creates&amp;nbsp;additional&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;objects.&amp;nbsp;&lt;br&gt;
On&amp;nbsp;line&amp;nbsp;11&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;one&amp;nbsp;is&amp;nbsp;set&amp;nbsp;to&amp;nbsp;null&amp;nbsp;,&amp;nbsp;but&amp;nbsp;Snoopy&amp;nbsp;is&amp;nbsp;not&lt;br&gt;
eligible&amp;nbsp;yet&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;because&amp;nbsp;of&amp;nbsp;line&amp;nbsp;8.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;Vector&amp;nbsp;still&amp;nbsp;has&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Snoopy&amp;nbsp;object&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;when&amp;nbsp;you&amp;nbsp;set&amp;nbsp;vector&amp;nbsp;to&amp;nbsp;null&amp;nbsp;on&amp;nbsp;line&amp;nbsp;15,&lt;br&gt;
it&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;Snoopy&amp;nbsp;object&amp;nbsp;to&amp;nbsp;immediately&amp;nbsp;become&amp;nbsp;eligible&lt;br&gt;
for&amp;nbsp;garbage&amp;nbsp;collection.&amp;nbsp;The&amp;nbsp;Lassie&amp;nbsp;object&amp;nbsp;still&amp;nbsp;has&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;two&lt;br&gt;
pointing&amp;nbsp;to&amp;nbsp;it,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;until&amp;nbsp;after&amp;nbsp;line&amp;nbsp;19.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;a&amp;nbsp;&lt;br&gt;
sample&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;GCDemo3&amp;nbsp;program.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
The&amp;nbsp;finalizeMethod&amp;nbsp;Is&amp;nbsp;Only&amp;nbsp;Invoked&amp;nbsp;Once&lt;br&gt;
Expect&amp;nbsp;at&amp;nbsp;least&amp;nbsp;one&amp;nbsp;question&amp;nbsp;on&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;about&amp;nbsp;the&lt;br&gt;
finalize&amp;nbsp;method.&amp;nbsp;Keep&amp;nbsp;in&amp;nbsp;mind&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;called&amp;nbsp;once&lt;br&gt;
on&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;only&amp;nbsp;gets&amp;nbsp;called&amp;nbsp;by&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector&lt;br&gt;
after&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;but&amp;nbsp;before&lt;br&gt;
the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;garbage&amp;nbsp;collected.</questionanswer>
  </question>
  <question id="1_0_0_0_0:13" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Passing&amp;nbsp;arguments&amp;nbsp;to&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;pass&amp;nbsp;all&amp;nbsp;arguments&amp;nbsp;by&amp;nbsp;value,&amp;nbsp;References&amp;nbsp;are&amp;nbsp;also&amp;nbsp;passed&amp;nbsp;by&amp;nbsp;value&amp;nbsp;=)&lt;br&gt;
&lt;br&gt;
Passing&amp;nbsp;Primitives&amp;nbsp;vs.&amp;nbsp;Passing&amp;nbsp;References&lt;br&gt;
&lt;br&gt;
Sun&amp;nbsp;seems&amp;nbsp;to&amp;nbsp;enjoy&amp;nbsp;questions&amp;nbsp;on&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;regarding&amp;nbsp;call&amp;nbsp;by&amp;nbsp;value&lt;br&gt;
and&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;change&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;argument.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type,&amp;nbsp;it&lt;br&gt;
is&amp;nbsp;impossible&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;for&amp;nbsp;the&amp;nbsp;method&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;original&amp;nbsp;primitive.&amp;nbsp;&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type,&amp;nbsp;the&amp;nbsp;same&amp;nbsp;rule&amp;nbsp;&lt;br&gt;
applies:&amp;nbsp;___&amp;nbsp;it&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;for&amp;nbsp;a&amp;nbsp;method&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;the&amp;nbsp;original&amp;nbsp;reference&amp;nbsp;___&amp;nbsp;!!!.&amp;nbsp;&lt;br&gt;
However,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;&amp;nbsp;method&amp;nbsp;now&amp;nbsp;has&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
object&amp;nbsp;that&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;points&amp;nbsp;to,&amp;nbsp;the&amp;nbsp;method&amp;nbsp;&lt;br&gt;
can&amp;nbsp;change&amp;nbsp;the&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;an&amp;nbsp;important&amp;nbsp;difference&amp;nbsp;to&amp;nbsp;understand.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;know&amp;nbsp;"&amp;nbsp;the&amp;nbsp;effect&amp;nbsp;upon&amp;nbsp;object&amp;nbsp;references&amp;nbsp;and&amp;nbsp;&lt;br&gt;
primitive&amp;nbsp;values&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;perform&amp;nbsp;assignments&amp;nbsp;or&amp;nbsp;other&amp;nbsp;&lt;br&gt;
modifying&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;the&amp;nbsp;parameters.&amp;nbsp;"&amp;nbsp;A&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called&amp;nbsp;&lt;br&gt;
an&amp;nbsp;&amp;nbsp;argument&amp;nbsp;.&amp;nbsp;___&amp;nbsp;Java&amp;nbsp;simplifies&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;passing&amp;nbsp;arguments&amp;nbsp;into&amp;nbsp;methods&amp;nbsp;by&amp;nbsp;providing&amp;nbsp;&lt;br&gt;
only&amp;nbsp;one&amp;nbsp;way&amp;nbsp;to&amp;nbsp;pass&amp;nbsp;arguments:&amp;nbsp;by&amp;nbsp;value.&amp;nbsp;Passing&amp;nbsp;arguments&amp;nbsp;&amp;nbsp;by&amp;nbsp;valuemeans&amp;nbsp;that&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;method&amp;nbsp;___.&amp;nbsp;Method&amp;nbsp;return&amp;nbsp;values&amp;nbsp;are&amp;nbsp;also&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;value,&amp;nbsp;&lt;br&gt;
meaning&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;returned.&amp;nbsp;The&amp;nbsp;SCJP&amp;nbsp;exam&amp;nbsp;requires&amp;nbsp;an&amp;nbsp;understanding&amp;nbsp;of&amp;nbsp;&lt;br&gt;
what&amp;nbsp;call&amp;nbsp;by&amp;nbsp;value&amp;nbsp;means,&amp;nbsp;and&amp;nbsp;we&amp;nbsp;will&amp;nbsp;discuss&amp;nbsp;the&amp;nbsp;details&amp;nbsp;now.&amp;nbsp;&lt;br&gt;
An&amp;nbsp;argument&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;a&amp;nbsp;corresponding&amp;nbsp;method&amp;nbsp;parameter.&amp;nbsp;A&amp;nbsp;&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;the&amp;nbsp;&lt;br&gt;
name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;in&amp;nbsp;the&amp;nbsp;method&amp;nbsp;signature&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;assigned&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;argument.&lt;br&gt;
&lt;br&gt;
================&amp;nbsp;!!!!!&lt;br&gt;
The&amp;nbsp;Call&amp;nbsp;Stack&lt;br&gt;
Every&amp;nbsp;method&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;invoked&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;pushed&lt;br&gt;
onto&amp;nbsp;the&amp;nbsp;thread's&amp;nbsp;method&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;.&amp;nbsp;The&amp;nbsp;method&amp;nbsp;at&amp;nbsp;the&amp;nbsp;top&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;method.&amp;nbsp;Each&amp;nbsp;method&amp;nbsp;on&amp;nbsp;the&amp;nbsp;call&lt;br&gt;
stack&amp;nbsp;gets&amp;nbsp;its&amp;nbsp;own&amp;nbsp;small&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;method&amp;nbsp;finishes&amp;nbsp;&lt;br&gt;
executing&amp;nbsp;(by&amp;nbsp;running&amp;nbsp;to&amp;nbsp;completion,&amp;nbsp;returning&amp;nbsp;a&amp;nbsp;value,&amp;nbsp;or&amp;nbsp;throwing&amp;nbsp;an&amp;nbsp;exception),&amp;nbsp;the&amp;nbsp;&lt;br&gt;
method&amp;nbsp;gets&amp;nbsp;popped&amp;nbsp;off&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;and&amp;nbsp;its&amp;nbsp;memory&amp;nbsp;is&amp;nbsp;freed.&amp;nbsp;Any&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;local&amp;nbsp;&lt;br&gt;
variables&amp;nbsp;are&amp;nbsp;destroyed&amp;nbsp;and&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program's&amp;nbsp;memory.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;staff;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;JavaPassAllArgumentsByVALUE&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Editor&amp;nbsp;ed&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Editor("1234");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tryToChangeReference(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(ed);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;"123";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tryToChangeString(s);&amp;nbsp;//&amp;nbsp;doesnt&amp;nbsp;affect&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(s);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;!!!&amp;nbsp;We&amp;nbsp;can't&amp;nbsp;change&amp;nbsp;reference&amp;nbsp;address&amp;nbsp;inside&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;tryToChangeReference(Editor&amp;nbsp;e){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Editor("eeeeeee");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Object&amp;nbsp;inside&amp;nbsp;method&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;e);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;method&amp;nbsp;doesnt&amp;nbsp;affect&amp;nbsp;origin&amp;nbsp;string&amp;nbsp;value&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;tryToChangeString(String&amp;nbsp;str){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;".";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Editor{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Editor(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
&lt;br&gt;
1234&lt;br&gt;
Object&amp;nbsp;inside&amp;nbsp;method&amp;nbsp;:&amp;nbsp;eeeeeee&lt;br&gt;
1234&lt;br&gt;
123&lt;br&gt;
======</questionanswer>
  </question>
  <question id="1_0_0_0_0:14" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;Java&amp;nbsp;Call&amp;nbsp;stack&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Call&amp;nbsp;Stack&amp;nbsp;&lt;br&gt;
Every&amp;nbsp;method&amp;nbsp;that&amp;nbsp;gets&amp;nbsp;invoked&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;pushed&lt;br&gt;
onto&amp;nbsp;the&amp;nbsp;thread's&amp;nbsp;method&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;.&amp;nbsp;The&amp;nbsp;method&amp;nbsp;at&amp;nbsp;the&amp;nbsp;top&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;method.&amp;nbsp;Each&amp;nbsp;method&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;gets&amp;nbsp;its&amp;nbsp;own&amp;nbsp;small&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;method&amp;nbsp;finishes&amp;nbsp;&lt;br&gt;
executing&amp;nbsp;(by&amp;nbsp;running&amp;nbsp;to&amp;nbsp;completion,&amp;nbsp;returning&amp;nbsp;a&amp;nbsp;value,&lt;br&gt;
or&amp;nbsp;throwing&amp;nbsp;an&amp;nbsp;exception),&amp;nbsp;the&amp;nbsp;method&amp;nbsp;gets&amp;nbsp;popped&amp;nbsp;off&amp;nbsp;the&lt;br&gt;
call&amp;nbsp;stack&amp;nbsp;and&amp;nbsp;its&amp;nbsp;memory&amp;nbsp;is&amp;nbsp;freed.&amp;nbsp;Any&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;local&amp;nbsp;&lt;br&gt;
variables&amp;nbsp;are&amp;nbsp;destroyed&amp;nbsp;and&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program's&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Call&amp;nbsp;stack&amp;nbsp;from&amp;nbsp;WIKI:&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;science,&amp;nbsp;a&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;a&amp;nbsp;stack&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;that&lt;br&gt;
stores&amp;nbsp;information&amp;nbsp;about&amp;nbsp;the&amp;nbsp;active&amp;nbsp;subroutines&amp;nbsp;of&amp;nbsp;a&amp;nbsp;computer&amp;nbsp;program.&amp;nbsp;This&lt;br&gt;
kind&amp;nbsp;of&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;an&amp;nbsp;execution&amp;nbsp;stack,&amp;nbsp;control&amp;nbsp;stack,&lt;br&gt;
run-time&amp;nbsp;stack,&amp;nbsp;or&amp;nbsp;machine&amp;nbsp;stack,&amp;nbsp;and&amp;nbsp;is&amp;nbsp;often&amp;nbsp;shortened&amp;nbsp;to&amp;nbsp;just&amp;nbsp;"the&amp;nbsp;stack".&lt;br&gt;
Although&amp;nbsp;maintenance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;important&amp;nbsp;for&lt;br&gt;
the&amp;nbsp;proper&amp;nbsp;functioning&amp;nbsp;of&amp;nbsp;most&amp;nbsp;software,&amp;nbsp;the&amp;nbsp;details&amp;nbsp;are&amp;nbsp;normally&lt;br&gt;
hidden&amp;nbsp;and&amp;nbsp;automatic&amp;nbsp;in&amp;nbsp;high-level&amp;nbsp;programming&amp;nbsp;languages.&lt;br&gt;
A&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;several&amp;nbsp;related&amp;nbsp;purposes,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;main&amp;nbsp;reason&lt;br&gt;
for&amp;nbsp;having&amp;nbsp;one&amp;nbsp;is&amp;nbsp;to&amp;nbsp;keep&amp;nbsp;track&amp;nbsp;of&amp;nbsp;the&amp;nbsp;point&amp;nbsp;to&amp;nbsp;which&amp;nbsp;each&lt;br&gt;
active&amp;nbsp;subroutine&amp;nbsp;should&amp;nbsp;return&amp;nbsp;control&amp;nbsp;when&amp;nbsp;it&amp;nbsp;finishes&amp;nbsp;executing.&lt;br&gt;
An&amp;nbsp;active&amp;nbsp;subroutine&amp;nbsp;is&amp;nbsp;one&amp;nbsp;that&amp;nbsp;has&amp;nbsp;been&amp;nbsp;called&amp;nbsp;but&amp;nbsp;is&amp;nbsp;yet&amp;nbsp;to&lt;br&gt;
complete&amp;nbsp;execution&amp;nbsp;after&amp;nbsp;which&amp;nbsp;control&amp;nbsp;should&amp;nbsp;be&amp;nbsp;handed&amp;nbsp;back&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;point&amp;nbsp;of&amp;nbsp;call.&amp;nbsp;Such&amp;nbsp;activations&amp;nbsp;of&amp;nbsp;subroutines&amp;nbsp;may&amp;nbsp;be&lt;br&gt;
nested&amp;nbsp;to&amp;nbsp;any&amp;nbsp;level&amp;nbsp;(recursive&amp;nbsp;as&amp;nbsp;a&amp;nbsp;special&amp;nbsp;case),&amp;nbsp;hence&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;structure.&lt;br&gt;
If,&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;a&amp;nbsp;subroutine&amp;nbsp;DrawSquare&amp;nbsp;calls&amp;nbsp;a&amp;nbsp;subroutine&lt;br&gt;
DrawLine&amp;nbsp;from&amp;nbsp;four&amp;nbsp;different&amp;nbsp;places,&amp;nbsp;DrawLine&amp;nbsp;must&amp;nbsp;know&amp;nbsp;where&amp;nbsp;to&lt;br&gt;
return&amp;nbsp;when&amp;nbsp;its&amp;nbsp;execution&amp;nbsp;completes.&amp;nbsp;To&amp;nbsp;accomplish&amp;nbsp;this,&amp;nbsp;the&amp;nbsp;address&lt;br&gt;
following&amp;nbsp;the&amp;nbsp;call&amp;nbsp;instruction,&amp;nbsp;the&amp;nbsp;return&amp;nbsp;address,&amp;nbsp;is&amp;nbsp;pushed&amp;nbsp;onto&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;with&amp;nbsp;each&amp;nbsp;call.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;get&amp;nbsp;Java&amp;nbsp;Call&amp;nbsp;Stack&amp;nbsp;of&amp;nbsp;a&amp;nbsp;running&amp;nbsp;application&lt;br&gt;
&lt;br&gt;
Method&amp;nbsp;1:&amp;nbsp;Use&amp;nbsp;jstack&amp;nbsp;utility&amp;nbsp;from&amp;nbsp;command&amp;nbsp;line&amp;nbsp;(part&amp;nbsp;of&amp;nbsp;JRE&amp;nbsp;distro).&lt;br&gt;
Method&amp;nbsp;2:&amp;nbsp;Send&amp;nbsp;signal&amp;nbsp;3&amp;nbsp;to&amp;nbsp;the&amp;nbsp;java&amp;nbsp;process,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;dump&amp;nbsp;stack&amp;nbsp;traces&amp;nbsp;on&amp;nbsp;stdout.&lt;br&gt;
Method&amp;nbsp;3:&amp;nbsp;Call&amp;nbsp;Thread.getAllStackTraces&amp;nbsp;()&amp;nbsp;from&amp;nbsp;within&amp;nbsp;application:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;StackTraceDumper&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;dumpAllStackTraces&amp;nbsp;()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Map.Entry&amp;nbsp;&lt;Thread,&amp;nbsp;StackTraceElement&amp;nbsp;[]&gt;&amp;nbsp;entry:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.getAllStackTraces().entrySet&amp;nbsp;())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println&amp;nbsp;(entry.getKey&amp;nbsp;().getName&amp;nbsp;()&amp;nbsp;+&amp;nbsp;":");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(StackTraceElement&amp;nbsp;element:&amp;nbsp;entry.getValue&amp;nbsp;())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println&amp;nbsp;("\t"&amp;nbsp;+&amp;nbsp;element);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
Then&amp;nbsp;use&amp;nbsp;StackTraceDumper.dumpAllStackTraces()&amp;nbsp;where&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;dump&amp;nbsp;stack&amp;nbsp;traces.</questionanswer>
  </question>
  <question id="1_0_0_0_0:15" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Operators,&amp;nbsp;describe.&amp;nbsp;(list&amp;nbsp;operators,&amp;nbsp;priority,&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Operators&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='720'&amp;nbsp;height='900'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/9869882.png'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Assignment&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;12&amp;nbsp;&amp;nbsp;assignment&amp;nbsp;operators&amp;nbsp;:&amp;nbsp;the&amp;nbsp;&amp;nbsp;simple&amp;nbsp;assignment=&amp;nbsp;and&lt;br&gt;
11&amp;nbsp;compound&amp;nbsp;assignment&amp;nbsp;operators:&amp;nbsp;+=,&amp;nbsp;-&amp;nbsp;=,&amp;nbsp;*=&amp;nbsp;,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
An&amp;nbsp;assignment&amp;nbsp;stores&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;right&amp;nbsp;&amp;nbsp;-&amp;nbsp;hand&amp;nbsp;side&amp;nbsp;of&amp;nbsp;&lt;br&gt;
the&amp;nbsp;expression&amp;nbsp;into&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;on&amp;nbsp;the&amp;nbsp;left&amp;nbsp;-&amp;nbsp;hand&amp;nbsp;side.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;using&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;&lt;br&gt;
assignment:&lt;br&gt;
&amp;nbsp;byte&amp;nbsp;b&amp;nbsp;=&amp;nbsp;120;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;b;&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;12.5;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;(int)&amp;nbsp;12.5;&amp;nbsp;//compiles&amp;nbsp;fine&amp;nbsp;&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;y&amp;nbsp;is&amp;nbsp;12&amp;nbsp;after&amp;nbsp;this&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&amp;nbsp;executes.&amp;nbsp;The&amp;nbsp;decimal&amp;nbsp;value&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;simply&amp;nbsp;&lt;br&gt;
truncated&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;sometimes&amp;nbsp;the&amp;nbsp;compound&amp;nbsp;operator&amp;nbsp;can&amp;nbsp;save&amp;nbsp;us&amp;nbsp;from&lt;br&gt;
needing&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;a&amp;nbsp;value&amp;nbsp;before&amp;nbsp;the&amp;nbsp;assignment.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;statements&amp;nbsp;generate&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;Do&amp;nbsp;&lt;br&gt;
you&amp;nbsp;see&amp;nbsp;why?&amp;nbsp;&lt;br&gt;
15.&amp;nbsp;long&amp;nbsp;m&amp;nbsp;=&amp;nbsp;1000;&lt;br&gt;
16.&amp;nbsp;int&amp;nbsp;n&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
17.&amp;nbsp;n&amp;nbsp;=&amp;nbsp;n&amp;nbsp;*&amp;nbsp;m;&amp;nbsp;//compiler&amp;nbsp;error&amp;nbsp;here&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!&amp;nbsp;______&lt;br&gt;
The&amp;nbsp;expression&amp;nbsp;n&amp;nbsp;*&amp;nbsp;mis&amp;nbsp;an&amp;nbsp;inttimes&amp;nbsp;a&amp;nbsp;long&amp;nbsp;.Before&amp;nbsp;the&amp;nbsp;multiplication&amp;nbsp;can&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;evaluated,&amp;nbsp;&lt;br&gt;
the&amp;nbsp;int&amp;nbsp;is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;long&amp;nbsp;.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;therefore&amp;nbsp;a&amp;nbsp;long&amp;nbsp;,&lt;br&gt;
so&amp;nbsp;we&amp;nbsp;need&amp;nbsp;a&amp;nbsp;cast&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;&lt;br&gt;
compiler&amp;nbsp;happy:&lt;br&gt;
18.&amp;nbsp;n&amp;nbsp;=&amp;nbsp;(int)&amp;nbsp;(n&amp;nbsp;*&amp;nbsp;m);&lt;br&gt;
The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;n&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;5000.&amp;nbsp;&amp;nbsp;!!!!!!&amp;nbsp;&amp;nbsp;However,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;__&amp;nbsp;compound&amp;nbsp;__&lt;br&gt;
operator&amp;nbsp;avoids&amp;nbsp;the&amp;nbsp;cast.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;compile&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;assign&amp;nbsp;n&amp;nbsp;to&amp;nbsp;5000:&lt;br&gt;
19.&amp;nbsp;long&amp;nbsp;m&amp;nbsp;=&amp;nbsp;1000;&lt;br&gt;
20.&amp;nbsp;int&amp;nbsp;n&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
21.&amp;nbsp;n&amp;nbsp;*=&amp;nbsp;m;&lt;br&gt;
====================&lt;br&gt;
The&amp;nbsp;Arithmetic&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;specifically&amp;nbsp;mention&amp;nbsp;having&amp;nbsp;working&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;following&amp;nbsp;&lt;br&gt;
arithmetic&amp;nbsp;operators:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;+&amp;nbsp;&amp;#8212;&amp;nbsp;&amp;nbsp;:&amp;nbsp;addition&amp;nbsp;and&amp;nbsp;subtraction&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;/&amp;nbsp;:&amp;nbsp;multiplication&amp;nbsp;and&amp;nbsp;division&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;%&amp;nbsp;:&amp;nbsp;modulus&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;++&amp;nbsp;&amp;#8212;&amp;nbsp;&amp;#8212;&amp;nbsp;:&amp;nbsp;increment&amp;nbsp;and&amp;nbsp;decrement&amp;nbsp;&lt;br&gt;
We&amp;nbsp;will&amp;nbsp;now&amp;nbsp;discuss&amp;nbsp;each&amp;nbsp;of&amp;nbsp;these&amp;nbsp;operators&amp;nbsp;in&amp;nbsp;detail.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;of&amp;nbsp;different&amp;nbsp;types,&amp;nbsp;the&amp;nbsp;smaller&amp;nbsp;operand&lt;br&gt;
is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;the&amp;nbsp;larger.&amp;nbsp;At&amp;nbsp;a&amp;nbsp;minimum,&amp;nbsp;the&amp;nbsp;operands&amp;nbsp;are&lt;br&gt;
promoted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;innocent&amp;nbsp;-&amp;nbsp;looking&amp;nbsp;&lt;br&gt;
code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;Can&amp;nbsp;you&amp;nbsp;see&amp;nbsp;why?&amp;nbsp;&lt;br&gt;
short&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;12;&lt;br&gt;
short&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;s1&amp;nbsp;+&amp;nbsp;s2;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile!&amp;nbsp;&lt;br&gt;
Because&amp;nbsp;a&amp;nbsp;short&amp;nbsp;is&amp;nbsp;smaller&amp;nbsp;than&amp;nbsp;an&amp;nbsp;int,&amp;nbsp;both&amp;nbsp;s1and&amp;nbsp;s2&amp;nbsp;are&lt;br&gt;
promoted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s&amp;nbsp;before&amp;nbsp;the&amp;nbsp;addition.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;of&amp;nbsp;&lt;br&gt;
s1&amp;nbsp;+&amp;nbsp;s2is&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;store&amp;nbsp;the&amp;nbsp;result&amp;nbsp;in&amp;nbsp;a&amp;nbsp;shortif&amp;nbsp;you&lt;br&gt;
&lt;br&gt;
use&amp;nbsp;the&amp;nbsp;cast&amp;nbsp;operator.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;complains&amp;nbsp;about&amp;nbsp;a&amp;nbsp;possible&lt;br&gt;
loss&amp;nbsp;of&amp;nbsp;precision,&amp;nbsp;but&amp;nbsp;casting&amp;nbsp;fixes&amp;nbsp;the&amp;nbsp;problem:&lt;br&gt;
short&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;12;&lt;br&gt;
short&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;(short)&amp;nbsp;(s1&amp;nbsp;+&amp;nbsp;s2);&amp;nbsp;&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;sum&amp;nbsp;is&amp;nbsp;22&amp;nbsp;after&amp;nbsp;this&amp;nbsp;code&amp;nbsp;executes.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
==================================&lt;br&gt;
A&amp;nbsp;Note&amp;nbsp;about&amp;nbsp;Casting&lt;br&gt;
I&amp;nbsp;want&amp;nbsp;to&amp;nbsp;take&amp;nbsp;a&amp;nbsp;moment&amp;nbsp;to&amp;nbsp;point&amp;nbsp;out&amp;nbsp;something&amp;nbsp;subtle&amp;nbsp;but&amp;nbsp;important&amp;nbsp;about&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cast&amp;nbsp;oper-ator.&amp;nbsp;The&amp;nbsp;sole&amp;nbsp;purpose&amp;nbsp;of&amp;nbsp;casting&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;is&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;happy.&amp;nbsp;When&amp;nbsp;&lt;br&gt;
you&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;larger&amp;nbsp;data&amp;nbsp;type&amp;nbsp;to&amp;nbsp;a&amp;nbsp;smaller&amp;nbsp;one,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;complains&amp;nbsp;about&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;possible&amp;nbsp;&lt;br&gt;
loss&amp;nbsp;of&amp;nbsp;precision.&amp;nbsp;&lt;br&gt;
However,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;aware&amp;nbsp;and&amp;nbsp;comfortable&amp;nbsp;with&amp;nbsp;the&amp;nbsp;possible&amp;nbsp;loss&amp;nbsp;of&amp;nbsp;precision&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&amp;nbsp;runtime,&amp;nbsp;&lt;br&gt;
then&amp;nbsp;you&amp;nbsp;simply&amp;nbsp;cast&amp;nbsp;the&amp;nbsp;result,&amp;nbsp;which&amp;nbsp;tells&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;you&amp;nbsp;know&amp;nbsp;what&amp;nbsp;you&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;are&amp;nbsp;doing.&amp;nbsp;At&amp;nbsp;&lt;br&gt;
runtime,&amp;nbsp;the&amp;nbsp;data&amp;nbsp;may&amp;nbsp;very&amp;nbsp;well&amp;nbsp;be&amp;nbsp;invalid.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiles&amp;nbsp;and&amp;nbsp;&lt;br&gt;
runs,&amp;nbsp;but&amp;nbsp;you&amp;nbsp;might&amp;nbsp;be&amp;nbsp;surprised&amp;nbsp;by&amp;nbsp;the&amp;nbsp;output:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte&amp;nbsp;b1&amp;nbsp;=&amp;nbsp;70,&amp;nbsp;b2&amp;nbsp;=&amp;nbsp;70;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte&amp;nbsp;product&amp;nbsp;=&amp;nbsp;(byte)&amp;nbsp;(b1&amp;nbsp;+&amp;nbsp;b2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(product);&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;-116&lt;br&gt;
Because&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;70+70&amp;nbsp;=&amp;nbsp;140&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;140&amp;nbsp;it&amp;nbsp;is&amp;nbsp;10001100&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;'10001100'&amp;nbsp;it&amp;nbsp;is&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;&amp;nbsp;byte&amp;nbsp;contains&amp;nbsp;7&amp;nbsp;values&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;and&amp;nbsp;1&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sign&amp;nbsp;bit&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;so&amp;nbsp;'10001100'&amp;nbsp;it&amp;nbsp;is&amp;nbsp;negative&amp;nbsp;value&amp;nbsp;(first&amp;nbsp;bit&amp;nbsp;is&amp;nbsp;'1')&amp;nbsp;,&amp;nbsp;convert&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value&amp;nbsp;(revert&amp;nbsp;bits&amp;nbsp;,&amp;nbsp;and&amp;nbsp;add&amp;nbsp;1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10001100&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110011&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add&amp;nbsp;1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110011&amp;nbsp;&lt;br&gt;
+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;01110100&amp;nbsp;=&amp;nbsp;-116.&lt;br&gt;
============================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;JVM&amp;nbsp;ensures&amp;nbsp;order&amp;nbsp;of&amp;nbsp;operations&amp;nbsp;is&amp;nbsp;evaluated&lt;br&gt;
left&amp;nbsp;-&amp;nbsp;to&amp;nbsp;-&amp;nbsp;right&amp;nbsp;when&amp;nbsp;operators&amp;nbsp;share&amp;nbsp;the&amp;nbsp;&lt;br&gt;
same&amp;nbsp;precedence.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;value&lt;br&gt;
of&amp;nbsp;xafter&amp;nbsp;this&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&amp;nbsp;executes?&amp;nbsp;&lt;br&gt;
String&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&amp;nbsp;-&amp;nbsp;6&amp;nbsp;+&amp;nbsp;&amp;#8220;Hello&amp;#8221;&amp;nbsp;+&amp;nbsp;7&amp;nbsp;+&amp;nbsp;5;&amp;nbsp;&lt;br&gt;
//x&amp;nbsp;equals&amp;nbsp;&amp;quot;6Hello75&amp;quot;&lt;br&gt;
&lt;br&gt;
==============================&lt;br&gt;
The&amp;nbsp;Multiplicative&amp;nbsp;Operators&lt;br&gt;
As&amp;nbsp;with&amp;nbsp;+&amp;nbsp;and&amp;nbsp;&amp;#8211;&amp;nbsp;&amp;nbsp;,&amp;nbsp;the&amp;nbsp;multiplicative&amp;nbsp;operators&amp;nbsp;promote&lt;br&gt;
both&amp;nbsp;operands&amp;nbsp;to&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;larger&amp;nbsp;operand.&lt;br&gt;
If&amp;nbsp;both&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;smaller&amp;nbsp;than&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;both&amp;nbsp;operands&lt;br&gt;
are&amp;nbsp;converted&amp;nbsp;to&amp;nbsp;int&amp;nbsp;s&amp;nbsp;before&amp;nbsp;the&amp;nbsp;multiplication&amp;nbsp;occurs.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;&lt;br&gt;
statements?&amp;nbsp;&lt;br&gt;
4.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;26,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;5;&amp;nbsp;&amp;nbsp;&lt;br&gt;
5.&amp;nbsp;double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;a&amp;nbsp;/&amp;nbsp;b;&amp;nbsp;&amp;nbsp;//&amp;nbsp;5.0&lt;br&gt;
&lt;br&gt;
8.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;26;&lt;br&gt;
9.&amp;nbsp;float&amp;nbsp;f&amp;nbsp;=&amp;nbsp;a&amp;nbsp;/&amp;nbsp;5.0F;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;5.2&lt;br&gt;
Because&amp;nbsp;5.0&amp;nbsp;is&amp;nbsp;a&amp;nbsp;float&amp;nbsp;(by&amp;nbsp;virtue&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&amp;quot;F&amp;quot;&amp;nbsp;&amp;nbsp;appended&amp;nbsp;to&amp;nbsp;it),&lt;br&gt;
the&amp;nbsp;int&amp;nbsp;a&amp;nbsp;is&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;floatand&amp;nbsp;floating&amp;nbsp;&lt;br&gt;
-&amp;nbsp;point&amp;nbsp;division&amp;nbsp;is&amp;nbsp;performed.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;f&amp;nbsp;is&amp;nbsp;5.2&amp;nbsp;after&amp;nbsp;this&amp;nbsp;code&amp;nbsp;&lt;br&gt;
executes.&amp;nbsp;&lt;br&gt;
=================================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;MODULUS&amp;nbsp;Operator&amp;nbsp;&lt;br&gt;
The&amp;nbsp;modulus&amp;nbsp;operator,&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&amp;nbsp;remainder&lt;br&gt;
operator,&amp;nbsp;evaluates&amp;nbsp;the&amp;nbsp;remainder&amp;nbsp;&lt;br&gt;
of&amp;nbsp;two&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;divided.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;expression?&amp;nbsp;&lt;br&gt;
int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12&amp;nbsp;%&amp;nbsp;5;&amp;nbsp;&lt;br&gt;
The&amp;nbsp;remainder&amp;nbsp;of&amp;nbsp;12&amp;nbsp;divided&amp;nbsp;by&amp;nbsp;5&amp;nbsp;is&amp;nbsp;2,&amp;nbsp;so&amp;nbsp;x&amp;nbsp;is&amp;nbsp;2.&amp;nbsp;&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;first&amp;nbsp;operand&amp;nbsp;is&amp;nbsp;negative,&amp;nbsp;so&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;modulus.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;yafter&amp;nbsp;the&amp;nbsp;&lt;br&gt;
following&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;&amp;#8211;&amp;nbsp;1:&lt;br&gt;
int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;-17&amp;nbsp;%&amp;nbsp;4;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(12&amp;nbsp;%&amp;nbsp;5);&amp;nbsp;//&amp;nbsp;2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//If&amp;nbsp;the&amp;nbsp;first&amp;nbsp;operand&amp;nbsp;is&amp;nbsp;negative,&amp;nbsp;so&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;modulus&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;negative&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(-12&amp;nbsp;%&amp;nbsp;5);&amp;nbsp;//-2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(12.4&amp;nbsp;%&amp;nbsp;3.2);//&amp;nbsp;2.8&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(5.2&amp;nbsp;%&amp;nbsp;2.5);&amp;nbsp;//&amp;nbsp;0.20000000000000018&lt;br&gt;
==========================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Increment&amp;nbsp;and&amp;nbsp;Decrement&amp;nbsp;Operators&lt;br&gt;
The&amp;nbsp;operators&amp;nbsp;++&amp;nbsp;and&amp;nbsp;&amp;#8211;&amp;nbsp;&amp;#8211;&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;increment&amp;nbsp;and&lt;br&gt;
decrement&amp;nbsp;operators&amp;nbsp;because&amp;nbsp;they&amp;nbsp;increment&amp;nbsp;and&amp;nbsp;decrement&lt;br&gt;
(respectively)&amp;nbsp;a&amp;nbsp;numeric&amp;nbsp;type&amp;nbsp;by&amp;nbsp;1.&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;6;&lt;br&gt;
4.&amp;nbsp;System.out.println(x++);&amp;nbsp;//&amp;nbsp;6&lt;br&gt;
5.&amp;nbsp;System.out.println(x);&amp;nbsp;//&amp;nbsp;7&lt;br&gt;
Adding&amp;nbsp;or&amp;nbsp;subtracting&amp;nbsp;1&amp;nbsp;seems&amp;nbsp;simple&amp;nbsp;enough,&amp;nbsp;but&amp;nbsp;these&lt;br&gt;
operators&amp;nbsp;can&amp;nbsp;be&amp;nbsp;confusing&amp;nbsp;because&amp;nbsp;of&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;evaluated!&lt;br&gt;
&lt;br&gt;
Example&lt;br&gt;
10.&amp;nbsp;char&amp;nbsp;c&amp;nbsp;=&amp;nbsp;'A';&lt;br&gt;
11.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.print(c++&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;&amp;#8220;);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;System.out.print(c);&amp;nbsp;&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;value&amp;nbsp;printed&amp;nbsp;is&amp;nbsp;'A',&amp;nbsp;then&amp;nbsp;c&amp;nbsp;is&amp;nbsp;incremented,&amp;nbsp;which&amp;nbsp;results&amp;nbsp;in&amp;nbsp;'B'&lt;br&gt;
&amp;nbsp;printed&amp;nbsp;on&amp;nbsp;the&amp;nbsp;second&amp;nbsp;iteration&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop.&amp;nbsp;&lt;br&gt;
In&amp;nbsp;total,&amp;nbsp;11&amp;nbsp;char&amp;nbsp;s&amp;nbsp;are&amp;nbsp;printed&amp;nbsp;and&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
A&amp;nbsp;B&amp;nbsp;C&amp;nbsp;D&amp;nbsp;E&amp;nbsp;F&amp;nbsp;G&amp;nbsp;H&amp;nbsp;I&amp;nbsp;J&amp;nbsp;K&lt;br&gt;
=========================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;instanceof&amp;nbsp;Operator&lt;br&gt;
The&amp;nbsp;instanceof&amp;nbsp;operator&amp;nbsp;compares&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
class&amp;nbsp;or&amp;nbsp;interface&amp;nbsp;data&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;true&amp;nbsp;if&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;an&lt;br&gt;
instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type;&amp;nbsp;otherwise,&amp;nbsp;the&amp;nbsp;result&amp;nbsp;is&amp;nbsp;false.&amp;nbsp;The&amp;nbsp;&lt;br&gt;
syntax&amp;nbsp;for&amp;nbsp;the&amp;nbsp;instanceof&amp;nbsp;operator&amp;nbsp;looks&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
reference&amp;nbsp;instanceof&amp;nbsp;ClassOrInterfaceName&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;&amp;quot;Hello,&amp;nbsp;World&amp;quot;;&lt;br&gt;
4.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;String)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.print(&amp;quot;one&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;Object)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.print(&amp;quot;two&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;if(s&amp;nbsp;instanceof&amp;nbsp;java.io.Serializable)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.print(&amp;quot;three&amp;quot;);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
12.&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
====================&lt;br&gt;
The&amp;nbsp;Bitwise&amp;nbsp;and&amp;nbsp;Logical&amp;nbsp;Operators&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;amp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;AND&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;^&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;exclusive&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;&amp;nbsp;|&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;inclusive&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;the&amp;nbsp;conditional&amp;nbsp;AND&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&amp;#2;||&amp;nbsp;:&amp;nbsp;the&amp;nbsp;conditional&amp;nbsp;OR&amp;nbsp;operator&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;&amp;nbsp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;^&amp;nbsp;,&amp;nbsp;and&amp;nbsp;|&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;expressions&amp;nbsp;where&amp;nbsp;both&lt;br&gt;
operands&amp;nbsp;are&amp;nbsp;either&amp;nbsp;primitive&amp;nbsp;numeric&amp;nbsp;&lt;br&gt;
types&amp;nbsp;or&amp;nbsp;both&amp;nbsp;are&amp;nbsp;boolean&amp;nbsp;expressions.&amp;nbsp;When&amp;nbsp;operating&lt;br&gt;
on&amp;nbsp;numeric&amp;nbsp;types,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;bitwise&amp;nbsp;operators.&lt;br&gt;
When&amp;nbsp;operating&amp;nbsp;on&amp;nbsp;boolean&amp;nbsp;types,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;logical&amp;nbsp;&lt;br&gt;
operators.&amp;nbsp;The&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&amp;nbsp;||&amp;nbsp;operators&amp;nbsp;&lt;br&gt;
require&amp;nbsp;both&amp;nbsp;operands&amp;nbsp;to&amp;nbsp;be&amp;nbsp;boolean&amp;nbsp;expressions,&amp;nbsp;so&amp;nbsp;they&amp;nbsp;are&amp;nbsp;strictly&amp;nbsp;logical&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;operators.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;bitwise&amp;nbsp;operators&amp;nbsp;are&amp;nbsp;evaluated&amp;nbsp;on&amp;nbsp;integer&amp;nbsp;types.&lt;br&gt;
To&amp;nbsp;compute&amp;nbsp;the&amp;nbsp;result,&amp;nbsp;you&amp;nbsp;need&amp;nbsp;&lt;br&gt;
to&amp;nbsp;know&amp;nbsp;the&amp;nbsp;binary&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;values.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;expression?&amp;nbsp;&lt;br&gt;
&amp;nbsp;int&amp;nbsp;result&amp;nbsp;=&amp;nbsp;12&amp;nbsp;^&amp;nbsp;45;&amp;nbsp;&amp;nbsp;//&amp;nbsp;33&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;5,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;10,&amp;nbsp;c&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
4.&amp;nbsp;boolean&amp;nbsp;one&amp;nbsp;=&amp;nbsp;a&amp;nbsp;&lt;&amp;nbsp;b&amp;nbsp;&amp;amp;&amp;nbsp;c&amp;nbsp;!=&amp;nbsp;0;&lt;br&gt;
5.&amp;nbsp;System.out.println(one);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
6.&amp;nbsp;boolean&amp;nbsp;two&amp;nbsp;=&amp;nbsp;true&amp;nbsp;|&amp;nbsp;true&amp;nbsp;&amp;amp;&amp;nbsp;false;&lt;br&gt;
7.&amp;nbsp;System.out.println(two);&amp;nbsp;//&amp;nbsp;false&lt;br&gt;
8.&amp;nbsp;boolean&amp;nbsp;three&amp;nbsp;=&amp;nbsp;(c&amp;nbsp;!=&amp;nbsp;0)&amp;nbsp;&amp;amp;&amp;nbsp;(a&amp;nbsp;/&amp;nbsp;c&amp;nbsp;&gt;&amp;nbsp;1);&lt;br&gt;
9.&amp;nbsp;System.out.println(three);&amp;nbsp;&amp;nbsp;//&amp;nbsp;exception&amp;nbsp;,&amp;nbsp;divide&amp;nbsp;by&amp;nbsp;0&lt;br&gt;
&lt;br&gt;
============================&lt;br&gt;
The&amp;nbsp;Conditional&amp;nbsp;Operator&lt;br&gt;
Syntax&amp;nbsp;:&lt;br&gt;
boolean_expression&amp;nbsp;?&amp;nbsp;true_expression&amp;nbsp;:&amp;nbsp;false_expression&amp;nbsp;&lt;br&gt;
&lt;br&gt;
double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;0.36;&lt;br&gt;
System.out.println(&amp;nbsp;d&amp;nbsp;&gt;&amp;nbsp;0&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;d&amp;nbsp;&lt;&amp;nbsp;1&amp;nbsp;?&amp;nbsp;d&amp;nbsp;*=&amp;nbsp;100&amp;nbsp;:&amp;nbsp;&amp;quot;not&amp;nbsp;a&amp;nbsp;percent&amp;quot;);&amp;nbsp;//&amp;nbsp;36&lt;br&gt;
&amp;nbsp;==============&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_0_0:16" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Equals&amp;nbsp;operators&amp;nbsp;(=,equals&amp;nbsp;method),&amp;nbsp;describe.&lt;br&gt;
Hashcode&amp;nbsp;method,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Equality&amp;nbsp;Operators&amp;nbsp;&lt;br&gt;
&amp;nbsp;The&amp;nbsp;==&amp;nbsp;(equal&amp;nbsp;to)&amp;nbsp;and&amp;nbsp;!=&amp;nbsp;(not&amp;nbsp;equal&amp;nbsp;to)&amp;nbsp;operators&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;equality&amp;nbsp;operators.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;equality&amp;nbsp;operators&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;three&amp;nbsp;situations,&amp;nbsp;all&amp;nbsp;of&amp;nbsp;which&amp;nbsp;return&amp;nbsp;a&amp;nbsp;&lt;br&gt;
boolean:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;numerical&amp;nbsp;primitive&amp;nbsp;types.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;boolean&amp;nbsp;types.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;operands&amp;nbsp;are&amp;nbsp;references&amp;nbsp;types&amp;nbsp;or&amp;nbsp;null&amp;nbsp;types&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;57;&lt;br&gt;
7.&amp;nbsp;float&amp;nbsp;f&amp;nbsp;=&amp;nbsp;57.0F;&lt;br&gt;
8.&amp;nbsp;double&amp;nbsp;d&amp;nbsp;=&amp;nbsp;5.70;&lt;br&gt;
9.&amp;nbsp;boolean&amp;nbsp;b&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;boolean&amp;nbsp;one&amp;nbsp;=&amp;nbsp;x&amp;nbsp;==&amp;nbsp;57;&lt;br&gt;
12.&amp;nbsp;System.out.println(one);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
13.&amp;nbsp;boolean&amp;nbsp;two&amp;nbsp;=&amp;nbsp;(f&amp;nbsp;!=&amp;nbsp;d);&lt;br&gt;
14.&amp;nbsp;System.out.println(two);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
15.&amp;nbsp;boolean&amp;nbsp;three&amp;nbsp;=&amp;nbsp;(b&amp;nbsp;=&amp;nbsp;true);&lt;br&gt;
16.&amp;nbsp;System.out.println(three);&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;The&amp;nbsp;equality&amp;nbsp;operators&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;evaluated&amp;nbsp;on&amp;nbsp;reference&amp;nbsp;types.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;that&amp;nbsp;evaluating&amp;nbsp;==and&amp;nbsp;!=&amp;nbsp;on&amp;nbsp;two&lt;br&gt;
references&amp;nbsp;compares&amp;nbsp;the&amp;nbsp;references,&amp;nbsp;not&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;they&amp;nbsp;point&amp;nbsp;to.&lt;br&gt;
Two&amp;nbsp;references&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;if&amp;nbsp;and&amp;nbsp;only&amp;nbsp;if&amp;nbsp;they&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object&amp;nbsp;&lt;br&gt;
(or&amp;nbsp;both&amp;nbsp;point&amp;nbsp;to&amp;nbsp;null&amp;nbsp;);&amp;nbsp;otherwise,&amp;nbsp;the&amp;nbsp;two&amp;nbsp;references&amp;nbsp;are&amp;nbsp;not&amp;nbsp;equal.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
Comparing&amp;nbsp;String&amp;nbsp;references&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;tends&amp;nbsp;to&amp;nbsp;be&amp;nbsp;confusing&lt;br&gt;
because&amp;nbsp;of&amp;nbsp;how&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;treats&amp;nbsp;string&amp;nbsp;literals.&amp;nbsp;Because&amp;nbsp;String&lt;br&gt;
objects&amp;nbsp;are&amp;nbsp;immutable,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;reuse&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;for&amp;nbsp;efficiency&lt;br&gt;
and&amp;nbsp;to&amp;nbsp;save&amp;nbsp;memory.&amp;nbsp;Because&amp;nbsp;"Hello"&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Stringliteral&amp;nbsp;known&amp;nbsp;at&amp;nbsp;&lt;br&gt;
compile&amp;nbsp;time,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;only&amp;nbsp;creates&amp;nbsp;one&amp;nbsp;"Hello"&amp;nbsp;object&amp;nbsp;in&amp;nbsp;memory,&amp;nbsp;and&amp;nbsp;s1and&amp;nbsp;s2&amp;nbsp;both&lt;br&gt;
refer&amp;nbsp;to&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
System.out.println(s1&amp;nbsp;==&amp;nbsp;s2);&amp;nbsp;//&amp;nbsp;true&amp;nbsp;,&amp;nbsp;because&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;String&amp;nbsp;Pool&amp;nbsp;!!!!!&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;"hello";&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String("hello");&lt;br&gt;
System.out.println(s1&amp;nbsp;==&amp;nbsp;s2);&amp;nbsp;//&amp;nbsp;false&amp;nbsp;,&amp;nbsp;because&amp;nbsp;s1&amp;nbsp;is&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;Pool,&amp;nbsp;and&amp;nbsp;s2&amp;nbsp;is&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;Heap&lt;br&gt;
&lt;br&gt;
=====================&lt;br&gt;
&amp;nbsp;Equality&amp;nbsp;of&amp;nbsp;Objects&lt;br&gt;
&amp;nbsp;The&amp;nbsp;java.lang.Object&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;equals&lt;br&gt;
method&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&amp;nbsp;signature:&lt;br&gt;
public&amp;nbsp;boolean&amp;nbsp;equals&amp;nbsp;(Object&amp;nbsp;obj)&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Dog&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Dog(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
7.&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;Dog))&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
13.&amp;nbsp;Dog&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(Dog)&amp;nbsp;obj;&lt;br&gt;
14.&amp;nbsp;if(this.name.equals(other.name)&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;br&gt;
15.&amp;nbsp;(this.age&amp;nbsp;==&amp;nbsp;other.age))&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;return&amp;nbsp;true;&lt;br&gt;
17.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
18.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==============&lt;br&gt;
The&amp;nbsp;hashCode&amp;nbsp;&amp;nbsp;Method&amp;nbsp;&amp;nbsp;!!!!&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Objectclass&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;method&amp;nbsp;named&amp;nbsp;hashCodewith&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;signature:&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;hashCode()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;used&amp;nbsp;by&amp;nbsp;__&amp;nbsp;hash&amp;nbsp;table&amp;nbsp;__&amp;nbsp;data&amp;nbsp;structures.&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;hashCode&amp;nbsp;and&amp;nbsp;equals&amp;nbsp;__&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;related&amp;nbsp;in&amp;nbsp;the&amp;nbsp;sense&amp;nbsp;that&lt;br&gt;
two&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;should&amp;nbsp;generate&amp;nbsp;the&amp;nbsp;same&amp;nbsp;hash&amp;nbsp;&lt;br&gt;
code.&amp;nbsp;Therefore,&amp;nbsp;any&amp;nbsp;time&amp;nbsp;you&amp;nbsp;override&amp;nbsp;equals&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class,&lt;br&gt;
you&amp;nbsp;should&amp;nbsp;also&amp;nbsp;override&amp;nbsp;hashCode.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;Dogclass,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;&lt;br&gt;
hashCode&amp;nbsp;method&amp;nbsp;maintains&amp;nbsp;this&amp;nbsp;required&amp;nbsp;relationship&amp;nbsp;of&amp;nbsp;equalsand&amp;nbsp;hashCode:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
If&amp;nbsp;two&amp;nbsp;Dog&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;equal&amp;nbsp;in&amp;nbsp;our&amp;nbsp;example,&amp;nbsp;they&amp;nbsp;have&lt;br&gt;
the&amp;nbsp;same&amp;nbsp;ageand&amp;nbsp;therefore&amp;nbsp;will&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;hash&amp;nbsp;code.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
HashCODE&amp;nbsp;from&amp;nbsp;WIKI&amp;nbsp;:&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language,&amp;nbsp;every&amp;nbsp;class&amp;nbsp;implicitly&amp;nbsp;or&amp;nbsp;explicitly&amp;nbsp;provides&lt;br&gt;
a&amp;nbsp;hashCode()&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;digests&amp;nbsp;the&amp;nbsp;data&amp;nbsp;stored&lt;br&gt;
in&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;into&amp;nbsp;a&amp;nbsp;single&amp;nbsp;hash&amp;nbsp;value&lt;br&gt;
(a&amp;nbsp;32-bit&amp;nbsp;signed&amp;nbsp;integer).&amp;nbsp;This&amp;nbsp;hash&amp;nbsp;is&amp;nbsp;used&amp;nbsp;by&amp;nbsp;other&amp;nbsp;code&amp;nbsp;when&amp;nbsp;&lt;br&gt;
storing&amp;nbsp;or&amp;nbsp;manipulating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;?&amp;nbsp;the&amp;nbsp;values&amp;nbsp;are&amp;nbsp;intended&amp;nbsp;to&amp;nbsp;&lt;br&gt;
be&amp;nbsp;evenly&amp;nbsp;distributed&amp;nbsp;for&amp;nbsp;varied&amp;nbsp;inputs&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;use&amp;nbsp;in&amp;nbsp;clustering.&lt;br&gt;
This&amp;nbsp;property&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;the&amp;nbsp;performance&amp;nbsp;of&amp;nbsp;hash&amp;nbsp;tables&amp;nbsp;and&lt;br&gt;
other&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;that&amp;nbsp;store&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;groups&amp;nbsp;("buckets")&amp;nbsp;___&lt;br&gt;
&amp;nbsp;based&amp;nbsp;on&amp;nbsp;their&amp;nbsp;computed&amp;nbsp;hash&amp;nbsp;values.&amp;nbsp;Technically,&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;hashCode()&lt;br&gt;
by&amp;nbsp;default&amp;nbsp;is&amp;nbsp;a&amp;nbsp;__&amp;nbsp;native&amp;nbsp;__&amp;nbsp;method,&amp;nbsp;meaning,&amp;nbsp;it&amp;nbsp;has&amp;nbsp;the&amp;nbsp;modifier&amp;nbsp;'native',&lt;br&gt;
as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;directly&amp;nbsp;in&amp;nbsp;the&amp;nbsp;native&amp;nbsp;code&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JVM.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Equals&amp;nbsp;rules&amp;nbsp;(and&amp;nbsp;alse&amp;nbsp;hashcode&amp;nbsp;rules)&amp;nbsp;:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Symmetry:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x&amp;nbsp;and&amp;nbsp;y,&amp;nbsp;x.equals(y)&amp;nbsp;is&amp;nbsp;true&amp;nbsp;implies&lt;br&gt;
that&amp;nbsp;y.equals(x)&amp;nbsp;is&amp;nbsp;also&amp;nbsp;true.&lt;br&gt;
-&amp;nbsp;Reflectivity:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;value&amp;nbsp;x,&amp;nbsp;x.equals(x)&amp;nbsp;must&amp;nbsp;always&amp;nbsp;return&amp;nbsp;true.&lt;br&gt;
-&amp;nbsp;Consistency:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x&amp;nbsp;and&amp;nbsp;y,&amp;nbsp;x.equals(y)&lt;br&gt;
consistently&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;or&amp;nbsp;consistently&amp;nbsp;returns&amp;nbsp;false,&amp;nbsp;provided&amp;nbsp;no&lt;br&gt;
information&amp;nbsp;used&amp;nbsp;in&amp;nbsp;equals&amp;nbsp;comparisons&amp;nbsp;on&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;modified.&lt;br&gt;
-&amp;nbsp;Transitivity:&amp;nbsp;For&amp;nbsp;any&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;and&amp;nbsp;z,&amp;nbsp;if&amp;nbsp;x.equals(y)&lt;br&gt;
returns&amp;nbsp;true&amp;nbsp;and&amp;nbsp;y.equals(z)&amp;nbsp;returns&amp;nbsp;true,&amp;nbsp;then&amp;nbsp;x.equals(z)&amp;nbsp;must&amp;nbsp;return&amp;nbsp;true.&lt;br&gt;
Note&amp;nbsp;that&amp;nbsp;all&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;values&amp;nbsp;being&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;above&amp;nbsp;must&lt;br&gt;
be&amp;nbsp;non&amp;nbsp;null.&amp;nbsp;The&amp;nbsp;rule&amp;nbsp;for&amp;nbsp;the&amp;nbsp;null&amp;nbsp;reference&amp;nbsp;is&lt;br&gt;
-For&amp;nbsp;any&amp;nbsp;non-null&amp;nbsp;reference&amp;nbsp;value&amp;nbsp;x,&amp;nbsp;x.equals(null)&amp;nbsp;must&amp;nbsp;return&amp;nbsp;false.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
P.S&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;using&amp;nbsp;HotSpot&amp;nbsp;you&amp;nbsp;can&amp;nbsp;select&amp;nbsp;Object.hashCode&amp;nbsp;algorithm&amp;nbsp;&lt;br&gt;
with&amp;nbsp;option&amp;nbsp;:&amp;nbsp;&amp;nbsp;-XX:hashCode=n&lt;br&gt;
&amp;nbsp;0&amp;nbsp;?&amp;nbsp;Park-Miller&amp;nbsp;RNG&amp;nbsp;(default)&lt;br&gt;
&amp;nbsp;&amp;nbsp;1&amp;nbsp;?&amp;nbsp;f(address)&lt;br&gt;
&amp;nbsp;&amp;nbsp;2&amp;nbsp;?&amp;nbsp;Constant&amp;nbsp;'1'&lt;br&gt;
&amp;nbsp;&amp;nbsp;3&amp;nbsp;?&amp;nbsp;counter&lt;br&gt;
&amp;nbsp;&amp;nbsp;4&amp;nbsp;?&amp;nbsp;object&amp;nbsp;address&lt;br&gt;
&amp;nbsp;&amp;nbsp;5&amp;nbsp;?&amp;nbsp;Thread-local&amp;nbsp;Xorshift&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:17" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;appears&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Plant.java&amp;nbsp;.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result&amp;nbsp;of&amp;nbsp;compiling&amp;nbsp;&lt;br&gt;
this&amp;nbsp;source&amp;nbsp;file?&amp;nbsp;(Select&amp;nbsp;one&amp;nbsp;answer.)&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Plant&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;flowering;&lt;br&gt;
3.&amp;nbsp;&amp;nbsp;public&amp;nbsp;Leaf&amp;nbsp;[]&amp;nbsp;leaves;&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;class&amp;nbsp;Leaf&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;color;&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;length;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated:&amp;nbsp;Plant.class&amp;nbsp;and&amp;nbsp;&lt;br&gt;
Leaf.class&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;one&amp;nbsp;bytecode&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file&amp;nbsp;is&amp;nbsp;generated:&amp;nbsp;Plant.class.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
&lt;br&gt;
Two&amp;nbsp;.class&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:18" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;a&amp;nbsp;class&amp;nbsp;named&amp;nbsp;com.mycompany.Main&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
Java&amp;nbsp;application,&amp;nbsp;and&amp;nbsp;Main.classis&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;directory:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
\projects\build\com\mycompany&lt;br&gt;
&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;commands&amp;nbsp;successfully&amp;nbsp;executes&amp;nbsp;Main&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;classpath=\projects\build&amp;nbsp;com.mycompany.Main&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;java&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;classpath&amp;nbsp;\projects\build\com\mycompany&amp;nbsp;Main&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classpath&amp;nbsp;\projects\build&amp;nbsp;com.mycompany.Main&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;java&amp;nbsp;-&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;classpath&amp;nbsp;\projects\build\com&amp;nbsp;mycompany.Main&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
&lt;br&gt;
Also&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;short&amp;nbsp;'-cp'&amp;nbsp;intead&amp;nbsp;of&amp;nbsp;'-classpath'&lt;br&gt;
&lt;br&gt;
&amp;nbsp;java&amp;nbsp;-&amp;nbsp;cp&amp;nbsp;\projects\build&amp;nbsp;com.mycompany.Main</questionanswer>
  </question>
  <question id="1_0_0_0_0:19" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;class&amp;nbsp;named&amp;nbsp;Testis&amp;nbsp;in&amp;nbsp;the&amp;nbsp;a.b.c&amp;nbsp;package,&amp;nbsp;defined&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Test.javaand&amp;nbsp;saved&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;directory:&lt;br&gt;
&lt;br&gt;
c:\abcproject\src\Test.java&lt;br&gt;
&lt;br&gt;
Assuming&amp;nbsp;the&amp;nbsp;code&amp;nbsp;in&amp;nbsp;Test.java&amp;nbsp;uses&amp;nbsp;only&amp;nbsp;classes&amp;nbsp;from&lt;br&gt;
java.lang&amp;nbsp;and&amp;nbsp;contains&amp;nbsp;no&amp;nbsp;com-piler&amp;nbsp;errors,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;command&amp;nbsp;line?&lt;br&gt;
&lt;br&gt;
c:\abcproject\src&amp;nbsp;&gt;&amp;nbsp;javac&amp;nbsp;-d&amp;nbsp;c:\abcproject\deploy&amp;nbsp;Test.java&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;NoClassDefFoundError&amp;nbsp;occurs.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy&amp;nbsp;directory.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy\abc&amp;nbsp;directory&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Test.class&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\abcproject\deploy\a\b\c&amp;nbsp;directory&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:20" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;compiling&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class?&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;ISBN;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;title,&amp;nbsp;author;&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;pageCount;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;return&amp;nbsp;ISBN;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;Book))&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;Book&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(Book)&amp;nbsp;obj;&lt;br&gt;
15.&amp;nbsp;return&amp;nbsp;this.ISBN&amp;nbsp;==&amp;nbsp;other.ISBN;&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;The&amp;nbsp;class&amp;nbsp;compiles&amp;nbsp;successfully.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;6&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;because&amp;nbsp;hashCode&amp;nbsp;does&amp;nbsp;not&amp;nbsp;return&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;value.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;10&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;because&amp;nbsp;the&amp;nbsp;equals&amp;nbsp;method&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;does&amp;nbsp;not&amp;nbsp;override&amp;nbsp;the&amp;nbsp;par-ent&amp;nbsp;method&amp;nbsp;correctly&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;15&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;because&amp;nbsp;other.ISBNis&amp;nbsp;a&amp;nbsp;private&amp;nbsp;field.&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:21" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;outcome&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&amp;#8220;Canada&amp;#8221;;&lt;br&gt;
7.&amp;nbsp;String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String(s1);&lt;br&gt;
8.&amp;nbsp;if(s1&amp;nbsp;==&amp;nbsp;s2)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(&amp;#8220;s1&amp;nbsp;==&amp;nbsp;s2&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;if(s1.equals(s2))&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.println(&amp;#8220;s1.equals(s2)&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;s1&amp;nbsp;==&amp;nbsp;s2&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s1.equals(s2)&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;Both&amp;nbsp;B&amp;nbsp;and&amp;nbsp;C&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:22" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;GC:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.Date;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GC&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;Date&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
6.&amp;nbsp;Date&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
7.&amp;nbsp;Date&amp;nbsp;three&amp;nbsp;=&amp;nbsp;one;&lt;br&gt;
8.&amp;nbsp;one&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
9.&amp;nbsp;Date&amp;nbsp;four&amp;nbsp;=&amp;nbsp;one;&lt;br&gt;
10.&amp;nbsp;three&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
11.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
12.&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;true?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;8&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;10.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;The&amp;nbsp;Date&amp;nbsp;object&amp;nbsp;from&amp;nbsp;line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection&amp;nbsp;immediately&amp;nbsp;following&amp;nbsp;&lt;br&gt;
line&amp;nbsp;13.&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:23" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;private&amp;nbsp;class&amp;nbsp;Squares&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;long&amp;nbsp;square(int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;long&amp;nbsp;y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;*&amp;nbsp;(long)&amp;nbsp;x;&lt;br&gt;
4.&amp;nbsp;x&amp;nbsp;=&amp;nbsp;-1;&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;y;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;int&amp;nbsp;value&amp;nbsp;=&amp;nbsp;9;&lt;br&gt;
10.&amp;nbsp;long&amp;nbsp;result&amp;nbsp;=&amp;nbsp;square(value);&lt;br&gt;
11.&amp;nbsp;System.out.println(value);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;This&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;81&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
Because&amp;nbsp;top&amp;nbsp;level&amp;nbsp;class&amp;nbsp;cant&amp;nbsp;be&amp;nbsp;private</questionanswer>
  </question>
  <question id="1_0_0_0_0:24" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;TestDrive&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;go(Car&amp;nbsp;c)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;c.velocity&amp;nbsp;+=&amp;nbsp;10;&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;Car&amp;nbsp;porsche&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Car();&lt;br&gt;
9.&amp;nbsp;go(porsche);&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;Car&amp;nbsp;stolen&amp;nbsp;=&amp;nbsp;porsche;&lt;br&gt;
12.&amp;nbsp;go(stolen);&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;System.out.println(porsche.velocity);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;class&amp;nbsp;Car&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;velocity&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;0&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;10&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;20&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;30&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:25" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.*;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;DateSwap&amp;nbsp;{&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;swap(GregorianCalendar&amp;nbsp;a,&amp;nbsp;GregorianCalendar&amp;nbsp;b)&amp;nbsp;&lt;br&gt;
6.&amp;nbsp;{&amp;nbsp;&lt;br&gt;
7.&amp;nbsp;GregorianCalendar&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;a;&lt;br&gt;
8.&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2012,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
9.&amp;nbsp;b&amp;nbsp;=&amp;nbsp;temp;&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;GregorianCalendar&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2010,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
14.&amp;nbsp;GregorianCalendar&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(2011,&amp;nbsp;1,&amp;nbsp;1);&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;swap(one,&amp;nbsp;two);&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;System.out.print(one.get(Calendar.YEAR));&lt;br&gt;
19.&amp;nbsp;System.out.println(two.get(Calendar.YEAR));&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;20112010&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;20102011&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;20122011&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;20122010&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:26" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;does&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;garbage&amp;nbsp;collection?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ReturnDemo&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;String&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String(&amp;#8220;Jane&amp;nbsp;Doe&amp;#8221;);&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;temp;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;String&amp;nbsp;result;&lt;br&gt;
10.&amp;nbsp;result&amp;nbsp;=&amp;nbsp;getName();&lt;br&gt;
11.&amp;nbsp;System.out.println(result);&lt;br&gt;
12.&amp;nbsp;result&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
13.&amp;nbsp;System.gc();&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;4&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;after&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;10&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;12&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:27" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
4.&amp;nbsp;byte&amp;nbsp;a&amp;nbsp;=&amp;nbsp;40,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;50;&lt;br&gt;
5.&amp;nbsp;byte&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;(byte)&amp;nbsp;a&amp;nbsp;+&amp;nbsp;b;&lt;br&gt;
6.&amp;nbsp;System.out.println(sum);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;40&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;50&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;90&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:28" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;5&amp;nbsp;*&amp;nbsp;4&amp;nbsp;%&amp;nbsp;3;&lt;br&gt;
6.&amp;nbsp;System.out.println(x);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;2&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;5&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:29" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;byte&amp;nbsp;y&amp;nbsp;=&amp;nbsp;14&amp;nbsp;&amp;amp;&amp;nbsp;9;&lt;br&gt;
4.&amp;nbsp;System.out.println(y);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;15&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;4&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:30" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;FinalTest&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;House&amp;nbsp;h&amp;nbsp;=&amp;nbsp;new&amp;nbsp;House();&lt;br&gt;
5.&amp;nbsp;h.address&amp;nbsp;=&amp;nbsp;&amp;#8220;123&amp;nbsp;Main&amp;nbsp;Street&amp;#8221;;&lt;br&gt;
6.&amp;nbsp;h&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;System.gc();&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;&lt;br&gt;
11.&amp;nbsp;class&amp;nbsp;House&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;address;&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;House&amp;#8221;);&lt;br&gt;
16.&amp;nbsp;address&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;The&amp;nbsp;output&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;determined.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;most&amp;nbsp;cases&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output&amp;nbsp;on&amp;nbsp;my&amp;nbsp;Netbook&amp;nbsp;,&amp;nbsp;because&amp;nbsp;'main'&amp;nbsp;method&amp;nbsp;ends,&lt;br&gt;
and&amp;nbsp;only&amp;nbsp;then&amp;nbsp;Garbage&amp;nbsp;collection&amp;nbsp;is&amp;nbsp;performed&amp;nbsp;.&amp;nbsp;But&amp;nbsp;sometimes&amp;nbsp;finalize&amp;nbsp;mehtod&amp;nbsp;is&amp;nbsp;&lt;br&gt;
executed.</questionanswer>
  </question>
  <question id="1_0_0_0_0:31" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;House&amp;nbsp;,&amp;nbsp;which&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true?&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;House&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;address&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String();&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finalize()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;House&amp;#8221;);&lt;br&gt;
6.&amp;nbsp;address&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;&amp;#8220;&amp;nbsp;Inside&amp;nbsp;House&amp;nbsp;&amp;#8221;&amp;nbsp;&amp;nbsp;is&amp;nbsp;displayed&amp;nbsp;twice&amp;nbsp;just&amp;nbsp;before&amp;nbsp;a&amp;nbsp;House&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;is&amp;nbsp;garbage&amp;nbsp;collected.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;finalize&amp;nbsp;method&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;never&amp;nbsp;actually&amp;nbsp;gets&amp;nbsp;called&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;address&amp;nbsp;to&amp;nbsp;nullon&amp;nbsp;line&amp;nbsp;6.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:32" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true&amp;nbsp;about&amp;nbsp;the&amp;nbsp;following&amp;nbsp;BaseballTeam&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class?&amp;nbsp;&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;BaseballTeam&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;city,&amp;nbsp;mascot;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;numberOfPlayers;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;if(!(obj&amp;nbsp;instanceof&amp;nbsp;BaseballTeam))&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;return&amp;nbsp;false;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;BaseballTeam&amp;nbsp;other&amp;nbsp;=&amp;nbsp;(BaseballTeam)&amp;nbsp;obj;&lt;br&gt;
10.&amp;nbsp;return&amp;nbsp;(city.equals(other.city)&amp;nbsp;&lt;br&gt;
11.&amp;nbsp;&amp;amp;&amp;nbsp;&amp;amp;&amp;nbsp;mascot.equals(other.mascot));&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;return&amp;nbsp;numberOfPlayers;&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;class&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiles&amp;nbsp;but&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;improper&amp;nbsp;equals&amp;nbsp;method.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;compiles&amp;nbsp;but&amp;nbsp;contains&amp;nbsp;an&amp;nbsp;improper&amp;nbsp;hashCode&amp;nbsp;method.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:33" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&amp;nbsp;&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
4.&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
5.&amp;nbsp;if(x&amp;nbsp;==&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.println(&amp;#8220;Success&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Failure&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Success&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Failure&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:34" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&amp;nbsp;&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x1&amp;nbsp;=&amp;nbsp;50,&amp;nbsp;x2&amp;nbsp;=&amp;nbsp;75;&lt;br&gt;
4.&amp;nbsp;boolean&amp;nbsp;b&amp;nbsp;=&amp;nbsp;x1&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;x2;&lt;br&gt;
5.&amp;nbsp;if(b&amp;nbsp;=&amp;nbsp;true)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.println(&amp;#8220;Success&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Failure&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Success&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Failure&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:35" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;c&amp;nbsp;=&amp;nbsp;7;&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;result&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
7.&amp;nbsp;result&amp;nbsp;+=&amp;nbsp;++c;&lt;br&gt;
8.&amp;nbsp;System.out.print(result);&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;8&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;12&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;16&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:36" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Determine&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;when&amp;nbsp;executed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;command:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
java&amp;nbsp;HelloWorld&amp;nbsp;hello&amp;nbsp;world&amp;nbsp;goodbye&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;HelloWorld&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.println(args[1]&amp;nbsp;+&amp;nbsp;args[2]);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;hello&amp;nbsp;world&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&amp;nbsp;world&amp;nbsp;goodbye&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;An&amp;nbsp;ArrayIndexOutOfBoundsException&amp;nbsp;occurs&amp;nbsp;at&amp;nbsp;runtime.&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;class&amp;nbsp;declaration&amp;nbsp;on&amp;nbsp;line&amp;nbsp;1&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;static&amp;nbsp;modifier,&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;modifier&amp;nbsp;for&amp;nbsp;a&amp;nbsp;top-level&amp;nbsp;class.</questionanswer>
  </question>
  <question id="1_0_0_0_0:37" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Declaring&amp;nbsp;Variables&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Declaring&amp;nbsp;these&amp;nbsp;various&amp;nbsp;data&amp;nbsp;types&amp;nbsp;involves&amp;nbsp;creating&lt;br&gt;
a&amp;nbsp;variable.&amp;nbsp;A&amp;nbsp;variable&amp;nbsp;represents&amp;nbsp;an&amp;nbsp;allocated&amp;nbsp;piece&lt;br&gt;
of&amp;nbsp;memory&amp;nbsp;for&amp;nbsp;storing&amp;nbsp;data.&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;a&amp;nbsp;strongly&lt;br&gt;
typed&amp;nbsp;programming&amp;nbsp;language,&amp;nbsp;meaning&amp;nbsp;every&lt;br&gt;
variable&amp;nbsp;must&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;with&amp;nbsp;a&amp;nbsp;specifi&amp;nbsp;c&amp;nbsp;data&amp;nbsp;type&lt;br&gt;
before&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used.&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;channel;&lt;br&gt;
double&amp;nbsp;diagonal;&lt;br&gt;
String&amp;nbsp;brand;&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
In&amp;nbsp;Java,&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;must&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;before&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;name&amp;nbsp;of&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;its&amp;nbsp;identifi&amp;nbsp;er&amp;nbsp;.&lt;br&gt;
(The&amp;nbsp;names&amp;nbsp;of&amp;nbsp;your&amp;nbsp;fi&amp;nbsp;elds,&amp;nbsp;classes,&lt;br&gt;
methods,&amp;nbsp;interfaces,&amp;nbsp;and&amp;nbsp;enums&amp;nbsp;are&amp;nbsp;also&amp;nbsp;identifiers.)&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;are&amp;nbsp;the&amp;nbsp;rules&amp;nbsp;for&amp;nbsp;legal&amp;nbsp;identifiers:&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;identifier&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Unicode&amp;nbsp;character&amp;nbsp;sequence&amp;nbsp;of&lt;br&gt;
Java&amp;nbsp;letters&amp;nbsp;and&amp;nbsp;Java&amp;nbsp;digits.&amp;nbsp;These&lt;br&gt;
include&amp;nbsp;the&amp;nbsp;ASCII&amp;nbsp;characters&amp;nbsp;A&amp;nbsp;–&amp;nbsp;Z&amp;nbsp;and&amp;nbsp;a&amp;nbsp;–&amp;nbsp;z&amp;nbsp;,&lt;br&gt;
the&amp;nbsp;digits&amp;nbsp;0&amp;nbsp;–&amp;nbsp;9&amp;nbsp;,&amp;nbsp;the&amp;nbsp;underscore&amp;nbsp;character&amp;nbsp;(_),&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;dollar&amp;nbsp;sign&amp;nbsp;($).&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;first&amp;nbsp;character&amp;nbsp;of&amp;nbsp;an&amp;nbsp;identifier&amp;nbsp;must&amp;nbsp;be&amp;nbsp;a&amp;nbsp;Java&lt;br&gt;
letter,&amp;nbsp;underscore,&amp;nbsp;or&amp;nbsp;dollar&amp;nbsp;sign&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;identifier&amp;nbsp;must&amp;nbsp;not&amp;nbsp;be&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;keyword,&amp;nbsp;true&amp;nbsp;,&amp;nbsp;false&amp;nbsp;,&amp;nbsp;or&amp;nbsp;null.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
_____&amp;nbsp;Java&amp;nbsp;Tokens&lt;br&gt;
When&amp;nbsp;your&amp;nbsp;source&amp;nbsp;code&amp;nbsp;is&amp;nbsp;compiled,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;breaks&amp;nbsp;down&amp;nbsp;your&amp;nbsp;code&amp;nbsp;into&amp;nbsp;tokens&lt;br&gt;
based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;spaces,&amp;nbsp;line&amp;nbsp;feeds,&amp;nbsp;tabs&amp;nbsp;and&amp;nbsp;other&amp;nbsp;separators&amp;nbsp;in&amp;nbsp;your&amp;nbsp;code.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;five&lt;br&gt;
types&amp;nbsp;of&amp;nbsp;tokens&amp;nbsp;in&amp;nbsp;Java:&lt;br&gt;
-&amp;nbsp;Separators&lt;br&gt;
-&amp;nbsp;Keywords&lt;br&gt;
-&amp;nbsp;Literals&lt;br&gt;
-&amp;nbsp;Operators&lt;br&gt;
-&amp;nbsp;Identifiers</questionanswer>
  </question>
  <question id="1_0_0_0_0:38" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scoping&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;(&amp;nbsp;static,&amp;nbsp;instance,&amp;nbsp;and&amp;nbsp;local&amp;nbsp;variables&amp;nbsp;),&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
---&amp;nbsp;Instance&amp;nbsp;Variables&lt;br&gt;
Instance&amp;nbsp;variables&amp;nbsp;are&amp;nbsp;the&amp;nbsp;nonstatic&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;of&amp;nbsp;your&amp;nbsp;class,&lt;br&gt;
often&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;simply&amp;nbsp;as&amp;nbsp;fields.&lt;br&gt;
These&amp;nbsp;variables&amp;nbsp;get&amp;nbsp;allocated&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;when&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;is&lt;br&gt;
instantiated.&amp;nbsp;Because&amp;nbsp;the&amp;nbsp;new&amp;nbsp;operator&amp;nbsp;zeroes&amp;nbsp;the&amp;nbsp;memory&lt;br&gt;
for&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;all&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;initially&amp;nbsp;have&amp;nbsp;their&amp;nbsp;corresponding&amp;nbsp;zero&lt;br&gt;
value,&amp;nbsp;which&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
-&amp;nbsp;Primitive&amp;nbsp;numeric&amp;nbsp;fields&amp;nbsp;initialize&amp;nbsp;to&amp;nbsp;0.&amp;nbsp;This&amp;nbsp;includes&lt;br&gt;
byte&amp;nbsp;,&amp;nbsp;short&amp;nbsp;,&amp;nbsp;int&amp;nbsp;,&amp;nbsp;long&amp;nbsp;,&amp;nbsp;float&amp;nbsp;and&amp;nbsp;double&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;types&amp;nbsp;initialize&amp;nbsp;to&amp;nbsp;false&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;char&amp;nbsp;types&amp;nbsp;initialize&amp;nbsp;to&amp;nbsp;the&amp;nbsp;null&amp;nbsp;character&amp;nbsp;‘&amp;nbsp;\u0000’.&lt;br&gt;
-&amp;nbsp;Reference&amp;nbsp;types&amp;nbsp;initialize&amp;nbsp;to&amp;nbsp;null&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Instance&amp;nbsp;variables&amp;nbsp;are&amp;nbsp;always&amp;nbsp;initialized&amp;nbsp;during&amp;nbsp;object&lt;br&gt;
instantiation,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;variable&lt;br&gt;
even&amp;nbsp;if&amp;nbsp;you&amp;nbsp;do&amp;nbsp;not&amp;nbsp;specifi&amp;nbsp;cally&amp;nbsp;assign&amp;nbsp;it&amp;nbsp;a&amp;nbsp;value.&lt;br&gt;
&lt;br&gt;
Simple&amp;nbsp;Example:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Television&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;channel;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;double&amp;nbsp;diagonal;&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;brand;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;Television()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;channel&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;Television&amp;nbsp;tv&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Television();&lt;br&gt;
4.&amp;nbsp;System.out.println(tv.channel&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“&amp;nbsp;+&amp;nbsp;tv.diagonal&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“&amp;nbsp;+&amp;nbsp;tv.brand);&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
4&amp;nbsp;0.0&amp;nbsp;null&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Explicit&amp;nbsp;Initialization&lt;br&gt;
Java&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;the&amp;nbsp;explicit&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;instance&amp;nbsp;variables.&lt;br&gt;
Explicit&amp;nbsp;initialization&amp;nbsp;is&amp;nbsp;when&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;is&amp;nbsp;assigned&lt;br&gt;
a&amp;nbsp;value&amp;nbsp;at&amp;nbsp;the&amp;nbsp;same&amp;nbsp;time&amp;nbsp;that&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;is&amp;nbsp;declared.&amp;nbsp;The&amp;nbsp;field&lt;br&gt;
therefore&amp;nbsp;gets&amp;nbsp;initialized&amp;nbsp;before&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;executes&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Apple&amp;nbsp;extends&amp;nbsp;Fruit&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;variety&amp;nbsp;=&amp;nbsp;“McIntosh”;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Apple(String&amp;nbsp;variety)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(“Constructing&amp;nbsp;an&amp;nbsp;Apple”);&lt;br&gt;
6.&amp;nbsp;this.variety&amp;nbsp;=&amp;nbsp;variety;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
===================&lt;br&gt;
Class&amp;nbsp;Variables&amp;nbsp;(&amp;nbsp;static&amp;nbsp;variables)&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;field&amp;nbsp;within&amp;nbsp;a&amp;nbsp;class&amp;nbsp;declared&lt;br&gt;
as&amp;nbsp;static,&amp;nbsp;often&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;or&lt;br&gt;
static&amp;nbsp;field&amp;nbsp;.&amp;nbsp;A&amp;nbsp;static&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;is&amp;nbsp;unique&amp;nbsp;in&amp;nbsp;that&amp;nbsp;the&lt;br&gt;
memory&amp;nbsp;is&amp;nbsp;allocated&amp;nbsp;for&amp;nbsp;the&amp;nbsp;field&amp;nbsp;when&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;loaded&lt;br&gt;
by&amp;nbsp;the&amp;nbsp;JVM's&amp;nbsp;class&amp;nbsp;loader,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;remains&amp;nbsp;in&amp;nbsp;memory&lt;br&gt;
until&amp;nbsp;the&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;unloads&amp;nbsp;the&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
___&amp;nbsp;Global&amp;nbsp;Variables&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;___&lt;br&gt;
Java&amp;nbsp;does&amp;nbsp;not&amp;nbsp;support&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;global&amp;nbsp;variables.&lt;br&gt;
All&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;appear&amp;nbsp;within&amp;nbsp;a&amp;nbsp;class&amp;nbsp;or&amp;nbsp;interface.&lt;br&gt;
Static&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;are&amp;nbsp;the&amp;nbsp;closest&amp;nbsp;thing&amp;nbsp;you&amp;nbsp;have&amp;nbsp;in&lt;br&gt;
Java&amp;nbsp;to&amp;nbsp;global&amp;nbsp;variables,&amp;nbsp;because&amp;nbsp;a&amp;nbsp;static&amp;nbsp;field&amp;nbsp;has&amp;nbsp;a&amp;nbsp;lifetime&lt;br&gt;
beyond&amp;nbsp;the&amp;nbsp;life&amp;nbsp;of&amp;nbsp;the&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;and&amp;nbsp;a&lt;br&gt;
static&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;can&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;from&amp;nbsp;any&amp;nbsp;other&amp;nbsp;class&lt;br&gt;
or&amp;nbsp;object&amp;nbsp;(depending&amp;nbsp;on&amp;nbsp;the&amp;nbsp;access&amp;nbsp;specifier).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;my.blueprints;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;House&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;Room&amp;nbsp;kitchen;&amp;nbsp;//instance&amp;nbsp;variable&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int&amp;nbsp;counter&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;//class&amp;nbsp;variable&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;House()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;kitchen&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Room();&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;Room&amp;nbsp;getKitchen()&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;counter++;&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;kitchen;&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;to&amp;nbsp;access&amp;nbsp;counter&amp;nbsp;you&amp;nbsp;use&amp;nbsp;the&amp;nbsp;following&amp;nbsp;syntax:&amp;nbsp;&lt;br&gt;
&amp;nbsp;House.counter&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
___&amp;nbsp;Understanding&amp;nbsp;Static&amp;nbsp;Fields&lt;br&gt;
I&amp;nbsp;often&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;as&amp;nbsp;breaking&amp;nbsp;the&lt;br&gt;
rules&amp;nbsp;of&amp;nbsp;object&amp;nbsp;-&amp;nbsp;oriented&amp;nbsp;programming.&amp;nbsp;I&amp;nbsp;am&amp;nbsp;not&amp;nbsp;implying&lt;br&gt;
that&amp;nbsp;static&amp;nbsp;should&amp;nbsp;be&amp;nbsp;avoided,&amp;nbsp;because&amp;nbsp;static&lt;br&gt;
fields&amp;nbsp;are&amp;nbsp;an&amp;nbsp;important&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&lt;br&gt;
and&amp;nbsp;I&amp;nbsp;use&amp;nbsp;them&amp;nbsp;all&amp;nbsp;the&amp;nbsp;time.&amp;nbsp;However,&amp;nbsp;it&amp;nbsp;is&lt;br&gt;
important&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;what&amp;nbsp;it&amp;nbsp;means&amp;nbsp;for&amp;nbsp;a&amp;nbsp;field&lt;br&gt;
to&amp;nbsp;be&amp;nbsp;static.&amp;nbsp;It&amp;nbsp;might&amp;nbsp;seem&amp;nbsp;odd&amp;nbsp;that&amp;nbsp;a&amp;nbsp;field&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;class&amp;nbsp;can&amp;nbsp;exist&amp;nbsp;before&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&lt;br&gt;
ever&amp;nbsp;instantiated.&amp;nbsp;Recall&amp;nbsp;my&amp;nbsp;analogy&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
being&amp;nbsp;the&amp;nbsp;blueprint&amp;nbsp;of&amp;nbsp;a&amp;nbsp;house,&amp;nbsp;and&amp;nbsp;an&amp;nbsp;object&lt;br&gt;
being&amp;nbsp;the&amp;nbsp;house.&amp;nbsp;If&amp;nbsp;we&amp;nbsp;make&amp;nbsp;the&amp;nbsp;kitchen&amp;nbsp;static,&lt;br&gt;
that&amp;nbsp;means&amp;nbsp;we&amp;nbsp;have&amp;nbsp;a&amp;nbsp;kitchen&amp;nbsp;before&amp;nbsp;we&amp;nbsp;ever&lt;br&gt;
build&amp;nbsp;the&amp;nbsp;house!&lt;br&gt;
&lt;br&gt;
!!!!!!!!!&lt;br&gt;
Static&amp;nbsp;Imports&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;a&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
imported&amp;nbsp;into&amp;nbsp;a&amp;nbsp;source&amp;nbsp;fi&amp;nbsp;le,&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;static&lt;br&gt;
variable&amp;nbsp;to&amp;nbsp;be&amp;nbsp;accessible&amp;nbsp;without&amp;nbsp;being&amp;nbsp;prefixed&lt;br&gt;
with&amp;nbsp;its&amp;nbsp;corresponding&amp;nbsp;class&amp;nbsp;or&amp;nbsp;interface&amp;nbsp;name.&lt;br&gt;
Importing&amp;nbsp;a&amp;nbsp;static&amp;nbsp;member&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;static&lt;br&gt;
import&amp;nbsp;and&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;following&amp;nbsp;syntax:&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;static&amp;nbsp;packagenames.classname.variablename&amp;nbsp;;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;my.blueprints.House;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;import&amp;nbsp;static&amp;nbsp;my.blueprints.House.counter;&lt;br&gt;
4.&amp;nbsp;import&amp;nbsp;static&amp;nbsp;java.lang.System.*;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;StaticImportDemo&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;out.println("using&amp;nbsp;static&amp;nbsp;import");&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
====================&lt;br&gt;
Local&amp;nbsp;Variables&lt;br&gt;
A&amp;nbsp;local&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;defi&amp;nbsp;ned&amp;nbsp;within&amp;nbsp;a&lt;br&gt;
method,&amp;nbsp;which&amp;nbsp;includes&amp;nbsp;any&amp;nbsp;method&amp;nbsp;parameters.&lt;br&gt;
A&amp;nbsp;local&amp;nbsp;variable&amp;nbsp;gets&amp;nbsp;created&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;when&amp;nbsp;the&amp;nbsp;method&amp;nbsp;executes,&lt;br&gt;
and&amp;nbsp;is&amp;nbsp;deleted&amp;nbsp;from&amp;nbsp;memory&amp;nbsp;when&amp;nbsp;the&amp;nbsp;method&lt;br&gt;
returns&amp;nbsp;and&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;memory&amp;nbsp;is&amp;nbsp;destroyed.&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br&gt;
Local&amp;nbsp;variables&amp;nbsp;__&amp;nbsp;must&amp;nbsp;be&amp;nbsp;__&amp;nbsp;initialized&amp;nbsp;before&lt;br&gt;
use.&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;default&amp;nbsp;value&amp;nbsp;and&lt;br&gt;
contain&amp;nbsp;garbage&amp;nbsp;data&amp;nbsp;until&amp;nbsp;initialized.&amp;nbsp;The&lt;br&gt;
compiler&amp;nbsp;enforces&amp;nbsp;this&amp;nbsp;rule.&lt;br&gt;
&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;notValid()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x;&lt;br&gt;
7.&amp;nbsp;int&amp;nbsp;reply&amp;nbsp;=&amp;nbsp;x&amp;nbsp;+&amp;nbsp;y;&amp;nbsp;//&amp;nbsp;ERROR&lt;br&gt;
8.&amp;nbsp;return&amp;nbsp;reply;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:39" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>An&amp;nbsp;array&amp;nbsp;is&amp;nbsp;a&amp;nbsp;contiguous&amp;nbsp;chunk&amp;nbsp;of&amp;nbsp;memory&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
heap&amp;nbsp;representing&amp;nbsp;a&amp;nbsp;fixed&amp;nbsp;-&amp;nbsp;size&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;values&lt;br&gt;
that&amp;nbsp;all&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;data&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
Array&amp;nbsp;References&lt;br&gt;
An&amp;nbsp;array&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;that&amp;nbsp;denotes&amp;nbsp;the&lt;br&gt;
data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;values&amp;nbsp;to&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;array,&lt;br&gt;
using&amp;nbsp;square&amp;nbsp;brackets&amp;nbsp;to&amp;nbsp;denote&amp;nbsp;the&amp;nbsp;array&amp;nbsp;reference.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;declares&amp;nbsp;three&lt;br&gt;
array&amp;nbsp;references:&lt;br&gt;
&amp;nbsp;4.&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;finishTimes;&lt;br&gt;
&amp;nbsp;5.&amp;nbsp;String&amp;nbsp;lastNames&amp;nbsp;[];&lt;br&gt;
&amp;nbsp;6.&amp;nbsp;GregorianCalendar&amp;nbsp;[]&amp;nbsp;july;&lt;br&gt;
&lt;br&gt;
Declaring&amp;nbsp;an&amp;nbsp;Array&amp;nbsp;Reference&lt;br&gt;
In&amp;nbsp;Java&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;size&amp;nbsp;for&amp;nbsp;the&amp;nbsp;array&lt;br&gt;
when&amp;nbsp;declaring&amp;nbsp;a&amp;nbsp;reference.&amp;nbsp;An&amp;nbsp;array&amp;nbsp;reference&amp;nbsp;can&lt;br&gt;
point&amp;nbsp;to&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;any&amp;nbsp;length.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[20]&amp;nbsp;finishTimes;&amp;nbsp;//not&amp;nbsp;valid&lt;br&gt;
&amp;nbsp;&amp;nbsp;String&amp;nbsp;lastNames&amp;nbsp;[100];&amp;nbsp;//not&amp;nbsp;valid&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;declaring&amp;nbsp;an&amp;nbsp;array&amp;nbsp;reference,&amp;nbsp;we&amp;nbsp;are&amp;nbsp;only&lt;br&gt;
specifying&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;array.&amp;nbsp;The&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array&amp;nbsp;is&amp;nbsp;determined&lt;br&gt;
only&amp;nbsp;when&amp;nbsp;the&amp;nbsp;array&amp;nbsp;object&amp;nbsp;is&amp;nbsp;instantiated.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Array&amp;nbsp;Objects&lt;br&gt;
Because&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;array&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;it&amp;nbsp;should&lt;br&gt;
be&amp;nbsp;no&amp;nbsp;surprise&amp;nbsp;that&amp;nbsp;you&amp;nbsp;use&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword&amp;nbsp;to&lt;br&gt;
instantiate&amp;nbsp;an&amp;nbsp;array.&amp;nbsp;The&amp;nbsp;new&amp;nbsp;keyword&amp;nbsp;requires&amp;nbsp;the&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;array&amp;nbsp;being&amp;nbsp;instantiated&amp;nbsp;along&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;code&amp;nbsp;instantiates&amp;nbsp;three&amp;nbsp;array&amp;nbsp;objects:&lt;br&gt;
&amp;nbsp;&amp;nbsp;5.&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;finishTimes&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[20];&lt;br&gt;
&amp;nbsp;&amp;nbsp;6.&amp;nbsp;String&amp;nbsp;lastNames&amp;nbsp;[]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String[100];&lt;br&gt;
&amp;nbsp;&amp;nbsp;7.&amp;nbsp;GregorianCalendar&amp;nbsp;[]&amp;nbsp;july;&lt;br&gt;
&amp;nbsp;&amp;nbsp;8.&amp;nbsp;july&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar[31];&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Using&amp;nbsp;Arrays&lt;br&gt;
Every&amp;nbsp;array&amp;nbsp;has&amp;nbsp;an&amp;nbsp;attribute&amp;nbsp;named&amp;nbsp;length&amp;nbsp;that&lt;br&gt;
is&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array&lt;br&gt;
&lt;br&gt;
13.&amp;nbsp;GregorianCalendar&amp;nbsp;[]&amp;nbsp;july;&lt;br&gt;
14.&amp;nbsp;july&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar[31];&lt;br&gt;
15.&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;2010,&amp;nbsp;month&amp;nbsp;=&amp;nbsp;7;&lt;br&gt;
16.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;july.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;july[i]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GregorianCalendar(year,&amp;nbsp;month,&amp;nbsp;i+1);&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;Enhanced&amp;nbsp;__&amp;nbsp;for&amp;nbsp;Loop&lt;br&gt;
In&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;a&amp;nbsp;new&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;called&amp;nbsp;the&lt;br&gt;
enhanced&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;(also&amp;nbsp;called&amp;nbsp;a&amp;nbsp;for&amp;nbsp;-&amp;nbsp;each&amp;nbsp;loop&amp;nbsp;).&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;demonstrates&amp;nbsp;the&amp;nbsp;syntax&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;for&amp;nbsp;-&amp;nbsp;each&amp;nbsp;loop&amp;nbsp;by&amp;nbsp;iterating&amp;nbsp;through&amp;nbsp;the&amp;nbsp;july&amp;nbsp;array&amp;nbsp;and&lt;br&gt;
displaying&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;31&amp;nbsp;GregorianCalendar&amp;nbsp;objects:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;for(GregorianCalendar&amp;nbsp;day&amp;nbsp;:&amp;nbsp;july)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;System.out.print(day.get(Calendar.MONTH)&amp;nbsp;+&amp;nbsp;“/”&lt;br&gt;
&amp;nbsp;+&amp;nbsp;day.get(Calendar.DAY_OF_MONTH)&amp;nbsp;+&amp;nbsp;“/”&lt;br&gt;
&amp;nbsp;+&amp;nbsp;day.get(Calendar.YEAR)&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
This&amp;nbsp;enhanced&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;is&amp;nbsp;read&amp;nbsp;“&amp;nbsp;for&amp;nbsp;each&amp;nbsp;day&amp;nbsp;in&amp;nbsp;july&amp;nbsp;”,&lt;br&gt;
&amp;nbsp;where&amp;nbsp;day&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;GregorianCalendar&amp;nbsp;.&lt;br&gt;
The&amp;nbsp;enhanced&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;iterating&lt;br&gt;
through&amp;nbsp;many&amp;nbsp;of&amp;nbsp;the&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;found&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;java.util&amp;nbsp;package.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
Multidimensional&amp;nbsp;Arrays&lt;br&gt;
Java&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;multidimensional&amp;nbsp;arrays,&amp;nbsp;up&amp;nbsp;to&lt;br&gt;
as&amp;nbsp;many&amp;nbsp;dimensions&amp;nbsp;as&amp;nbsp;you&amp;nbsp;require.&lt;br&gt;
Declaring&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&amp;nbsp;multidimensional&amp;nbsp;array&lt;br&gt;
consists&amp;nbsp;of&amp;nbsp;denoting&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;square&amp;nbsp;brackets&amp;nbsp;for&lt;br&gt;
each&amp;nbsp;dimension&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;values&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;point&amp;nbsp;to&amp;nbsp;any&amp;nbsp;&lt;br&gt;
two&amp;nbsp;-&amp;nbsp;dimensional&amp;nbsp;array&amp;nbsp;of&amp;nbsp;chars&amp;nbsp;,&amp;nbsp;and&amp;nbsp;names&amp;nbsp;can&lt;br&gt;
refer&amp;nbsp;to&amp;nbsp;any&amp;nbsp;three&amp;nbsp;-&amp;nbsp;dimensional&amp;nbsp;array&amp;nbsp;of&amp;nbsp;String&amp;nbsp;references:&lt;br&gt;
&amp;nbsp;&amp;nbsp;5.&amp;nbsp;char&amp;nbsp;[][]&amp;nbsp;values;&lt;br&gt;
&amp;nbsp;&amp;nbsp;6.&amp;nbsp;String&amp;nbsp;[][][]&amp;nbsp;names;&lt;br&gt;
&amp;nbsp;&amp;nbsp;7.&amp;nbsp;values&amp;nbsp;=&amp;nbsp;new&amp;nbsp;char[4][3];&lt;br&gt;
&amp;nbsp;&amp;nbsp;8.&amp;nbsp;names&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String[10][5][20];&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Array&amp;nbsp;Initializers&lt;br&gt;
An&amp;nbsp;array&amp;nbsp;initializer&amp;nbsp;is&amp;nbsp;a&amp;nbsp;shorthand&amp;nbsp;notation&amp;nbsp;for&lt;br&gt;
declaring&amp;nbsp;an&amp;nbsp;array&amp;nbsp;and&amp;nbsp;fi&amp;nbsp;lling&amp;nbsp;it&amp;nbsp;with&amp;nbsp;values,&lt;br&gt;
all&amp;nbsp;in&amp;nbsp;a&amp;nbsp;single&amp;nbsp;statement.&amp;nbsp;Array&amp;nbsp;initializers&amp;nbsp;are&lt;br&gt;
convenient&amp;nbsp;for&amp;nbsp;quickly&amp;nbsp;creating&amp;nbsp;smaller&amp;nbsp;arrays.&amp;nbsp;Instead&lt;br&gt;
of&amp;nbsp;using&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword,&amp;nbsp;you&amp;nbsp;list&amp;nbsp;the&amp;nbsp;elements&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;array&amp;nbsp;in&amp;nbsp;curly&amp;nbsp;braces&amp;nbsp;separated&amp;nbsp;by&amp;nbsp;commas.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;static&amp;nbsp;java.lang.System.*;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;HelloWorld{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;World");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;data&amp;nbsp;=&amp;nbsp;{10,20,30,40,50,60,71,80,90,91};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do1(data);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.println();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;do1({1,2,3});&amp;nbsp;//&amp;nbsp;-ERROR&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do1(new&amp;nbsp;int[]{1,2,3});&amp;nbsp;//&amp;nbsp;CORRECT&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;do1(int&amp;nbsp;[]&amp;nbsp;array&amp;nbsp;){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;item&amp;nbsp;:&amp;nbsp;array)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.print(item&amp;nbsp;+&amp;nbsp;"&amp;nbsp;");&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:40" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays&amp;nbsp;types&amp;nbsp;in&amp;nbsp;java&amp;nbsp;how&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;two&amp;nbsp;arrays&lt;br&gt;
with&amp;nbsp;different&amp;nbsp;types&amp;nbsp;of&amp;nbsp;elemens&amp;nbsp;?&lt;br&gt;
What&amp;nbsp;can&amp;nbsp;you&amp;nbsp;say&amp;nbsp;about&amp;nbsp;this&amp;nbsp;code&amp;nbsp;:&lt;br&gt;
int&amp;nbsp;[]&amp;nbsp;m&amp;nbsp;=&amp;nbsp;{1,1,1};&lt;br&gt;
Object&amp;nbsp;[]&amp;nbsp;os&amp;nbsp;=&amp;nbsp;m;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;:&lt;br&gt;
import&amp;nbsp;static&amp;nbsp;java.lang.System.*;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;HelloWorld{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;[]&amp;nbsp;mas&amp;nbsp;=&amp;nbsp;{1,2,3};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;[]&amp;nbsp;o&amp;nbsp;=&amp;nbsp;mas;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//int&amp;nbsp;[]&amp;nbsp;intmas&amp;nbsp;=&amp;nbsp;{1,2,3};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Integer[]&amp;nbsp;integermas&amp;nbsp;=&amp;nbsp;intmas;&amp;nbsp;//&amp;nbsp;ERROR&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//int&amp;nbsp;[]&amp;nbsp;m&amp;nbsp;=&amp;nbsp;{1,1,1};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Object&amp;nbsp;[]&amp;nbsp;os&amp;nbsp;=&amp;nbsp;m;&amp;nbsp;//Error&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;[]&amp;nbsp;I&amp;nbsp;=&amp;nbsp;{1,1,1};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;[]&amp;nbsp;O&amp;nbsp;=&amp;nbsp;I;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dog&amp;nbsp;[]&amp;nbsp;dogs&amp;nbsp;=&amp;nbsp;{null,null,null};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Animal&amp;nbsp;[]&amp;nbsp;animals&amp;nbsp;=&amp;nbsp;dogs;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.println("System");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Animal&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Dog&amp;nbsp;extends&amp;nbsp;Animal{&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:41" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;:&amp;nbsp;Declaring&amp;nbsp;Classes&amp;nbsp;and&amp;nbsp;The&amp;nbsp;Instantiation&amp;nbsp;Process,&lt;br&gt;
describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;Java&amp;nbsp;class&amp;nbsp;can&amp;nbsp;__&amp;nbsp;contain&amp;nbsp;__&amp;nbsp;the&amp;nbsp;following&amp;nbsp;elements:&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Instance&amp;nbsp;variables&amp;nbsp;Also&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;fields,&lt;br&gt;
instance&amp;nbsp;variables&amp;nbsp;represent&amp;nbsp;the&amp;nbsp;attributes&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;object&amp;nbsp;being&amp;nbsp;described&amp;nbsp;and&amp;nbsp;are&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&lt;br&gt;
the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Class&amp;nbsp;variables&amp;nbsp;These&amp;nbsp;are&amp;nbsp;the&amp;nbsp;static&amp;nbsp;fields&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;and&amp;nbsp;represent&amp;nbsp;global&amp;nbsp;variables&amp;nbsp;and&lt;br&gt;
data&amp;nbsp;that&amp;nbsp;is&amp;nbsp;shared&amp;nbsp;among&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Methods&amp;nbsp;The&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;represent&amp;nbsp;the&lt;br&gt;
behaviors&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;being&amp;nbsp;described.&amp;nbsp;We&lt;br&gt;
will&amp;nbsp;discuss&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;detail&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Constructors&amp;nbsp;These&amp;nbsp;are&amp;nbsp;special&amp;nbsp;methods&amp;nbsp;that&lt;br&gt;
get&amp;nbsp;invoked&amp;nbsp;during&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;process&lt;br&gt;
and&amp;nbsp;allow&amp;nbsp;for&amp;nbsp;the&amp;nbsp;object&amp;nbsp;to&amp;nbsp;initialize&amp;nbsp;its&amp;nbsp;state.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Nested&amp;nbsp;classes&amp;nbsp;A&amp;nbsp;Java&amp;nbsp;class&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;within&lt;br&gt;
it&amp;nbsp;the&amp;nbsp;definition&amp;nbsp;of&amp;nbsp;another&amp;nbsp;class.&amp;nbsp;We&amp;nbsp;will&lt;br&gt;
discuss&amp;nbsp;nested&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;detail&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Instance&amp;nbsp;initializers&amp;nbsp;These&amp;nbsp;are&amp;nbsp;blocks&amp;nbsp;of&amp;nbsp;code&amp;nbsp;that&lt;br&gt;
execute&amp;nbsp;during&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;process.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Static&amp;nbsp;initializers&amp;nbsp;These&amp;nbsp;are&amp;nbsp;blocks&amp;nbsp;of&amp;nbsp;code&lt;br&gt;
that&amp;nbsp;execute&amp;nbsp;when&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;by&amp;nbsp;the&lt;br&gt;
class&amp;nbsp;loader.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;have&amp;nbsp;discussed&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;of&lt;br&gt;
primitive&amp;nbsp;types&amp;nbsp;and&amp;nbsp;arrays.&amp;nbsp;This&amp;nbsp;section&amp;nbsp;discusses&lt;br&gt;
the&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;process.&lt;br&gt;
As&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;programmer,&amp;nbsp;you&amp;nbsp;write&amp;nbsp;classes&amp;nbsp;and&lt;br&gt;
instantiate&amp;nbsp;them&amp;nbsp;to&amp;nbsp;create&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;new&lt;br&gt;
operator&amp;nbsp;is&amp;nbsp;the&amp;nbsp;typical&amp;nbsp;way&amp;nbsp;to&amp;nbsp;instantiate&amp;nbsp;a&lt;br&gt;
class.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&lt;br&gt;
instantiates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;java.text.DecimalFormat&amp;nbsp;object:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;DecimalFormat&amp;nbsp;df&amp;nbsp;=&amp;nbsp;new&amp;nbsp;DecimalFormat(“#,###.00”);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;events&amp;nbsp;that&amp;nbsp;occur&amp;nbsp;during&amp;nbsp;the&amp;nbsp;creation&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;instantiation&lt;br&gt;
process&amp;nbsp;.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;list&amp;nbsp;of&amp;nbsp;events&amp;nbsp;takes&lt;br&gt;
place&amp;nbsp;when&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;is&amp;nbsp;instantiated:&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;JVM&amp;nbsp;determines&amp;nbsp;the&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory&lt;br&gt;
needed&amp;nbsp;for&amp;nbsp;the&amp;nbsp;new&amp;nbsp;object,&amp;nbsp;allocates&amp;nbsp;the&lt;br&gt;
memory&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap,&amp;nbsp;and&amp;nbsp;zeroes&amp;nbsp;the&amp;nbsp;memory&lt;br&gt;
so&amp;nbsp;that&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;contain&amp;nbsp;any&amp;nbsp;garbage&amp;nbsp;data.&lt;br&gt;
-&amp;nbsp;Explicit&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;instance&amp;nbsp;variables&amp;nbsp;is&amp;nbsp;performed.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;appropriate&amp;nbsp;constructor&amp;nbsp;is&amp;nbsp;invoked,&lt;br&gt;
depending&amp;nbsp;on&amp;nbsp;the&amp;nbsp;arguments&amp;nbsp;specified&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
new&amp;nbsp;statement.&lt;br&gt;
-&amp;nbsp;Before&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;executes,&amp;nbsp;one&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;immediate&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;constructors&amp;nbsp;is&lt;br&gt;
executed.&lt;br&gt;
-&amp;nbsp;Any&amp;nbsp;instance&amp;nbsp;initializers&amp;nbsp;are&amp;nbsp;executed.&amp;nbsp;If&amp;nbsp;a&lt;br&gt;
class&amp;nbsp;has&amp;nbsp;multiple&amp;nbsp;instance&amp;nbsp;initializers,&amp;nbsp;they&lt;br&gt;
are&amp;nbsp;executed&amp;nbsp;in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;they&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
source&amp;nbsp;file.&lt;br&gt;
-&amp;nbsp;!!!&amp;nbsp;The&amp;nbsp;body&amp;nbsp;of&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;executes.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;new&amp;nbsp;operator&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;new&amp;nbsp;object.&lt;br&gt;
=====&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Default&amp;nbsp;Constructor&lt;br&gt;
Every&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;constructor.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;do&amp;nbsp;not&lt;br&gt;
explicitly&amp;nbsp;defi&amp;nbsp;ne&amp;nbsp;a&amp;nbsp;constructor&amp;nbsp;for&amp;nbsp;a&amp;nbsp;class,&amp;nbsp;then&lt;br&gt;
the&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;inserts&amp;nbsp;a&amp;nbsp;default&amp;nbsp;constructor&lt;br&gt;
for&amp;nbsp;you.&amp;nbsp;The&amp;nbsp;default&amp;nbsp;constructor&amp;nbsp;takes&amp;nbsp;in&amp;nbsp;no&lt;br&gt;
arguments&amp;nbsp;and&amp;nbsp;has&amp;nbsp;an&amp;nbsp;empty&amp;nbsp;method&amp;nbsp;body.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;a&amp;nbsp;class&amp;nbsp;named&amp;nbsp;Tomato&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&amp;nbsp;defi&amp;nbsp;nition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Tomato&amp;nbsp;extends&amp;nbsp;Fruit&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;double&amp;nbsp;weight;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;ripe;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setWeight(double&amp;nbsp;w)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;weight&amp;nbsp;=&amp;nbsp;w;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;double&amp;nbsp;getWeight()&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;return&amp;nbsp;weight;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&lt;br&gt;
13.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setRipe(boolean&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;ripe&amp;nbsp;=&amp;nbsp;b;&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&lt;br&gt;
17.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isRipe()&amp;nbsp;{&lt;br&gt;
18.&amp;nbsp;return&amp;nbsp;ripe;&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
20.}&lt;br&gt;
Because&amp;nbsp;the&amp;nbsp;Tomato&amp;nbsp;class&amp;nbsp;does&amp;nbsp;not&amp;nbsp;explicitly&amp;nbsp;defi&amp;nbsp;ne&amp;nbsp;a&amp;nbsp;constructor,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;generates&lt;br&gt;
one&amp;nbsp;that&amp;nbsp;looks&amp;nbsp;like&amp;nbsp;the&amp;nbsp;following:&lt;br&gt;
public&amp;nbsp;Tomato()&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
~!!!!!!!!&amp;nbsp;Know&amp;nbsp;When&amp;nbsp;a&amp;nbsp;Class&amp;nbsp;Gets&amp;nbsp;a&amp;nbsp;Default&amp;nbsp;Constructor&lt;br&gt;
Keep&amp;nbsp;in&amp;nbsp;mind&amp;nbsp;that&amp;nbsp;you&amp;nbsp;only&amp;nbsp;get&amp;nbsp;a&amp;nbsp;default&amp;nbsp;constructor&lt;br&gt;
___&amp;nbsp;if&amp;nbsp;you&amp;nbsp;do&amp;nbsp;not&amp;nbsp;explicitly&amp;nbsp;include&amp;nbsp;one&amp;nbsp;in&amp;nbsp;your&amp;nbsp;class&amp;nbsp;___.&lt;br&gt;
========&lt;br&gt;
Using&amp;nbsp;__&amp;nbsp;this&amp;nbsp;&amp;nbsp;__&amp;nbsp;in&amp;nbsp;Constructors&lt;br&gt;
The&amp;nbsp;this&amp;nbsp;keyword&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;represents&amp;nbsp;the&lt;br&gt;
reference&amp;nbsp;that&amp;nbsp;every&amp;nbsp;object&amp;nbsp;has&amp;nbsp;to&amp;nbsp;itself.&lt;br&gt;
&lt;br&gt;
~!!!&amp;nbsp;The&amp;nbsp;__&amp;nbsp;this&amp;nbsp;__&amp;nbsp;!!!!!!!!!!!!!!!!!!!&lt;br&gt;
keyword&amp;nbsp;also&amp;nbsp;has&amp;nbsp;another&amp;nbsp;use&amp;nbsp;within&lt;br&gt;
constructors&amp;nbsp;that&amp;nbsp;is&amp;nbsp;unrelated&amp;nbsp;to&amp;nbsp;the&amp;nbsp;this&amp;nbsp;reference.&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;this&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;another&lt;br&gt;
constructor&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;class,&amp;nbsp;allowing&lt;br&gt;
you&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;repeating&amp;nbsp;code&amp;nbsp;in&amp;nbsp;multiple&amp;nbsp;constructors.&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.Date;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Employee&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;firstName,&amp;nbsp;lastName;&lt;br&gt;
5.&amp;nbsp;private&amp;nbsp;Date&amp;nbsp;hireDate;&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;Employee(String&amp;nbsp;fn,&amp;nbsp;String&amp;nbsp;ln)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;this(fn,&amp;nbsp;ln,&amp;nbsp;new&amp;nbsp;Date());&lt;br&gt;
9.&amp;nbsp;System.out.println(“Inside&amp;nbsp;first&amp;nbsp;constructor”);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;Employee(String&amp;nbsp;fn,&amp;nbsp;String&amp;nbsp;ln,&amp;nbsp;Date&amp;nbsp;hd)&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(“Inside&amp;nbsp;second&amp;nbsp;constructor”);&lt;br&gt;
14.&amp;nbsp;firstName&amp;nbsp;=&amp;nbsp;fn;&lt;br&gt;
15.&amp;nbsp;lastName&amp;nbsp;=&amp;nbsp;ln;&lt;br&gt;
16.&amp;nbsp;hireDate&amp;nbsp;=&amp;nbsp;hd;&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.}&lt;br&gt;
====================&lt;br&gt;
&lt;br&gt;
Using&amp;nbsp;__&amp;nbsp;super&amp;nbsp;__&amp;nbsp;in&amp;nbsp;Constructors&lt;br&gt;
Similar&amp;nbsp;to&amp;nbsp;how&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;this&amp;nbsp;keyword&lt;br&gt;
to&amp;nbsp;invoke&amp;nbsp;another&amp;nbsp;constructor&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
class,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;super&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;invoke&lt;br&gt;
a&amp;nbsp;constructor&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class.&amp;nbsp;Using&lt;br&gt;
super&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;child&amp;nbsp;class&amp;nbsp;to&amp;nbsp;choose&amp;nbsp;which&lt;br&gt;
parent&amp;nbsp;class&amp;nbsp;constructor&amp;nbsp;gets&amp;nbsp;executed.&amp;nbsp;As&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;this&amp;nbsp;keyword,&amp;nbsp;any&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;super&amp;nbsp;must&amp;nbsp;be&lt;br&gt;
the&amp;nbsp;___&amp;nbsp;first&amp;nbsp;___&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code&amp;nbsp;in&amp;nbsp;your&amp;nbsp;constructor&lt;br&gt;
or&amp;nbsp;the&amp;nbsp;code&amp;nbsp;will&amp;nbsp;not&amp;nbsp;compile.&lt;br&gt;
&lt;br&gt;
...&lt;br&gt;
public&amp;nbsp;NonFictionBook(String&amp;nbsp;subject)&amp;nbsp;{&lt;br&gt;
super();&amp;nbsp;//Compiler&amp;nbsp;adds&amp;nbsp;this&amp;nbsp;statement&lt;br&gt;
this.subject&amp;nbsp;=&amp;nbsp;subject;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:42" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;core&amp;nbsp;:&amp;nbsp;Instance&amp;nbsp;Initializers&amp;nbsp;and&amp;nbsp;Static&amp;nbsp;Initializers,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;ClassLoader&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>An&amp;nbsp;_&amp;nbsp;&amp;nbsp;instance&amp;nbsp;initializer&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&lt;br&gt;
declared&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;executes&amp;nbsp;for&amp;nbsp;each&amp;nbsp;new&lt;br&gt;
instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;An&amp;nbsp;instance&amp;nbsp;initializer&lt;br&gt;
executes&amp;nbsp;immediately&amp;nbsp;after&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class&lt;br&gt;
constructor&amp;nbsp;fi&amp;nbsp;nishes&amp;nbsp;and&amp;nbsp;before&amp;nbsp;the&amp;nbsp;body&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
class&amp;nbsp;constructor&amp;nbsp;executes.&amp;nbsp;A&amp;nbsp;class&amp;nbsp;can&amp;nbsp;have&lt;br&gt;
multiple&amp;nbsp;instance&amp;nbsp;initializers&amp;nbsp;and&amp;nbsp;they&amp;nbsp;are&lt;br&gt;
executed&amp;nbsp;in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;they&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;the&amp;nbsp;source&lt;br&gt;
file.&amp;nbsp;Instance&amp;nbsp;initializers&amp;nbsp;are&amp;nbsp;not&amp;nbsp;members&amp;nbsp;of&amp;nbsp;a&lt;br&gt;
class&amp;nbsp;like&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;are.&amp;nbsp;You&amp;nbsp;cannot&lt;br&gt;
explicitly&amp;nbsp;invoke&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;initializer&amp;nbsp;because&lt;br&gt;
it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Why&amp;nbsp;Use&amp;nbsp;an&amp;nbsp;Instance&amp;nbsp;Initializer?&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;write&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;do&amp;nbsp;not&lt;br&gt;
use&amp;nbsp;instance&amp;nbsp;initializers.&amp;nbsp;A&amp;nbsp;constructor&amp;nbsp;can&lt;br&gt;
always&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;initialize&amp;nbsp;any&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object.&lt;br&gt;
Some&amp;nbsp;developers&amp;nbsp;like&amp;nbsp;to&amp;nbsp;use&amp;nbsp;instance&lt;br&gt;
initializers&amp;nbsp;for&amp;nbsp;code&amp;nbsp;readability,&amp;nbsp;because&amp;nbsp;you&amp;nbsp;can&lt;br&gt;
put&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;initializer&amp;nbsp;in&amp;nbsp;the&amp;nbsp;vicinity&lt;br&gt;
of&amp;nbsp;your&amp;nbsp;field&amp;nbsp;declarations.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
Button&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;the&amp;nbsp;ColorChanger&lt;br&gt;
class&amp;nbsp;do&amp;nbsp;not&amp;nbsp;rely&amp;nbsp;on&amp;nbsp;constructor&amp;nbsp;arguments&amp;nbsp;to&amp;nbsp;be&amp;nbsp;initialized:&lt;br&gt;
&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ColorChanger&amp;nbsp;extends&amp;nbsp;Frame&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;private&amp;nbsp;Button&amp;nbsp;redBtn,&amp;nbsp;whiteBtn,&amp;nbsp;blueBtn;&lt;br&gt;
9.&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;redBtn&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Button(“Red”);&lt;br&gt;
11.&amp;nbsp;whiteBtn&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Button(“White”);&lt;br&gt;
12.&amp;nbsp;blueBtn&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Button(“Blue”);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
=======&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;__&amp;nbsp;static&amp;nbsp;initializer&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;that&amp;nbsp;executes&lt;br&gt;
once&amp;nbsp;when&amp;nbsp;a&amp;nbsp;class&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;by&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
loader.&amp;nbsp;The&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;a&amp;nbsp;static&amp;nbsp;initializer&amp;nbsp;is&amp;nbsp;the&amp;nbsp;static&lt;br&gt;
keyword&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;curly&amp;nbsp;braces:&lt;br&gt;
static&amp;nbsp;{&lt;br&gt;
//a&amp;nbsp;static&amp;nbsp;initializer&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;multiple&amp;nbsp;static&amp;nbsp;initializers.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;executed&amp;nbsp;in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;they&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;the&amp;nbsp;source&lt;br&gt;
file.&amp;nbsp;The&amp;nbsp;purpose&amp;nbsp;of&amp;nbsp;a&amp;nbsp;static&amp;nbsp;initializer&amp;nbsp;is&amp;nbsp;to&amp;nbsp;perform&lt;br&gt;
any&amp;nbsp;complex&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;in&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
or&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;any&amp;nbsp;tasks&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;performed&lt;br&gt;
only&amp;nbsp;once.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;a&amp;nbsp;common&amp;nbsp;use&amp;nbsp;of&amp;nbsp;static&lt;br&gt;
initializers&amp;nbsp;is&amp;nbsp;to&amp;nbsp;load&amp;nbsp;system&amp;nbsp;libraries:&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MyLibrary&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.loadLibrary(“mylibrary”);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;//remainder&amp;nbsp;of&amp;nbsp;class&amp;nbsp;definition&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
What&amp;nbsp;Is&amp;nbsp;a&amp;nbsp;Class&amp;nbsp;Loader?&lt;br&gt;
Every&amp;nbsp;JVM&amp;nbsp;has&amp;nbsp;a&amp;nbsp;built&amp;nbsp;-&amp;nbsp;in&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;object&amp;nbsp;of&lt;br&gt;
type&amp;nbsp;java.lang.ClassLoader&amp;nbsp;that&amp;nbsp;is&amp;nbsp;responsible&amp;nbsp;for&amp;nbsp;the&amp;nbsp;loading&lt;br&gt;
of&amp;nbsp;classes&amp;nbsp;into&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;program.&lt;br&gt;
When&amp;nbsp;you&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;a&amp;nbsp;class&amp;nbsp;in&amp;nbsp;your&amp;nbsp;Java&amp;nbsp;program,&amp;nbsp;the&lt;br&gt;
class&amp;nbsp;loader&amp;nbsp;searches&amp;nbsp;the&amp;nbsp;class&amp;nbsp;path&amp;nbsp;for&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;&lt;br&gt;
.class&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;and&amp;nbsp;loads&amp;nbsp;the&amp;nbsp;bytecode&amp;nbsp;into&amp;nbsp;memory.&amp;nbsp;For&amp;nbsp;each&lt;br&gt;
class&amp;nbsp;that&amp;nbsp;is&amp;nbsp;loaded,&amp;nbsp;the&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;instantiates&amp;nbsp;a&lt;br&gt;
java.lang.Class&amp;nbsp;object.&amp;nbsp;The&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;loads&amp;nbsp;a&amp;nbsp;class&amp;nbsp;only&amp;nbsp;once,&lt;br&gt;
so&amp;nbsp;there&amp;nbsp;is&amp;nbsp;only&amp;nbsp;one&amp;nbsp;Class&amp;nbsp;object&amp;nbsp;for&amp;nbsp;each&amp;nbsp;class&lt;br&gt;
that&amp;nbsp;your&amp;nbsp;program&amp;nbsp;uses.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;here&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Class&lt;br&gt;
object&amp;nbsp;that&amp;nbsp;the&amp;nbsp;static&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&lt;br&gt;
your&amp;nbsp;class&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;memory.&amp;nbsp;The&amp;nbsp;class&amp;nbsp;loader&lt;br&gt;
also&amp;nbsp;invokes&amp;nbsp;any&amp;nbsp;static&amp;nbsp;initializers&amp;nbsp;in&lt;br&gt;
a&amp;nbsp;class&amp;nbsp;after&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;loaded.&amp;nbsp;These&amp;nbsp;static&amp;nbsp;initializers&lt;br&gt;
allow&amp;nbsp;you&amp;nbsp;to&amp;nbsp;initialize&amp;nbsp;any&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;perform&lt;br&gt;
any&amp;nbsp;onetime&amp;nbsp;tasks&amp;nbsp;for&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;write&amp;nbsp;your&amp;nbsp;own&lt;br&gt;
class&amp;nbsp;loader,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;built&amp;nbsp;-&amp;nbsp;in&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;is&amp;nbsp;suffi&amp;nbsp;cient&amp;nbsp;for&amp;nbsp;most&lt;br&gt;
Java&amp;nbsp;applications.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
Example&amp;nbsp;(static&amp;nbsp;and&amp;nbsp;intance&amp;nbsp;initializers&amp;nbsp;)&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;class&amp;nbsp;HelloWorld{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;HelloWorld(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Constructor");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("instance&amp;nbsp;initializer");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("instance&amp;nbsp;initializer2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Static&amp;nbsp;initializer1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Static&amp;nbsp;initializer2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;World");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HelloWorld&amp;nbsp;w&amp;nbsp;=new&amp;nbsp;HelloWorld();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Static&amp;nbsp;initializer1&lt;br&gt;
Static&amp;nbsp;initializer2&lt;br&gt;
Hello&amp;nbsp;World&lt;br&gt;
instance&amp;nbsp;initializer&lt;br&gt;
instance&amp;nbsp;initializer2&lt;br&gt;
Constructor&lt;br&gt;
=========</questionanswer>
  </question>
  <question id="1_0_0_0_0:43" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Declaring&amp;nbsp;Methods&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Method&amp;nbsp;Declarations&lt;br&gt;
The&amp;nbsp;defi&amp;nbsp;nition&amp;nbsp;of&amp;nbsp;a&amp;nbsp;method&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&lt;br&gt;
as&amp;nbsp;a&amp;nbsp;method&amp;nbsp;declaration&amp;nbsp;.&amp;nbsp;A&amp;nbsp;method&amp;nbsp;declaration&amp;nbsp;in&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;syntax:&lt;br&gt;
&lt;br&gt;
accessspecifier&amp;nbsp;otherspecifier&amp;nbsp;returnvalue&amp;nbsp;methodName(parameterlist)&amp;nbsp;throws&lt;br&gt;
exceptionlist&amp;nbsp;{&lt;br&gt;
methodbody&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Like&amp;nbsp;any&amp;nbsp;member&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class,&amp;nbsp;a&amp;nbsp;method&amp;nbsp;has&amp;nbsp;an&amp;nbsp;access&amp;nbsp;specifier,&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;four&amp;nbsp;values:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;The&amp;nbsp;method&amp;nbsp;is&amp;nbsp;accessible&amp;nbsp;to&amp;nbsp;any&amp;nbsp;other&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;private&amp;nbsp;The&amp;nbsp;method&amp;nbsp;is&amp;nbsp;only&amp;nbsp;accessible&amp;nbsp;from&amp;nbsp;within&amp;nbsp;the&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;protected&amp;nbsp;Only&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;package&amp;nbsp;and&amp;nbsp;child&lt;br&gt;
classes&amp;nbsp;can&amp;nbsp;access&amp;nbsp;the&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;Default&amp;nbsp;access&amp;nbsp;Only&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;package&amp;nbsp;can&lt;br&gt;
access&amp;nbsp;the&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;&lt;br&gt;
The&amp;nbsp;other&amp;nbsp;specifi&amp;nbsp;ers&amp;nbsp;are&amp;nbsp;Java&amp;nbsp;keywords&amp;nbsp;from&amp;nbsp;the&amp;nbsp;following&amp;nbsp;list:&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;This&amp;nbsp;modifier&amp;nbsp;declares&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method,&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;class&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;final&amp;nbsp;The&amp;nbsp;method&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;overridden&amp;nbsp;by&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;abstract&amp;nbsp;This&amp;nbsp;modifi&amp;nbsp;er&amp;nbsp;declares&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;method&amp;nbsp;that&amp;nbsp;must&lt;br&gt;
be&amp;nbsp;overridden&amp;nbsp;by&amp;nbsp;any&amp;nbsp;nonabstract&amp;nbsp;child&amp;nbsp;classes.&lt;br&gt;
-&amp;nbsp;native&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;method&amp;nbsp;maps&amp;nbsp;to&amp;nbsp;a&amp;nbsp;method&amp;nbsp;written&amp;nbsp;in&lt;br&gt;
a&amp;nbsp;different&amp;nbsp;language,&amp;nbsp;usually&amp;nbsp;C&amp;nbsp;or&amp;nbsp;C++.&amp;nbsp;The&amp;nbsp;SCJP&lt;br&gt;
exam&amp;nbsp;does&amp;nbsp;not&amp;nbsp;require&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;the&amp;nbsp;native&amp;nbsp;keyword.&lt;br&gt;
-&amp;nbsp;synchronized&amp;nbsp;The&amp;nbsp;calling&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;obtain&amp;nbsp;the&lt;br&gt;
object's&amp;nbsp;lock&amp;nbsp;before&amp;nbsp;the&amp;nbsp;method&amp;nbsp;executes.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
A&amp;nbsp;Java&amp;nbsp;method&amp;nbsp;must&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;__&amp;nbsp;return&amp;nbsp;value.&amp;nbsp;__&amp;nbsp;&lt;br&gt;
(A&amp;nbsp;method&amp;nbsp;declares&amp;nbsp;void&amp;nbsp;if&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;actually&amp;nbsp;return&amp;nbsp;anything.)&lt;br&gt;
&amp;nbsp;A&amp;nbsp;list&amp;nbsp;of&amp;nbsp;the&amp;nbsp;possible&amp;nbsp;return&amp;nbsp;values&amp;nbsp;of&amp;nbsp;a&amp;nbsp;method&amp;nbsp;follows:&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;The&amp;nbsp;method&amp;nbsp;does&amp;nbsp;not&amp;nbsp;return&amp;nbsp;anything.&lt;br&gt;
-Primitive&amp;nbsp;type&amp;nbsp;A&amp;nbsp;method&amp;nbsp;can&amp;nbsp;return&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;,&amp;nbsp;short,&lt;br&gt;
int,&amp;nbsp;long,&amp;nbsp;float,&amp;nbsp;double,&amp;nbsp;boolean,&amp;nbsp;or&amp;nbsp;char&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;Reference&amp;nbsp;type&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Variable&amp;nbsp;-&amp;nbsp;Length&amp;nbsp;Argument&amp;nbsp;List&lt;br&gt;
As&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;a&amp;nbsp;method&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;can&amp;nbsp;declare&lt;br&gt;
a&amp;nbsp;variable&amp;nbsp;-&amp;nbsp;length&amp;nbsp;argument&amp;nbsp;list&amp;nbsp;by&amp;nbsp;using&lt;br&gt;
the&amp;nbsp;ellipsis&amp;nbsp;(&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;)&amp;nbsp;after&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
variable&amp;nbsp;-&amp;nbsp;length&amp;nbsp;parameter.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;method&amp;nbsp;can&amp;nbsp;take&amp;nbsp;in&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&lt;br&gt;
String&amp;nbsp;references:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;displayErrors(OutputStream&amp;nbsp;out,&amp;nbsp;String...&amp;nbsp;errors)&lt;br&gt;
&lt;br&gt;
Behind&amp;nbsp;the&amp;nbsp;scenes,&amp;nbsp;the&amp;nbsp;errors&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;actually&lt;br&gt;
implemented&amp;nbsp;as&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;String&amp;nbsp;references.&amp;nbsp;We&amp;nbsp;will&lt;br&gt;
discuss&amp;nbsp;the&amp;nbsp;details&amp;nbsp;of&amp;nbsp;variable&amp;nbsp;-&amp;nbsp;length&amp;nbsp;arguments&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;section.&lt;br&gt;
&lt;br&gt;
========&lt;br&gt;
Method&amp;nbsp;Signatures&lt;br&gt;
A&amp;nbsp;method&amp;nbsp;signature&amp;nbsp;consists&amp;nbsp;only&amp;nbsp;of&amp;nbsp;a&amp;nbsp;method's&amp;nbsp;name&lt;br&gt;
and&amp;nbsp;parameter&amp;nbsp;types.&amp;nbsp;The&amp;nbsp;modifiers,&amp;nbsp;return&amp;nbsp;type,&lt;br&gt;
exception&amp;nbsp;list,&amp;nbsp;and&amp;nbsp;method&amp;nbsp;body&amp;nbsp;are&amp;nbsp;not&amp;nbsp;considered&amp;nbsp;a&amp;nbsp;part&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;method's&amp;nbsp;signature.&amp;nbsp;The&amp;nbsp;concept&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;method&amp;nbsp;signature&amp;nbsp;is&amp;nbsp;important&amp;nbsp;in&amp;nbsp;method&lt;br&gt;
overriding,&amp;nbsp;which&amp;nbsp;we&amp;nbsp;discuss&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
__&amp;nbsp;JavaBeans&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;technology&amp;nbsp;for&amp;nbsp;developing&amp;nbsp;software&lt;br&gt;
components&amp;nbsp;in&amp;nbsp;Java.&lt;br&gt;
&lt;br&gt;
JavaBeans&amp;nbsp;have&amp;nbsp;properties&amp;nbsp;that&amp;nbsp;are&amp;nbsp;determined&amp;nbsp;by&lt;br&gt;
the&amp;nbsp;public&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;These&lt;br&gt;
special&amp;nbsp;methods&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;property&amp;nbsp;methods&amp;nbsp;begin&amp;nbsp;with&amp;nbsp;“&amp;nbsp;set&amp;nbsp;”&amp;nbsp;and&amp;nbsp;“&amp;nbsp;get,&lt;br&gt;
”&amp;nbsp;or&amp;nbsp;“&amp;nbsp;set&amp;nbsp;”&amp;nbsp;and&amp;nbsp;“&amp;nbsp;is&amp;nbsp;”&amp;nbsp;for&amp;nbsp;boolean&amp;nbsp;data&lt;br&gt;
types.&amp;nbsp;The&amp;nbsp;set&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;mutator&lt;br&gt;
methods&amp;nbsp;because&amp;nbsp;they&amp;nbsp;change&amp;nbsp;the&lt;br&gt;
property,&amp;nbsp;and&amp;nbsp;get&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;accessor&lt;br&gt;
methods&amp;nbsp;because&amp;nbsp;they&amp;nbsp;return&amp;nbsp;a&amp;nbsp;property.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;letter&amp;nbsp;following&amp;nbsp;the&amp;nbsp;set&amp;nbsp;or&amp;nbsp;get&amp;nbsp;is&amp;nbsp;capitalized.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;property&amp;nbsp;name&amp;nbsp;is&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;method&amp;nbsp;minus&lt;br&gt;
the&amp;nbsp;set&amp;nbsp;or&amp;nbsp;get,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;first&amp;nbsp;letter&amp;nbsp;in&amp;nbsp;lowercase.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;a&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;following&amp;nbsp;two&amp;nbsp;methods:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setLastName(String&amp;nbsp;s)&lt;br&gt;
&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getLastName()&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
JavaBean&amp;nbsp;Event&amp;nbsp;Methods&lt;br&gt;
The&amp;nbsp;JavaBean&amp;nbsp;specifi&amp;nbsp;cation&amp;nbsp;also&amp;nbsp;defi&amp;nbsp;nes&amp;nbsp;event&lt;br&gt;
handler&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;naming&amp;nbsp;convention:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addXxxxListener(XxxxListener&amp;nbsp;a)&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;removeXxxxListener(XxxxListener&amp;nbsp;a)&lt;br&gt;
=======&lt;br&gt;
&lt;br&gt;
Instance&amp;nbsp;Methods&lt;br&gt;
An&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;is&amp;nbsp;a&amp;nbsp;nonstatic&amp;nbsp;method&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;instance&amp;nbsp;methods&amp;nbsp;because&amp;nbsp;they&lt;br&gt;
represent&amp;nbsp;the&amp;nbsp;behaviors&amp;nbsp;of&amp;nbsp;each&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
Methods&amp;nbsp;__&amp;nbsp;Behind&amp;nbsp;__&amp;nbsp;the&amp;nbsp;Scenes&lt;br&gt;
From&amp;nbsp;an&amp;nbsp;object&amp;nbsp;-&amp;nbsp;oriented&amp;nbsp;point&amp;nbsp;of&amp;nbsp;view,&amp;nbsp;each&lt;br&gt;
instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;gets&amp;nbsp;each&amp;nbsp;field&amp;nbsp;and&lt;br&gt;
method&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;when&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
is&amp;nbsp;instantiated.&amp;nbsp;For&amp;nbsp;fields,&amp;nbsp;this&amp;nbsp;is&amp;nbsp;exactly&lt;br&gt;
what&amp;nbsp;happens&amp;nbsp;on&amp;nbsp;the&amp;nbsp;heap.&amp;nbsp;Every&amp;nbsp;object&amp;nbsp;must&lt;br&gt;
have&amp;nbsp;its&amp;nbsp;own&amp;nbsp;memory&amp;nbsp;for&amp;nbsp;each&amp;nbsp;nonstatic&lt;br&gt;
fi&amp;nbsp;eld&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;because&amp;nbsp;the&amp;nbsp;values&amp;nbsp;of&amp;nbsp;the&amp;nbsp;fields&lt;br&gt;
are&amp;nbsp;unique&amp;nbsp;for&amp;nbsp;each&amp;nbsp;object.&lt;br&gt;
However,&amp;nbsp;from&amp;nbsp;a&amp;nbsp;practical&amp;nbsp;point&amp;nbsp;of&amp;nbsp;view,&amp;nbsp;each&lt;br&gt;
object&amp;nbsp;does&amp;nbsp;not&amp;nbsp;need&amp;nbsp;its&amp;nbsp;own&amp;nbsp;copy&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;methods&amp;nbsp;because&amp;nbsp;methods&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&amp;nbsp;any&amp;nbsp;state&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;each&amp;nbsp;method&amp;nbsp;is&amp;nbsp;the&amp;nbsp;exact&lt;br&gt;
same&amp;nbsp;for&amp;nbsp;every&amp;nbsp;instance.&amp;nbsp;To&amp;nbsp;save&amp;nbsp;memory,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;instead&amp;nbsp;stores&amp;nbsp;the&lt;br&gt;
method&amp;nbsp;implementations&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Class&amp;nbsp;object&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;class,&amp;nbsp;and&amp;nbsp;each&amp;nbsp;object&amp;nbsp;accesses&amp;nbsp;these&lt;br&gt;
implementations&amp;nbsp;by&amp;nbsp;storing&amp;nbsp;a&amp;nbsp;corresponding&amp;nbsp;function&lt;br&gt;
pointer&amp;nbsp;for&amp;nbsp;each&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&lt;br&gt;
instance&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;actually&amp;nbsp;shared&amp;nbsp;among&amp;nbsp;all&amp;nbsp;instances.&lt;br&gt;
However,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;that&lt;br&gt;
from&amp;nbsp;a&amp;nbsp;theoretical&amp;nbsp;point&amp;nbsp;of&amp;nbsp;view&amp;nbsp;every&amp;nbsp;object&lt;br&gt;
has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;each&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;and&amp;nbsp;each&amp;nbsp;method&lt;br&gt;
in&amp;nbsp;memory.&amp;nbsp;If&amp;nbsp;no&amp;nbsp;Customer&amp;nbsp;objects&amp;nbsp;exist&amp;nbsp;in&amp;nbsp;memory,&lt;br&gt;
then&amp;nbsp;neither&amp;nbsp;do&amp;nbsp;any&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;or&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Customer&lt;br&gt;
class.&amp;nbsp;If&amp;nbsp;there&amp;nbsp;are&amp;nbsp;100&amp;nbsp;Customer&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;memory,&amp;nbsp;then&amp;nbsp;there&amp;nbsp;are&amp;nbsp;100&amp;nbsp;name&amp;nbsp;references&amp;nbsp;and&lt;br&gt;
100&amp;nbsp;ints&amp;nbsp;named&amp;nbsp;id&amp;nbsp;.&amp;nbsp;In&amp;nbsp;theory,&amp;nbsp;there&amp;nbsp;are&amp;nbsp;also&lt;br&gt;
100&amp;nbsp;setName&amp;nbsp;methods,&amp;nbsp;100&amp;nbsp;getName&amp;nbsp;methods,&amp;nbsp;100&lt;br&gt;
processOrder&amp;nbsp;methods,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
=====&lt;br&gt;
&lt;br&gt;
Static&amp;nbsp;Methods&lt;br&gt;
A&amp;nbsp;static&amp;nbsp;method&amp;nbsp;,&amp;nbsp;also&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;class&amp;nbsp;method,&lt;br&gt;
is&amp;nbsp;declared&amp;nbsp;using&amp;nbsp;the&amp;nbsp;static&amp;nbsp;keyword.&amp;nbsp;A&amp;nbsp;static&lt;br&gt;
method&amp;nbsp;is&amp;nbsp;just&amp;nbsp;like&amp;nbsp;a&amp;nbsp;static&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;in&amp;nbsp;that&amp;nbsp;it&amp;nbsp;belongs&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;class,&amp;nbsp;not&amp;nbsp;the&amp;nbsp;instances.&amp;nbsp;A&amp;nbsp;static&amp;nbsp;method&amp;nbsp;is&lt;br&gt;
invoked&amp;nbsp;without&amp;nbsp;any&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;Instead,&amp;nbsp;use&lt;br&gt;
the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;one&amp;nbsp;of&amp;nbsp;its&amp;nbsp;static&lt;br&gt;
methods.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;java.lang.Math&amp;nbsp;class&lt;br&gt;
has&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;named&amp;nbsp;sqrt&amp;nbsp;that&amp;nbsp;computes&lt;br&gt;
the&amp;nbsp;square&amp;nbsp;root&amp;nbsp;of&amp;nbsp;a&amp;nbsp;double&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;double&amp;nbsp;sqrt(double&amp;nbsp;a)&lt;br&gt;
&lt;br&gt;
Compare&amp;nbsp;__&amp;nbsp;Static&amp;nbsp;to&amp;nbsp;Global&amp;nbsp;__&lt;br&gt;
Java&amp;nbsp;does&amp;nbsp;not&amp;nbsp;allow&amp;nbsp;global&amp;nbsp;methods;&amp;nbsp;all&amp;nbsp;methods&lt;br&gt;
must&amp;nbsp;be&amp;nbsp;defi&amp;nbsp;ned&amp;nbsp;within&amp;nbsp;a&amp;nbsp;class.&amp;nbsp;A&amp;nbsp;static&amp;nbsp;method&amp;nbsp;is&lt;br&gt;
the&amp;nbsp;closest&amp;nbsp;thing&amp;nbsp;we&amp;nbsp;have&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;to&amp;nbsp;creating&amp;nbsp;a&lt;br&gt;
global&amp;nbsp;function.&amp;nbsp;They&amp;nbsp;are&amp;nbsp;utility&amp;nbsp;methods&amp;nbsp;that&lt;br&gt;
perform&amp;nbsp;their&amp;nbsp;task&amp;nbsp;only&amp;nbsp;with&amp;nbsp;the&amp;nbsp;arguments&amp;nbsp;passed&amp;nbsp;in&amp;nbsp;or&amp;nbsp;with&lt;br&gt;
other&amp;nbsp;“&amp;nbsp;global&amp;nbsp;”&amp;nbsp;data&amp;nbsp;like&amp;nbsp;static&amp;nbsp;fields.&lt;br&gt;
&lt;br&gt;
!!@!!!!!&amp;nbsp;non-static&amp;nbsp;variable&amp;nbsp;message&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
referenced&amp;nbsp;from&amp;nbsp;a&amp;nbsp;static&amp;nbsp;context&amp;nbsp;!!!!!!!!!&lt;br&gt;
&lt;br&gt;
=================&lt;br&gt;
&lt;br&gt;
Variable&amp;nbsp;-&amp;nbsp;Length&amp;nbsp;Arguments&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;logErrors(Date&amp;nbsp;timeStamp,&amp;nbsp;String...&amp;nbsp;errors)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;out.print(timeStamp&amp;nbsp;+&amp;nbsp;“:”);&lt;br&gt;
18.&amp;nbsp;for(String&amp;nbsp;error&amp;nbsp;:&amp;nbsp;errors)&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;out.print(error&amp;nbsp;+&amp;nbsp;“,&amp;nbsp;“);&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;out.println();&lt;br&gt;
22.&amp;nbsp;out.flush();&lt;br&gt;
23.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Variable&amp;nbsp;length&amp;nbsp;Arguments");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(average());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(average(1,1,1));&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(average(1.0,1,1));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(average(1,1,1.0));&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int&amp;nbsp;average(int...&amp;nbsp;values){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;double&amp;nbsp;average(double...&amp;nbsp;values){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;11;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
...&lt;br&gt;
&lt;br&gt;
Output&amp;nbsp;:&lt;br&gt;
Variable&amp;nbsp;length&amp;nbsp;Arguments&lt;br&gt;
0&lt;br&gt;
0&lt;br&gt;
11.0&lt;br&gt;
11.0&lt;br&gt;
===================</questionanswer>
  </question>
  <question id="1_0_0_0_0:44" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;Method&amp;nbsp;Overloading&amp;nbsp;and&amp;nbsp;Method&amp;nbsp;Overriding,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;Covariant&amp;nbsp;Return&amp;nbsp;Types(new&amp;nbsp;in&amp;nbsp;Java5)&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Method&amp;nbsp;overloading&amp;nbsp;is&amp;nbsp;when&amp;nbsp;a&amp;nbsp;class&amp;nbsp;contains&lt;br&gt;
multiple&amp;nbsp;methods&amp;nbsp;with&amp;nbsp;the&amp;nbsp;same&amp;nbsp;name&amp;nbsp;but&lt;br&gt;
different&amp;nbsp;parameter&amp;nbsp;lists.&amp;nbsp;Constructors&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;overloaded.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;__rules__&amp;nbsp;that&amp;nbsp;apply&amp;nbsp;to&amp;nbsp;method&amp;nbsp;overloading&amp;nbsp;follow:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;parameter&amp;nbsp;lists&amp;nbsp;must&amp;nbsp;be&amp;nbsp;unique,&amp;nbsp;either&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;parameters&amp;nbsp;or&amp;nbsp;their&amp;nbsp;data&amp;nbsp;type.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;return&amp;nbsp;value&amp;nbsp;can&amp;nbsp;be&amp;nbsp;different&amp;nbsp;(as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;the&lt;br&gt;
parameter&amp;nbsp;lists&amp;nbsp;are&amp;nbsp;unique).&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;list&amp;nbsp;of&amp;nbsp;declared&amp;nbsp;exceptions&amp;nbsp;can&amp;nbsp;be&amp;nbsp;different&lt;br&gt;
(as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;lists&amp;nbsp;are&amp;nbsp;unique).&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;a&amp;nbsp;class&amp;nbsp;has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;methods.&lt;br&gt;
Do&amp;nbsp;these&amp;nbsp;method&amp;nbsp;declarations&lt;br&gt;
&amp;nbsp;follow&amp;nbsp;the&amp;nbsp;rules&amp;nbsp;for&amp;nbsp;valid&amp;nbsp;method&amp;nbsp;overloading?&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;send(String&amp;nbsp;recipient,&amp;nbsp;String&amp;nbsp;message)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;send(String&amp;nbsp;recipient,&amp;nbsp;StringBuffer&amp;nbsp;message)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;send(int&amp;nbsp;id)&amp;nbsp;throws&amp;nbsp;UnknownHostException&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;send(float&amp;nbsp;f)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;send(String&amp;nbsp;[]&amp;nbsp;headers)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Funny&amp;nbsp;EXAMPLE&amp;nbsp;:&lt;br&gt;
There&amp;nbsp;can&amp;nbsp;be&amp;nbsp;some&amp;nbsp;confusion&amp;nbsp;when&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;types&amp;nbsp;of&amp;nbsp;overloaded&amp;nbsp;methods&amp;nbsp;are&lt;br&gt;
related&amp;nbsp;either&amp;nbsp;by&amp;nbsp;inheritance&amp;nbsp;or&amp;nbsp;promotion.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
overloaded&amp;nbsp;methods:&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;convert(int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;return&amp;nbsp;“int”;&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;convert(short&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;return&amp;nbsp;“short”;&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
Now&amp;nbsp;consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;and&amp;nbsp;try&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;which&amp;nbsp;convert&amp;nbsp;method&amp;nbsp;is&lt;br&gt;
invoked&amp;nbsp;at&amp;nbsp;runtime:&lt;br&gt;
byte&amp;nbsp;b&amp;nbsp;=&amp;nbsp;-41;&lt;br&gt;
System.out.println(convert(b));&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;compiler&amp;nbsp;looks&amp;nbsp;for&amp;nbsp;a&amp;nbsp;convert&amp;nbsp;method&amp;nbsp;with&amp;nbsp;a&lt;br&gt;
byte&amp;nbsp;parameter.&amp;nbsp;Because&amp;nbsp;one&amp;nbsp;doesn't&lt;br&gt;
exist,&amp;nbsp;it&amp;nbsp;looks&amp;nbsp;for&amp;nbsp;a&amp;nbsp;convert&amp;nbsp;method&amp;nbsp;with&amp;nbsp;a&amp;nbsp;compatible&lt;br&gt;
parameter&amp;nbsp;that&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;can&amp;nbsp;be&amp;nbsp;promoted&amp;nbsp;to,&amp;nbsp;starting&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;smallest&amp;nbsp;promotion,&amp;nbsp;which&amp;nbsp;in&amp;nbsp;this&amp;nbsp;example&amp;nbsp;is&amp;nbsp;a&amp;nbsp;short.&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;convert&amp;nbsp;method&amp;nbsp;on&amp;nbsp;line&amp;nbsp;15&amp;nbsp;is&lt;br&gt;
invoked&amp;nbsp;when&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;is&amp;nbsp;the&amp;nbsp;argument.&amp;nbsp;The&lt;br&gt;
output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;two&amp;nbsp;lines&amp;nbsp;of&amp;nbsp;code&amp;nbsp;is&amp;nbsp;"short".&lt;br&gt;
&lt;br&gt;
Autoboxing&amp;nbsp;of&amp;nbsp;Primitive&amp;nbsp;Types&lt;br&gt;
Primitive&amp;nbsp;types&amp;nbsp;are&amp;nbsp;automatically&amp;nbsp;boxed&amp;nbsp;into&amp;nbsp;their&lt;br&gt;
corresponding&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;object&amp;nbsp;whenever&lt;br&gt;
necessary,&amp;nbsp;and&amp;nbsp;they&amp;nbsp;are&amp;nbsp;also&amp;nbsp;unboxed&amp;nbsp;automatically&lt;br&gt;
whenever&amp;nbsp;necessary.&lt;br&gt;
&lt;br&gt;
==========&lt;br&gt;
Method&amp;nbsp;Overriding&lt;br&gt;
&lt;br&gt;
Method&amp;nbsp;overriding&amp;nbsp;means&amp;nbsp;writing&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&lt;br&gt;
that&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;same&amp;nbsp;method&amp;nbsp;signature&lt;br&gt;
as&amp;nbsp;its&amp;nbsp;parent&amp;nbsp;class.&amp;nbsp;At&amp;nbsp;runtime&amp;nbsp;the&amp;nbsp;child&lt;br&gt;
method&amp;nbsp;executes,&amp;nbsp;not&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;method.&lt;br&gt;
The&amp;nbsp;child&amp;nbsp;method&amp;nbsp;takes&amp;nbsp;the&amp;nbsp;place&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parent&lt;br&gt;
method,&amp;nbsp;thereby&amp;nbsp;overriding&amp;nbsp;the&amp;nbsp;behavior&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
parent.&amp;nbsp;Method&amp;nbsp;overriding&amp;nbsp;is&amp;nbsp;an&amp;nbsp;important&amp;nbsp;capability&lt;br&gt;
of&amp;nbsp;object&amp;nbsp;-&amp;nbsp;oriented&amp;nbsp;programming,&amp;nbsp;and&amp;nbsp;this&lt;br&gt;
section&amp;nbsp;discusses&amp;nbsp;the&amp;nbsp;details&amp;nbsp;of&amp;nbsp;overriding&lt;br&gt;
methods&amp;nbsp;in&amp;nbsp;Java.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;rules&amp;nbsp;for&amp;nbsp;overriding&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;follow:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;has&amp;nbsp;to&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
signature&amp;nbsp;(name&amp;nbsp;and&amp;nbsp;parameter&amp;nbsp;list)&amp;nbsp;as&amp;nbsp;the&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;child&amp;nbsp;method&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&lt;br&gt;
at&amp;nbsp;least&amp;nbsp;the&amp;nbsp;same&amp;nbsp;or&amp;nbsp;more&amp;nbsp;accessible&amp;nbsp;than&amp;nbsp;the&lt;br&gt;
parent&amp;nbsp;method.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;the&amp;nbsp;method&amp;nbsp;is&lt;br&gt;
public&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class,&amp;nbsp;then&amp;nbsp;it&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;public&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;class.&amp;nbsp;A&amp;nbsp;method&amp;nbsp;with&amp;nbsp;default&lt;br&gt;
access&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;could&amp;nbsp;be&amp;nbsp;public&amp;nbsp;or&amp;nbsp;protected,&lt;br&gt;
or&amp;nbsp;have&amp;nbsp;the&amp;nbsp;default&amp;nbsp;access&amp;nbsp;in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;child&amp;nbsp;method&amp;nbsp;cannot&amp;nbsp;throw&amp;nbsp;a&amp;nbsp;greater&amp;nbsp;exception&lt;br&gt;
than&amp;nbsp;the&amp;nbsp;parent.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&lt;br&gt;
any&amp;nbsp;exception&amp;nbsp;thrown&amp;nbsp;by&amp;nbsp;the&amp;nbsp;child&amp;nbsp;method&lt;br&gt;
must&amp;nbsp;be&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;exceptions&lt;br&gt;
thrown&amp;nbsp;by&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;return&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;class&lt;br&gt;
has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;the&amp;nbsp;same&amp;nbsp;or&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
parent&amp;nbsp;method&amp;nbsp;'s&amp;nbsp;return&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
Private&amp;nbsp;Methods&amp;nbsp;and&amp;nbsp;Overriding&lt;br&gt;
Method&amp;nbsp;overriding&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&lt;br&gt;
overriding&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;that&amp;nbsp;it&amp;nbsp;inherits&lt;br&gt;
from&amp;nbsp;its&amp;nbsp;parent.&amp;nbsp;A&amp;nbsp;private&amp;nbsp;method&amp;nbsp;is&amp;nbsp;not&amp;nbsp;accessible&lt;br&gt;
outside&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;it&amp;nbsp;is&amp;nbsp;defined&lt;br&gt;
in,&amp;nbsp;and&amp;nbsp;private&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;not&amp;nbsp;inherited&amp;nbsp;by&amp;nbsp;child&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
EXAMPLE&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;demonstrates&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;Lion&amp;nbsp;overriding&amp;nbsp;the&amp;nbsp;eat&amp;nbsp;method&amp;nbsp;in&amp;nbsp;its&lt;br&gt;
parent&amp;nbsp;class&amp;nbsp;Mammal&amp;nbsp;:&lt;br&gt;
//Mammal.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Mammal&amp;nbsp;{&lt;br&gt;
protected&amp;nbsp;int&amp;nbsp;eat(String&amp;nbsp;something)&amp;nbsp;{&lt;br&gt;
System.out.println(“Inside&amp;nbsp;Mammal”);&lt;br&gt;
return&amp;nbsp;-1;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
//Lion.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Lion&amp;nbsp;extends&amp;nbsp;Mammal&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;eat(String&amp;nbsp;something)&amp;nbsp;{&lt;br&gt;
.&amp;nbsp;System.out.println(“Inside&amp;nbsp;Lion”);&lt;br&gt;
.&amp;nbsp;return&amp;nbsp;something.length();&lt;br&gt;
.&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;super&amp;nbsp;__&amp;nbsp;Reference&lt;br&gt;
Just&amp;nbsp;like&amp;nbsp;every&amp;nbsp;object&amp;nbsp;has&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;itself&lt;br&gt;
via&amp;nbsp;the&amp;nbsp;this&amp;nbsp;keyword,&amp;nbsp;every&amp;nbsp;object&amp;nbsp;has&amp;nbsp;a&lt;br&gt;
reference&amp;nbsp;to&amp;nbsp;its&amp;nbsp;parent&amp;nbsp;object&amp;nbsp;via&amp;nbsp;the&amp;nbsp;super&amp;nbsp;keyword.&lt;br&gt;
A&amp;nbsp;child&amp;nbsp;object&amp;nbsp;can&amp;nbsp;actually&amp;nbsp;use&amp;nbsp;the&lt;br&gt;
this&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;access&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;members,&lt;br&gt;
but&amp;nbsp;there&amp;nbsp;are&amp;nbsp;situations&amp;nbsp;where&amp;nbsp;the&amp;nbsp;child&lt;br&gt;
class&amp;nbsp;must&amp;nbsp;use&amp;nbsp;super&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&amp;nbsp;parent&amp;nbsp;field&amp;nbsp;&lt;br&gt;
or&amp;nbsp;method.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Lion&amp;nbsp;class&amp;nbsp;we&amp;nbsp;had&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;eat&amp;nbsp;method:&lt;br&gt;
&lt;br&gt;
10.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Lion&amp;nbsp;extends&amp;nbsp;Mammal&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;eat(String&amp;nbsp;something)&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.println(“Inside&amp;nbsp;Lion”);&lt;br&gt;
13.&amp;nbsp;return&amp;nbsp;super.eat(something);&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
=======&lt;br&gt;
!!!!!&lt;br&gt;
Covariant&amp;nbsp;Return&amp;nbsp;Types&lt;br&gt;
Before&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;it&amp;nbsp;was&amp;nbsp;required&amp;nbsp;that&amp;nbsp;the&amp;nbsp;overriding&lt;br&gt;
method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
return&amp;nbsp;type&amp;nbsp;as&amp;nbsp;the&amp;nbsp;overridden&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent.&lt;br&gt;
Java&amp;nbsp;5.0&amp;nbsp;introduced&amp;nbsp;covariant&amp;nbsp;return&lt;br&gt;
types&amp;nbsp;,&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;overriding&amp;nbsp;method&amp;nbsp;to&lt;br&gt;
return&amp;nbsp;a&amp;nbsp;data&amp;nbsp;type&amp;nbsp;that&amp;nbsp;is&amp;nbsp;a&amp;nbsp;child&amp;nbsp;of&amp;nbsp;the&amp;nbsp;return&lt;br&gt;
type&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
//Parent.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;OutputStream&amp;nbsp;doSomething(int&amp;nbsp;x,&amp;nbsp;String&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
//do&amp;nbsp;something&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
//Child.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;FileOutputStream&amp;nbsp;doSomething(int&amp;nbsp;y,&amp;nbsp;String&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
//do&amp;nbsp;something&amp;nbsp;else&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!&lt;br&gt;
Covariant&amp;nbsp;return&amp;nbsp;types&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed&amp;nbsp;for&amp;nbsp;primitive&amp;nbsp;types,&amp;nbsp;only&amp;nbsp;Object&amp;nbsp;types.&lt;br&gt;
============&lt;br&gt;
Method&amp;nbsp;Hiding&lt;br&gt;
Method&amp;nbsp;hiding&amp;nbsp;occurs&amp;nbsp;when&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;contains&lt;br&gt;
a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;that&amp;nbsp;is&amp;nbsp;also&amp;nbsp;defined&amp;nbsp;in&lt;br&gt;
its&amp;nbsp;parent,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;same&amp;nbsp;rules&amp;nbsp;of&amp;nbsp;instance&lt;br&gt;
method&amp;nbsp;overriding&amp;nbsp;discussed&amp;nbsp;earlier.&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;in&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;static&amp;nbsp;method&amp;nbsp;as&amp;nbsp;its&amp;nbsp;parent&amp;nbsp;class,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;method&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;child&amp;nbsp;class&amp;nbsp;hides&amp;nbsp;the&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
parent&amp;nbsp;class&amp;nbsp;but&amp;nbsp;does&amp;nbsp;not&amp;nbsp;override&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
Method&amp;nbsp;hiding&amp;nbsp;is&amp;nbsp;subtly&amp;nbsp;different&amp;nbsp;than&amp;nbsp;method&lt;br&gt;
overriding.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;method&amp;nbsp;is&amp;nbsp;overridden,&amp;nbsp;the&lt;br&gt;
child&amp;nbsp;version&amp;nbsp;of&amp;nbsp;the&amp;nbsp;method&amp;nbsp;always&amp;nbsp;executes&lt;br&gt;
at&amp;nbsp;runtime.&amp;nbsp;Technically,&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
overridden&amp;nbsp;because&amp;nbsp;you&amp;nbsp;can&amp;nbsp;still&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;static&lt;br&gt;
method&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;simpler&amp;nbsp;terms,&amp;nbsp;instance&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;overridden&amp;nbsp;and&lt;br&gt;
static&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;hidden.&lt;br&gt;
==</questionanswer>
  </question>
  <question id="1_0_0_0_0:45" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;Final&amp;nbsp;methods,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;can&amp;nbsp;be&amp;nbsp;final&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;method&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;can&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;final&amp;nbsp;using&lt;br&gt;
the&amp;nbsp;__&amp;nbsp;final&amp;nbsp;__&amp;nbsp;keyword.&amp;nbsp;A&amp;nbsp;final&amp;nbsp;method&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
overridden.&amp;nbsp;You&amp;nbsp;might&amp;nbsp;make&amp;nbsp;a&amp;nbsp;method&amp;nbsp;final&amp;nbsp;if&amp;nbsp;it&lt;br&gt;
has&amp;nbsp;a&amp;nbsp;critical&amp;nbsp;implementation&amp;nbsp;that&amp;nbsp;should&lt;br&gt;
not&amp;nbsp;be&amp;nbsp;changed,&amp;nbsp;or&amp;nbsp;you&amp;nbsp;might&amp;nbsp;just&amp;nbsp;want&lt;br&gt;
a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;not&amp;nbsp;to&amp;nbsp;have&amp;nbsp;the&amp;nbsp;option&amp;nbsp;of&amp;nbsp;overriding&lt;br&gt;
a&amp;nbsp;particular&amp;nbsp;method.&amp;nbsp;Whatever&amp;nbsp;the&amp;nbsp;motivation,&lt;br&gt;
an&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;override&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;nal&amp;nbsp;method&lt;br&gt;
generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;Lion&amp;nbsp;class&lt;br&gt;
has&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;nal&amp;nbsp;method&amp;nbsp;named&amp;nbsp;breathe&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;declarationInitializationScoping;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FinalMethods&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Final&amp;nbsp;methods");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;A&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;static&amp;nbsp;void&amp;nbsp;say(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("hello&amp;nbsp;i&amp;nbsp;am&amp;nbsp;A");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;void&amp;nbsp;s(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("s");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;B&amp;nbsp;extends&amp;nbsp;A{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;say(){&amp;nbsp;//&amp;nbsp;ERROR&amp;nbsp;&amp;nbsp;Cannot&amp;nbsp;override&amp;nbsp;the&amp;nbsp;final&amp;nbsp;method&amp;nbsp;from&amp;nbsp;A&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("B");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;s()&amp;nbsp;{&amp;nbsp;//&amp;nbsp;ERROR&amp;nbsp;&amp;nbsp;Cannot&amp;nbsp;reduce&amp;nbsp;the&amp;nbsp;visibility&amp;nbsp;of&amp;nbsp;the&amp;nbsp;inherited&amp;nbsp;method&amp;nbsp;from&amp;nbsp;A&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.s();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
=====&lt;br&gt;
A&amp;nbsp;final&amp;nbsp;class&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;subclassed.&amp;nbsp;Doing&amp;nbsp;this&amp;nbsp;can&amp;nbsp;confer&lt;br&gt;
security&amp;nbsp;and&amp;nbsp;efficiency&amp;nbsp;benefits,&amp;nbsp;so&amp;nbsp;many&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&lt;br&gt;
standard&amp;nbsp;library&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;final,&amp;nbsp;such&amp;nbsp;as&lt;br&gt;
java.lang.System&amp;nbsp;and&amp;nbsp;java.lang.String.&amp;nbsp;All&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;a&amp;nbsp;final&amp;nbsp;class&amp;nbsp;are&amp;nbsp;implicitly&amp;nbsp;final.&lt;br&gt;
Example:&lt;br&gt;
public&amp;nbsp;final&amp;nbsp;class&amp;nbsp;MyFinalClass&amp;nbsp;{...}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ThisIsWrong&amp;nbsp;extends&amp;nbsp;MyFinalClass&amp;nbsp;{...}&amp;nbsp;//&amp;nbsp;forbidden&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
A&amp;nbsp;final&amp;nbsp;variable&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;once,&amp;nbsp;either&amp;nbsp;via&amp;nbsp;an&lt;br&gt;
initializer&amp;nbsp;or&amp;nbsp;an&amp;nbsp;assignment&amp;nbsp;statement.&amp;nbsp;It&amp;nbsp;does&amp;nbsp;not&amp;nbsp;need&lt;br&gt;
to&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;at&amp;nbsp;the&amp;nbsp;point&amp;nbsp;of&amp;nbsp;declaration:&amp;nbsp;this&amp;nbsp;is&amp;nbsp;called&amp;nbsp;a&lt;br&gt;
"blank&amp;nbsp;final"&amp;nbsp;variable.&amp;nbsp;A&amp;nbsp;blank&amp;nbsp;final&amp;nbsp;instance&amp;nbsp;variable&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
must&amp;nbsp;be&amp;nbsp;definitely&amp;nbsp;assigned&amp;nbsp;in&amp;nbsp;every&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
in&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;declared;&amp;nbsp;similarly,&amp;nbsp;a&amp;nbsp;blank&amp;nbsp;final&amp;nbsp;static&amp;nbsp;variable&lt;br&gt;
must&amp;nbsp;be&amp;nbsp;definitely&amp;nbsp;assigned&amp;nbsp;in&amp;nbsp;a&amp;nbsp;static&amp;nbsp;initializer&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
in&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;declared;&amp;nbsp;otherwise,&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
occurs&amp;nbsp;in&amp;nbsp;both&amp;nbsp;cases.&lt;br&gt;
=====&lt;br&gt;
!!!!&lt;br&gt;
When&amp;nbsp;an&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;defined&amp;nbsp;within&amp;nbsp;the&amp;nbsp;body&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;method,&amp;nbsp;all&amp;nbsp;variables&amp;nbsp;declared&amp;nbsp;final&amp;nbsp;in&amp;nbsp;the&amp;nbsp;scope&amp;nbsp;of&lt;br&gt;
that&amp;nbsp;method&amp;nbsp;are&amp;nbsp;accessible&amp;nbsp;from&amp;nbsp;within&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.swing.*;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FooGUI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//initialize&amp;nbsp;GUI&amp;nbsp;components&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;JFrame&amp;nbsp;jf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;JFrame("Hello&amp;nbsp;world!");&amp;nbsp;//allows&amp;nbsp;jf&amp;nbsp;to&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;from&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;body&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jf.add(new&amp;nbsp;JButton("Click&amp;nbsp;me"));&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;pack&amp;nbsp;and&amp;nbsp;make&amp;nbsp;visible&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Event-Dispatch&amp;nbsp;Thread&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SwingUtilities.invokeLater(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jf.pack();&amp;nbsp;//this&amp;nbsp;would&amp;nbsp;be&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error&amp;nbsp;if&amp;nbsp;jf&amp;nbsp;were&amp;nbsp;not&amp;nbsp;final&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jf.setLocationRelativeTo(null);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jf.setVisible(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=============&lt;br&gt;
&lt;br&gt;
Difference&amp;nbsp;from&amp;nbsp;the&amp;nbsp;C++&amp;nbsp;const&amp;nbsp;type&amp;nbsp;qualifier[edit]&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;C++&amp;nbsp;equivalent&amp;nbsp;would&amp;nbsp;be&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;that&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
changed&amp;nbsp;after&amp;nbsp;initialization,&amp;nbsp;though&amp;nbsp;the&amp;nbsp;data&amp;nbsp;it&amp;nbsp;points&amp;nbsp;to&amp;nbsp;may&amp;nbsp;be.&lt;br&gt;
Another&amp;nbsp;C++&amp;nbsp;parallel&amp;nbsp;is&amp;nbsp;SomeClass&amp;nbsp;*&amp;nbsp;const&amp;nbsp;ptr&amp;nbsp;where&amp;nbsp;the&amp;nbsp;contents&lt;br&gt;
being&amp;nbsp;referenced&amp;nbsp;can&amp;nbsp;be&amp;nbsp;modified,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;itself&amp;nbsp;can&amp;nbsp;not&lt;br&gt;
without&amp;nbsp;casting.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;different&amp;nbsp;from&amp;nbsp;the&amp;nbsp;C++&amp;nbsp;const&lt;br&gt;
SomeClass&amp;nbsp;*&amp;nbsp;ptr&amp;nbsp;where&amp;nbsp;the&amp;nbsp;contents&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;modified&amp;nbsp;without&lt;br&gt;
casting,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;itself&amp;nbsp;can.&lt;br&gt;
C++&amp;nbsp;const&amp;nbsp;is&amp;nbsp;a&amp;nbsp;soft&amp;nbsp;guideline&amp;nbsp;and&amp;nbsp;it&amp;nbsp;can&amp;nbsp;easily&amp;nbsp;be&lt;br&gt;
overridden&amp;nbsp;by&amp;nbsp;the&amp;nbsp;programmer;&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;can&amp;nbsp;easily&lt;br&gt;
cast&amp;nbsp;a&amp;nbsp;const&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;an&amp;nbsp;unconst&amp;nbsp;reference.&amp;nbsp;Java's&amp;nbsp;final&lt;br&gt;
is&amp;nbsp;a&amp;nbsp;strict&amp;nbsp;rule&amp;nbsp;such&amp;nbsp;that&amp;nbsp;it&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;to&amp;nbsp;compile&lt;br&gt;
code&amp;nbsp;that&amp;nbsp;breaks&amp;nbsp;or&amp;nbsp;bypasses&amp;nbsp;the&amp;nbsp;final&amp;nbsp;restrictions.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:46" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Abstract&amp;nbsp;classes,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;examples.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>An&amp;nbsp;abstract&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;instantiated.&lt;br&gt;
Use&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;class&amp;nbsp;as&amp;nbsp;abstract,&lt;br&gt;
as&amp;nbsp;demonstrated&amp;nbsp;by&amp;nbsp;the&amp;nbsp;following&amp;nbsp;Mammal&amp;nbsp;class:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;class&amp;nbsp;Mammal&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;hasFur;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Mammal()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;hasFur&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;Mammal(boolean&amp;nbsp;hasFur)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;this.hasFur&amp;nbsp;=&amp;nbsp;hasFur;&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;breathe()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(“Mammal&amp;nbsp;is&amp;nbsp;breathing”);&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;eat(String&amp;nbsp;something)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;System.out.println(“Mammal&amp;nbsp;is&amp;nbsp;eating&amp;nbsp;“&amp;nbsp;+&amp;nbsp;something);&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
So&amp;nbsp;how&amp;nbsp;do&amp;nbsp;we&amp;nbsp;take&amp;nbsp;advantage&amp;nbsp;of&amp;nbsp;this&amp;nbsp;abstract&lt;br&gt;
class&amp;nbsp;if&amp;nbsp;we&amp;nbsp;cannot&amp;nbsp;instantiate&amp;nbsp;it?&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;to&amp;nbsp;subclass&lt;br&gt;
it!&amp;nbsp;A&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;Mammal&amp;nbsp;will&amp;nbsp;inherit&amp;nbsp;all&amp;nbsp;the&lt;br&gt;
public&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;Mammal&amp;nbsp;,&amp;nbsp;as&amp;nbsp;well&lt;br&gt;
as&amp;nbsp;the&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;its&amp;nbsp;constructors.&lt;br&gt;
The&amp;nbsp;Mammal&amp;nbsp;class&amp;nbsp;is&amp;nbsp;still&amp;nbsp;very&amp;nbsp;useful;&amp;nbsp;we&amp;nbsp;just&amp;nbsp;can't&amp;nbsp;create&lt;br&gt;
any&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;it.&amp;nbsp;From&amp;nbsp;a&amp;nbsp;design&amp;nbsp;point&amp;nbsp;of&amp;nbsp;view,&lt;br&gt;
this&amp;nbsp;actually&amp;nbsp;makes&amp;nbsp;sense&amp;nbsp;because&amp;nbsp;no&amp;nbsp;animal&amp;nbsp;is&amp;nbsp;just&lt;br&gt;
a&amp;nbsp;mammal.&amp;nbsp;The&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;mammal&amp;nbsp;is&amp;nbsp;abstract&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;real&amp;nbsp;world,&amp;nbsp;so&amp;nbsp;making&amp;nbsp;it&amp;nbsp;abstract&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Java&lt;br&gt;
application&amp;nbsp;seems&amp;nbsp;like&amp;nbsp;a&amp;nbsp;good&amp;nbsp;design.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;abstract&amp;nbsp;method&amp;nbsp;is&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;does&amp;nbsp;not&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;method&amp;nbsp;body&lt;br&gt;
and&amp;nbsp;must&amp;nbsp;be&amp;nbsp;overridden&amp;nbsp;by&amp;nbsp;any&amp;nbsp;nonabstract&lt;br&gt;
child&amp;nbsp;classes.&amp;nbsp;Use&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;keyword&amp;nbsp;to&lt;br&gt;
declare&amp;nbsp;a&amp;nbsp;method&amp;nbsp;as&amp;nbsp;abstract.&amp;nbsp;Instead&amp;nbsp;of&amp;nbsp;a&amp;nbsp;method&lt;br&gt;
body,&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;method&amp;nbsp;simply&amp;nbsp;has&amp;nbsp;a&amp;nbsp;semicolon&amp;nbsp;at&lt;br&gt;
the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;its&amp;nbsp;declaration.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;java.io.InputStream&lt;br&gt;
declares&amp;nbsp;the&amp;nbsp;following&amp;nbsp;method:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;abstract&amp;nbsp;int&amp;nbsp;read()&amp;nbsp;throws&amp;nbsp;IOException&lt;br&gt;
&lt;br&gt;
Notice&amp;nbsp;there&amp;nbsp;are&amp;nbsp;no&amp;nbsp;curly&amp;nbsp;braces&amp;nbsp;—&amp;nbsp;not&amp;nbsp;even&lt;br&gt;
empty&amp;nbsp;braces.&amp;nbsp;An&amp;nbsp;abstract&amp;nbsp;method&amp;nbsp;does&amp;nbsp;not&amp;nbsp;contain&lt;br&gt;
a&amp;nbsp;method&amp;nbsp;body.&amp;nbsp;Declaring&amp;nbsp;a&amp;nbsp;method&amp;nbsp;as&amp;nbsp;abstract&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;consequences:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;enclosing&amp;nbsp;class&amp;nbsp;must&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;abstract&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;Any&amp;nbsp;concrete&amp;nbsp;subclass&amp;nbsp;must&amp;nbsp;override&amp;nbsp;all&amp;nbsp;the&lt;br&gt;
abstract&amp;nbsp;methods&amp;nbsp;inherited&amp;nbsp;from&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;If&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;does&amp;nbsp;not&amp;nbsp;override&amp;nbsp;its&amp;nbsp;parent's&amp;nbsp;abstract&lt;br&gt;
methods,&amp;nbsp;the&amp;nbsp;subclass&amp;nbsp;must&amp;nbsp;also&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;abstract&amp;nbsp;.</questionanswer>
  </question>
  <question id="1_0_0_0_0:47" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interfaces&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;'marker&amp;nbsp;interface&amp;nbsp;pattern'&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>An&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;abstract&amp;nbsp;methods.&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;inheriting&amp;nbsp;all&amp;nbsp;the&amp;nbsp;abstract&lt;br&gt;
methods&amp;nbsp;declared&amp;nbsp;in&amp;nbsp;the&amp;nbsp;interface.&amp;nbsp;Therefore,&lt;br&gt;
a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;must&amp;nbsp;either&amp;nbsp;override&lt;br&gt;
the&amp;nbsp;interface&amp;nbsp;methods&amp;nbsp;or&amp;nbsp;the&amp;nbsp;class&amp;nbsp;must&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;abstract.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;interface&amp;nbsp;has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;defined&amp;nbsp;in&amp;nbsp;a&amp;nbsp;.java&amp;nbsp;file.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;public,&lt;br&gt;
the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;must&amp;nbsp;match&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;has&amp;nbsp;the&amp;nbsp;default&amp;nbsp;access,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;only&lt;br&gt;
accessible&amp;nbsp;from&amp;nbsp;within&amp;nbsp;its&amp;nbsp;package.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;bytecode&amp;nbsp;file&amp;nbsp;for&amp;nbsp;a&amp;nbsp;compiled&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;a&amp;nbsp;.class&amp;nbsp;file&lt;br&gt;
that&amp;nbsp;matches&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;interface.&amp;nbsp;All&amp;nbsp;the&amp;nbsp;rules&amp;nbsp;of&lt;br&gt;
package&amp;nbsp;names&amp;nbsp;and&amp;nbsp;subdirectories&amp;nbsp;that&amp;nbsp;apply&amp;nbsp;to&amp;nbsp;classes&amp;nbsp;also&lt;br&gt;
apply&amp;nbsp;to&amp;nbsp;interfaces.&lt;br&gt;
-&amp;nbsp;All&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;are&amp;nbsp;abstract,&amp;nbsp;whether&amp;nbsp;or&lt;br&gt;
not&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;keyword&amp;nbsp;is&amp;nbsp;explicitly&amp;nbsp;denoted.&lt;br&gt;
-&amp;nbsp;All&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;are&amp;nbsp;public,&amp;nbsp;whether&amp;nbsp;or&amp;nbsp;not&lt;br&gt;
they&amp;nbsp;are&amp;nbsp;explicitly&amp;nbsp;declared&amp;nbsp;public&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;___&amp;nbsp;The&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;are&amp;nbsp;public&amp;nbsp;,&amp;nbsp;static&amp;nbsp;,&amp;nbsp;and&amp;nbsp;final&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;interface&amp;nbsp;cannot&amp;nbsp;declare&amp;nbsp;static&amp;nbsp;methods.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;An&amp;nbsp;interface&amp;nbsp;has&amp;nbsp;some&amp;nbsp;similarities&amp;nbsp;to&amp;nbsp;a&amp;nbsp;class,&amp;nbsp;but&amp;nbsp;an&lt;br&gt;
interface&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;class.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;cannot&lt;br&gt;
be&amp;nbsp;instantiated,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;cannot&amp;nbsp;contain&amp;nbsp;any&amp;nbsp;instance&amp;nbsp;fields.&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;’&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;an&amp;nbsp;example.&amp;nbsp;Suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
interface&amp;nbsp;named&amp;nbsp;Drawable&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.Rectangle;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Drawable&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;int&amp;nbsp;MAX_WIDTH&amp;nbsp;=&amp;nbsp;1024;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw();&lt;br&gt;
7.&amp;nbsp;abstract&amp;nbsp;Rectangle&amp;nbsp;getDimensions();&lt;br&gt;
8.&amp;nbsp;void&amp;nbsp;resize(int&amp;nbsp;w,&amp;nbsp;int&amp;nbsp;h);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;using&amp;nbsp;the&amp;nbsp;'implements'&lt;br&gt;
keyword&amp;nbsp;in&amp;nbsp;the&amp;nbsp;declaration&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;A&amp;nbsp;class&amp;nbsp;can&amp;nbsp;implement&lt;br&gt;
multiple&amp;nbsp;interfaces&amp;nbsp;by&amp;nbsp;separating&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;names&amp;nbsp;with&lt;br&gt;
commas.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Picture&amp;nbsp;implements&amp;nbsp;Drawable&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Flower&amp;nbsp;implements&amp;nbsp;Plant,&amp;nbsp;Drawable&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;must&amp;nbsp;do&amp;nbsp;__&amp;nbsp;one&amp;nbsp;__&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following:&lt;br&gt;
-&amp;nbsp;Override&amp;nbsp;all&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;interface.&lt;br&gt;
-&amp;nbsp;Declare&amp;nbsp;itself&amp;nbsp;as&amp;nbsp;abstract.&lt;br&gt;
&lt;br&gt;
Example:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.Rectangle;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Picture&amp;nbsp;implements&amp;nbsp;Drawable&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;Rectangle&amp;nbsp;dimensions;&lt;br&gt;
5.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;artist;&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;Picture(String&amp;nbsp;artist,&amp;nbsp;int&amp;nbsp;width,&amp;nbsp;int&amp;nbsp;height)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;this.artist&amp;nbsp;=&amp;nbsp;artist;&lt;br&gt;
9.&amp;nbsp;dimensions&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Rectangle(width,&amp;nbsp;height);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(“Drawing&amp;nbsp;a&amp;nbsp;Picture”);&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;public&amp;nbsp;Rectangle&amp;nbsp;getDimensions()&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;return&amp;nbsp;dimensions;&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.&lt;br&gt;
20.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getArtist()&amp;nbsp;{&lt;br&gt;
21.&amp;nbsp;return&amp;nbsp;artist;&lt;br&gt;
22.&amp;nbsp;}&lt;br&gt;
23.&lt;br&gt;
24.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;resize(int&amp;nbsp;width,&amp;nbsp;int&amp;nbsp;height)&amp;nbsp;{&lt;br&gt;
25.&amp;nbsp;if(width&amp;nbsp;&lt;&amp;nbsp;Drawable.MAX_WIDTH)&amp;nbsp;{&lt;br&gt;
26.&amp;nbsp;dimensions&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Rectangle(width,&amp;nbsp;height);&lt;br&gt;
27.&amp;nbsp;}&lt;br&gt;
28.&amp;nbsp;}&lt;br&gt;
29.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;Is&amp;nbsp;the&amp;nbsp;Purpose&amp;nbsp;of&amp;nbsp;Interfaces?&lt;br&gt;
An&amp;nbsp;interface&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;abstract&amp;nbsp;method&lt;br&gt;
declarations&amp;nbsp;but&amp;nbsp;no&amp;nbsp;method&amp;nbsp;implementations.&lt;br&gt;
Why&amp;nbsp;would&amp;nbsp;we&amp;nbsp;create&amp;nbsp;such&amp;nbsp;an&amp;nbsp;entity?&amp;nbsp;Well,&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
main&amp;nbsp;uses&amp;nbsp;of&amp;nbsp;interfaces&amp;nbsp;is&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;communication&lt;br&gt;
contract&amp;nbsp;between&amp;nbsp;two&amp;nbsp;objects.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&lt;br&gt;
two&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&amp;nbsp;"interface"&amp;nbsp;with&amp;nbsp;each&amp;nbsp;other&lt;br&gt;
use&amp;nbsp;an&amp;nbsp;interface.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;know&amp;nbsp;a&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;an&lt;br&gt;
interface,&amp;nbsp;then&amp;nbsp;you&amp;nbsp;know&amp;nbsp;that&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;concrete&lt;br&gt;
implementations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;that&amp;nbsp;interface,&amp;nbsp;and&amp;nbsp;you&lt;br&gt;
are&amp;nbsp;guaranteed&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;those&amp;nbsp;methods&lt;br&gt;
safely&amp;nbsp;and&amp;nbsp;know&amp;nbsp;the&amp;nbsp;object&amp;nbsp;has&amp;nbsp;implemented&amp;nbsp;them.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;java.lang.Runnable&amp;nbsp;interface&amp;nbsp;contains&lt;br&gt;
a&amp;nbsp;single&amp;nbsp;method:&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;run();&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;give&amp;nbsp;me&amp;nbsp;an&amp;nbsp;object&amp;nbsp;whose&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;Runnable,&lt;br&gt;
then&amp;nbsp;I&amp;nbsp;can&amp;nbsp;invoke&amp;nbsp;run();&amp;nbsp;on&amp;nbsp;that&lt;br&gt;
object,&amp;nbsp;even&amp;nbsp;though&amp;nbsp;I&amp;nbsp;might&amp;nbsp;not&amp;nbsp;know&amp;nbsp;or&amp;nbsp;care&amp;nbsp;about&lt;br&gt;
any&amp;nbsp;other&amp;nbsp;methods&amp;nbsp;and&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;very&amp;nbsp;powerful&amp;nbsp;feature&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&lt;br&gt;
used&amp;nbsp;throughout&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;API,&amp;nbsp;and&lt;br&gt;
any&amp;nbsp;well&amp;nbsp;-&amp;nbsp;designed&amp;nbsp;application&amp;nbsp;will&amp;nbsp;use&amp;nbsp;interfaces&amp;nbsp;&lt;br&gt;
extensively.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;!!!&amp;nbsp;Interfaces&amp;nbsp;and&amp;nbsp;Data&amp;nbsp;Types&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;objects&amp;nbsp;from&lt;br&gt;
that&amp;nbsp;class&amp;nbsp;are&amp;nbsp;also&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;interface.&lt;br&gt;
=================&lt;br&gt;
&lt;br&gt;
Extending&amp;nbsp;Interfaces&lt;br&gt;
An&amp;nbsp;interface&amp;nbsp;can&amp;nbsp;extend&amp;nbsp;another&amp;nbsp;interface.&amp;nbsp;In&amp;nbsp;fact,&lt;br&gt;
an&amp;nbsp;interface&amp;nbsp;can&amp;nbsp;extend&amp;nbsp;multiple&amp;nbsp;interfaces.&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Paintable&amp;nbsp;extends&amp;nbsp;Drawable&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;paint();&lt;br&gt;
3.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Image&amp;nbsp;extends&amp;nbsp;Runnable,&amp;nbsp;Drawable&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFormat();&lt;br&gt;
3.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
=====================&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;marker&amp;nbsp;interface&amp;nbsp;pattern&amp;nbsp;?&lt;br&gt;
The&amp;nbsp;marker&amp;nbsp;interface&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;in&lt;br&gt;
computer&amp;nbsp;science,&amp;nbsp;used&amp;nbsp;with&amp;nbsp;languages&amp;nbsp;that&amp;nbsp;provide&lt;br&gt;
run-time&amp;nbsp;type&amp;nbsp;information&amp;nbsp;about&amp;nbsp;objects.&amp;nbsp;It&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;means&lt;br&gt;
to&amp;nbsp;associate&amp;nbsp;metadata&amp;nbsp;with&amp;nbsp;a&amp;nbsp;class&amp;nbsp;where&amp;nbsp;the&amp;nbsp;language&amp;nbsp;does&lt;br&gt;
not&amp;nbsp;have&amp;nbsp;explicit&amp;nbsp;support&amp;nbsp;for&amp;nbsp;such&amp;nbsp;metadata.&lt;br&gt;
&lt;br&gt;
To&amp;nbsp;use&amp;nbsp;this&amp;nbsp;pattern,&amp;nbsp;a&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;a&amp;nbsp;marker&lt;br&gt;
interface(also&amp;nbsp;called&amp;nbsp;tagging&amp;nbsp;interface),&amp;nbsp;and&amp;nbsp;methods&lt;br&gt;
that&amp;nbsp;interact&amp;nbsp;with&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;that&amp;nbsp;class&amp;nbsp;test&amp;nbsp;for&lt;br&gt;
the&amp;nbsp;existence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;interface.&amp;nbsp;Whereas&amp;nbsp;a&amp;nbsp;typical&lt;br&gt;
interface&amp;nbsp;specifies&amp;nbsp;functionality&amp;nbsp;(in&amp;nbsp;the&amp;nbsp;form&amp;nbsp;of&amp;nbsp;method&lt;br&gt;
declarations)&amp;nbsp;that&amp;nbsp;an&amp;nbsp;implementing&amp;nbsp;class&amp;nbsp;must&amp;nbsp;support,&lt;br&gt;
a&amp;nbsp;marker&amp;nbsp;interface&amp;nbsp;need&amp;nbsp;not&amp;nbsp;do&amp;nbsp;so.&amp;nbsp;The&amp;nbsp;mere&lt;br&gt;
presence&amp;nbsp;of&amp;nbsp;such&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;indicates&amp;nbsp;specific&amp;nbsp;behavior&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;implementing&amp;nbsp;class.&amp;nbsp;Hybrid&amp;nbsp;interfaces,&lt;br&gt;
which&amp;nbsp;both&amp;nbsp;act&amp;nbsp;as&amp;nbsp;markers&amp;nbsp;and&amp;nbsp;specify&amp;nbsp;required&amp;nbsp;methods,&amp;nbsp;are&lt;br&gt;
possible&amp;nbsp;but&amp;nbsp;may&amp;nbsp;prove&amp;nbsp;confusing&amp;nbsp;if&amp;nbsp;improperly&amp;nbsp;used.&lt;br&gt;
An&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&amp;nbsp;of&amp;nbsp;marker&lt;br&gt;
interfaces&amp;nbsp;from&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
Serializable&amp;nbsp;interface.&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;this&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;indicate&amp;nbsp;that&amp;nbsp;its&amp;nbsp;non-transient&lt;br&gt;
data&amp;nbsp;members&amp;nbsp;can&amp;nbsp;be&amp;nbsp;written&amp;nbsp;to&amp;nbsp;an&lt;br&gt;
ObjectOutputStream.&amp;nbsp;The&amp;nbsp;ObjectOutputStream&amp;nbsp;private&lt;br&gt;
method&amp;nbsp;writeObject()&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;series&amp;nbsp;of&amp;nbsp;instanceof&amp;nbsp;tests&lt;br&gt;
to&amp;nbsp;determine&amp;nbsp;writeability,&amp;nbsp;one&amp;nbsp;of&amp;nbsp;which&amp;nbsp;looks&amp;nbsp;for&amp;nbsp;the&amp;nbsp;Serializable&amp;nbsp;interface.&lt;br&gt;
If&amp;nbsp;any&amp;nbsp;of&amp;nbsp;these&amp;nbsp;tests&amp;nbsp;fails,&amp;nbsp;the&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;a&amp;nbsp;NotSerializableException.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Marker&amp;nbsp;Interface&amp;nbsp;stackoverflow.com&amp;nbsp;&lt;br&gt;
Usually&amp;nbsp;it's&amp;nbsp;to&amp;nbsp;signal&amp;nbsp;usage&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;implement&amp;nbsp;IMessage&lt;br&gt;
to&amp;nbsp;signal&amp;nbsp;that&amp;nbsp;your&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;message.&lt;br&gt;
Other&amp;nbsp;code&amp;nbsp;can&amp;nbsp;then&amp;nbsp;use&amp;nbsp;reflection&amp;nbsp;to&amp;nbsp;see&amp;nbsp;if&amp;nbsp;your&amp;nbsp;objects&lt;br&gt;
are&amp;nbsp;meant&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;as&amp;nbsp;messages&amp;nbsp;and&amp;nbsp;act&amp;nbsp;accordingly.&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;something&amp;nbsp;that&amp;nbsp;was&amp;nbsp;used&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;a&amp;nbsp;lot&amp;nbsp;before&amp;nbsp;they&amp;nbsp;had&lt;br&gt;
annotations.&amp;nbsp;In&amp;nbsp;.Net&amp;nbsp;it's&amp;nbsp;cleaner&amp;nbsp;to&amp;nbsp;use&amp;nbsp;attributes&amp;nbsp;for&amp;nbsp;this.&lt;br&gt;
===========</questionanswer>
  </question>
  <question id="1_0_0_0_0:48" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;Enumerations,&amp;nbsp;describe.&lt;br&gt;
Which&amp;nbsp;GOF&amp;nbsp;pattern&amp;nbsp;you&amp;nbsp;can&amp;nbsp;implement&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;using&amp;nbsp;Enum&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;5.0&amp;nbsp;introduced&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;enumerations&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
Java&amp;nbsp;language,&amp;nbsp;along&amp;nbsp;with&amp;nbsp;a&amp;nbsp;new&lt;br&gt;
keyword:&amp;nbsp;enum&amp;nbsp;.&amp;nbsp;An&amp;nbsp;enumeration&amp;nbsp;is&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;xed&amp;nbsp;set&amp;nbsp;of&amp;nbsp;constants.&lt;br&gt;
An&amp;nbsp;enum&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;class&amp;nbsp;that&amp;nbsp;represents&amp;nbsp;an&amp;nbsp;enumeration.&lt;br&gt;
You&amp;nbsp;use&amp;nbsp;enumerations&amp;nbsp;whenever&amp;nbsp;you&amp;nbsp;have&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;items&lt;br&gt;
whose&amp;nbsp;values&amp;nbsp;are&amp;nbsp;known&amp;nbsp;at&amp;nbsp;compile&amp;nbsp;time.&amp;nbsp;Common&amp;nbsp;uses&amp;nbsp;of&lt;br&gt;
enumerations&amp;nbsp;include&amp;nbsp;days&amp;nbsp;of&amp;nbsp;the&amp;nbsp;week,&amp;nbsp;months&amp;nbsp;of&amp;nbsp;the&amp;nbsp;year,&amp;nbsp;the&amp;nbsp;planets&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;solar&amp;nbsp;system,&amp;nbsp;the&amp;nbsp;directions&amp;nbsp;on&amp;nbsp;a&amp;nbsp;compass,&amp;nbsp;or&lt;br&gt;
your&amp;nbsp;favorite&amp;nbsp;fl&amp;nbsp;avors&amp;nbsp;of&amp;nbsp;ice&amp;nbsp;cream.&amp;nbsp;The&amp;nbsp;possibilities&lt;br&gt;
for&amp;nbsp;enums&amp;nbsp;are&amp;nbsp;endless,&amp;nbsp;and&amp;nbsp;you&amp;nbsp;should&amp;nbsp;use&amp;nbsp;them&amp;nbsp;in&amp;nbsp;your&lt;br&gt;
Java&amp;nbsp;applications&amp;nbsp;whenever&amp;nbsp;applicable&amp;nbsp;because&amp;nbsp;they&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;type&amp;nbsp;-&amp;nbsp;safe&lt;br&gt;
representation&amp;nbsp;of&amp;nbsp;constant&amp;nbsp;data&amp;nbsp;in&amp;nbsp;your&amp;nbsp;application.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Use&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;an&amp;nbsp;enumeration.&lt;br&gt;
Just&amp;nbsp;like&amp;nbsp;classes,&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;is&amp;nbsp;defined&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;source&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;with&amp;nbsp;a&amp;nbsp;.java&amp;nbsp;extension,&amp;nbsp;and&amp;nbsp;all&amp;nbsp;the&lt;br&gt;
rules&amp;nbsp;of&amp;nbsp;package&amp;nbsp;names&amp;nbsp;and&amp;nbsp;directory&lt;br&gt;
structures&amp;nbsp;apply.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;enumeration&lt;br&gt;
represents&amp;nbsp;the&amp;nbsp;four&amp;nbsp;seasons:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;1.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Season&amp;nbsp;{&lt;br&gt;
&amp;nbsp;2.&amp;nbsp;WINTER,&amp;nbsp;SPRING,&amp;nbsp;SUMMER,&amp;nbsp;FALL&lt;br&gt;
&amp;nbsp;3.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;Enumerations&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;__&amp;nbsp;properties&amp;nbsp;__:&lt;br&gt;
The&amp;nbsp;enum&amp;nbsp;keyword&amp;nbsp;actually&amp;nbsp;defines&amp;nbsp;a&amp;nbsp;class&amp;nbsp;behind&amp;nbsp;the&lt;br&gt;
scenes&amp;nbsp;that&amp;nbsp;extends&amp;nbsp;java.lang.Enum&amp;nbsp;.&amp;nbsp;Therefore,&amp;nbsp;an&amp;nbsp;enum&lt;br&gt;
__&amp;nbsp;cannot&amp;nbsp;extend&amp;nbsp;__&amp;nbsp;any&amp;nbsp;other&amp;nbsp;class&amp;nbsp;or&amp;nbsp;enum.&lt;br&gt;
You&amp;nbsp;do&amp;nbsp;not&amp;nbsp;instantiate&amp;nbsp;an&amp;nbsp;enum.&amp;nbsp;The&amp;nbsp;constants&amp;nbsp;defined&lt;br&gt;
in&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;are&amp;nbsp;!!!&amp;nbsp;all&amp;nbsp;implicitly&amp;nbsp;public&amp;nbsp;,&amp;nbsp;final&amp;nbsp;,&amp;nbsp;and&amp;nbsp;static&amp;nbsp;,&amp;nbsp;so&amp;nbsp;there&amp;nbsp;is&lt;br&gt;
no&amp;nbsp;reason&amp;nbsp;to&amp;nbsp;create&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;class.&lt;br&gt;
The&amp;nbsp;enum&amp;nbsp;can&amp;nbsp;declare&amp;nbsp;methods&amp;nbsp;and&amp;nbsp;additional&amp;nbsp;fields.&lt;br&gt;
These&amp;nbsp;additional&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;must&amp;nbsp;appear&amp;nbsp;after&lt;br&gt;
the&amp;nbsp;enum&amp;nbsp;list,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;list&amp;nbsp;must&amp;nbsp;end&amp;nbsp;with&amp;nbsp;a&amp;nbsp;semicolon&lt;br&gt;
in&amp;nbsp;this&amp;nbsp;situation.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;demonstrates&amp;nbsp;the&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;accessing&lt;br&gt;
enum&amp;nbsp;elements.&amp;nbsp;Study&amp;nbsp;the&amp;nbsp;code&amp;nbsp;and&amp;nbsp;try&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
5.&amp;nbsp;Season&amp;nbsp;now&amp;nbsp;=&amp;nbsp;Season.WINTER;&lt;br&gt;
6.&amp;nbsp;switch(now)&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;case&amp;nbsp;WINTER&amp;nbsp;:&lt;br&gt;
8.&amp;nbsp;System.out.println(“It&amp;nbsp;is&amp;nbsp;cold&amp;nbsp;now”);&lt;br&gt;
9.&amp;nbsp;break;&lt;br&gt;
10.&amp;nbsp;case&amp;nbsp;SUMMER&amp;nbsp;:&lt;br&gt;
11.&amp;nbsp;System.out.println(“It&amp;nbsp;is&amp;nbsp;hot&amp;nbsp;now”);&lt;br&gt;
12.&amp;nbsp;break;&lt;br&gt;
13.&amp;nbsp;default:&lt;br&gt;
14.&amp;nbsp;System.out.println(“It&amp;nbsp;is&amp;nbsp;nice&amp;nbsp;now”);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;for&amp;nbsp;-&amp;nbsp;each&amp;nbsp;loop&amp;nbsp;iterates&amp;nbsp;through&amp;nbsp;the&lt;br&gt;
array&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;the&amp;nbsp;values&amp;nbsp;method&lt;br&gt;
and&amp;nbsp;displays&amp;nbsp;each&amp;nbsp;value&amp;nbsp;using&amp;nbsp;the&amp;nbsp;toString&amp;nbsp;method&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enum:&lt;br&gt;
10.&amp;nbsp;for(Direction&amp;nbsp;d&amp;nbsp;:&amp;nbsp;Direction.values())&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.print(d.toString()&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;loop&amp;nbsp;is&lt;br&gt;
NORTH&amp;nbsp;SOUTH&amp;nbsp;EAST&amp;nbsp;WEST&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
The&amp;nbsp;static&amp;nbsp;valueOf&amp;nbsp;method,&amp;nbsp;inherited&amp;nbsp;from&amp;nbsp;java.lang.Enum&amp;nbsp;,&lt;br&gt;
is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;convert&amp;nbsp;a&amp;nbsp;String&amp;nbsp;value&amp;nbsp;to&amp;nbsp;its&amp;nbsp;corresponding&lt;br&gt;
enum&amp;nbsp;value.&lt;br&gt;
==&lt;br&gt;
&lt;br&gt;
Declaring&amp;nbsp;enum&amp;nbsp;Methods&lt;br&gt;
An&amp;nbsp;enum&amp;nbsp;can&amp;nbsp;declare&amp;nbsp;methods&amp;nbsp;and&amp;nbsp;constructors,&amp;nbsp;as&amp;nbsp;well&lt;br&gt;
as&amp;nbsp;other&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;that&amp;nbsp;are&amp;nbsp;not&amp;nbsp;a&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enumerated&lt;br&gt;
list&amp;nbsp;of&amp;nbsp;elements.&amp;nbsp;The&amp;nbsp;enumeration&amp;nbsp;list&amp;nbsp;must&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;&lt;br&gt;
first&amp;nbsp;in&amp;nbsp;the&amp;nbsp;enum,&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;a&amp;nbsp;semicolon.&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Direction&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;NORTH,&amp;nbsp;SOUTH,&amp;nbsp;EAST,&amp;nbsp;WEST;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;this.name().toLowerCase();&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
!!!&lt;br&gt;
Declaring&amp;nbsp;enum&amp;nbsp;Constructors&lt;br&gt;
An&amp;nbsp;enum&amp;nbsp;can&amp;nbsp;also&amp;nbsp;defi&amp;nbsp;ne&amp;nbsp;constructors,&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;enums&lt;br&gt;
that&amp;nbsp;contain&amp;nbsp;additional&amp;nbsp;fi&amp;nbsp;elds.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;suppose&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;enum&amp;nbsp;represents&amp;nbsp;the&amp;nbsp;types&amp;nbsp;of&amp;nbsp;ice&amp;nbsp;cream&lt;br&gt;
cones&amp;nbsp;a&amp;nbsp;store&amp;nbsp;sells,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;scoops&amp;nbsp;for&lt;br&gt;
each&amp;nbsp;cone&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;nbsp;constant.&amp;nbsp;Because&amp;nbsp;all&amp;nbsp;of&amp;nbsp;this&amp;nbsp;information&lt;br&gt;
regarding&amp;nbsp;ice&amp;nbsp;cream&amp;nbsp;cones&amp;nbsp;is&amp;nbsp;known&amp;nbsp;at&amp;nbsp;compile&amp;nbsp;time,&lt;br&gt;
this&amp;nbsp;is&amp;nbsp;a&amp;nbsp;good&amp;nbsp;scenario&amp;nbsp;for&amp;nbsp;using&amp;nbsp;an&amp;nbsp;enum.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;enum&amp;nbsp;IceCreamEnum&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PLAIN(2),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SUGAR(3),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WAFFLE(5);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;IceCreamEnum(int&amp;nbsp;scoops)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.scoops&amp;nbsp;=&amp;nbsp;scoops;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;scoops;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getScoops(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.scoops;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("main&amp;nbsp;in&amp;nbsp;enum");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IceCreamEnum&amp;nbsp;i&amp;nbsp;=&amp;nbsp;IceCreamEnum.PLAIN;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i.getScoops());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT:&amp;nbsp;main&amp;nbsp;in&amp;nbsp;enum&lt;br&gt;
2&lt;br&gt;
====&lt;br&gt;
A&amp;nbsp;great&amp;nbsp;advantage&amp;nbsp;is&amp;nbsp;when&amp;nbsp;your&amp;nbsp;_____&amp;nbsp;singleton&amp;nbsp;____&amp;nbsp;must&amp;nbsp;implements&amp;nbsp;an&amp;nbsp;interface.&amp;nbsp;Following&amp;nbsp;your&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;enum&amp;nbsp;Elvis&amp;nbsp;implements&amp;nbsp;HasAge&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getAge()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
and&amp;nbsp;in&amp;nbsp;program:&lt;br&gt;
..&lt;br&gt;
Elvis&amp;nbsp;instanse&amp;nbsp;=&amp;nbsp;Elvis.INSTANCE.</questionanswer>
  </question>
  <question id="1_0_0_0_0:49" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;Nested&amp;nbsp;classes,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;Nested&amp;nbsp;and&amp;nbsp;Inner&amp;nbsp;classes&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;defi&amp;nbsp;ned&amp;nbsp;within&amp;nbsp;another&lt;br&gt;
class.&amp;nbsp;A&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;that&amp;nbsp;is&amp;nbsp;=&amp;nbsp;nonstatic&amp;nbsp;=&amp;nbsp;is&amp;nbsp;referred&lt;br&gt;
to&amp;nbsp;as&amp;nbsp;an&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;four&amp;nbsp;types&amp;nbsp;of&amp;nbsp;nested&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;Java:&lt;br&gt;
1-&amp;nbsp;A&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;nonstatic&amp;nbsp;nested&amp;nbsp;class&lt;br&gt;
that&amp;nbsp;is&amp;nbsp;declared&amp;nbsp;at&amp;nbsp;the&amp;nbsp;member&amp;nbsp;level&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
2-&amp;nbsp;A&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;defined&amp;nbsp;within&amp;nbsp;a&amp;nbsp;method.&amp;nbsp;Because&lt;br&gt;
it&amp;nbsp;appears&amp;nbsp;within&amp;nbsp;a&amp;nbsp;method,&amp;nbsp;making&amp;nbsp;it&amp;nbsp;static&amp;nbsp;does&amp;nbsp;not&amp;nbsp;make&amp;nbsp;sense.&lt;br&gt;
3-&amp;nbsp;An&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;special&amp;nbsp;case&amp;nbsp;of&amp;nbsp;a&amp;nbsp;local&amp;nbsp;inner&lt;br&gt;
class&amp;nbsp;that&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name&lt;br&gt;
-4&amp;nbsp;Top&amp;nbsp;-&amp;nbsp;level&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;static&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;are&lt;br&gt;
nested&amp;nbsp;at&amp;nbsp;the&amp;nbsp;member&amp;nbsp;level&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
========&lt;br&gt;
1&amp;nbsp;&amp;nbsp;&amp;nbsp;Member&amp;nbsp;Inner&amp;nbsp;Classes&lt;br&gt;
A&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;defi&amp;nbsp;ned&amp;nbsp;at&amp;nbsp;the&amp;nbsp;member&lt;br&gt;
level&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;(the&amp;nbsp;same&amp;nbsp;level&amp;nbsp;as&amp;nbsp;fields,&amp;nbsp;methods&amp;nbsp;and&amp;nbsp;constructors).&lt;br&gt;
Member&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;can&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;public&amp;nbsp;,&amp;nbsp;private&amp;nbsp;,&amp;nbsp;protected&amp;nbsp;or&amp;nbsp;have&amp;nbsp;the&amp;nbsp;default&lt;br&gt;
access.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;can&amp;nbsp;extend&amp;nbsp;any&amp;nbsp;class&amp;nbsp;and&amp;nbsp;implement&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;interfaces.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;can&amp;nbsp;be&amp;nbsp;abstract&amp;nbsp;or&amp;nbsp;final&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;cannot&amp;nbsp;declare&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;methods.&lt;br&gt;
-&amp;nbsp;Most&amp;nbsp;importantly,&amp;nbsp;a&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;has&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
members&amp;nbsp;of&amp;nbsp;the&amp;nbsp;outer&amp;nbsp;class,&amp;nbsp;even&amp;nbsp;the&amp;nbsp;private&amp;nbsp;members.&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;cannot&amp;nbsp;instantiate&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;an&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;without&lt;br&gt;
a&amp;nbsp;corresponding&amp;nbsp;outer&amp;nbsp;class&amp;nbsp;instance.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Outer&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;greeting;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;protected&amp;nbsp;class&amp;nbsp;Inner&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;repeat&amp;nbsp;=&amp;nbsp;3;&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;go()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;repeat;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(greeting);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;instantiating&amp;nbsp;an&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&lt;br&gt;
reference&amp;nbsp;with&amp;nbsp;the&amp;nbsp;new&amp;nbsp;operator.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
Outer&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Outer();&lt;br&gt;
Outer.Inner&amp;nbsp;b&amp;nbsp;=&amp;nbsp;a.new&amp;nbsp;Inner();&lt;br&gt;
&lt;br&gt;
Typically&amp;nbsp;you&amp;nbsp;instantiate&amp;nbsp;inner&amp;nbsp;objects&amp;nbsp;from&lt;br&gt;
within&amp;nbsp;the&amp;nbsp;enclosing&amp;nbsp;class,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;this&amp;nbsp;reference&amp;nbsp;with&amp;nbsp;the&amp;nbsp;new&amp;nbsp;operator:&lt;br&gt;
Inner&amp;nbsp;x&amp;nbsp;=&amp;nbsp;this.new&amp;nbsp;Inner();&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;Inner&amp;nbsp;Classes&amp;nbsp;Behind&amp;nbsp;the&amp;nbsp;Scenes&lt;br&gt;
&lt;br&gt;
Something&amp;nbsp;interesting&amp;nbsp;to&amp;nbsp;know&amp;nbsp;about&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;is&amp;nbsp;that&amp;nbsp;a&lt;br&gt;
JVM&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;inner&amp;nbsp;classes.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;a&amp;nbsp;compile&amp;nbsp;-&amp;nbsp;time&amp;nbsp;feature,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;&lt;br&gt;
actually&amp;nbsp;writes&amp;nbsp;a&amp;nbsp;top-level&amp;nbsp;class&amp;nbsp;for&amp;nbsp;every&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;that&amp;nbsp;you&lt;br&gt;
declare.&amp;nbsp;This&amp;nbsp;new&amp;nbsp;top&amp;nbsp;-&amp;nbsp;level&amp;nbsp;class&amp;nbsp;needs&amp;nbsp;some&lt;br&gt;
special&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;so&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;access&amp;nbsp;all&amp;nbsp;the&lt;br&gt;
members&amp;nbsp;of&amp;nbsp;its&amp;nbsp;enclosing&amp;nbsp;class.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;contains&lt;br&gt;
an&amp;nbsp;implicit&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;its&amp;nbsp;outer&amp;nbsp;class&amp;nbsp;object.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;Outer&amp;nbsp;class&lt;br&gt;
example&amp;nbsp;from&amp;nbsp;this&amp;nbsp;section&amp;nbsp;is&amp;nbsp;compiled,&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&lt;br&gt;
created:&amp;nbsp;Outer.class&amp;nbsp;and&amp;nbsp;Outer$Inner.class&amp;nbsp;.&amp;nbsp;(Inner&amp;nbsp;classes&lt;br&gt;
are&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;only&amp;nbsp;times&amp;nbsp;you&amp;nbsp;will&amp;nbsp;ever&amp;nbsp;see&amp;nbsp;a&amp;nbsp;dollar&amp;nbsp;sign&lt;br&gt;
in&amp;nbsp;an&amp;nbsp;identifi&amp;nbsp;er.)&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;wrote&amp;nbsp;a&amp;nbsp;class&amp;nbsp;named&amp;nbsp;Outer$Inner&amp;nbsp;to&amp;nbsp;represent&lt;br&gt;
our&amp;nbsp;inner&amp;nbsp;class.&amp;nbsp;You&amp;nbsp;cannot&amp;nbsp;instantiate&amp;nbsp;an&amp;nbsp;Outer$Inner&amp;nbsp;object&lt;br&gt;
explicitly.&amp;nbsp;You&amp;nbsp;have&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;syntax.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Inner&amp;nbsp;Classes&amp;nbsp;as&amp;nbsp;Event&amp;nbsp;Handlers&lt;br&gt;
A&amp;nbsp;common&amp;nbsp;use&amp;nbsp;of&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;is&amp;nbsp;for&amp;nbsp;event&amp;nbsp;handlers.&lt;br&gt;
An&amp;nbsp;event&amp;nbsp;handler&amp;nbsp;is&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;object&amp;nbsp;that&amp;nbsp;often&amp;nbsp;needs&lt;br&gt;
access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;members&amp;nbsp;of&amp;nbsp;its&amp;nbsp;outer&amp;nbsp;class&amp;nbsp;but&amp;nbsp;likely&amp;nbsp;won’t&amp;nbsp;be&lt;br&gt;
reused&amp;nbsp;by&amp;nbsp;another&amp;nbsp;class,&amp;nbsp;making&amp;nbsp;it&amp;nbsp;a&amp;nbsp;good&amp;nbsp;candidate&amp;nbsp;for&amp;nbsp;an&lt;br&gt;
inner&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;ColorChanger&amp;nbsp;class&amp;nbsp;discussed&amp;nbsp;in&amp;nbsp;Listing&amp;nbsp;2.1&lt;br&gt;
earlier&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter&amp;nbsp;declared&amp;nbsp;a&amp;nbsp;member&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;named&lt;br&gt;
MyButtonListener&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ColorChanger&amp;nbsp;extends&amp;nbsp;Frame&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;private&amp;nbsp;Button&amp;nbsp;redBtn,&amp;nbsp;whiteBtn,&amp;nbsp;blueBtn;&lt;br&gt;
23.&amp;nbsp;private&amp;nbsp;class&amp;nbsp;MyButtonListener&amp;nbsp;implements&amp;nbsp;ActionListener&amp;nbsp;{&lt;br&gt;
24.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;actionPerformed(ActionEvent&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
25.&amp;nbsp;String&amp;nbsp;label&amp;nbsp;=&amp;nbsp;e.getActionCommand();&lt;br&gt;
26.&amp;nbsp;if(label.equals(redBtn.getLabel()))&amp;nbsp;{&lt;br&gt;
27.&amp;nbsp;ColorChanger.this.setBackground(RED);&lt;br&gt;
28.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(label.equals(whiteBtn.getLabel()))&amp;nbsp;{&lt;br&gt;
29.&amp;nbsp;ColorChanger.this.setBackground(WHITE);&lt;br&gt;
30.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(label.equals(blueBtn.getLabel()))&amp;nbsp;{&lt;br&gt;
31.&amp;nbsp;ColorChanger.this.setBackground(BLUE);&lt;br&gt;
32.&amp;nbsp;}&lt;br&gt;
33.&amp;nbsp;}&lt;br&gt;
34.&amp;nbsp;}&lt;br&gt;
54.&amp;nbsp;private&amp;nbsp;void&amp;nbsp;initializeEvents()&amp;nbsp;{&lt;br&gt;
55.&amp;nbsp;MyButtonListener&amp;nbsp;m&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MyButtonListener();&lt;br&gt;
56.&amp;nbsp;redBtn.addActionListener(m);&lt;br&gt;
57.&amp;nbsp;whiteBtn.addActionListener(m);&lt;br&gt;
58.&amp;nbsp;blueBtn.addActionListener(m);&lt;br&gt;
59.&amp;nbsp;}&lt;br&gt;
60.&amp;nbsp;//Remainder&amp;nbsp;of&amp;nbsp;class&amp;nbsp;definition...&lt;br&gt;
71.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
=======================&lt;br&gt;
&lt;br&gt;
2&amp;nbsp;Local&amp;nbsp;Inner&amp;nbsp;Classes&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;defined&amp;nbsp;within&amp;nbsp;a&lt;br&gt;
method.&amp;nbsp;Like&amp;nbsp;local&amp;nbsp;variables,&amp;nbsp;a&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;declaration&lt;br&gt;
does&amp;nbsp;not&amp;nbsp;exist&amp;nbsp;until&amp;nbsp;the&amp;nbsp;method&amp;nbsp;is&amp;nbsp;invoked,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;goes&amp;nbsp;out&lt;br&gt;
of&amp;nbsp;scope&amp;nbsp;when&amp;nbsp;the&amp;nbsp;method&amp;nbsp;returns.&amp;nbsp;That&amp;nbsp;means&amp;nbsp;if&amp;nbsp;you&amp;nbsp;define&lt;br&gt;
an&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;locally,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;create&amp;nbsp;instances&amp;nbsp;from&lt;br&gt;
within&amp;nbsp;the&amp;nbsp;method.&amp;nbsp;Local&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
-&amp;nbsp;Local&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&amp;nbsp;an&amp;nbsp;access&amp;nbsp;specifier.&lt;br&gt;
-&amp;nbsp;Local&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;declared&amp;nbsp;static&amp;nbsp;,&amp;nbsp;nor&amp;nbsp;can&amp;nbsp;they&lt;br&gt;
declare&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;methods.&lt;br&gt;
-&amp;nbsp;Local&amp;nbsp;inner&amp;nbsp;classes&amp;nbsp;have&amp;nbsp;access&amp;nbsp;to&amp;nbsp;all&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;and&lt;br&gt;
methods&amp;nbsp;of&amp;nbsp;its&amp;nbsp;enclosing&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;local&lt;br&gt;
variables&amp;nbsp;of&amp;nbsp;method&amp;nbsp;unless&amp;nbsp;those&amp;nbsp;variables&amp;nbsp;are&amp;nbsp;___&amp;nbsp;final&amp;nbsp;___&amp;nbsp;!!!&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;LocalInner&amp;nbsp;{&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;double&amp;nbsp;radius;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doSomething()&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;final&amp;nbsp;double&amp;nbsp;pi&amp;nbsp;=&amp;nbsp;3.1415;&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;class&amp;nbsp;Circle&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;double&amp;nbsp;area()&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;return&amp;nbsp;pi&amp;nbsp;*&amp;nbsp;radius&amp;nbsp;*&amp;nbsp;radius;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;Circle&amp;nbsp;c&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Circle();&lt;br&gt;
15.&amp;nbsp;System.out.println(c.area());&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;LocalInner&amp;nbsp;x&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LocalInner();&lt;br&gt;
20.&amp;nbsp;x.radius&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
21.&amp;nbsp;x.doSomething();&lt;br&gt;
22.&amp;nbsp;}&lt;br&gt;
23.}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;314.15000000000003&lt;br&gt;
&lt;br&gt;
===================&lt;br&gt;
3&amp;nbsp;&amp;nbsp;Anonymous&amp;nbsp;Inner&amp;nbsp;Classes&lt;br&gt;
An&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;that&amp;nbsp;does&amp;nbsp;not&lt;br&gt;
have&amp;nbsp;a&amp;nbsp;name.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;declared&amp;nbsp;and&amp;nbsp;instantiated&amp;nbsp;all&amp;nbsp;in&amp;nbsp;one&lt;br&gt;
statement&amp;nbsp;using&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword.&amp;nbsp;Anonymous&amp;nbsp;inner&amp;nbsp;classes&lt;br&gt;
either&amp;nbsp;extend&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;class&amp;nbsp;or&amp;nbsp;implement&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;interface.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Notice&amp;nbsp;that&amp;nbsp;the&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;has&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
field&amp;nbsp;x&amp;nbsp;and&amp;nbsp;also&amp;nbsp;the&amp;nbsp;final&amp;nbsp;local&lt;br&gt;
variable&amp;nbsp;s&amp;nbsp;.&amp;nbsp;Study&amp;nbsp;the&amp;nbsp;code&amp;nbsp;and&amp;nbsp;try&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output.&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;AnonInner&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printX()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;final&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;“x&amp;nbsp;=&amp;nbsp;“;&lt;br&gt;
6.&amp;nbsp;Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;while(true)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(s&amp;nbsp;+&amp;nbsp;x);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;};&lt;br&gt;
13.&amp;nbsp;t.start();&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;new&amp;nbsp;AnonInner().printX();&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
x&amp;nbsp;=&amp;nbsp;10&lt;br&gt;
x&amp;nbsp;=&amp;nbsp;10&lt;br&gt;
x&amp;nbsp;=&amp;nbsp;10&lt;br&gt;
x&amp;nbsp;=&amp;nbsp;10&lt;br&gt;
....&amp;nbsp;&amp;nbsp;(&amp;nbsp;infinite&amp;nbsp;loop&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Anonymous&amp;nbsp;Inner&amp;nbsp;Classes&amp;nbsp;and&amp;nbsp;Interfaces&lt;br&gt;
An&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;must&amp;nbsp;either&amp;nbsp;extend&amp;nbsp;an&lt;br&gt;
existing&amp;nbsp;class&amp;nbsp;or&amp;nbsp;implement&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;interface.&amp;nbsp;When&lt;br&gt;
implementing&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;the&amp;nbsp;syntax&amp;nbsp;almost&amp;nbsp;looks&amp;nbsp;like&amp;nbsp;you&amp;nbsp;are&lt;br&gt;
attempting&amp;nbsp;to&amp;nbsp;instantiate&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;which&amp;nbsp;of&amp;nbsp;course&lt;br&gt;
would&amp;nbsp;not&amp;nbsp;be&amp;nbsp;valid.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;anonymous&amp;nbsp;inner&lt;br&gt;
class&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;java.awt.event.ActionListener&lt;br&gt;
interface:&lt;br&gt;
&lt;br&gt;
ActionListener&amp;nbsp;x&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ActionListener()&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;actionPerformed(ActionEvent&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
System.out.println(“Action&amp;nbsp;occurred”);&lt;br&gt;
}&lt;br&gt;
};&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;above&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;declaration&amp;nbsp;is&amp;nbsp;valid&amp;nbsp;because&amp;nbsp;we&amp;nbsp;are&lt;br&gt;
not&amp;nbsp;instantiating&amp;nbsp;a&amp;nbsp;new&amp;nbsp;ActionListener&amp;nbsp;interface&amp;nbsp;(which&amp;nbsp;wouldn&amp;nbsp;’&amp;nbsp;t&lt;br&gt;
be&amp;nbsp;valid),&amp;nbsp;but&amp;nbsp;instead&amp;nbsp;we&amp;nbsp;are&amp;nbsp;instantiating&amp;nbsp;an&lt;br&gt;
anonymous&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;ActionListener&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
=====================&lt;br&gt;
4&amp;nbsp;&amp;nbsp;Static&amp;nbsp;Nested&amp;nbsp;Classes&lt;br&gt;
A&amp;nbsp;static&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;static&amp;nbsp;class&amp;nbsp;defined&amp;nbsp;at&amp;nbsp;the&amp;nbsp;member&lt;br&gt;
level&amp;nbsp;of&amp;nbsp;an&amp;nbsp;enclosing&amp;nbsp;class.&amp;nbsp;Static&lt;br&gt;
nested&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;not&amp;nbsp;inner&amp;nbsp;classes.&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&lt;br&gt;
access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
enclosing&amp;nbsp;class,&amp;nbsp;and&amp;nbsp;they&amp;nbsp;can&amp;nbsp;be&amp;nbsp;instantiated&amp;nbsp;without&amp;nbsp;a&lt;br&gt;
corresponding&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;outer&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;a&amp;nbsp;static&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;not&amp;nbsp;really&amp;nbsp;much&amp;nbsp;different&lt;br&gt;
than&amp;nbsp;a&amp;nbsp;top&amp;nbsp;-&amp;nbsp;level&amp;nbsp;class&amp;nbsp;except&amp;nbsp;for&amp;nbsp;a&amp;nbsp;few&amp;nbsp;subtle&amp;nbsp;benefits:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;nesting&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;type&amp;nbsp;of&amp;nbsp;namespace.&amp;nbsp;To&amp;nbsp;denote&amp;nbsp;a&amp;nbsp;nested&lt;br&gt;
class&amp;nbsp;from&amp;nbsp;outside&amp;nbsp;its&amp;nbsp;enclosing&amp;nbsp;class,&amp;nbsp;the&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&lt;br&gt;
prefixed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enclosing&amp;nbsp;class&amp;nbsp;(similar&lt;br&gt;
to&amp;nbsp;how&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;are&amp;nbsp;accessed).&lt;br&gt;
-&amp;nbsp;Access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;can&amp;nbsp;be&amp;nbsp;&amp;nbsp;__&amp;nbsp;controlled&amp;nbsp;by&amp;nbsp;an&amp;nbsp;access&amp;nbsp;specifier.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;a&lt;br&gt;
nested&amp;nbsp;class&amp;nbsp;declared&amp;nbsp;as&amp;nbsp;private&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;used&amp;nbsp;within&amp;nbsp;its&amp;nbsp;enclosing&amp;nbsp;class,&amp;nbsp;in&amp;nbsp;effect&lt;br&gt;
hiding&amp;nbsp;it&amp;nbsp;from&amp;nbsp;any&amp;nbsp;other&amp;nbsp;classes.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;enclosing&amp;nbsp;class&amp;nbsp;has&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;nested&amp;nbsp;class,&amp;nbsp;even&amp;nbsp;the&lt;br&gt;
private&amp;nbsp;ones&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.Dimension;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Shipment&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Box&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Dimension&amp;nbsp;dimension;&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;depth;&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;Box(Dimension&amp;nbsp;d,&amp;nbsp;int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;dimension&amp;nbsp;=&amp;nbsp;d;&lt;br&gt;
10.&amp;nbsp;depth&amp;nbsp;=&amp;nbsp;x;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&lt;br&gt;
13.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getVolume()&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;return&amp;nbsp;dimension.height&amp;nbsp;*&amp;nbsp;dimension.width&amp;nbsp;*&amp;nbsp;depth;&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&lt;br&gt;
18.&amp;nbsp;public&amp;nbsp;Box&amp;nbsp;box;&lt;br&gt;
19.}&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.Dimension;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Shoe&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Shipment.Box&amp;nbsp;box;&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;Shoe()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;Dimension&amp;nbsp;dim&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dimension(6,&amp;nbsp;10);&lt;br&gt;
8.&amp;nbsp;box&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Shipment.Box(dim,&amp;nbsp;4);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;Shoe&amp;nbsp;sandal&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Shoe();&lt;br&gt;
13.&amp;nbsp;System.out.println("Volume&amp;nbsp;=&amp;nbsp;"&lt;br&gt;
14.&amp;nbsp;+&amp;nbsp;sandal.box.getVolume());&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.}&lt;br&gt;
&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;program&amp;nbsp;is&lt;br&gt;
Volume&amp;nbsp;=&amp;nbsp;240&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;Importing&amp;nbsp;a&amp;nbsp;Nested&amp;nbsp;Class&lt;br&gt;
Because&amp;nbsp;a&amp;nbsp;static&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;static&amp;nbsp;member&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class,&lt;br&gt;
it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;imported&amp;nbsp;using&amp;nbsp;a&amp;nbsp;static&amp;nbsp;import&amp;nbsp;.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
suppose&amp;nbsp;Shipment&amp;nbsp;is&amp;nbsp;in&amp;nbsp;the&amp;nbsp;com.sybex.demos&amp;nbsp;package.&amp;nbsp;Then&lt;br&gt;
we&amp;nbsp;can&amp;nbsp;import&amp;nbsp;the&amp;nbsp;Box&amp;nbsp;class&amp;nbsp;using&amp;nbsp;the&amp;nbsp;following&amp;nbsp;static&amp;nbsp;import&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;static&amp;nbsp;com.sybex.demos.Shipment.Box;&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;might&amp;nbsp;be&amp;nbsp;surprised&amp;nbsp;to&amp;nbsp;fi&amp;nbsp;nd&amp;nbsp;out&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;also&amp;nbsp;import&lt;br&gt;
the&amp;nbsp;Box&amp;nbsp;class&amp;nbsp;using&amp;nbsp;a&amp;nbsp;regular&lt;br&gt;
import&amp;nbsp;statement.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;Cereal&amp;nbsp;class&amp;nbsp;is&amp;nbsp;valid&amp;nbsp;and&amp;nbsp;compiles&lt;br&gt;
successfully:&lt;br&gt;
import&amp;nbsp;com.sybex.demos.Shipment.Box;&lt;br&gt;
================</questionanswer>
  </question>
  <question id="1_0_0_0_0:50" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;a&amp;nbsp;non-final&amp;nbsp;&amp;quot;local&amp;quot;&amp;nbsp;variable&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;used&amp;nbsp;inside&amp;nbsp;an&amp;nbsp;inner&amp;nbsp;class,&lt;br&gt;
and&amp;nbsp;instead&amp;nbsp;a&amp;nbsp;non-final&amp;nbsp;field&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enclosing&amp;nbsp;class&amp;nbsp;can?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;difference&amp;nbsp;is&amp;nbsp;between&amp;nbsp;local&amp;nbsp;(method)&amp;nbsp;variables&amp;nbsp;vs&amp;nbsp;class&lt;br&gt;
member&amp;nbsp;variables.&amp;nbsp;A&amp;nbsp;member&amp;nbsp;variable&amp;nbsp;exists&amp;nbsp;during&amp;nbsp;the&amp;nbsp;lifetime&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;enclosing&amp;nbsp;object,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;referenced&amp;nbsp;by&amp;nbsp;the&lt;br&gt;
inner&amp;nbsp;class&amp;nbsp;instance.&amp;nbsp;A&amp;nbsp;local&amp;nbsp;variable,&amp;nbsp;however,&amp;nbsp;exists&amp;nbsp;only&amp;nbsp;during&lt;br&gt;
the&amp;nbsp;method&amp;nbsp;invocation,&amp;nbsp;and&amp;nbsp;is&amp;nbsp;handled&amp;nbsp;differently&amp;nbsp;by&amp;nbsp;the&amp;nbsp;compiler,&amp;nbsp;in&lt;br&gt;
that&amp;nbsp;an&amp;nbsp;implicit&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;it&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;as&amp;nbsp;the&amp;nbsp;member&amp;nbsp;of&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class.&lt;br&gt;
Without&amp;nbsp;declaring&amp;nbsp;the&amp;nbsp;local&amp;nbsp;variable&amp;nbsp;final,&amp;nbsp;one&amp;nbsp;could&amp;nbsp;change&amp;nbsp;it,&lt;br&gt;
leading&amp;nbsp;to&amp;nbsp;subtle&amp;nbsp;errors&amp;nbsp;due&amp;nbsp;to&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;still&amp;nbsp;referring&amp;nbsp;to&amp;nbsp;the&amp;nbsp;original&amp;nbsp;value&amp;nbsp;of&amp;nbsp;that&amp;nbsp;variable.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Another&amp;nbsp;answer&amp;nbsp;:&lt;br&gt;
The&amp;nbsp;reason&amp;nbsp;is&amp;nbsp;that&amp;nbsp;Java&amp;nbsp;doesn't&amp;nbsp;support&amp;nbsp;closures.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;no&amp;nbsp;JVM&amp;nbsp;commands&amp;nbsp;to&amp;nbsp;access&amp;nbsp;local&amp;nbsp;variable&amp;nbsp;from&amp;nbsp;outside&amp;nbsp;the&amp;nbsp;method,&amp;nbsp;whereas&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;class&amp;nbsp;can&amp;nbsp;be&amp;nbsp;easily&amp;nbsp;accessed&amp;nbsp;from&amp;nbsp;any&amp;nbsp;place.&lt;br&gt;
&lt;br&gt;
So,&amp;nbsp;when&amp;nbsp;you&amp;nbsp;use&amp;nbsp;final&amp;nbsp;local&amp;nbsp;variable&amp;nbsp;in&amp;nbsp;an&amp;nbsp;inner&amp;nbsp;class,&amp;nbsp;compiler&amp;nbsp;actually&amp;nbsp;passes&amp;nbsp;a&amp;nbsp;value&amp;nbsp;of&amp;nbsp;that&amp;nbsp;variable&amp;nbsp;into&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class.&amp;nbsp;Obviously,&amp;nbsp;it&amp;nbsp;won't&amp;nbsp;work&amp;nbsp;for&amp;nbsp;non-final&amp;nbsp;variables,&amp;nbsp;since&amp;nbsp;they&amp;nbsp;value&amp;nbsp;can&amp;nbsp;change&amp;nbsp;after&amp;nbsp;construction&amp;nbsp;of&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
Fields&amp;nbsp;of&amp;nbsp;containing&amp;nbsp;class&amp;nbsp;don't&amp;nbsp;have&amp;nbsp;this&amp;nbsp;problem,&amp;nbsp;because&amp;nbsp;compiler&amp;nbsp;implicitly&amp;nbsp;passes&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;containing&amp;nbsp;class&amp;nbsp;into&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;class,&amp;nbsp;thus&amp;nbsp;you&amp;nbsp;can&amp;nbsp;access&amp;nbsp;its&amp;nbsp;fields&amp;nbsp;in&amp;nbsp;a&amp;nbsp;normal&amp;nbsp;way,&amp;nbsp;as&amp;nbsp;you&amp;nbsp;access&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;any&amp;nbsp;other&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:51" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;final&amp;nbsp;blank&amp;nbsp;variable&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;final&amp;nbsp;variable&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;once&lt;br&gt;
&lt;br&gt;
It&amp;nbsp;does&amp;nbsp;not&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;at&amp;nbsp;the&amp;nbsp;point&amp;nbsp;of&amp;nbsp;declaration:&amp;nbsp;this&amp;nbsp;is&amp;nbsp;called&lt;br&gt;
a&amp;nbsp;"blank&amp;nbsp;final"&amp;nbsp;variable.&amp;nbsp;A&amp;nbsp;blank&amp;nbsp;final&amp;nbsp;instance&amp;nbsp;variable&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;must&amp;nbsp;be&amp;nbsp;definitely&lt;br&gt;
assigned&amp;nbsp;in&amp;nbsp;every&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;in&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;declared;&amp;nbsp;similarly,&lt;br&gt;
a&amp;nbsp;blank&amp;nbsp;final&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;must&amp;nbsp;be&amp;nbsp;definitely&amp;nbsp;assigned&amp;nbsp;in&amp;nbsp;a&amp;nbsp;static&amp;nbsp;initializer&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
class&amp;nbsp;in&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;declared;&amp;nbsp;otherwise,&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;in&amp;nbsp;both&amp;nbsp;cases.&lt;br&gt;
(Note:&amp;nbsp;If&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference,&amp;nbsp;this&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;cannot&lt;br&gt;
be&amp;nbsp;re-bound&amp;nbsp;to&amp;nbsp;reference&amp;nbsp;another&amp;nbsp;object.&amp;nbsp;But&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that&amp;nbsp;it&amp;nbsp;references&lt;br&gt;
is&amp;nbsp;still&amp;nbsp;mutable,&amp;nbsp;if&amp;nbsp;it&amp;nbsp;was&amp;nbsp;originally&amp;nbsp;mutable.)&lt;br&gt;
Unlike&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;a&amp;nbsp;constant,&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;a&amp;nbsp;final&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;not&amp;nbsp;necessarily&lt;br&gt;
known&amp;nbsp;at&amp;nbsp;compile&amp;nbsp;time.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;considered&amp;nbsp;good&amp;nbsp;practice&amp;nbsp;to&amp;nbsp;represent&lt;br&gt;
final&amp;nbsp;constants&amp;nbsp;in&amp;nbsp;all&amp;nbsp;uppercase,&amp;nbsp;using&amp;nbsp;underscore&amp;nbsp;to&amp;nbsp;separate&amp;nbsp;words.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Sphere&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;pi&amp;nbsp;is&amp;nbsp;a&amp;nbsp;universal&amp;nbsp;constant,&amp;nbsp;about&amp;nbsp;as&amp;nbsp;constant&amp;nbsp;as&amp;nbsp;anything&amp;nbsp;can&amp;nbsp;be.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;double&amp;nbsp;PI&amp;nbsp;=&amp;nbsp;3.141592653589793;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;double&amp;nbsp;radius;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;double&amp;nbsp;xPos;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;double&amp;nbsp;yPos;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;double&amp;nbsp;zPos;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sphere(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;z,&amp;nbsp;double&amp;nbsp;r)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;radius&amp;nbsp;=&amp;nbsp;r;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xPos&amp;nbsp;=&amp;nbsp;x;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;yPos&amp;nbsp;=&amp;nbsp;y;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;zPos&amp;nbsp;=&amp;nbsp;z;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_0_0:52" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;color;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Shape(String&amp;nbsp;color)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.print(&amp;quot;Shape&amp;quot;);&lt;br&gt;
6.&amp;nbsp;this.color&amp;nbsp;=&amp;nbsp;color;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;new&amp;nbsp;Rectangle();&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;class&amp;nbsp;Rectangle&amp;nbsp;extends&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;public&amp;nbsp;Rectangle()&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;System.out.print(&amp;quot;Rectangle&amp;quot;);&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;ShapeRectangle&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;RectangleShape&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;15&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;constructor&amp;nbsp;does&amp;nbsp;not&amp;nbsp;call&amp;nbsp;this&amp;nbsp;or&amp;nbsp;super&amp;nbsp;on&amp;nbsp;its&amp;nbsp;first&amp;nbsp;line&amp;nbsp;of&amp;nbsp;code,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;inserts&lt;br&gt;
the&amp;nbsp;statement&amp;nbsp;super();,&amp;nbsp;which&amp;nbsp;occurs&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Rectangle&amp;nbsp;class&amp;nbsp;just&amp;nbsp;after&amp;nbsp;line&amp;nbsp;15.&amp;nbsp;A&amp;nbsp;call&amp;nbsp;to&lt;br&gt;
super()&amp;nbsp;in&amp;nbsp;Rectangle&amp;nbsp;invokes&amp;nbsp;a&amp;nbsp;no-argument&amp;nbsp;constructor&amp;nbsp;in&amp;nbsp;Shape,&amp;nbsp;but&amp;nbsp;Shape&amp;nbsp;does&amp;nbsp;not&lt;br&gt;
have&amp;nbsp;a&amp;nbsp;no-argument&amp;nbsp;constructor.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;at&amp;nbsp;line&amp;nbsp;15,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;E.</questionanswer>
  </question>
  <question id="1_0_0_0_0:53" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definitions:&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;Parent()&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.print(&amp;quot;A&amp;quot;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;Child(int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.print(&amp;quot;B&amp;quot;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;Child()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;this(123);&lt;br&gt;
14.&amp;nbsp;System.out.print(&amp;quot;C&amp;quot;);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
new&amp;nbsp;Child();&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;ABC&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;ACB&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;AB&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;AC&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
The&amp;nbsp;statement&amp;nbsp;new&amp;nbsp;Child()&amp;nbsp;invokes&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;on&amp;nbsp;line&amp;nbsp;12.&amp;nbsp;The&amp;nbsp;call&amp;nbsp;to&amp;nbsp;this(123)&lt;br&gt;
invokes&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;on&amp;nbsp;line&amp;nbsp;8,&amp;nbsp;which&amp;nbsp;calls&amp;nbsp;super()&amp;nbsp;implicitly&amp;nbsp;before&amp;nbsp;line&amp;nbsp;9.&amp;nbsp;The&amp;nbsp;call&amp;nbsp;to&lt;br&gt;
super()&amp;nbsp;invokes&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3,&amp;nbsp;where&amp;nbsp;A&amp;nbsp;is&amp;nbsp;printed.&amp;nbsp;Control&amp;nbsp;jumps&amp;nbsp;back&amp;nbsp;to&amp;nbsp;line&amp;nbsp;9&lt;br&gt;
and&amp;nbsp;B&amp;nbsp;is&amp;nbsp;printed.&amp;nbsp;Control&amp;nbsp;jumps&amp;nbsp;back&amp;nbsp;to&amp;nbsp;line&amp;nbsp;14&amp;nbsp;and&amp;nbsp;C&amp;nbsp;is&amp;nbsp;printed.</questionanswer>
  </question>
  <question id="1_0_0_0_0:54" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;identifiers&amp;nbsp;are&amp;nbsp;valid&amp;nbsp;Java&amp;nbsp;identifiers?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;A$B&amp;nbsp;,&amp;nbsp;Public&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;_helloWorld&amp;nbsp;,&amp;nbsp;java.lang&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transient&amp;nbsp;,&amp;nbsp;A$B&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;java.lang&amp;nbsp;,&amp;nbsp;Public&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;dollar&amp;nbsp;sign&amp;nbsp;in&amp;nbsp;identifier&lt;br&gt;
Public&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;keyword&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;identifier&lt;br&gt;
underscore&amp;nbsp;is&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;Java&amp;nbsp;character</questionanswer>
  </question>
  <question id="1_0_0_0_0:55" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;WaterBottle&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;String&amp;nbsp;brand;&lt;br&gt;
3.&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;empty;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;WaterBottle&amp;nbsp;wb&amp;nbsp;=&amp;nbsp;new&amp;nbsp;WaterBottle();&lt;br&gt;
7.&amp;nbsp;if(!wb.empty)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;quot;Brand&amp;nbsp;=&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;wb.brand);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Line&amp;nbsp;6&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;output.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Brand&amp;nbsp;=&amp;nbsp;null&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:56" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Television&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;channel&amp;nbsp;=&amp;nbsp;setChannel(7);&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Television(int&amp;nbsp;channel)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;this.channel&amp;nbsp;=&amp;nbsp;channel;&lt;br&gt;
6.&amp;nbsp;System.out.print(channel&amp;nbsp;+&amp;nbsp;&amp;quot;&amp;nbsp;&amp;quot;);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;setChannel(int&amp;nbsp;channel)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;this.channel&amp;nbsp;=&amp;nbsp;channel;&lt;br&gt;
11.&amp;nbsp;System.out.print(channel&amp;nbsp;+&amp;nbsp;&amp;quot;&amp;nbsp;&amp;quot;);&lt;br&gt;
12.&amp;nbsp;return&amp;nbsp;channel;&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
new&amp;nbsp;Television(12);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;12&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;12&amp;nbsp;7&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;7&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;12&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;7&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:57" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6.&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;my.school.ClassRoom&amp;nbsp;and&amp;nbsp;my.city.School&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;definitions:&lt;br&gt;
1.&amp;nbsp;//ClassRoom.java&lt;br&gt;
2.&amp;nbsp;package&amp;nbsp;my.school;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ClassRoom&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;roomNumber;&lt;br&gt;
5.&amp;nbsp;protected&amp;nbsp;String&amp;nbsp;teacherName;&lt;br&gt;
6.&amp;nbsp;static&amp;nbsp;int&amp;nbsp;globalKey&amp;nbsp;=&amp;nbsp;54321;&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;ClassRoom(int&amp;nbsp;r,&amp;nbsp;String&amp;nbsp;t)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;roomNumber&amp;nbsp;=&amp;nbsp;r;&lt;br&gt;
10.&amp;nbsp;teacherName&amp;nbsp;=&amp;nbsp;t;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
//School.java&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;my.city;&lt;br&gt;
2.&amp;nbsp;import&amp;nbsp;my.school.ClassRoom;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;School&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(ClassRoom.globalKey);&lt;br&gt;
6.&amp;nbsp;ClassRoom&amp;nbsp;room&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ClassRoom(101,&amp;nbsp;&amp;#8220;Mrs.&amp;nbsp;Anderson&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;System.out.println(room.roomNumber);&lt;br&gt;
8.&amp;nbsp;System.out.println(room.teacherName);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;line&amp;nbsp;numbers&amp;nbsp;in&amp;nbsp;main&amp;nbsp;generate&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;5,6,7&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;6,7,8&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;5,6,7,8&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5,6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
Line&amp;nbsp;5&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid&amp;nbsp;because&lt;br&gt;
globalKey&amp;nbsp;has&amp;nbsp;the&amp;nbsp;default&amp;nbsp;access&amp;nbsp;and&amp;nbsp;School&amp;nbsp;is&amp;nbsp;in&amp;nbsp;a&amp;nbsp;different&amp;nbsp;package&amp;nbsp;than&amp;nbsp;ClassRoom.&lt;br&gt;
Line&amp;nbsp;6&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid&amp;nbsp;for&amp;nbsp;the&amp;nbsp;same&amp;nbsp;reason:&amp;nbsp;the&amp;nbsp;ClassRoom&amp;nbsp;constructor&amp;nbsp;has&amp;nbsp;default&amp;nbsp;access&amp;nbsp;so&lt;br&gt;
School&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;access&amp;nbsp;to&amp;nbsp;it.&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid&amp;nbsp;because&amp;nbsp;roomNumber&amp;nbsp;is&amp;nbsp;private&amp;nbsp;and&lt;br&gt;
therefore&amp;nbsp;not&amp;nbsp;accessible&amp;nbsp;outside&amp;nbsp;of&amp;nbsp;ClassRoom.&amp;nbsp;Line&amp;nbsp;8&amp;nbsp;is&amp;nbsp;not&amp;nbsp;valid&amp;nbsp;because&amp;nbsp;teacherName&lt;br&gt;
is&amp;nbsp;protected&amp;nbsp;and&amp;nbsp;School&amp;nbsp;is&amp;nbsp;neither&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;package&amp;nbsp;nor&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;ClassRoom.</questionanswer>
  </question>
  <question id="1_0_0_0_0:58" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;ClassRoom&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;my.school;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ClassRoom&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int&amp;nbsp;globalKey&amp;nbsp;=&amp;nbsp;54321;&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
Now&amp;nbsp;suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;named&amp;nbsp;Administrator:&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;my.city;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Administrator&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getKey()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;return&amp;nbsp;globalKey;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
Which&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;inserted&amp;nbsp;at&amp;nbsp;line&amp;nbsp;2&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Administrator&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&lt;br&gt;
will&amp;nbsp;make&amp;nbsp;the&amp;nbsp;Administrator&amp;nbsp;class&amp;nbsp;compile&amp;nbsp;successfully?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;import&amp;nbsp;my.school.ClassRoom;&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;import&amp;nbsp;static&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;my.school.ClassRoom.*;&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;import&amp;nbsp;static&amp;nbsp;my.school.ClassRoom;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;import&amp;nbsp;static&amp;nbsp;my.school.*;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
Without&amp;nbsp;any&amp;nbsp;imports,&amp;nbsp;the&amp;nbsp;Administrator&amp;nbsp;class&amp;nbsp;will&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;because&lt;br&gt;
line&amp;nbsp;5&amp;nbsp;of&amp;nbsp;Administrator&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;globalKey,&amp;nbsp;a&amp;nbsp;static&amp;nbsp;field&amp;nbsp;in&amp;nbsp;ClassRoom.&lt;br&gt;
A&amp;nbsp;imports&amp;nbsp;the&amp;nbsp;ClassRoom&amp;nbsp;class,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;import&amp;nbsp;but&amp;nbsp;does&amp;nbsp;not&amp;nbsp;import&amp;nbsp;globalKey.&lt;br&gt;
B&amp;nbsp;imports&amp;nbsp;all&amp;nbsp;static&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;of&amp;nbsp;ClassRoom,&amp;nbsp;so&amp;nbsp;B&amp;nbsp;is&amp;nbsp;a&amp;nbsp;correct&amp;nbsp;answer.&amp;nbsp;C&amp;nbsp;and&amp;nbsp;D&amp;nbsp;are&amp;nbsp;not&amp;nbsp;valid&lt;br&gt;
statements&amp;nbsp;and&amp;nbsp;generate&amp;nbsp;compiler&amp;nbsp;errors.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;only&amp;nbsp;correct&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;B.</questionanswer>
  </question>
  <question id="1_0_0_0_0:59" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ScorePrinter&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;printScores(int...&amp;nbsp;scores)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;for(int&amp;nbsp;x&amp;nbsp;:&amp;nbsp;scores)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.print(x&amp;nbsp;+&amp;nbsp;&amp;#8220;,&amp;#8221;);&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;x&amp;nbsp;=&amp;nbsp;{198,&amp;nbsp;247,&amp;nbsp;152,&amp;nbsp;207};&lt;br&gt;
10.&amp;nbsp;printScores(x);&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;2&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;line&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;10&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;198,247,152,207,&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:60" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Test&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(byte&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.print(&amp;#8220;byte&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.print(&amp;#8220;int&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(float&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.print(&amp;#8220;float&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(Object&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.print(&amp;#8220;Object&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
20.&amp;nbsp;Test&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Test();&lt;br&gt;
21.&amp;nbsp;short&amp;nbsp;s&amp;nbsp;=&amp;nbsp;123;&lt;br&gt;
22.&amp;nbsp;t.print(s);&lt;br&gt;
23.&amp;nbsp;t.print(12345L);&lt;br&gt;
24.&amp;nbsp;t.print(6.789);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;bytefloatObject&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;intfloatObject&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byteObjectfloat&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;intObjectfloat&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
The&amp;nbsp;argument&amp;nbsp;on&amp;nbsp;line&amp;nbsp;22&amp;nbsp;is&amp;nbsp;a&amp;nbsp;short.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;an&amp;nbsp;int,&amp;nbsp;so&amp;nbsp;print&amp;nbsp;on&amp;nbsp;line&amp;nbsp;5&lt;br&gt;
is&amp;nbsp;invoked.&amp;nbsp;The&amp;nbsp;argument&amp;nbsp;on&amp;nbsp;line&amp;nbsp;23&amp;nbsp;is&amp;nbsp;a&amp;nbsp;long.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;float,&amp;nbsp;so&amp;nbsp;print&amp;nbsp;on&lt;br&gt;
line&amp;nbsp;8&amp;nbsp;is&amp;nbsp;invoked.&amp;nbsp;The&amp;nbsp;argument&amp;nbsp;on&amp;nbsp;line&amp;nbsp;24&amp;nbsp;is&amp;nbsp;a&amp;nbsp;double.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;promoted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;java.lang.&lt;br&gt;
Double,&amp;nbsp;so&amp;nbsp;print&amp;nbsp;on&amp;nbsp;line&amp;nbsp;11&amp;nbsp;is&amp;nbsp;invoked.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&amp;nbsp;intfloatObject&amp;nbsp;and&amp;nbsp;the&lt;br&gt;
correct&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;B.</questionanswer>
  </question>
  <question id="1_0_0_0_0:61" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10.&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;interface&amp;nbsp;and&amp;nbsp;class&amp;nbsp;defined&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Traceable.java&amp;nbsp;,&amp;nbsp;what&amp;nbsp;is&lt;br&gt;
the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;compiling&amp;nbsp;this&amp;nbsp;code?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Traceable&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int&amp;nbsp;MAX_TRACE;&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;trace();&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;class&amp;nbsp;Picture&amp;nbsp;implements&amp;nbsp;Traceable&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;trace()&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Tracing&amp;nbsp;a&amp;nbsp;picture&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;A.&amp;nbsp;Two&amp;nbsp;bytecode&amp;nbsp;files:&amp;nbsp;Traceable.class&amp;nbsp;and&amp;nbsp;Picture.class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;One&amp;nbsp;bytecode&amp;nbsp;file:&amp;nbsp;Traceable.class&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;2&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;tricky&amp;nbsp;question.&amp;nbsp;The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile,&amp;nbsp;so&amp;nbsp;A&amp;nbsp;and&amp;nbsp;B&amp;nbsp;are&amp;nbsp;incorrect.&amp;nbsp;All&amp;nbsp;fields&lt;br&gt;
in&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;are&amp;nbsp;implicitly&amp;nbsp;final,&amp;nbsp;&amp;nbsp;__and&amp;nbsp;static&amp;nbsp;final&amp;nbsp;fields&amp;nbsp;must&amp;nbsp;be&amp;nbsp;initialized&amp;nbsp;__.&amp;nbsp;Line&amp;nbsp;3&amp;nbsp;compiles&lt;br&gt;
fine,&amp;nbsp;as&amp;nbsp;do&amp;nbsp;lines&amp;nbsp;6&amp;nbsp;and&amp;nbsp;7,&amp;nbsp;so&amp;nbsp;D,&amp;nbsp;E,&amp;nbsp;and&amp;nbsp;F&amp;nbsp;are&amp;nbsp;incorrect.&amp;nbsp;Because&amp;nbsp;MAX_TRACE&amp;nbsp;is&amp;nbsp;not&amp;nbsp;initialized,&lt;br&gt;
line&amp;nbsp;2&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;C.</questionanswer>
  </question>
  <question id="1_0_0_0_0:62" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;11.&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Browser&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;addToFavorites(int&amp;nbsp;id,&amp;nbsp;String...&amp;nbsp;urls)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;for(String&amp;nbsp;url&amp;nbsp;:&amp;nbsp;urls)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.println(url);&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;valid&amp;nbsp;method&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;addToFavorites&amp;nbsp;?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&amp;nbsp;Browser.addToFavorites(101);&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Browser.addToFavorites();&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Browser.addToFavorites(103,&amp;nbsp;104,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;105);&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Browser.addToFavorites(103,&amp;nbsp;'104',&amp;nbsp;'105');&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:63" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;we&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Outer&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;protected&amp;nbsp;class&amp;nbsp;Inner&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;go()&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(x);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.}&lt;br&gt;
&lt;br&gt;
Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code:&lt;br&gt;
15.&amp;nbsp;Outer&amp;nbsp;out&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Outer();&lt;br&gt;
16.&amp;nbsp;Outer.Inner&amp;nbsp;in&amp;nbsp;=&amp;nbsp;out.new&amp;nbsp;Inner();&lt;br&gt;
17.&amp;nbsp;in.go();&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;true?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;output&amp;nbsp;is&amp;nbsp;10.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;output&amp;nbsp;is&amp;nbsp;5.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Line&amp;nbsp;16&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;class&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile,&amp;nbsp;so&amp;nbsp;A&amp;nbsp;and&amp;nbsp;B&amp;nbsp;are&amp;nbsp;incorrect.&amp;nbsp;Line&amp;nbsp;16&amp;nbsp;compiles&amp;nbsp;and&amp;nbsp;is&amp;nbsp;the&amp;nbsp;proper&lt;br&gt;
syntax&amp;nbsp;for&amp;nbsp;instantiating&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Inner&amp;nbsp;object&amp;nbsp;outside&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Outer&amp;nbsp;class,&amp;nbsp;so&amp;nbsp;C&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;An&lt;br&gt;
__&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;cannot&amp;nbsp;declare&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;methods&amp;nbsp;__,&amp;nbsp;so&amp;nbsp;line&amp;nbsp;5&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;and&lt;br&gt;
the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;D.</questionanswer>
  </question>
  <question id="1_0_0_0_0:64" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definitions:&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printResults(String...&amp;nbsp;results)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.println(&amp;#8220;In&amp;nbsp;Parent&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;printResults(int&amp;nbsp;id)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(&amp;#8220;In&amp;nbsp;Child&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;return&amp;nbsp;0;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
new&amp;nbsp;Child().printResults(0);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;In&amp;nbsp;Parent&amp;nbsp;$v0end$&lt;br&gt;
$v1$In&amp;nbsp;Child&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Line&amp;nbsp;2&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;0&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:65" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;enum&amp;nbsp;declaration:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Flavors&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;VANILLA,&amp;nbsp;CHOCOLATE,&amp;nbsp;STRAWBERRY&lt;br&gt;
3.&amp;nbsp;}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
System.out.println(Flavors.CHOCOLATE.ordinal());&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;0&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;1&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;9&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;2&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:66" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;float&amp;nbsp;computePay(double&amp;nbsp;d)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.println(&amp;#8220;In&amp;nbsp;Parent&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;return&amp;nbsp;0.0F;&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;double&amp;nbsp;computePay(double&amp;nbsp;d)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;System.out.println(&amp;#8220;In&amp;nbsp;Child&amp;#8221;);&lt;br&gt;
11.&amp;nbsp;return&amp;nbsp;0.0;&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;new&amp;nbsp;Child().computePay(0.0);&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;In&amp;nbsp;Parent&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;In&amp;nbsp;Child&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;0&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;return&amp;nbsp;type&amp;nbsp;of&amp;nbsp;an&amp;nbsp;overridden&amp;nbsp;method&amp;nbsp;must&amp;nbsp;either&amp;nbsp;be&amp;nbsp;the&amp;nbsp;same&amp;nbsp;or&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
return&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;method.&amp;nbsp;Because&amp;nbsp;double&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;float&amp;nbsp;(they&amp;nbsp;are&lt;br&gt;
primitive&amp;nbsp;types),&amp;nbsp;line&amp;nbsp;8&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.</questionanswer>
  </question>
  <question id="1_0_0_0_0:67" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.Dimension;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Shipment&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Box&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;Dimension&amp;nbsp;dimension;&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;depth;&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;Box(Dimension&amp;nbsp;d,&amp;nbsp;int&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;dimension&amp;nbsp;=&amp;nbsp;d;&lt;br&gt;
9.&amp;nbsp;depth&amp;nbsp;=&amp;nbsp;x;&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;getVolume()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;return&amp;nbsp;dimension.height&amp;nbsp;*&amp;nbsp;dimension.width&amp;nbsp;*&amp;nbsp;depth;&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&lt;br&gt;
17.&amp;nbsp;public&amp;nbsp;Box&amp;nbsp;box;&lt;br&gt;
18.&lt;br&gt;
19.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;go()&amp;nbsp;{&lt;br&gt;
20.&amp;nbsp;System.out.println(box.getVolume());&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
22.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;(assuming&amp;nbsp;all&amp;nbsp;types&amp;nbsp;are&amp;nbsp;properly&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;imported)?&lt;br&gt;
Dimension&amp;nbsp;dim&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dimension(10,10);&lt;br&gt;
Box&amp;nbsp;b&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Box(dim,&amp;nbsp;10);&lt;br&gt;
Shipment&amp;nbsp;s&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Shipment();&lt;br&gt;
s.box&amp;nbsp;=&amp;nbsp;b;&lt;br&gt;
s.go();&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;1000&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;13&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;17&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;fi&amp;nbsp;ne.&amp;nbsp;A&amp;nbsp;class&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;static&amp;nbsp;nested&amp;nbsp;class,&amp;nbsp;so&amp;nbsp;B&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;Line&lt;br&gt;
13&amp;nbsp;can&amp;nbsp;access&amp;nbsp;only&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;of&amp;nbsp;Box&amp;nbsp;which&amp;nbsp;it&amp;nbsp;does,&amp;nbsp;so&amp;nbsp;C&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;Shipment&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;Box&lt;br&gt;
class&amp;nbsp;without&amp;nbsp;any&amp;nbsp;special&amp;nbsp;syntax&amp;nbsp;or&amp;nbsp;prefi&amp;nbsp;xes,&amp;nbsp;so&amp;nbsp;line&amp;nbsp;17&amp;nbsp;is&amp;nbsp;valid&amp;nbsp;and&amp;nbsp;D&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;Shipment&lt;br&gt;
has&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;private&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;Box,&amp;nbsp;so&amp;nbsp;line&amp;nbsp;20&amp;nbsp;is&amp;nbsp;valid&amp;nbsp;and&amp;nbsp;E&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;The&amp;nbsp;volume&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;Box&amp;nbsp;is&amp;nbsp;10*10*10&amp;nbsp;=&amp;nbsp;1000,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&amp;nbsp;1000&amp;nbsp;and&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;A.</questionanswer>
  </question>
  <question id="1_0_0_0_0:68" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;enum&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Flavors&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;VANILLA,&amp;nbsp;CHOCOLATE,&amp;nbsp;STRAWBERRY&lt;br&gt;
3.&amp;nbsp;}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;from&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
9.&amp;nbsp;Flavors&amp;nbsp;f&amp;nbsp;=&amp;nbsp;Flavors.STRAWBERRY;&lt;br&gt;
10.&amp;nbsp;switch(f)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;case&amp;nbsp;0:&lt;br&gt;
12.&amp;nbsp;System.out.println(&amp;#8220;vanilla&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;case&amp;nbsp;1:&lt;br&gt;
14.&amp;nbsp;System.out.println(&amp;#8220;chocolate&amp;#8221;);&lt;br&gt;
15.&amp;nbsp;case&amp;nbsp;2:&lt;br&gt;
16.&amp;nbsp;System.out.println(&amp;#8220;strawberry&amp;#8221;);&lt;br&gt;
17.&amp;nbsp;break;&lt;br&gt;
18.&amp;nbsp;default:&lt;br&gt;
19.&amp;nbsp;System.out.println(&amp;#8220;missing&amp;nbsp;flavor&amp;#8221;);&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;vanilla&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;chocolate&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;strawberry&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
A&amp;nbsp;case&amp;nbsp;statement&amp;nbsp;on&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;data&amp;nbsp;type&amp;nbsp;must&amp;nbsp;be&amp;nbsp;the&amp;nbsp;unqualifi&amp;nbsp;ed&amp;nbsp;name&amp;nbsp;of&amp;nbsp;an&lt;br&gt;
enumeration&amp;nbsp;constant.&amp;nbsp;You&amp;nbsp;cannot&amp;nbsp;use&amp;nbsp;their&amp;nbsp;ordinal&amp;nbsp;values&amp;nbsp;in&amp;nbsp;a&amp;nbsp;case.&amp;nbsp;Therefore,&amp;nbsp;a&amp;nbsp;compiler&lt;br&gt;
error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;lines&amp;nbsp;11,&amp;nbsp;13,&amp;nbsp;and&amp;nbsp;15,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;E.&lt;br&gt;
&lt;br&gt;
Correct&amp;nbsp;is&amp;nbsp;&lt;br&gt;
..&lt;br&gt;
15.&amp;nbsp;case&amp;nbsp;STRAWBERRY:&lt;br&gt;
16.&amp;nbsp;System.out.println(“strawberry”);&lt;br&gt;
..</questionanswer>
  </question>
  <question id="1_0_0_0_0:69" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.awt.*;&lt;br&gt;
2.&amp;nbsp;import&amp;nbsp;java.awt.event.*;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MyWindow&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;private&amp;nbsp;Frame&amp;nbsp;frame&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Frame();&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerEvents()&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;WindowAdapter&amp;nbsp;wa&amp;nbsp;=&amp;nbsp;new&amp;nbsp;WindowAdapter()&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;windowClosing(WindowEvent&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;frame.setVisible(false);&lt;br&gt;
11.&amp;nbsp;frame.dispose();&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;};&lt;br&gt;
14.&amp;nbsp;frame.addWindowListener(wa);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.}&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Lines&amp;nbsp;10&amp;nbsp;and&amp;nbsp;11&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generate&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;object&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;frame&amp;nbsp;field&amp;nbsp;on&amp;nbsp;line&amp;nbsp;5&lt;br&gt;
because&amp;nbsp;frame&amp;nbsp;is&amp;nbsp;private&amp;nbsp;.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;The&amp;nbsp;method&amp;nbsp;on&amp;nbsp;line&amp;nbsp;9&amp;nbsp;never&amp;nbsp;executes&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;because&amp;nbsp;its&amp;nbsp;definition&amp;nbsp;goes&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope&amp;nbsp;after&amp;nbsp;line&amp;nbsp;15.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;anonymous&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;on&amp;nbsp;line&amp;nbsp;8&amp;nbsp;is&amp;nbsp;a&amp;nbsp;child&amp;nbsp;of&amp;nbsp;WindowAdapter&amp;nbsp;.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:70" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;a&amp;nbsp;method&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class&amp;nbsp;has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;method&amp;nbsp;declaration:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;java.io.OutputStream&amp;nbsp;createStream(String&amp;nbsp;fileName)&amp;nbsp;{&lt;br&gt;
//method&amp;nbsp;body&amp;nbsp;here...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;methods&amp;nbsp;could&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;and&amp;nbsp;override&lt;br&gt;
createStream&amp;nbsp;?&amp;nbsp;&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;protected&amp;nbsp;java.io.OutputStream&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createStream(String&amp;nbsp;fileName)&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;public&amp;nbsp;java.io.OutputStream&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createStream(char&amp;nbsp;c)&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;public&amp;nbsp;java.io.FileOutputStream&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createStream(String&amp;nbsp;f)&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;public&amp;nbsp;void&amp;nbsp;createStream(String&amp;nbsp;c)&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
variant&amp;nbsp;0&amp;nbsp;is&amp;nbsp;wrong&amp;nbsp;because&amp;nbsp;if&amp;nbsp;in&amp;nbsp;parent&amp;nbsp;method&amp;nbsp;is&amp;nbsp;public&amp;nbsp;,&amp;nbsp;it&amp;nbsp;cant&amp;nbsp;be&lt;br&gt;
protected&amp;nbsp;in&amp;nbsp;child&lt;br&gt;
Return&amp;nbsp;type&amp;nbsp;in&amp;nbsp;child&amp;nbsp;must&amp;nbsp;be&amp;nbsp;the&amp;nbsp;same(or&amp;nbsp;child&amp;nbsp;type)&amp;nbsp;as&amp;nbsp;in&amp;nbsp;parent</questionanswer>
  </question>
  <question id="1_0_0_0_0:71" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definitions,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;statement&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Child();&amp;nbsp;?&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.print(&amp;#8220;1&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;Parent(String&amp;nbsp;greeting)&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;System.out.print(&amp;#8220;2&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.print(&amp;#8220;3&amp;#8221;);&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;System.out.print(&amp;#8220;4&amp;#8221;);&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;1234&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3123&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;3142&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;Child&amp;nbsp;class&amp;nbsp;gets&amp;nbsp;the&amp;nbsp;default&amp;nbsp;constructor&amp;nbsp;because&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;defi&amp;nbsp;ne&amp;nbsp;a&amp;nbsp;constructor&lt;br&gt;
explicitly.&amp;nbsp;The&amp;nbsp;default&amp;nbsp;constructor&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;line&amp;nbsp;super();&amp;nbsp;which&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&lt;br&gt;
because&amp;nbsp;Parent&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;no-argument&amp;nbsp;constructor.</questionanswer>
  </question>
  <question id="1_0_0_0_0:72" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;enum&amp;nbsp;declaration:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Fruit&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;APPLE(&amp;#8220;red&amp;#8221;),&lt;br&gt;
3.&amp;nbsp;BANANA(&amp;#8220;yellow&amp;#8221;),&lt;br&gt;
4.&amp;nbsp;ORANGE(&amp;#8220;orange&amp;#8221;),&lt;br&gt;
5.&amp;nbsp;PLUM(&amp;#8220;purple&amp;#8221;);&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;private&amp;nbsp;Fruit(String&amp;nbsp;color)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;this.color&amp;nbsp;=&amp;nbsp;color;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&lt;br&gt;
11.&amp;nbsp;public&amp;nbsp;String&amp;nbsp;color;&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
15.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;FruitStore&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;Fruit&amp;nbsp;one&amp;nbsp;=&amp;nbsp;Fruit.PLUM;&lt;br&gt;
18.&amp;nbsp;System.out.println(&amp;#8220;a&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;one.name()&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;is&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;one.color);&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;a&amp;nbsp;PLUM&amp;nbsp;is&amp;nbsp;purple&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;a&amp;nbsp;Fruit.PLUM&amp;nbsp;is&amp;nbsp;purple&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;Fruit&amp;nbsp;enum&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;17&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;
A.&amp;nbsp;All&amp;nbsp;the&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;fi&amp;nbsp;ne,&amp;nbsp;so&amp;nbsp;C,&amp;nbsp;D,&amp;nbsp;and&amp;nbsp;E&amp;nbsp;are&amp;nbsp;incorrect.&amp;nbsp;The&amp;nbsp;name&amp;nbsp;method&amp;nbsp;of&amp;nbsp;an&amp;nbsp;enum&lt;br&gt;
element&amp;nbsp;returns&amp;nbsp;its&amp;nbsp;unqualifi&amp;nbsp;ed&amp;nbsp;name,&amp;nbsp;which&amp;nbsp;for&amp;nbsp;the&amp;nbsp;one&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;PLUM.&amp;nbsp;The&amp;nbsp;color&amp;nbsp;fi&amp;nbsp;eld&lt;br&gt;
for&amp;nbsp;PLUM&amp;nbsp;is&amp;nbsp;purple,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&amp;nbsp;a&amp;nbsp;PLUM&amp;nbsp;is&amp;nbsp;purple.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;A.</questionanswer>
  </question>
  <question id="1_0_0_0_0:73" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Outer&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;24;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getX()&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;String&amp;nbsp;message&amp;nbsp;=&amp;nbsp;&amp;#8220;x&amp;nbsp;is&amp;nbsp;&amp;#8220;;&lt;br&gt;
6.&amp;nbsp;class&amp;nbsp;Inner&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;private&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;Outer.this.x;&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printX()&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(message&amp;nbsp;+&amp;nbsp;x);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;Inner&amp;nbsp;in&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Inner();&lt;br&gt;
13.&amp;nbsp;in.printX();&lt;br&gt;
14.&amp;nbsp;return&amp;nbsp;x;&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
&lt;br&gt;
new&amp;nbsp;Outer().getX();&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;x&amp;nbsp;is&amp;nbsp;24&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;x&amp;nbsp;is&amp;nbsp;0&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;7&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;9&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
D.&amp;nbsp;The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile,&amp;nbsp;so&amp;nbsp;A&amp;nbsp;and&amp;nbsp;B&amp;nbsp;are&amp;nbsp;incorrect.&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;proper&amp;nbsp;syntax&amp;nbsp;for&lt;br&gt;
an&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;accessing&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;eld&amp;nbsp;in&amp;nbsp;the&amp;nbsp;enclosing&amp;nbsp;class,&amp;nbsp;so&amp;nbsp;C&amp;nbsp;is&amp;nbsp;incorrect.&amp;nbsp;Line&amp;nbsp;12&amp;nbsp;is&amp;nbsp;fi&amp;nbsp;ne,&amp;nbsp;so&amp;nbsp;E&lt;br&gt;
is&amp;nbsp;incorrect.&amp;nbsp;On&amp;nbsp;line&amp;nbsp;9,&amp;nbsp;the&amp;nbsp;local&amp;nbsp;inner&amp;nbsp;class&amp;nbsp;Inner&amp;nbsp;is&amp;nbsp;attempting&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&amp;nbsp;non-final&amp;nbsp;local&lt;br&gt;
variable,&amp;nbsp;which&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;Therefore,&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;D.</questionanswer>
  </question>
  <question id="1_0_0_0_0:74" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definitions:&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(double&amp;nbsp;d)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.print(&amp;#8220;Parent&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;class&amp;nbsp;Child&amp;nbsp;extends&amp;nbsp;Parent&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(int&amp;nbsp;i)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.print(&amp;#8220;Child&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
15.&amp;nbsp;Child&amp;nbsp;child&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Child();&lt;br&gt;
16.&amp;nbsp;child.print(10);&lt;br&gt;
17.&amp;nbsp;child.print(3.14);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;ChildParent&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;ChildChild&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ParentParent&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;8&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:75" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;interface&amp;nbsp;definitions:&lt;br&gt;
1.&amp;nbsp;//Readable.java&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Readable&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;read();&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
1.&amp;nbsp;//SpellCheck.java&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;SpellCheck&amp;nbsp;extends&amp;nbsp;Readable&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;checkSpelling();&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;true?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;SpellCheck&amp;nbsp;interface&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;A&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;Readable&amp;nbsp;must&amp;nbsp;override&amp;nbsp;the&amp;nbsp;read&amp;nbsp;method.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;SpellCheck&amp;nbsp;inherits&amp;nbsp;both&amp;nbsp;the&amp;nbsp;checkSpelling&amp;nbsp;and&amp;nbsp;read&lt;br&gt;
methods.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;A&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;SpellCheck&amp;nbsp;only&amp;nbsp;inherits&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;checkSpelling&amp;nbsp;method.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:76" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definitions:&lt;br&gt;
1.&amp;nbsp;class&amp;nbsp;Pet&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.print(&amp;#8220;A&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;Pet()&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.print(&amp;#8220;B&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.print(&amp;#8220;C&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;class&amp;nbsp;Cat&amp;nbsp;extends&amp;nbsp;Pet&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;public&amp;nbsp;Cat()&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;System.out.print(&amp;#8220;D&amp;#8221;);&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;System.out.print(&amp;#8220;E&amp;#8221;);&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
new&amp;nbsp;Cat();&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;ABCDE&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;ACBED&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;EACBD&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;EBACD&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:77" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;core&amp;nbsp;:&amp;nbsp;if-else&amp;nbsp;statement&amp;nbsp;and&amp;nbsp;case&amp;nbsp;statement,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;following&amp;nbsp;rules&amp;nbsp;apply&amp;nbsp;to&amp;nbsp;an&amp;nbsp;if&amp;nbsp;-&amp;nbsp;else&amp;nbsp;statement:&lt;br&gt;
The&amp;nbsp;expression&amp;nbsp;in&amp;nbsp;parentheses&amp;nbsp;must&amp;nbsp;evaluate&amp;nbsp;to&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;.&lt;br&gt;
Otherwise,&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;is&amp;nbsp;generated.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;evaluates&amp;nbsp;to&amp;nbsp;true,&amp;nbsp;the&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;following&amp;nbsp;the&amp;nbsp;if&amp;nbsp;executes.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;evaluates&amp;nbsp;to&amp;nbsp;false,&amp;nbsp;the&amp;nbsp;else&amp;nbsp;block&amp;nbsp;executes.&lt;br&gt;
The&amp;nbsp;else&amp;nbsp;block&amp;nbsp;is&amp;nbsp;optional.&lt;br&gt;
The&amp;nbsp;curly&amp;nbsp;braces&amp;nbsp;are&amp;nbsp;not&amp;nbsp;required&amp;nbsp;in&amp;nbsp;either&amp;nbsp;the&amp;nbsp;if&amp;nbsp;or&amp;nbsp;else&amp;nbsp;block&amp;nbsp;if&amp;nbsp;the&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
single&amp;nbsp;statement.&amp;nbsp;However,&amp;nbsp;for&amp;nbsp;readability&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;good&amp;nbsp;idea&amp;nbsp;to&amp;nbsp;always&amp;nbsp;use&amp;nbsp;the&amp;nbsp;curly&amp;nbsp;braces.&lt;br&gt;
An&amp;nbsp;else&amp;nbsp;block&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;an&amp;nbsp;additional&amp;nbsp;if&amp;nbsp;statement.&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;simple&amp;nbsp;example&amp;nbsp;of&amp;nbsp;an&amp;nbsp;if&amp;nbsp;statement&amp;nbsp;demonstrates&amp;nbsp;the&amp;nbsp;syntax:&lt;br&gt;
8.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;(int)&amp;nbsp;(Math.random()&amp;nbsp;*&amp;nbsp;10&amp;nbsp;+&amp;nbsp;1);&lt;br&gt;
9.&amp;nbsp;if(x&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;5)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;System.out.println(“Under&amp;nbsp;five”);&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;if&amp;nbsp;-&amp;nbsp;then&amp;nbsp;-&amp;nbsp;else&amp;nbsp;statement&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;else&amp;nbsp;if&amp;nbsp;blocks.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
study&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;and&amp;nbsp;see&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Grades&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;showGrade(int&amp;nbsp;grade)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;if(grade&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;90)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.print(“A”);&lt;br&gt;
5.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(grade&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;80)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.print(“B”);&lt;br&gt;
7.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(grade&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;70)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.print(“C”);&lt;br&gt;
9.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(grade&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;60)&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;System.out.print(“D”);&lt;br&gt;
11.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
12.&amp;nbsp;System.out.print(“F”);&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;System.out.println(“&amp;nbsp;is&amp;nbsp;your&amp;nbsp;grade”);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
16.&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Be&amp;nbsp;__&amp;nbsp;Careful&amp;nbsp;__&amp;nbsp;with&amp;nbsp;boolean&amp;nbsp;Comparisons&lt;br&gt;
Watch&amp;nbsp;out&amp;nbsp;for&amp;nbsp;assignment&amp;nbsp;statements&amp;nbsp;that&amp;nbsp;look&amp;nbsp;like&lt;br&gt;
boolean&amp;nbsp;expressions.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;look&amp;nbsp;at&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
code&amp;nbsp;and&amp;nbsp;see&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
&lt;br&gt;
12.&amp;nbsp;boolean&amp;nbsp;b&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
13.&amp;nbsp;if(b&amp;nbsp;=&amp;nbsp;true)&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;System.out.println(“true”);&lt;br&gt;
15.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;System.out.println(“false”);&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
This&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;fi&amp;nbsp;ne.&amp;nbsp;On&amp;nbsp;line&amp;nbsp;13,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;true&amp;nbsp;is&amp;nbsp;an&amp;nbsp;assignment,&amp;nbsp;not&amp;nbsp;a&amp;nbsp;comparison.&amp;nbsp;The&lt;br&gt;
result&amp;nbsp;of&amp;nbsp;this&amp;nbsp;boolean&amp;nbsp;assignment&amp;nbsp;is&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;b&amp;nbsp;after&amp;nbsp;the&amp;nbsp;assignment,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;true&amp;nbsp;.&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;code&amp;nbsp;is&lt;br&gt;
&amp;nbsp;true&lt;br&gt;
&lt;br&gt;
=====================&lt;br&gt;
The&amp;nbsp;_&amp;nbsp;switch&amp;nbsp;_&amp;nbsp;Statement&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;switch&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;-&lt;br&gt;
making&amp;nbsp;control&amp;nbsp;structure&amp;nbsp;based&amp;nbsp;on&amp;nbsp;testing&amp;nbsp;an&amp;nbsp;integer&amp;nbsp;value&amp;nbsp;(String&amp;nbsp;in&amp;nbsp;java&amp;nbsp;7)&amp;nbsp;for&amp;nbsp;equality&amp;nbsp;to&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&lt;br&gt;
case&amp;nbsp;statements.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;rules&amp;nbsp;apply&amp;nbsp;to&amp;nbsp;using&amp;nbsp;switch&amp;nbsp;statements:&lt;br&gt;
The&amp;nbsp;integer_variable&amp;nbsp;must&amp;nbsp;be&amp;nbsp;compatible&amp;nbsp;with&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&lt;br&gt;
switch&amp;nbsp;on&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;,&amp;nbsp;short&amp;nbsp;,&amp;nbsp;char&amp;nbsp;,&amp;nbsp;int&amp;nbsp;,&amp;nbsp;Byte&amp;nbsp;,&amp;nbsp;Short&amp;nbsp;,&amp;nbsp;Character&amp;nbsp;,&amp;nbsp;Integer&amp;nbsp;,&amp;nbsp;or&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;type.&lt;br&gt;
And&amp;nbsp;String&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;7&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;Any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;case&amp;nbsp;statements&amp;nbsp;can&amp;nbsp;appear.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;constantexpression&amp;nbsp;of&amp;nbsp;a&amp;nbsp;case&amp;nbsp;must&amp;nbsp;be&amp;nbsp;a&amp;nbsp;literal&amp;nbsp;value&amp;nbsp;or&amp;nbsp;a&amp;nbsp;_&amp;nbsp;final&amp;nbsp;_&amp;nbsp;variable.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;default&amp;nbsp;block&amp;nbsp;is&amp;nbsp;optional&amp;nbsp;and&amp;nbsp;must&amp;nbsp;appear&amp;nbsp;at&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;all&amp;nbsp;the&amp;nbsp;case&amp;nbsp;statements.&amp;nbsp;If&lt;br&gt;
none&amp;nbsp;of&amp;nbsp;the&amp;nbsp;case&amp;nbsp;statements&amp;nbsp;equal&amp;nbsp;the&amp;nbsp;expression,&amp;nbsp;the&amp;nbsp;default&amp;nbsp;block&amp;nbsp;executes.&lt;br&gt;
-&amp;nbsp;When&amp;nbsp;a&amp;nbsp;case&amp;nbsp;is&amp;nbsp;true,&amp;nbsp;no&amp;nbsp;other&amp;nbsp;case&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;tested&amp;nbsp;for&lt;br&gt;
equality,&amp;nbsp;and&amp;nbsp;all&amp;nbsp;statements&amp;nbsp;following&amp;nbsp;the&amp;nbsp;case&amp;nbsp;execute&amp;nbsp;until&amp;nbsp;a&lt;br&gt;
break&amp;nbsp;occurs&amp;nbsp;or&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;switch&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;reached.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
7.&amp;nbsp;switch(x)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;case&amp;nbsp;0&amp;nbsp;:&lt;br&gt;
9.&amp;nbsp;case&amp;nbsp;1&amp;nbsp;:&lt;br&gt;
10.&amp;nbsp;System.out.println(“0&amp;nbsp;or&amp;nbsp;1”);&lt;br&gt;
11.&amp;nbsp;break;&lt;br&gt;
12.&amp;nbsp;case&amp;nbsp;2&amp;nbsp;:&lt;br&gt;
13.&amp;nbsp;System.out.println(“2”);&lt;br&gt;
14.&amp;nbsp;case&amp;nbsp;3&amp;nbsp;:&lt;br&gt;
15.&amp;nbsp;System.out.println(“2&amp;nbsp;or&amp;nbsp;3”);&lt;br&gt;
16.&amp;nbsp;break;&lt;br&gt;
17.&amp;nbsp;default&amp;nbsp;:&lt;br&gt;
18.&amp;nbsp;System.out.println(“default”);&lt;br&gt;
19.}&lt;br&gt;
20.System.out.println(“After&amp;nbsp;switch”);&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&amp;nbsp;0&amp;nbsp;or&amp;nbsp;1&lt;br&gt;
After&amp;nbsp;switch&lt;br&gt;
&lt;br&gt;
Using&amp;nbsp;the&amp;nbsp;same&amp;nbsp;switch&amp;nbsp;statement,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;output&amp;nbsp;displays&amp;nbsp;when&amp;nbsp;x&amp;nbsp;equals&amp;nbsp;2&amp;nbsp;:&lt;br&gt;
2&lt;br&gt;
2&amp;nbsp;or&amp;nbsp;3&lt;br&gt;
After&amp;nbsp;switch&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Switching&amp;nbsp;on&amp;nbsp;a&amp;nbsp;Reference&lt;br&gt;
Because&amp;nbsp;Java&amp;nbsp;autoboxes&amp;nbsp;and&amp;nbsp;unboxes&amp;nbsp;the&amp;nbsp;primitive&amp;nbsp;types,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;switch&amp;nbsp;on&amp;nbsp;a&amp;nbsp;reference&lt;br&gt;
of&amp;nbsp;type&amp;nbsp;Byte&amp;nbsp;,&amp;nbsp;Short&amp;nbsp;,&amp;nbsp;Character&amp;nbsp;,&amp;nbsp;or&amp;nbsp;Integer&amp;nbsp;.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;switch&amp;nbsp;variable&amp;nbsp;is&lt;br&gt;
a&amp;nbsp;Character&amp;nbsp;reference:&lt;br&gt;
Character&amp;nbsp;value&amp;nbsp;=&amp;nbsp;‘C’;&lt;br&gt;
switch(value)&amp;nbsp;{&lt;br&gt;
case&amp;nbsp;‘A’&amp;nbsp;:&lt;br&gt;
case&amp;nbsp;‘B’&amp;nbsp;:&lt;br&gt;
System.out.println(“Nice&amp;nbsp;job!”);&lt;br&gt;
break;&lt;br&gt;
case&amp;nbsp;‘C’&amp;nbsp;:&lt;br&gt;
System.out.println(“Not&amp;nbsp;bad.”);&lt;br&gt;
break;&lt;br&gt;
default&amp;nbsp;:&lt;br&gt;
System.out.println(“Not&amp;nbsp;good.”);&lt;br&gt;
}&lt;br&gt;
The&amp;nbsp;wrapped&amp;nbsp;Character&amp;nbsp;value&amp;nbsp;is&amp;nbsp;unboxed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;char&amp;nbsp;in&amp;nbsp;the&amp;nbsp;switch&amp;nbsp;statement.&amp;nbsp;If&amp;nbsp;the&lt;br&gt;
reference&amp;nbsp;happens&amp;nbsp;to&amp;nbsp;be&amp;nbsp;null&amp;nbsp;at&amp;nbsp;runtime,&amp;nbsp;a&amp;nbsp;NullPointerException&amp;nbsp;is&amp;nbsp;thrown.&lt;br&gt;
==&lt;br&gt;
&lt;br&gt;
Switching&amp;nbsp;on&amp;nbsp;an&amp;nbsp;Enum&lt;br&gt;
When&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;being&amp;nbsp;switched&amp;nbsp;on&amp;nbsp;is&amp;nbsp;an&amp;nbsp;enum,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;rules&amp;nbsp;apply:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;case&amp;nbsp;statements&amp;nbsp;must&amp;nbsp;be&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;enumeration.&amp;nbsp;A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;if&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;case&amp;nbsp;statements&lt;br&gt;
is&amp;nbsp;not&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;values&amp;nbsp;in&amp;nbsp;the&amp;nbsp;enum.&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;cannot&amp;nbsp;use&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;value's&amp;nbsp;ordinal&amp;nbsp;value&amp;nbsp;for&amp;nbsp;a&amp;nbsp;case&amp;nbsp;;&lt;br&gt;
you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;use&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;element.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;enum&amp;nbsp;element&amp;nbsp;in&amp;nbsp;the&amp;nbsp;case&amp;nbsp;is&amp;nbsp;not&amp;nbsp;prefixed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;name.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;switch&amp;nbsp;statement&amp;nbsp;on&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;named&amp;nbsp;Console&amp;nbsp;.&amp;nbsp;Study&amp;nbsp;the&lt;br&gt;
code&amp;nbsp;and&amp;nbsp;see&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;EnumSwitch&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Console&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;XBOX,&amp;nbsp;WII,&amp;nbsp;PLAYSTATION&lt;br&gt;
4.&amp;nbsp;}&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;Console&amp;nbsp;myConsole&amp;nbsp;=&amp;nbsp;Console.WII;&lt;br&gt;
8.&amp;nbsp;switch(myConsole)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;case&amp;nbsp;XBOX&amp;nbsp;:&lt;br&gt;
10.&amp;nbsp;System.out.println(“XBox&amp;nbsp;console”);&lt;br&gt;
11.&amp;nbsp;break;&lt;br&gt;
12.&amp;nbsp;case&amp;nbsp;WII&amp;nbsp;:&lt;br&gt;
13.&amp;nbsp;System.out.println(“WII&amp;nbsp;console”);&lt;br&gt;
14.&amp;nbsp;break;&lt;br&gt;
15.&amp;nbsp;case&amp;nbsp;PLAYSTATION&amp;nbsp;:&lt;br&gt;
16.&amp;nbsp;System.out.println(“PlayStation&amp;nbsp;console”);&lt;br&gt;
17.&amp;nbsp;break;&lt;br&gt;
18.&amp;nbsp;default&amp;nbsp;:&lt;br&gt;
19.&amp;nbsp;System.out.println(“Not&amp;nbsp;here”);&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
22.}&lt;br&gt;
The&amp;nbsp;switch&amp;nbsp;variable&amp;nbsp;on&amp;nbsp;line&amp;nbsp;8&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Console&amp;nbsp;reference,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;only&lt;br&gt;
valid&amp;nbsp;case&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Console&amp;nbsp;enum.&lt;br&gt;
The&amp;nbsp;myConsole&amp;nbsp;reference&amp;nbsp;points&amp;nbsp;to&amp;nbsp;WII&amp;nbsp;,&amp;nbsp;so&amp;nbsp;line&amp;nbsp;12&amp;nbsp;is&amp;nbsp;true&amp;nbsp;and&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is:&lt;br&gt;
WII&amp;nbsp;console&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;switch&amp;nbsp;statement&amp;nbsp;would&amp;nbsp;not&amp;nbsp;be&amp;nbsp;valid:&lt;br&gt;
25.&amp;nbsp;Console&amp;nbsp;yourConsole&amp;nbsp;=&amp;nbsp;Console.XBOX;&lt;br&gt;
26.&amp;nbsp;switch(yourConsole)&amp;nbsp;{&lt;br&gt;
27.&amp;nbsp;case&amp;nbsp;0&amp;nbsp;:&amp;nbsp;//not&amp;nbsp;valid&lt;br&gt;
28.&amp;nbsp;System.out.println(“XBox&amp;nbsp;console”);&lt;br&gt;
29.&amp;nbsp;break;&lt;br&gt;
...&lt;br&gt;
======&lt;br&gt;
&lt;br&gt;
Final&amp;nbsp;case&amp;nbsp;Values&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FinalSwitch&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;char&amp;nbsp;UPPER_A&amp;nbsp;=&amp;nbsp;‘A’;&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;char&amp;nbsp;UPPER_B&amp;nbsp;=&amp;nbsp;‘B’;&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;char&amp;nbsp;UPPER_C&amp;nbsp;=&amp;nbsp;‘C’;&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;String&amp;nbsp;convertGrade(char&amp;nbsp;grade)&amp;nbsp;{&lt;br&gt;
String&amp;nbsp;response&amp;nbsp;=&amp;nbsp;“”;&lt;br&gt;
switch(grade)&amp;nbsp;{&lt;br&gt;
case&amp;nbsp;UPPER_A&amp;nbsp;:&lt;br&gt;
case&amp;nbsp;UPPER_B&amp;nbsp;:&lt;br&gt;
System.out.println(“Nice&amp;nbsp;job!”);&lt;br&gt;
break;&lt;br&gt;
case&amp;nbsp;UPPER_C&amp;nbsp;:&lt;br&gt;
System.out.println(“Not&amp;nbsp;bad.”);&lt;br&gt;
break;&lt;br&gt;
default&amp;nbsp;:&lt;br&gt;
System.out.println(“Not&amp;nbsp;good.”);&lt;br&gt;
}&lt;br&gt;
return&amp;nbsp;response;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
System.out.println(convertGrade(‘C’));&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;being&amp;nbsp;switched&amp;nbsp;on&amp;nbsp;is&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;grade&amp;nbsp;.&amp;nbsp;Because&amp;nbsp;each&amp;nbsp;case&amp;nbsp;statement&amp;nbsp;uses&amp;nbsp;a&lt;br&gt;
final&amp;nbsp;variable,&amp;nbsp;the&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;fi&amp;nbsp;ne&amp;nbsp;and&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
Not&amp;nbsp;bad.&lt;br&gt;
====&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:78" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;loops&amp;nbsp;&amp;nbsp;and&amp;nbsp;Assertions,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;basic&amp;nbsp;for&amp;nbsp;statement&amp;nbsp;has&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;two&amp;nbsp;semicolons&amp;nbsp;are&amp;nbsp;required&amp;nbsp;and&amp;nbsp;create&amp;nbsp;three&amp;nbsp;sections:&amp;nbsp;an&amp;nbsp;initialization&lt;br&gt;
statement,&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;expression,&amp;nbsp;and&amp;nbsp;an&amp;nbsp;update&amp;nbsp;statement.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;initialization&amp;nbsp;step&amp;nbsp;occurs&amp;nbsp;once&amp;nbsp;at&amp;nbsp;the&amp;nbsp;beginning&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;boolean_expression&amp;nbsp;must&amp;nbsp;evaluate&amp;nbsp;to&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;initialization&amp;nbsp;and&amp;nbsp;update_statement&amp;nbsp;sections&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;multiple&amp;nbsp;statements,&lt;br&gt;
separated&amp;nbsp;by&amp;nbsp;commas.&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;’&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;an&amp;nbsp;example.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;displays&amp;nbsp;the&amp;nbsp;numbers&amp;nbsp;1&amp;nbsp;to&amp;nbsp;10:&lt;br&gt;
for(int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;x&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;x++)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(x&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
The&amp;nbsp;Scope&amp;nbsp;of&amp;nbsp;for&amp;nbsp;Loop&amp;nbsp;Variables&lt;br&gt;
Any&amp;nbsp;variables&amp;nbsp;declared&amp;nbsp;in&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;step&amp;nbsp;are&amp;nbsp;local&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;the&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;and&amp;nbsp;go&lt;br&gt;
out&amp;nbsp;of&amp;nbsp;scope&amp;nbsp;when&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;fi&amp;nbsp;nishes.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;display&lt;br&gt;
k&amp;nbsp;after&amp;nbsp;it&amp;nbsp;goes&amp;nbsp;out&amp;nbsp;of&amp;nbsp;scope:&lt;br&gt;
for(int&amp;nbsp;k&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;k&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;k--)&amp;nbsp;{&lt;br&gt;
System.out.print(k);&lt;br&gt;
}&lt;br&gt;
System.out.print(k);&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs:&lt;br&gt;
For.java:19:&amp;nbsp;cannot&amp;nbsp;find&amp;nbsp;symbol&lt;br&gt;
symbol&amp;nbsp;:&amp;nbsp;variable&amp;nbsp;k&lt;br&gt;
location:&amp;nbsp;class&amp;nbsp;For&lt;br&gt;
System.out.println(k);&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
4.&amp;nbsp;for(char&amp;nbsp;one&amp;nbsp;=&amp;nbsp;‘a’;&amp;nbsp;one&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;‘f’;&amp;nbsp;one++)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;3;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;System.out.print(“&amp;nbsp;“&amp;nbsp;+&amp;nbsp;one&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;System.out.println();&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;output&amp;nbsp;of&amp;nbsp;these&amp;nbsp;nested&amp;nbsp;loops&amp;nbsp;is&lt;br&gt;
a1&amp;nbsp;a2&amp;nbsp;a3&lt;br&gt;
b1&amp;nbsp;b2&amp;nbsp;b3&lt;br&gt;
c1&amp;nbsp;c2&amp;nbsp;c3&lt;br&gt;
d1&amp;nbsp;d2&amp;nbsp;d3&lt;br&gt;
e1&amp;nbsp;e2&amp;nbsp;e3&lt;br&gt;
f1&amp;nbsp;f2&amp;nbsp;f3&lt;br&gt;
===&lt;br&gt;
12.&amp;nbsp;for(int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;1,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;a&amp;nbsp;&lt;&amp;nbsp;b;&amp;nbsp;a++,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;b&amp;nbsp;-&amp;nbsp;2)&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(a&amp;nbsp;+&amp;nbsp;b);&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;example&amp;nbsp;is&lt;br&gt;
11&lt;br&gt;
10&lt;br&gt;
9&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;The&amp;nbsp;__&amp;nbsp;Enhanced&amp;nbsp;__&amp;nbsp;for&amp;nbsp;Statement&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;char&amp;nbsp;[]&amp;nbsp;grades&amp;nbsp;=&amp;nbsp;{‘A’,&amp;nbsp;‘B’,&amp;nbsp;‘C’,&amp;nbsp;‘D’,&amp;nbsp;‘F’};&lt;br&gt;
4.&amp;nbsp;for(char&amp;nbsp;grade&amp;nbsp;:&amp;nbsp;grades)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.print(grade&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
The&amp;nbsp;collection&amp;nbsp;in&amp;nbsp;this&amp;nbsp;example&amp;nbsp;has&amp;nbsp;fi&amp;nbsp;ve&amp;nbsp;elements,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;loop&lt;br&gt;
executes&amp;nbsp;five&amp;nbsp;times.&amp;nbsp;The&amp;nbsp;grade&amp;nbsp;iterator&amp;nbsp;is&amp;nbsp;initially&amp;nbsp;’&amp;nbsp;A’&amp;nbsp;,&amp;nbsp;then&amp;nbsp;’&amp;nbsp;B’&amp;nbsp;,&lt;br&gt;
and&amp;nbsp;so&amp;nbsp;on.&amp;nbsp;The&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
A&amp;nbsp;B&amp;nbsp;C&amp;nbsp;D&amp;nbsp;F&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Enhanced&amp;nbsp;for&amp;nbsp;Loops&amp;nbsp;and&amp;nbsp;Collections&lt;br&gt;
Let&amp;nbsp;’&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;an&amp;nbsp;example&amp;nbsp;of&amp;nbsp;an&amp;nbsp;enhanced&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;that&amp;nbsp;iterates&lt;br&gt;
over&amp;nbsp;a&amp;nbsp;collection.&amp;nbsp;The&amp;nbsp;collection&amp;nbsp;must&amp;nbsp;be&amp;nbsp;an&amp;nbsp;object&amp;nbsp;whose&amp;nbsp;class&lt;br&gt;
implements&amp;nbsp;java.lang.Iterable&amp;nbsp;,&amp;nbsp;which&amp;nbsp;includes&amp;nbsp;most&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;API&lt;br&gt;
classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.util&amp;nbsp;package.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;iterates&lt;br&gt;
through&amp;nbsp;a&amp;nbsp;java.util.ArrayList&amp;nbsp;.&amp;nbsp;Examine&amp;nbsp;the&amp;nbsp;code&amp;nbsp;and&amp;nbsp;see&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&lt;br&gt;
determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Favorites&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;private&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;urls&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
5.&lt;br&gt;
6.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;showFavorites()&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;for(String&amp;nbsp;url&amp;nbsp;:&amp;nbsp;urls)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;if(url.startsWith(“http://”))&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.println(url);&lt;br&gt;
10.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(“http://”&amp;nbsp;+&amp;nbsp;url);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&amp;nbsp;}&lt;br&gt;
15.&lt;br&gt;
16.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addFavorite(String&amp;nbsp;url)&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;urls.add(url);&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.&lt;br&gt;
20.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
21.&amp;nbsp;Favorites&amp;nbsp;f&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Favorites();&lt;br&gt;
22.&amp;nbsp;f.addFavorite(“sybex.com”);&lt;br&gt;
23.&amp;nbsp;f.addFavorite(“wiley.com”);&lt;br&gt;
24.&amp;nbsp;f.addFavorite(“http://google.com”);&lt;br&gt;
25.&amp;nbsp;f.addFavorite(“yahoo.com”);&lt;br&gt;
26.&amp;nbsp;f.showFavorites();&lt;br&gt;
27.&amp;nbsp;}&lt;br&gt;
28.}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;output&amp;nbsp;of&amp;nbsp;main&amp;nbsp;in&amp;nbsp;Favorites&amp;nbsp;is&lt;br&gt;
http://sybex.com&lt;br&gt;
http://wiley.com&lt;br&gt;
http://google.com&lt;br&gt;
http://yahoo.com&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;Iterate&amp;nbsp;through&amp;nbsp;ArrayList&amp;nbsp;and&amp;nbsp;remove&amp;nbsp;values&amp;nbsp;:&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EnchancedForLoop&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList&lt;Integer&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(100);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(1000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(10000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(Integer&amp;nbsp;item&amp;nbsp;:&amp;nbsp;list){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("--------");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i=0;&amp;nbsp;i&lt;list.size();i++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(list.get(i)&amp;nbsp;==&amp;nbsp;10&amp;nbsp;||&amp;nbsp;list.get(i)&amp;nbsp;==&amp;nbsp;1000){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.remove(i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(Integer&amp;nbsp;item&amp;nbsp;:&amp;nbsp;list){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Output&amp;nbsp;:&lt;br&gt;
10&lt;br&gt;
100&lt;br&gt;
1000&lt;br&gt;
10000&lt;br&gt;
--------&lt;br&gt;
100&lt;br&gt;
10000&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;while&amp;nbsp;__&amp;nbsp;Statement&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;"develop&amp;nbsp;code&amp;nbsp;that&lt;br&gt;
implements&amp;nbsp;all&amp;nbsp;forms&amp;nbsp;of&amp;nbsp;loops&amp;nbsp;and&amp;nbsp;iterators,&amp;nbsp;including&amp;nbsp;while"&amp;nbsp;.&lt;br&gt;
&amp;nbsp;A&amp;nbsp;while&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;a&amp;nbsp;repetition&amp;nbsp;control&amp;nbsp;structure&amp;nbsp;that&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;repeating&lt;br&gt;
a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;an&amp;nbsp;indeterminate&amp;nbsp;number&amp;nbsp;of&amp;nbsp;times.&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;char&amp;nbsp;c&amp;nbsp;=&amp;nbsp;‘A’;&lt;br&gt;
4.&amp;nbsp;while(c&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;‘H’)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.print(c++);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
The&amp;nbsp;loop&amp;nbsp;executes&amp;nbsp;eight&amp;nbsp;times,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
ABCDEFGH&lt;br&gt;
&lt;br&gt;
13.&amp;nbsp;while(true)&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;System.out.println(“This&amp;nbsp;could&amp;nbsp;take&amp;nbsp;a&amp;nbsp;while.”);&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;line&amp;nbsp;14&amp;nbsp;will&amp;nbsp;print&amp;nbsp;This&amp;nbsp;could&amp;nbsp;take&amp;nbsp;a&amp;nbsp;while.&amp;nbsp;until&amp;nbsp;the&amp;nbsp;user&amp;nbsp;terminates&lt;br&gt;
the&amp;nbsp;JVM.&lt;br&gt;
&lt;br&gt;
=======&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;do&amp;nbsp;__&amp;nbsp;Statement&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;"develop&amp;nbsp;code&amp;nbsp;that&lt;br&gt;
implements&amp;nbsp;all&amp;nbsp;forms&amp;nbsp;of&amp;nbsp;loops&amp;nbsp;and&amp;nbsp;iterators,&amp;nbsp;including&amp;nbsp;do.&amp;nbsp;&lt;br&gt;
"A&amp;nbsp;do&amp;nbsp;statement&amp;nbsp;,&amp;nbsp;also&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;do&amp;nbsp;-while&amp;nbsp;loop,&amp;nbsp;is&amp;nbsp;a&amp;nbsp;repetition&lt;br&gt;
control&amp;nbsp;structure&amp;nbsp;that&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;repeating&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;an&lt;br&gt;
indeterminate&amp;nbsp;number&amp;nbsp;of&amp;nbsp;times,&amp;nbsp;__&amp;nbsp;but&amp;nbsp;at&amp;nbsp;least&amp;nbsp;once&amp;nbsp;___.&amp;nbsp;A&amp;nbsp;do-while&lt;br&gt;
loop&amp;nbsp;is&amp;nbsp;declared&amp;nbsp;using&amp;nbsp;the&amp;nbsp;do&amp;nbsp;keyword&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;rules&amp;nbsp;apply&amp;nbsp;to&amp;nbsp;a&amp;nbsp;do&amp;nbsp;statement:&lt;br&gt;
The&amp;nbsp;body&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;executes&amp;nbsp;once&amp;nbsp;before&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;is&amp;nbsp;tested.&lt;br&gt;
The&amp;nbsp;value&amp;nbsp;in&amp;nbsp;parentheses&amp;nbsp;must&amp;nbsp;evaluate&amp;nbsp;to&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;expression,&amp;nbsp;either&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false&amp;nbsp;.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;is&amp;nbsp;true&amp;nbsp;,&amp;nbsp;the&amp;nbsp;body&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;executes&amp;nbsp;again,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;the&lt;br&gt;
boolean&amp;nbsp;is&amp;nbsp;checked&amp;nbsp;again.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;is&amp;nbsp;false&amp;nbsp;,&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;does&amp;nbsp;not&amp;nbsp;execute&amp;nbsp;again&amp;nbsp;and&amp;nbsp;control&amp;nbsp;jumps&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;next&amp;nbsp;statement&amp;nbsp;following&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;loop.&lt;br&gt;
Just&amp;nbsp;like&amp;nbsp;a&amp;nbsp;while&amp;nbsp;loop,&amp;nbsp;the&amp;nbsp;body&amp;nbsp;of&amp;nbsp;the&amp;nbsp;do&amp;nbsp;loop&amp;nbsp;executes&amp;nbsp;until&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;is&lt;br&gt;
false&amp;nbsp;.&lt;br&gt;
Don&amp;nbsp;’&amp;nbsp;t&amp;nbsp;forget&amp;nbsp;the&amp;nbsp;semicolon&amp;nbsp;after&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;—&amp;nbsp;it&amp;nbsp;’&amp;nbsp;s&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;miss!&lt;br&gt;
&lt;br&gt;
=============&lt;br&gt;
The&amp;nbsp;break&amp;nbsp;Statement&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;&lt;br&gt;
"develop&amp;nbsp;code&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;all&amp;nbsp;forms&amp;nbsp;of&amp;nbsp;loops&amp;nbsp;and&amp;nbsp;iterators,&lt;br&gt;
including&amp;nbsp;the&amp;nbsp;use&amp;nbsp;of&amp;nbsp;break.&amp;nbsp;”&amp;nbsp;A&amp;nbsp;break&amp;nbsp;statement&amp;nbsp;transfers&lt;br&gt;
fl&amp;nbsp;ow&amp;nbsp;of&amp;nbsp;control&amp;nbsp;out&amp;nbsp;of&amp;nbsp;an&amp;nbsp;enclosing&amp;nbsp;statement.&amp;nbsp;A&amp;nbsp;break&amp;nbsp;statement&amp;nbsp;can&lt;br&gt;
appear&amp;nbsp;within&amp;nbsp;the&amp;nbsp;following&amp;nbsp;control&amp;nbsp;structures:&lt;br&gt;
&amp;nbsp;switch&lt;br&gt;
&amp;nbsp;for&lt;br&gt;
&amp;nbsp;while&lt;br&gt;
&amp;nbsp;do&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;for(int&amp;nbsp;k&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;k&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;k++)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.print(k&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
5.&amp;nbsp;if(k&amp;nbsp;%&amp;nbsp;3&amp;nbsp;==&amp;nbsp;0)&lt;br&gt;
6.&amp;nbsp;break;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;control&amp;nbsp;variable&amp;nbsp;k&amp;nbsp;is&amp;nbsp;divisible&amp;nbsp;by&amp;nbsp;3&amp;nbsp;on&amp;nbsp;line&amp;nbsp;5,&amp;nbsp;then&amp;nbsp;the&lt;br&gt;
break&amp;nbsp;executes&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;and&amp;nbsp;flow&amp;nbsp;of&amp;nbsp;control&amp;nbsp;jumps&amp;nbsp;down&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
next&amp;nbsp;statement&amp;nbsp;after&amp;nbsp;line&amp;nbsp;7.&amp;nbsp;The&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;loop&amp;nbsp;is&lt;br&gt;
&amp;nbsp;1&amp;nbsp;2&amp;nbsp;3&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!(&amp;nbsp;goto&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;=))&lt;br&gt;
A&amp;nbsp;break&amp;nbsp;statement&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;___&amp;nbsp;label&amp;nbsp;___&amp;nbsp;denoting&amp;nbsp;which&lt;br&gt;
control&amp;nbsp;structure&amp;nbsp;to&amp;nbsp;break&amp;nbsp;out&amp;nbsp;of.&amp;nbsp;An&amp;nbsp;unlabeled&amp;nbsp;break&amp;nbsp;statement&lt;br&gt;
terminates&amp;nbsp;the&amp;nbsp;immediately&amp;nbsp;enclosing&amp;nbsp;control&amp;nbsp;structure.&amp;nbsp;If&lt;br&gt;
you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;break&amp;nbsp;out&amp;nbsp;of&amp;nbsp;an&amp;nbsp;outer&amp;nbsp;loop&amp;nbsp;or&amp;nbsp;switch,&amp;nbsp;you&amp;nbsp;need&lt;br&gt;
to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;labeled&amp;nbsp;break&amp;nbsp;.&amp;nbsp;A&amp;nbsp;label&amp;nbsp;is&amp;nbsp;a&amp;nbsp;prefix&amp;nbsp;that&amp;nbsp;appears&amp;nbsp;before&lt;br&gt;
a&amp;nbsp;statement&amp;nbsp;and&amp;nbsp;is&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;a&amp;nbsp;colon:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_name&amp;nbsp;:&amp;nbsp;statement&lt;br&gt;
A&amp;nbsp;label&amp;nbsp;can&amp;nbsp;be&amp;nbsp;any&amp;nbsp;valid&amp;nbsp;identifier,&amp;nbsp;as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;does&amp;nbsp;not&lt;br&gt;
hide&amp;nbsp;a&amp;nbsp;label&amp;nbsp;being&amp;nbsp;used&amp;nbsp;by&amp;nbsp;an&amp;nbsp;enclosing&amp;nbsp;statement.&amp;nbsp;The&lt;br&gt;
following&amp;nbsp;while&amp;nbsp;loop&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;label&amp;nbsp;named&amp;nbsp;myloop&amp;nbsp;and&amp;nbsp;a&amp;nbsp;break&lt;br&gt;
statement&amp;nbsp;that&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;myloop&amp;nbsp;label.&amp;nbsp;See&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&lt;br&gt;
determine&amp;nbsp;the&amp;nbsp;output:&lt;br&gt;
&amp;nbsp;4.&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;1;&lt;br&gt;
&amp;nbsp;5.&amp;nbsp;int&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;6.&amp;nbsp;myloop&amp;nbsp;:&amp;nbsp;while(count&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;100)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;7.&amp;nbsp;sum&amp;nbsp;+=&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;8.&amp;nbsp;if(sum&amp;nbsp;&gt;&amp;nbsp;10)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;9.&amp;nbsp;break&amp;nbsp;myloop;&lt;br&gt;
&amp;nbsp;10.&amp;nbsp;}&lt;br&gt;
&amp;nbsp;11.}&lt;br&gt;
&amp;nbsp;12.System.out.println(“sum&amp;nbsp;=&amp;nbsp;“&amp;nbsp;+&amp;nbsp;sum);&lt;br&gt;
&amp;nbsp;13.System.out.println(“count&amp;nbsp;=&amp;nbsp;“&amp;nbsp;+&amp;nbsp;count);&lt;br&gt;
&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;code&amp;nbsp;is&lt;br&gt;
sum&amp;nbsp;=&amp;nbsp;15&lt;br&gt;
count&amp;nbsp;=&amp;nbsp;6&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
25.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;1,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
26.&amp;nbsp;loopx&amp;nbsp;:&amp;nbsp;while(x&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;10)&amp;nbsp;{&lt;br&gt;
27.&amp;nbsp;System.out.print(x++&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
28.&amp;nbsp;for(&amp;nbsp;;&amp;nbsp;y&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;y--)&amp;nbsp;{&lt;br&gt;
29.&amp;nbsp;System.out.print(y&amp;nbsp;+&amp;nbsp;“&amp;nbsp;“);&lt;br&gt;
30.&amp;nbsp;if(y&amp;nbsp;==&amp;nbsp;8)&lt;br&gt;
31.&amp;nbsp;break&amp;nbsp;loopx;&lt;br&gt;
32.&amp;nbsp;}&lt;br&gt;
33.&amp;nbsp;}&lt;br&gt;
The&amp;nbsp;break&amp;nbsp;statement&amp;nbsp;on&amp;nbsp;line&amp;nbsp;31&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;while&amp;nbsp;loop&amp;nbsp;on&amp;nbsp;line&amp;nbsp;26.&amp;nbsp;The&amp;nbsp;while&amp;nbsp;loop&lt;br&gt;
terminates&amp;nbsp;during&amp;nbsp;its&amp;nbsp;fi&amp;nbsp;rst&amp;nbsp;iteration&amp;nbsp;when&amp;nbsp;y&amp;nbsp;becomes&amp;nbsp;8&amp;nbsp;,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;code&amp;nbsp;is&lt;br&gt;
1&amp;nbsp;10&amp;nbsp;9&amp;nbsp;8&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;continue&amp;nbsp;__&amp;nbsp;Statement&lt;br&gt;
The&amp;nbsp;exam&amp;nbsp;objectives&amp;nbsp;state&amp;nbsp;that&amp;nbsp;you&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&lt;br&gt;
“&amp;nbsp;develop&amp;nbsp;code&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;all&lt;br&gt;
forms&amp;nbsp;of&amp;nbsp;loops&amp;nbsp;and&amp;nbsp;iterators,&amp;nbsp;including&amp;nbsp;the&amp;nbsp;use&amp;nbsp;of&amp;nbsp;continue.&lt;br&gt;
”&amp;nbsp;A&amp;nbsp;continue&amp;nbsp;statement&amp;nbsp;within&amp;nbsp;a&amp;nbsp;repetition&amp;nbsp;control&amp;nbsp;structure&lt;br&gt;
transfers&amp;nbsp;fl&amp;nbsp;ow&amp;nbsp;of&amp;nbsp;control&amp;nbsp;to&amp;nbsp;the&amp;nbsp;loop&amp;nbsp;-&amp;nbsp;continuation&amp;nbsp;point&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;loop.&amp;nbsp;The&amp;nbsp;control&amp;nbsp;structures&amp;nbsp;that&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;continue&lt;br&gt;
statement&amp;nbsp;together&amp;nbsp;with&amp;nbsp;their&amp;nbsp;corresponding&amp;nbsp;continuation&amp;nbsp;point&amp;nbsp;follow:&lt;br&gt;
for&amp;nbsp;:&amp;nbsp;Control&amp;nbsp;transfers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;update&amp;nbsp;expression&amp;nbsp;of&amp;nbsp;the&amp;nbsp;for&amp;nbsp;statement.&lt;br&gt;
while&amp;nbsp;:&amp;nbsp;Control&amp;nbsp;transfers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression.&lt;br&gt;
do&amp;nbsp;:&amp;nbsp;Control&amp;nbsp;transfers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;boolean&amp;nbsp;expression.&lt;br&gt;
&lt;br&gt;
3.&amp;nbsp;for(char&amp;nbsp;c&amp;nbsp;=&amp;nbsp;‘m’;&amp;nbsp;c&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;‘p’;&amp;nbsp;c++)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;if(c&amp;nbsp;==&amp;nbsp;‘n’)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;continue;&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;System.out.print(c);&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&lt;br&gt;
mop&lt;br&gt;
&lt;br&gt;
======================&lt;br&gt;
Overview&amp;nbsp;of&amp;nbsp;&amp;nbsp;__&amp;nbsp;Assertions&amp;nbsp;__&lt;br&gt;
An&amp;nbsp;assertion&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;expression&amp;nbsp;placed&amp;nbsp;at&amp;nbsp;particular&lt;br&gt;
points&amp;nbsp;in&amp;nbsp;your&amp;nbsp;code&amp;nbsp;where&amp;nbsp;you&amp;nbsp;think&amp;nbsp;something&amp;nbsp;should&amp;nbsp;always&amp;nbsp;be&amp;nbsp;true.&lt;br&gt;
(The&amp;nbsp;defi&amp;nbsp;nition&amp;nbsp;of&amp;nbsp;the&amp;nbsp;word&amp;nbsp;“&amp;nbsp;assert&amp;nbsp;”&amp;nbsp;is&amp;nbsp;to&amp;nbsp;insist&amp;nbsp;that&amp;nbsp;something&lt;br&gt;
is&amp;nbsp;true&amp;nbsp;and&amp;nbsp;to&amp;nbsp;affi&amp;nbsp;rm&amp;nbsp;your&amp;nbsp;claim&amp;nbsp;with&amp;nbsp;certainty.)&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;I&amp;nbsp;am&amp;nbsp;certain&amp;nbsp;that&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code,&amp;nbsp;the&amp;nbsp;value&lt;br&gt;
of&amp;nbsp;x&amp;nbsp;is&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;0&amp;nbsp;:&lt;br&gt;
int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;3,&amp;nbsp;b&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;a&amp;nbsp;*&amp;nbsp;b;&lt;br&gt;
assert&amp;nbsp;x&amp;nbsp;&gt;&amp;nbsp;0;&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;assertion&amp;nbsp;allows&amp;nbsp;me&amp;nbsp;to&amp;nbsp;check&amp;nbsp;for&amp;nbsp;bugs&amp;nbsp;in&amp;nbsp;my&amp;nbsp;code&lt;br&gt;
that&amp;nbsp;might&amp;nbsp;otherwise&amp;nbsp;go&amp;nbsp;unnoticed.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;place&amp;nbsp;assertions&lt;br&gt;
throughout&amp;nbsp;your&amp;nbsp;code,&amp;nbsp;turn&amp;nbsp;them&amp;nbsp;on&amp;nbsp;for&amp;nbsp;testing&amp;nbsp;and&amp;nbsp;debugging&lt;br&gt;
purposes,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;turn&amp;nbsp;them&amp;nbsp;off&amp;nbsp;when&amp;nbsp;your&amp;nbsp;program&amp;nbsp;is&amp;nbsp;in&amp;nbsp;production.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;assert&amp;nbsp;statement&amp;nbsp;inserts&amp;nbsp;an&amp;nbsp;assertion&amp;nbsp;at&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;point&amp;nbsp;in&lt;br&gt;
your&amp;nbsp;code.&amp;nbsp;The&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;an&amp;nbsp;assert&amp;nbsp;statement&amp;nbsp;has&amp;nbsp;two&amp;nbsp;forms:&lt;br&gt;
assert&amp;nbsp;boolean_expression&amp;nbsp;;&lt;br&gt;
assert&amp;nbsp;boolean_expression&amp;nbsp;:&amp;nbsp;error_message&amp;nbsp;;&lt;br&gt;
&lt;br&gt;
Enabling&amp;nbsp;Assertions&lt;br&gt;
By&amp;nbsp;default,&amp;nbsp;assert&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;ignored&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
To&amp;nbsp;enable&amp;nbsp;assertions,&amp;nbsp;use&lt;br&gt;
&amp;nbsp;&amp;nbsp;the&amp;nbsp;-&amp;nbsp;enableassertions&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;on&amp;nbsp;the&amp;nbsp;command&amp;nbsp;line:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java&amp;nbsp;-enableassertions&amp;nbsp;Rectangle&lt;br&gt;
&amp;nbsp;&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;also&amp;nbsp;use&amp;nbsp;the&amp;nbsp;shortcut&amp;nbsp;-&amp;nbsp;ea&amp;nbsp;fl&amp;nbsp;ag:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java&amp;nbsp;-ea&amp;nbsp;Rectangle&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Using&amp;nbsp;the-enableassertions&amp;nbsp;flag&amp;nbsp;without&amp;nbsp;any&amp;nbsp;arguments&lt;br&gt;
enables&amp;nbsp;assertions&amp;nbsp;in&amp;nbsp;all&amp;nbsp;classes&amp;nbsp;except&amp;nbsp;system&amp;nbsp;classes.&amp;nbsp;You&lt;br&gt;
can&amp;nbsp;also&amp;nbsp;enable&amp;nbsp;assertions&amp;nbsp;for&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;class&amp;nbsp;or&amp;nbsp;package.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;command&amp;nbsp;enables&amp;nbsp;assertions&amp;nbsp;only&amp;nbsp;for&lt;br&gt;
classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;com.sybex.demos&amp;nbsp;package&amp;nbsp;and&amp;nbsp;any&amp;nbsp;subpackages:&lt;br&gt;
java&amp;nbsp;-ea:com.sybex.demos...&amp;nbsp;my.programs.Main&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;in&amp;nbsp;the&amp;nbsp;unnamed&amp;nbsp;packaged,&amp;nbsp;then&amp;nbsp;simply&amp;nbsp;use&amp;nbsp;the&amp;nbsp;three&amp;nbsp;dots:&lt;br&gt;
java&amp;nbsp;-ea:...&amp;nbsp;Rectangle&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;also&amp;nbsp;enable&amp;nbsp;assertions&amp;nbsp;for&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;class:&lt;br&gt;
java&amp;nbsp;-ea:com.sybex.demos.TestColors&amp;nbsp;my.programs.Main&lt;br&gt;
&lt;br&gt;
=======&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:79" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;Exceptions&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;checked&amp;nbsp;and&amp;nbsp;unchecked&amp;nbsp;exceptions&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;An&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;an&amp;nbsp;event&amp;nbsp;that&amp;nbsp;occurs&amp;nbsp;during&lt;br&gt;
the&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;a&amp;nbsp;program&amp;nbsp;that&amp;nbsp;disrupts&amp;nbsp;the&amp;nbsp;normal&amp;nbsp;flow&amp;nbsp;of&lt;br&gt;
control.&amp;nbsp;In&amp;nbsp;Java,&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;a&amp;nbsp;method&amp;nbsp;&lt;br&gt;
&amp;quot;throws&amp;nbsp;&amp;#8221;&amp;nbsp;down&amp;nbsp;the&amp;nbsp;method&amp;nbsp;call&amp;nbsp;stack&amp;nbsp;by&amp;nbsp;handing&amp;nbsp;it&amp;nbsp;to&amp;nbsp;the&amp;nbsp;JVM&lt;br&gt;
and&amp;nbsp;letting&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;search&amp;nbsp;for&amp;nbsp;a&amp;nbsp;handler.&amp;nbsp;As&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;object&lt;br&gt;
travels&amp;nbsp;down&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack,&amp;nbsp;any&amp;nbsp;method&lt;br&gt;
along&amp;nbsp;the&amp;nbsp;way&amp;nbsp;has&amp;nbsp;the&amp;nbsp;opportunity&amp;nbsp;to&amp;nbsp;catch&amp;nbsp;the&amp;nbsp;exception.&lt;br&gt;
Once&amp;nbsp;caught,&amp;nbsp;the&amp;nbsp;method&amp;nbsp;can&amp;nbsp;obtain&amp;nbsp;information&amp;nbsp;about&amp;nbsp;the&lt;br&gt;
problem&amp;nbsp;and&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;fix&amp;nbsp;it,&amp;nbsp;log&amp;nbsp;the&amp;nbsp;error&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file,&amp;nbsp;or&amp;nbsp;simply&amp;nbsp;ignore&lt;br&gt;
the&amp;nbsp;exception&amp;nbsp;altogether.&amp;nbsp;A&amp;nbsp;caught&amp;nbsp;exception&amp;nbsp;can&lt;br&gt;
also&amp;nbsp;be&amp;nbsp;rethrown,&amp;nbsp;or&amp;nbsp;a&amp;nbsp;method&amp;nbsp;can&amp;nbsp;throw&amp;nbsp;a&amp;nbsp;different&amp;nbsp;type&amp;nbsp;of&amp;nbsp;exception.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ExceptionDemo&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;method1()&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;method1&amp;#8221;);&lt;br&gt;
4.&amp;nbsp;method2();&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&lt;br&gt;
7.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;method2()&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;method2&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;method3();&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
11.&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;method3()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;method3&amp;#8221;);&lt;br&gt;
14.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;5,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
15.&amp;nbsp;int&amp;nbsp;z&amp;nbsp;=&amp;nbsp;x/y;&amp;nbsp;//throws&amp;nbsp;an&amp;nbsp;ArithmeticException&lt;br&gt;
16.&amp;nbsp;System.out.println(&amp;#8220;z&amp;nbsp;=&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;z);&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
18.&lt;br&gt;
19.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
20.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;main&amp;#8221;);&lt;br&gt;
21.&amp;nbsp;new&amp;nbsp;ExceptionDemo().method1();&lt;br&gt;
22.&amp;nbsp;System.out.println(&amp;#8220;End&amp;nbsp;of&amp;nbsp;main&amp;#8221;);&lt;br&gt;
23.&amp;nbsp;}&lt;br&gt;
24.}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Inside&amp;nbsp;main&lt;br&gt;
Inside&amp;nbsp;method1&lt;br&gt;
Inside&amp;nbsp;method2&lt;br&gt;
Inside&amp;nbsp;method3&lt;br&gt;
Exception&amp;nbsp;in&amp;nbsp;thread&amp;nbsp;&amp;#8220;main&amp;#8221;&amp;nbsp;java.lang.ArithmeticException:&amp;nbsp;/&amp;nbsp;by&amp;nbsp;zero&lt;br&gt;
at&amp;nbsp;ExceptionDemo.method3(ExceptionDemo.java:15)&lt;br&gt;
at&amp;nbsp;ExceptionDemo.method2(ExceptionDemo.java:9)&lt;br&gt;
at&amp;nbsp;ExceptionDemo.method1(ExceptionDemo.java:4)&lt;br&gt;
at&amp;nbsp;ExceptionDemo.main(ExceptionDemo.java:21)&lt;br&gt;
&lt;br&gt;
=========&lt;br&gt;
A&amp;nbsp;try&amp;nbsp;statement&amp;nbsp;is&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&lt;br&gt;
statements&amp;nbsp;that&amp;nbsp;may&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;exception.&amp;nbsp;A&amp;nbsp;try&amp;nbsp;statement&amp;nbsp;can&lt;br&gt;
be&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;catch&amp;nbsp;clauses&amp;nbsp;,&amp;nbsp;also&amp;nbsp;called&lt;br&gt;
exception&amp;nbsp;handlers.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;try&amp;nbsp;statement&amp;nbsp;can&amp;nbsp;declare&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;catch&amp;nbsp;clauses.&lt;br&gt;
A&amp;nbsp;catch&amp;nbsp;clause&amp;nbsp;must&amp;nbsp;have&amp;nbsp;exactly&amp;nbsp;one&amp;nbsp;parameter:&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;be&amp;nbsp;caught.&amp;nbsp;If&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;thrown&amp;nbsp;within&lt;br&gt;
a&amp;nbsp;try&amp;nbsp;block,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;searches&amp;nbsp;for&amp;nbsp;a&amp;nbsp;handler&amp;nbsp;by&amp;nbsp;checking&amp;nbsp;the&amp;nbsp;exception&lt;br&gt;
types&amp;nbsp;of&amp;nbsp;its&amp;nbsp;catch&amp;nbsp;clauses&amp;nbsp;in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;they&amp;nbsp;appear.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;exception&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;a&amp;nbsp;catch&amp;nbsp;clause&amp;nbsp;matches&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;thrown&lt;br&gt;
exception,&amp;nbsp;fl&amp;nbsp;ow&amp;nbsp;of&amp;nbsp;control&amp;nbsp;jumps&amp;nbsp;to&amp;nbsp;that&amp;nbsp;catch&amp;nbsp;block&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;catch's&amp;nbsp;identifi&amp;nbsp;er&amp;nbsp;receives&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;exception&amp;nbsp;object&amp;nbsp;(similar&amp;nbsp;to&amp;nbsp;an&amp;nbsp;argument&amp;nbsp;copied&amp;nbsp;into&amp;nbsp;a&amp;nbsp;method&amp;nbsp;parameter).&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
12.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;method3()&amp;nbsp;{&lt;br&gt;
13.&amp;nbsp;System.out.println(&amp;#8220;Inside&amp;nbsp;method3&amp;#8221;);&lt;br&gt;
14.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;5,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
15.&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;int&amp;nbsp;z&amp;nbsp;=&amp;nbsp;x/y;&amp;nbsp;//throws&amp;nbsp;an&amp;nbsp;ArithmeticException&lt;br&gt;
17.&amp;nbsp;System.out.println(&amp;#8220;z&amp;nbsp;=&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;z);&lt;br&gt;
18.&amp;nbsp;}catch(ArithmeticException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;System.out.println(&amp;#8220;Something&amp;nbsp;went&amp;nbsp;wrong:&amp;nbsp;&amp;#8220;&lt;br&gt;
20.&amp;nbsp;+&amp;nbsp;e.getMessage());&lt;br&gt;
21.&amp;nbsp;}&lt;br&gt;
23.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Inside&amp;nbsp;main&lt;br&gt;
Inside&amp;nbsp;method1&lt;br&gt;
Inside&amp;nbsp;method2&lt;br&gt;
Inside&amp;nbsp;method3&lt;br&gt;
Something&amp;nbsp;went&amp;nbsp;wrong:&amp;nbsp;/&amp;nbsp;by&amp;nbsp;zero&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;main&lt;br&gt;
&lt;br&gt;
=================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Throwable&amp;nbsp;Class&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;java.lang.Throwable&amp;nbsp;class&amp;nbsp;is&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;of&amp;nbsp;all&amp;nbsp;objects&lt;br&gt;
that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;thrown&amp;nbsp;(either&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;or&amp;nbsp;by&amp;nbsp;using&amp;nbsp;the&lt;br&gt;
throw&amp;nbsp;keyword).&amp;nbsp;__&amp;nbsp;Only&amp;nbsp;objects&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Throwable__!!!&amp;nbsp;or&lt;br&gt;
subclasses&amp;nbsp;of&amp;nbsp;Throwable&amp;nbsp;can&amp;nbsp;appear&amp;nbsp;____&amp;nbsp;in&amp;nbsp;a&amp;nbsp;catch&amp;nbsp;clause.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;you&amp;nbsp;catch&amp;nbsp;an&amp;nbsp;exception,&amp;nbsp;a&amp;nbsp;common&amp;nbsp;task&amp;nbsp;is&amp;nbsp;to&lt;br&gt;
display&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;trace&amp;nbsp;or&amp;nbsp;log&amp;nbsp;it&amp;nbsp;to&amp;nbsp;a&amp;nbsp;file.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;methods&amp;nbsp;&lt;br&gt;
defined&amp;nbsp;in&amp;nbsp;Throwable&amp;nbsp;provide&amp;nbsp;information&amp;nbsp;about&amp;nbsp;the&amp;nbsp;stack&lt;br&gt;
trace&amp;nbsp;and&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;thrown:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printStackTrace()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;prints&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;trace&amp;nbsp;to&amp;nbsp;System.err&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getMessage()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;the&amp;nbsp;detail&amp;nbsp;message&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Throwable&amp;nbsp;object.&lt;br&gt;
The&amp;nbsp;message&amp;nbsp;is&amp;nbsp;set&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Throwable&amp;nbsp;constructor.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;short&amp;nbsp;description&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Throwable&lt;br&gt;
object&amp;nbsp;that&amp;nbsp;includes&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;exception&amp;nbsp;and&amp;nbsp;its&amp;nbsp;message.&lt;br&gt;
&lt;br&gt;
try&amp;nbsp;{&lt;br&gt;
throw&amp;nbsp;new&amp;nbsp;NullPointerException(&amp;#8220;Be&amp;nbsp;careful!&amp;#8221;);&lt;br&gt;
}catch(NullPointerException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;getMessage:&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;e.getMessage());&lt;br&gt;
System.out.println(&amp;#8220;toString:&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;e.toString());&lt;br&gt;
}&lt;br&gt;
The&amp;nbsp;output&amp;nbsp;of&amp;nbsp;this&amp;nbsp;code&amp;nbsp;is&lt;br&gt;
getMessage:&amp;nbsp;Be&amp;nbsp;careful!&lt;br&gt;
toString:&amp;nbsp;java.lang.NullPointerException:&amp;nbsp;Be&amp;nbsp;careful!&lt;br&gt;
================&lt;br&gt;
&lt;br&gt;
Multiple&amp;nbsp;catch&amp;nbsp;Clauses&lt;br&gt;
Let's&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;more&amp;nbsp;realistic&amp;nbsp;example&amp;nbsp;and&amp;nbsp;one&amp;nbsp;that&amp;nbsp;contains&lt;br&gt;
multiple&amp;nbsp;catch&amp;nbsp;clauses.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;MyFileReader&amp;nbsp;class&lt;br&gt;
opens&amp;nbsp;a&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;reads&amp;nbsp;in&amp;nbsp;a&amp;nbsp;single&amp;nbsp;character.&amp;nbsp;The&lt;br&gt;
FileReader&amp;nbsp;constructor&amp;nbsp;invoked&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;throws&amp;nbsp;a&amp;nbsp;FileNotFoundException&lt;br&gt;
if&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found.&amp;nbsp;Study&amp;nbsp;the&amp;nbsp;code&amp;nbsp;and&lt;br&gt;
see&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;output&amp;nbsp;when&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;is&amp;nbsp;not&amp;nbsp;found&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6.&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;import&amp;nbsp;java.io.*;&lt;br&gt;
2.&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MyFileReader&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;readFromFile(String&amp;nbsp;fileName)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;FileReader&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileReader(fileName);&lt;br&gt;
7.&amp;nbsp;System.out.println(fileName&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;was&amp;nbsp;found&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;char&amp;nbsp;data&amp;nbsp;=&amp;nbsp;(char)&amp;nbsp;fis.read();&lt;br&gt;
9.&amp;nbsp;System.out.println(&amp;#8220;Just&amp;nbsp;read:&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;data);&lt;br&gt;
10.&amp;nbsp;}&amp;nbsp;catch(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(&amp;#8220;Oops&amp;nbsp;-&amp;nbsp;file&amp;nbsp;not&amp;nbsp;found:&amp;nbsp;&amp;#8220;&amp;nbsp;+&lt;br&gt;
12.&amp;nbsp;e.getMessage());&lt;br&gt;
13.&amp;nbsp;}&amp;nbsp;catch(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;System.out.println(&amp;#8220;Something&amp;nbsp;went&amp;nbsp;wrong&amp;#8221;);&lt;br&gt;
15.&amp;nbsp;e.printStackTrace();&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;System.out.println(&amp;#8220;End&amp;nbsp;of&amp;nbsp;readFromFile&amp;#8221;);&lt;br&gt;
18.&amp;nbsp;}&lt;br&gt;
19.&lt;br&gt;
20.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
21.&amp;nbsp;MyFileReader&amp;nbsp;reader&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MyFileReader();&lt;br&gt;
22.&amp;nbsp;reader.readFromFile(&amp;#8220;mydata.txt&amp;#8221;);&lt;br&gt;
23.&amp;nbsp;System.out.println(&amp;#8220;End&amp;nbsp;of&amp;nbsp;main&amp;#8221;);&lt;br&gt;
24.&amp;nbsp;}&lt;br&gt;
25.}&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Oops&amp;nbsp;-&amp;nbsp;file&amp;nbsp;not&amp;nbsp;found:&amp;nbsp;mydata.txt&amp;nbsp;(The&amp;nbsp;system&amp;nbsp;cannot&amp;nbsp;find&amp;nbsp;the&amp;nbsp;file&amp;nbsp;specified)&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;readFromFile&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;main&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
The&amp;nbsp;Order&amp;nbsp;of&amp;nbsp;catch&amp;nbsp;Clauses&lt;br&gt;
catch&amp;nbsp;clauses&amp;nbsp;are&amp;nbsp;checked&amp;nbsp;in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;they&amp;nbsp;appear.&amp;nbsp;If&amp;nbsp;an&lt;br&gt;
exception&amp;nbsp;is&amp;nbsp;caught&amp;nbsp;in&amp;nbsp;a&amp;nbsp;catch&amp;nbsp;clause,&amp;nbsp;any&amp;nbsp;subsequent&lt;br&gt;
catch&amp;nbsp;blocks&amp;nbsp;are&amp;nbsp;ignored.&amp;nbsp;Watch&amp;nbsp;for&amp;nbsp;invalid&amp;nbsp;try&amp;nbsp;-&amp;nbsp;catch&lt;br&gt;
statements&amp;nbsp;that&amp;nbsp;contain&amp;nbsp;unreachable&amp;nbsp;code&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;do&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;For&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;example,&amp;nbsp;do&lt;br&gt;
you&amp;nbsp;see&amp;nbsp;what&amp;nbsp;is&amp;nbsp;wrong&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&amp;nbsp;try&amp;nbsp;-&amp;nbsp;catch&amp;nbsp;statement?&lt;br&gt;
&lt;br&gt;
5.&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;FileReader&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileReader(fileName);&lt;br&gt;
7.&amp;nbsp;System.out.println(fileName&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;was&amp;nbsp;found&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;char&amp;nbsp;data&amp;nbsp;=&amp;nbsp;(char)&amp;nbsp;fis.read();&lt;br&gt;
9.&amp;nbsp;System.out.println(&amp;#8220;Just&amp;nbsp;read:&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;data);&lt;br&gt;
10.&amp;nbsp;}&amp;nbsp;catch(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(&amp;#8220;Something&amp;nbsp;went&amp;nbsp;wrong&amp;#8221;);&lt;br&gt;
12.&amp;nbsp;e.printStackTrace();&lt;br&gt;
13.&amp;nbsp;}&amp;nbsp;catch(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;System.out.println(&amp;#8220;Oops&amp;nbsp;-&amp;nbsp;file&amp;nbsp;not&amp;nbsp;found:&amp;nbsp;&amp;#8220;&amp;nbsp;+&lt;br&gt;
15.&amp;nbsp;e.getMessage());&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
FileNotFoundException&amp;nbsp;is&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;IOException&amp;nbsp;.&amp;nbsp;If&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileNotFoundException&amp;nbsp;is&lt;br&gt;
thrown&amp;nbsp;within&amp;nbsp;this&amp;nbsp;try&amp;nbsp;block,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;be&amp;nbsp;caught&amp;nbsp;on&amp;nbsp;line&amp;nbsp;10.&lt;br&gt;
Therefore,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;possible&amp;nbsp;for&amp;nbsp;the&amp;nbsp;catch&amp;nbsp;block&amp;nbsp;on&amp;nbsp;line&amp;nbsp;13&amp;nbsp;to&amp;nbsp;ever&amp;nbsp;execute.&lt;br&gt;
This&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;and&amp;nbsp;generates&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;error:&lt;br&gt;
MyFileReader.java:13:&amp;nbsp;exception&amp;nbsp;java.io.FileNotFoundException&amp;nbsp;has&lt;br&gt;
already&amp;nbsp;been&amp;nbsp;caught&lt;br&gt;
}&amp;nbsp;catch(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;
Diffent&amp;nbsp;types&amp;nbsp;of&amp;nbsp;exceptions&amp;nbsp;&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Runtime&amp;nbsp;exceptions&amp;nbsp;An&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;runtime&lt;br&gt;
exception&amp;nbsp;if&amp;nbsp;its&amp;nbsp;data&amp;nbsp;type&amp;nbsp;is&amp;nbsp;java.lang.RuntimeException&amp;nbsp;or&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RuntimeException&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;Checked&amp;nbsp;exceptions&amp;nbsp;An&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;checked&lt;br&gt;
exception&amp;nbsp;if&amp;nbsp;its&amp;nbsp;data&amp;nbsp;type&amp;nbsp;is&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;java.lang.Exception&amp;nbsp;,&lt;br&gt;
but&amp;nbsp;not&amp;nbsp;a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;RuntimeException&amp;nbsp;.&lt;br&gt;
-&amp;nbsp;Errors&amp;nbsp;An&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;an&amp;nbsp;error&amp;nbsp;if&amp;nbsp;its&amp;nbsp;data&amp;nbsp;type&amp;nbsp;is&lt;br&gt;
a&amp;nbsp;child&amp;nbsp;class&amp;nbsp;of&amp;nbsp;java&amp;nbsp;.lang.Error&amp;nbsp;.&amp;nbsp;An&amp;nbsp;error&amp;nbsp;is&amp;nbsp;associated&amp;nbsp;with&lt;br&gt;
problems&amp;nbsp;that&amp;nbsp;arise&amp;nbsp;outside&amp;nbsp;of&amp;nbsp;your&amp;nbsp;application,&lt;br&gt;
and&amp;nbsp;you&amp;nbsp;typically&amp;nbsp;do&amp;nbsp;not&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;recover&amp;nbsp;from&amp;nbsp;errors.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='930'&amp;nbsp;height='550'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/JavaExceptions.png'/&gt;&lt;br&gt;
&lt;br&gt;
=&lt;br&gt;
Handle&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;by&amp;nbsp;enclosing&amp;nbsp;the&amp;nbsp;statement&amp;nbsp;in&amp;nbsp;a&amp;nbsp;try&amp;nbsp;block&lt;br&gt;
that&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;corresponding&amp;nbsp;handler&amp;nbsp;for&amp;nbsp;the&amp;nbsp;exception.&lt;br&gt;
The&amp;nbsp;method&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;statement&amp;nbsp;must&amp;nbsp;declare&amp;nbsp;the&lt;br&gt;
checked&amp;nbsp;exception&amp;nbsp;in&amp;nbsp;the&amp;nbsp;throws&amp;nbsp;clause&amp;nbsp;of&amp;nbsp;the&amp;nbsp;method&amp;nbsp;declaration.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;checked&amp;nbsp;exceptions&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;ignored.&amp;nbsp;You&amp;nbsp;must&amp;nbsp;write&lt;br&gt;
code&amp;nbsp;to&amp;nbsp;either&amp;nbsp;catch&amp;nbsp;and&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;checked&amp;nbsp;exception,&amp;nbsp;or&amp;nbsp;declare&lt;br&gt;
that&amp;nbsp;you&amp;nbsp;are&amp;nbsp;not&amp;nbsp;catching&amp;nbsp;the&amp;nbsp;exception,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;it&amp;nbsp;must&lt;br&gt;
be&amp;nbsp;handled&amp;nbsp;by&amp;nbsp;some&amp;nbsp;other&amp;nbsp;method&amp;nbsp;down&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack.&amp;nbsp;Either&amp;nbsp;way,&lt;br&gt;
eventually&amp;nbsp;a&amp;nbsp;checked&amp;nbsp;exception&amp;nbsp;must&amp;nbsp;be&amp;nbsp;handled.&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
The&amp;nbsp;__&amp;nbsp;throws&amp;nbsp;__&amp;nbsp;Keyword&lt;br&gt;
A&amp;nbsp;method&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;throws&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;that&amp;nbsp;it&amp;nbsp;might&amp;nbsp;throw&lt;br&gt;
an&amp;nbsp;exception.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;method&amp;nbsp;named&lt;br&gt;
readFromFile&amp;nbsp;declares&amp;nbsp;that&amp;nbsp;it&amp;nbsp;might&amp;nbsp;throw&amp;nbsp;a&amp;nbsp;java.io.IOException&amp;nbsp;:&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;readFromFile(String&amp;nbsp;fileName)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
FileReader&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileReader(fileName);&lt;br&gt;
System.out.println(fileName&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;was&amp;nbsp;found&amp;#8221;);&lt;br&gt;
char&amp;nbsp;data&amp;nbsp;=&amp;nbsp;(char)&amp;nbsp;fis.read();&lt;br&gt;
System.out.println(&amp;#8220;Just&amp;nbsp;read:&amp;nbsp;&amp;#8220;&amp;nbsp;+&amp;nbsp;data);&lt;br&gt;
System.out.println(&amp;#8220;End&amp;nbsp;of&amp;nbsp;readFromFile&amp;#8221;);&lt;br&gt;
}&lt;br&gt;
Because&amp;nbsp;IOException&amp;nbsp;is&amp;nbsp;a&amp;nbsp;checked&amp;nbsp;exception,&amp;nbsp;any&amp;nbsp;method&amp;nbsp;that&lt;br&gt;
invokes&amp;nbsp;readFromFile&amp;nbsp;must&amp;nbsp;either&amp;nbsp;handle&amp;nbsp;or&amp;nbsp;declare&amp;nbsp;the&amp;nbsp;IOException&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
=========&lt;br&gt;
Why&amp;nbsp;Not&amp;nbsp;Catch&amp;nbsp;Errors&amp;nbsp;or&amp;nbsp;Runtime&amp;nbsp;Exceptions?&lt;br&gt;
&lt;br&gt;
Checked&amp;nbsp;exceptions&amp;nbsp;must&amp;nbsp;be&amp;nbsp;handled&amp;nbsp;or&amp;nbsp;declared,&amp;nbsp;while&amp;nbsp;errors&lt;br&gt;
and&amp;nbsp;runtime&amp;nbsp;exceptions&amp;nbsp;can&amp;nbsp;be&amp;nbsp;ignored.&amp;nbsp;This&amp;nbsp;does&amp;nbsp;not&amp;nbsp;imply&amp;nbsp;that&lt;br&gt;
you&amp;nbsp;cannot&amp;nbsp;try&amp;nbsp;to&amp;nbsp;catch&amp;nbsp;an&amp;nbsp;error&amp;nbsp;or&amp;nbsp;exception.&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;try&amp;nbsp;to&amp;nbsp;catch&amp;nbsp;any&amp;nbsp;object&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Throwable&amp;nbsp;,&amp;nbsp;which&amp;nbsp;includes&lt;br&gt;
errors&amp;nbsp;and&amp;nbsp;runtime&amp;nbsp;exceptions.&lt;br&gt;
&lt;br&gt;
Be&amp;nbsp;glad&amp;nbsp;that&amp;nbsp;errors&amp;nbsp;and&amp;nbsp;runtime&amp;nbsp;exceptions&amp;nbsp;do&amp;nbsp;not&amp;nbsp;need&amp;nbsp;to&amp;nbsp;handled&lt;br&gt;
or&amp;nbsp;declared.&amp;nbsp;They&amp;nbsp;can&amp;nbsp;occur&amp;nbsp;in&amp;nbsp;so&amp;nbsp;many&amp;nbsp;situations&amp;nbsp;that&amp;nbsp;if&lt;br&gt;
you&amp;nbsp;had&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;or&amp;nbsp;declare&amp;nbsp;them,&amp;nbsp;you&amp;nbsp;would&amp;nbsp;quickly&lt;br&gt;
become&amp;nbsp;irritated&amp;nbsp;with&amp;nbsp;Java!&lt;br&gt;
&lt;br&gt;
===============&lt;br&gt;
The&amp;nbsp;_&amp;nbsp;finally&amp;nbsp;_&amp;nbsp;Block&lt;br&gt;
A&amp;nbsp;try&amp;nbsp;statement&amp;nbsp;can&amp;nbsp;be&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;a&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;.&lt;br&gt;
A&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;is&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;feature&amp;nbsp;of&amp;nbsp;Java:&amp;nbsp;it&amp;nbsp;executes&amp;nbsp;after&amp;nbsp;a&amp;nbsp;try&lt;br&gt;
statement,&amp;nbsp;regardless&amp;nbsp;of&amp;nbsp;whether&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;occurs&amp;nbsp;within&amp;nbsp;the&lt;br&gt;
try&amp;nbsp;block.&amp;nbsp;A&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;can&amp;nbsp;only&amp;nbsp;appear&amp;nbsp;after&amp;nbsp;a&amp;nbsp;try&amp;nbsp;statement&lt;br&gt;
and&amp;nbsp;must&amp;nbsp;appear&amp;nbsp;at&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;catch&amp;nbsp;clauses.&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;flowcontrol;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Exceptions&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;withFinally(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;a&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(a==&amp;nbsp;10)&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;AssertionError();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch(AssertionError&amp;nbsp;e){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Caching&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;finally{&amp;nbsp;//&amp;nbsp;hovewer&amp;nbsp;in&amp;nbsp;cach&amp;nbsp;we&amp;nbsp;make&amp;nbsp;return&amp;nbsp;,&amp;nbsp;but&amp;nbsp;finally&amp;nbsp;is&amp;nbsp;executed&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;inside&amp;nbsp;finally&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withFinally();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;situations&amp;nbsp;where&amp;nbsp;a&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;might&amp;nbsp;not&amp;nbsp;execute.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;an&amp;nbsp;error&amp;nbsp;is&amp;nbsp;thrown&amp;nbsp;and&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&lt;br&gt;
able&amp;nbsp;to&amp;nbsp;run&amp;nbsp;properly,&amp;nbsp;a&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;probably&amp;nbsp;might&lt;br&gt;
not&amp;nbsp;execute.&amp;nbsp;Calling&amp;nbsp;System.exit&amp;nbsp;in&amp;nbsp;a&amp;nbsp;catch&amp;nbsp;block&amp;nbsp;terminates&lt;br&gt;
the&amp;nbsp;JVM,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;cannot&amp;nbsp;execute.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_0_0:80" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Core&amp;nbsp;:&amp;nbsp;The&amp;nbsp;Primitive&amp;nbsp;Wrapper&amp;nbsp;Classes(Integer,Double...),&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;wrapper&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;defi&amp;nbsp;ned&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.lang&amp;nbsp;package&amp;nbsp;and&amp;nbsp;are&lt;br&gt;
used&amp;nbsp;in&amp;nbsp;situations&amp;nbsp;where&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;required&amp;nbsp;but&amp;nbsp;the&amp;nbsp;data&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
primitive&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;is&amp;nbsp;"wrapped"&amp;nbsp;into&amp;nbsp;an&amp;nbsp;object&amp;nbsp;and&amp;nbsp;can&lt;br&gt;
be&amp;nbsp;"unwrapped"&amp;nbsp;whenever&amp;nbsp;the&amp;nbsp;primitive&amp;nbsp;value&amp;nbsp;is&amp;nbsp;needed.&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;a&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.lang&amp;nbsp;package&amp;nbsp;for&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;eight&amp;nbsp;primitive&amp;nbsp;types:&lt;br&gt;
-&amp;nbsp;Byte&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;byte.&lt;br&gt;
-&amp;nbsp;Short&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;short.&lt;br&gt;
-&amp;nbsp;Integer&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;an&amp;nbsp;int.&lt;br&gt;
-&amp;nbsp;Long&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;long.&lt;br&gt;
-&amp;nbsp;Float&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;float.&lt;br&gt;
-&amp;nbsp;Double&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;double.&lt;br&gt;
-&amp;nbsp;Character&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;char.&lt;br&gt;
-&amp;nbsp;Boolean&amp;nbsp;This&amp;nbsp;type&amp;nbsp;wraps&amp;nbsp;a&amp;nbsp;boolean.&lt;br&gt;
&lt;br&gt;
Wrapper&amp;nbsp;classes&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&amp;nbsp;properties:&lt;br&gt;
-&amp;nbsp;Each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;wrapper&amp;nbsp;classes&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;single&amp;nbsp;field&amp;nbsp;that&amp;nbsp;holds&amp;nbsp;the&amp;nbsp;value&amp;nbsp;it&amp;nbsp;is&amp;nbsp;wrapping.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;wrapped&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;changed.&lt;br&gt;
-&amp;nbsp;Each&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;constructor&amp;nbsp;that&amp;nbsp;takes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;data&amp;nbsp;type&amp;nbsp;it&amp;nbsp;wraps.&lt;br&gt;
-&amp;nbsp;Except&amp;nbsp;for&amp;nbsp;Character&amp;nbsp;,&amp;nbsp;each&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;constructor&amp;nbsp;that&amp;nbsp;takes&amp;nbsp;in&amp;nbsp;a&amp;nbsp;String&amp;nbsp;that&amp;nbsp;is&lt;br&gt;
automatically&amp;nbsp;parsed&amp;nbsp;into&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;primitive&amp;nbsp;type.&lt;br&gt;
-&amp;nbsp;Each&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;“&amp;nbsp;value&amp;nbsp;”&amp;nbsp;method&amp;nbsp;that&amp;nbsp;unwraps&amp;nbsp;the&amp;nbsp;primitive&amp;nbsp;type.&amp;nbsp;For&lt;br&gt;
example,&amp;nbsp;the&amp;nbsp;Float&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;floatValue&amp;nbsp;method&amp;nbsp;that&amp;nbsp;returns&amp;nbsp;the&amp;nbsp;float.&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;357;&lt;br&gt;
Integer&amp;nbsp;w&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Integer(x);&lt;br&gt;
The&amp;nbsp;Integer&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;method&amp;nbsp;named&amp;nbsp;intValue&amp;nbsp;that&amp;nbsp;unwraps&amp;nbsp;the&amp;nbsp;int&amp;nbsp;:&lt;br&gt;
int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;w.intValue();&lt;br&gt;
&lt;br&gt;
Autoboxing&lt;br&gt;
As&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;can&amp;nbsp;be&amp;nbsp;automatically&amp;nbsp;boxed&amp;nbsp;and&lt;br&gt;
unboxed&amp;nbsp;into&amp;nbsp;their&amp;nbsp;corresponding&amp;nbsp;wrapper&amp;nbsp;classes,&amp;nbsp;eliminating&amp;nbsp;the&lt;br&gt;
need&amp;nbsp;for&amp;nbsp;instantiating&amp;nbsp;a&amp;nbsp;new&amp;nbsp;wrapper&amp;nbsp;type&amp;nbsp;to&amp;nbsp;box&amp;nbsp;a&amp;nbsp;primitive,&lt;br&gt;
or&amp;nbsp;using&amp;nbsp;a&amp;nbsp;value&amp;nbsp;method&amp;nbsp;to&amp;nbsp;retrieve&amp;nbsp;the&amp;nbsp;wrapped&amp;nbsp;primitive.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Let's&amp;nbsp;look&amp;nbsp;at&amp;nbsp;an&amp;nbsp;example&amp;nbsp;where&amp;nbsp;a&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;is&amp;nbsp;necessary.&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;method&amp;nbsp;named&amp;nbsp;addScore&amp;nbsp;with&amp;nbsp;an&lt;br&gt;
Object&amp;nbsp;parameter.&amp;nbsp;Because&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;is&amp;nbsp;not&amp;nbsp;an&amp;nbsp;Object,&lt;br&gt;
a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;wrapped&amp;nbsp;before&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;addScore&amp;nbsp;.&lt;br&gt;
Study&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;and&amp;nbsp;try&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;its&amp;nbsp;output:&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;ScoreKeeper&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Object&amp;nbsp;&gt;&amp;nbsp;scores&amp;nbsp;=&lt;br&gt;
3.&amp;nbsp;new&amp;nbsp;java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Object&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addScore(Object&amp;nbsp;score)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;scores.add(score);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&lt;br&gt;
9.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printScores()&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;for(Object&amp;nbsp;score&amp;nbsp;:&amp;nbsp;scores)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.println(score);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
14.&lt;br&gt;
15.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
16.&amp;nbsp;ScoreKeeper&amp;nbsp;keeper&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ScoreKeeper();&lt;br&gt;
17.&amp;nbsp;Integer&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Integer(50);&lt;br&gt;
18.&amp;nbsp;Double&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Double(23.4);&lt;br&gt;
19.&amp;nbsp;Float&amp;nbsp;three&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Float(18.5);&lt;br&gt;
20.&amp;nbsp;keeper.addScore(one);&lt;br&gt;
21.&amp;nbsp;keeper.addScore(two);&lt;br&gt;
22.&amp;nbsp;keeper.addScore(three);&lt;br&gt;
23.&amp;nbsp;keeper.printScores();&lt;br&gt;
24.&amp;nbsp;}&lt;br&gt;
25.&amp;nbsp;}&lt;br&gt;
Within&amp;nbsp;main&amp;nbsp;,&amp;nbsp;an&amp;nbsp;int&amp;nbsp;,&amp;nbsp;double&amp;nbsp;,&amp;nbsp;and&amp;nbsp;float&amp;nbsp;are&amp;nbsp;wrapped&amp;nbsp;into&amp;nbsp;their&amp;nbsp;corresponding&amp;nbsp;wrapper&lt;br&gt;
class&amp;nbsp;and&amp;nbsp;passed&amp;nbsp;into&amp;nbsp;the&amp;nbsp;addScore&amp;nbsp;method&amp;nbsp;of&amp;nbsp;a&amp;nbsp;new&amp;nbsp;ScoreKeeper&amp;nbsp;object.&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&lt;br&gt;
because&amp;nbsp;Integer&amp;nbsp;,&amp;nbsp;Double&amp;nbsp;,&amp;nbsp;and&amp;nbsp;Float&amp;nbsp;are&amp;nbsp;subclasses&amp;nbsp;of&amp;nbsp;Object&amp;nbsp;.&amp;nbsp;Each&amp;nbsp;object&amp;nbsp;is&amp;nbsp;saved&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;ArrayList&amp;nbsp;,&amp;nbsp;and&amp;nbsp;invoking&amp;nbsp;printScores&amp;nbsp;generates&amp;nbsp;the&amp;nbsp;following&amp;nbsp;output:&lt;br&gt;
50&lt;br&gt;
23.4&lt;br&gt;
18.5&lt;br&gt;
&lt;br&gt;
====================&lt;br&gt;
Autoboxing&amp;nbsp;and&amp;nbsp;Unboxing&lt;br&gt;
As&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;you&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;need&amp;nbsp;to&amp;nbsp;write&amp;nbsp;the&amp;nbsp;code&amp;nbsp;to&amp;nbsp;wrap&amp;nbsp;primitive&amp;nbsp;types&lt;br&gt;
into&amp;nbsp;their&amp;nbsp;corresponding&amp;nbsp;wrapper&amp;nbsp;class;&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;now&amp;nbsp;does&amp;nbsp;this&amp;nbsp;for&lt;br&gt;
you&amp;nbsp;behind&amp;nbsp;the&amp;nbsp;scenes.&amp;nbsp;The&amp;nbsp;terma&amp;nbsp;utoboxing&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;compiler&lt;br&gt;
automatically&amp;nbsp;converting&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;into&amp;nbsp;its&amp;nbsp;corresponding&lt;br&gt;
wrapper&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;term&amp;nbsp;unboxing&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;automatically&lt;br&gt;
unwrapping&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;from&amp;nbsp;its&amp;nbsp;wrapper&amp;nbsp;object.&amp;nbsp;Autoboxing&amp;nbsp;and&lt;br&gt;
unboxing&amp;nbsp;do&amp;nbsp;not&amp;nbsp;require&amp;nbsp;any&amp;nbsp;special&amp;nbsp;syntax.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;realizes&lt;br&gt;
situations&amp;nbsp;where&amp;nbsp;primitives&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;boxed&amp;nbsp;or&lt;br&gt;
unboxed.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;an&amp;nbsp;int&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;treated&amp;nbsp;as&amp;nbsp;an&amp;nbsp;object,&lt;br&gt;
it&amp;nbsp;automatically&amp;nbsp;becomes&amp;nbsp;an&amp;nbsp;Integer&amp;nbsp;.&amp;nbsp;Similarly,&amp;nbsp;an&amp;nbsp;Integer&amp;nbsp;automatically&lt;br&gt;
becomes&amp;nbsp;an&amp;nbsp;int&amp;nbsp;whenever&amp;nbsp;necessary.&amp;nbsp;Before&amp;nbsp;autoboxing,&amp;nbsp;you&amp;nbsp;would&lt;br&gt;
wrap&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;by&amp;nbsp;instantiating&amp;nbsp;a&amp;nbsp;new&amp;nbsp;wrapper&amp;nbsp;object:&lt;br&gt;
&lt;br&gt;
Integer&amp;nbsp;w&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Integer(10);&lt;br&gt;
With&amp;nbsp;autoboxing,&amp;nbsp;you&amp;nbsp;simply&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type:&lt;br&gt;
Integer&amp;nbsp;w&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;i1&amp;nbsp;=&amp;nbsp;1000;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;i2&amp;nbsp;=&amp;nbsp;100;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(i1&amp;nbsp;==&amp;nbsp;i2){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("i1&amp;nbsp;equals&amp;nbsp;i2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("i1&amp;nbsp;not&amp;nbsp;equals&amp;nbsp;i2");&amp;nbsp;//&amp;nbsp;+&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;a1&amp;nbsp;=&amp;nbsp;127;&amp;nbsp;//&amp;nbsp;Integer&amp;nbsp;less&amp;nbsp;128&amp;nbsp;we&amp;nbsp;can&amp;nbsp;compare&amp;nbsp;with&amp;nbsp;==&amp;nbsp;operator&amp;nbsp;=))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;a2&amp;nbsp;=127;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(a1&amp;nbsp;==&amp;nbsp;a2){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println("equals");&amp;nbsp;//&amp;nbsp;+&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Integer&amp;nbsp;and&amp;nbsp;int&amp;nbsp;we&amp;nbsp;can&amp;nbsp;compare&amp;nbsp;with&amp;nbsp;==&amp;nbsp;operarator.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:81" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
4.&amp;nbsp;final&amp;nbsp;char&amp;nbsp;a&amp;nbsp;=&amp;nbsp;&amp;#8216;A&amp;#8217;,&amp;nbsp;d&amp;nbsp;=&amp;nbsp;&amp;#8216;D&amp;#8217;;&lt;br&gt;
5.&amp;nbsp;char&amp;nbsp;grade&amp;nbsp;=&amp;nbsp;&amp;#8216;B&amp;#8217;;&lt;br&gt;
6.&amp;nbsp;switch(grade)&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;case&amp;nbsp;a&amp;nbsp;:&lt;br&gt;
8.&amp;nbsp;case&amp;nbsp;&amp;#8216;B&amp;#8217;&amp;nbsp;:&lt;br&gt;
9.&amp;nbsp;System.out.print(&amp;#8220;great&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;case&amp;nbsp;&amp;#8216;C&amp;#8217;&amp;nbsp;:&lt;br&gt;
11.&amp;nbsp;System.out.print(&amp;#8220;passed&amp;#8221;);&lt;br&gt;
12.&amp;nbsp;break;&lt;br&gt;
13.&amp;nbsp;case&amp;nbsp;d&amp;nbsp;:&lt;br&gt;
14.&amp;nbsp;case&amp;nbsp;&amp;#8216;F&amp;#8217;&amp;nbsp;:&lt;br&gt;
15.&amp;nbsp;System.out.print(&amp;#8220;not&amp;nbsp;good&amp;#8221;);&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;great&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;greatpassed&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;7&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:82" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Average&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;scores&amp;nbsp;=&amp;nbsp;{2,4,5,5,6,8};&lt;br&gt;
4.&amp;nbsp;int&amp;nbsp;sum&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
5.&amp;nbsp;for(int&amp;nbsp;x&amp;nbsp;:&amp;nbsp;scores)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;sum&amp;nbsp;+=&amp;nbsp;x;&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;System.out.println(sum&amp;nbsp;/&amp;nbsp;scores.length);&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;30&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;6&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;4&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;5&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:83" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
5.&amp;nbsp;int&amp;nbsp;m&amp;nbsp;=&amp;nbsp;9,&amp;nbsp;n&amp;nbsp;=&amp;nbsp;1;&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
7.&amp;nbsp;while(m&amp;nbsp;&gt;&amp;nbsp;n)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;m--;&lt;br&gt;
9.&amp;nbsp;n&amp;nbsp;+=&amp;nbsp;2;&lt;br&gt;
10.&amp;nbsp;x&amp;nbsp;+=&amp;nbsp;m&amp;nbsp;+&amp;nbsp;n;&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;System.out.println(x);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;11&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;13&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;23&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;36&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:84" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;class&amp;nbsp;definition:&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Forever&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;while(true)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.println(&amp;#8220;Hello&amp;#8221;);&lt;br&gt;
5.&amp;nbsp;}&lt;br&gt;
6.&amp;nbsp;System.out.println(&amp;#8220;Goodbye&amp;#8221;);&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statement?&lt;br&gt;
new&amp;nbsp;Forever().run();&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Prints&amp;nbsp;Hello&amp;nbsp;indefinitely&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Prints&amp;nbsp;Hello&amp;nbsp;until&amp;nbsp;an&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Prints&amp;nbsp;Hello&amp;nbsp;until&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;error&amp;nbsp;occurs,&amp;nbsp;then&amp;nbsp;prints&amp;nbsp;Goodbye&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
Error&amp;nbsp;:&amp;nbsp;unreachable&amp;nbsp;code&amp;nbsp;=)</questionanswer>
  </question>
  <question id="1_0_0_0_0:85" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
3.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
4.&amp;nbsp;if(x&amp;nbsp;&lt;&amp;nbsp;0)&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;System.out.print(&amp;#8220;anywhere&amp;#8221;);&lt;br&gt;
6.&amp;nbsp;else&amp;nbsp;if(x&amp;nbsp;&lt;&amp;nbsp;5)&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;if(x&amp;nbsp;==&amp;nbsp;10)&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&amp;#8220;here&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;else&amp;nbsp;if(x&amp;nbsp;&gt;&amp;nbsp;=&amp;nbsp;5)&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;System.out.print(&amp;#8220;there&amp;#8221;);&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;else&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&amp;#8220;somewhere&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;&amp;nbsp;else&lt;br&gt;
14.&amp;nbsp;&amp;nbsp;System.out.print(&amp;#8220;nowhere&amp;#8221;);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;anywhere&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;here&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;there&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nowhere&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_0_0:86" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Laptop&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;void&amp;nbsp;start()&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;System.out.print(&amp;#8220;Starting&amp;nbsp;up&amp;#8221;);&lt;br&gt;
5.&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception();&lt;br&gt;
6.&amp;nbsp;}catch(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
7.&amp;nbsp;System.out.print(&amp;#8220;Problem&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;System.exit(0);&lt;br&gt;
9.&amp;nbsp;}finally&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;System.out.print(&amp;#8220;Shutting&amp;nbsp;down&amp;#8221;);&lt;br&gt;
11.&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
13.&lt;br&gt;
14.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;new&amp;nbsp;Laptop().start();&lt;br&gt;
16.&amp;nbsp;}&lt;br&gt;
17.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Starting&amp;nbsp;up&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Starting&amp;nbsp;upProblem&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Starting&amp;nbsp;upProblemShutting&amp;nbsp;down&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Starting&amp;nbsp;upShutting&amp;nbsp;down&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
System.exit&amp;nbsp;,&amp;nbsp;which&amp;nbsp;terminates&amp;nbsp;the&amp;nbsp;JVM.&lt;br&gt;
&lt;br&gt;
but&amp;nbsp;if&amp;nbsp;in&amp;nbsp;line&amp;nbsp;8&amp;nbsp;will&amp;nbsp;be&amp;nbsp;"return"&amp;nbsp;&amp;nbsp;=&gt;&amp;nbsp;finally&amp;nbsp;block&amp;nbsp;will&amp;nbsp;execute</questionanswer>
  </question>
</questions>
