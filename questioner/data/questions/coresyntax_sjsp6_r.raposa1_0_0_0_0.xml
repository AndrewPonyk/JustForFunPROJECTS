<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_0_0" name="CoreSyntax_SJSP6_R.Raposa" nofquestions="13" nofsubcategories="0" filename="coresyntax_sjsp6_r.raposa1_0_0_0_0.xml">
  <question id="1_0_0_0_0:0" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;appears&amp;nbsp;in&amp;nbsp;a&amp;nbsp;file&amp;nbsp;named&amp;nbsp;Book.java&amp;nbsp;.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;compiling&lt;br&gt;
this&amp;nbsp;source&amp;nbsp;file?&amp;nbsp;(Select&amp;nbsp;one&amp;nbsp;answer.)&lt;br&gt;
&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;private&amp;nbsp;int&amp;nbsp;pageNumber;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;class&amp;nbsp;BookReader&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getPage()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;pageNumber;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;one&amp;nbsp;bytecode&amp;nbsp;file&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;.&amp;nbsp;$v0end$&lt;br&gt;
$v1$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;two&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
BookReader.class&amp;nbsp;.$v1end$&lt;br&gt;
$v2$The&amp;nbsp;code&amp;nbsp;compiles&amp;nbsp;successfully&amp;nbsp;and&amp;nbsp;two&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;are&amp;nbsp;generated:&amp;nbsp;Book.class&amp;nbsp;and&lt;br&gt;
Book$BookReader.class&amp;nbsp;.$v2end$&lt;br&gt;
$v3$A&amp;nbsp;compiler&amp;nbsp;error&amp;nbsp;occurs&amp;nbsp;on&amp;nbsp;line&amp;nbsp;4.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:1" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;TV&amp;nbsp;class:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TV&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;model;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TV(String&amp;nbsp;make,&amp;nbsp;String&amp;nbsp;model)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.make&amp;nbsp;=&amp;nbsp;make;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.model&amp;nbsp;=&amp;nbsp;model;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;equals(TV&amp;nbsp;other)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.equals(other.make)&amp;nbsp;&amp;amp;&amp;amp;&amp;nbsp;model.equals(other.model);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;hashCode()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;make.length()&amp;nbsp;*&amp;nbsp;+model.length();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
TV&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
TV&amp;nbsp;b&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TV(&amp;#8220;Philips&amp;#8221;,&amp;nbsp;&amp;#8220;42PFL5603D&amp;#8221;);&lt;br&gt;
if(a.equals(b))&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;equal&amp;#8221;);&lt;br&gt;
}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
System.out.println(&amp;#8220;not&amp;nbsp;equal&amp;#8221;);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;equal&amp;nbsp;$v0end$&lt;br&gt;
$v1$not&amp;nbsp;equal$v1end$&lt;br&gt;
$v2$Line&amp;nbsp;10&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.$v2end$&lt;br&gt;
$v3$Line&amp;nbsp;11&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_0_0_0_0:2" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;does&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;&amp;nbsp;hi&amp;nbsp;&amp;#8221;&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;line&amp;nbsp;2&amp;nbsp;become&amp;nbsp;eligible&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;garbage&lt;br&gt;
collection?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Hello&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;greeting&amp;nbsp;=&amp;nbsp;&amp;#8220;hi&amp;#8221;;&lt;br&gt;
3.&lt;br&gt;
4.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hello&amp;nbsp;h&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Hello();&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h.greeting&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.gc();&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
9.&amp;nbsp;}&lt;br&gt;
10.}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v0end$&lt;br&gt;
$v1$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;$v1end$&lt;br&gt;
$v2$Immediately&amp;nbsp;after&amp;nbsp;line&amp;nbsp;7$v2end$&lt;br&gt;
$v3$Immediately&amp;nbsp;after&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;line&amp;nbsp;8$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:3" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
&lt;br&gt;
6.&amp;nbsp;byte&amp;nbsp;x&amp;nbsp;=&amp;nbsp;23,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;4;&lt;br&gt;
7.&amp;nbsp;int&amp;nbsp;z&amp;nbsp;=&amp;nbsp;23&amp;nbsp;%&amp;nbsp;4;&lt;br&gt;
8.&amp;nbsp;System.out.println(z);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;4.75&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;3&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;4&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;6&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_0_0:4" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
1.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Vehicle&amp;nbsp;{&lt;br&gt;
2.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;used;&lt;br&gt;
3.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;make;&lt;br&gt;
4.&lt;br&gt;
5.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
6.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vehicle&amp;nbsp;v&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Vehicle();&lt;br&gt;
7.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(v.used)&amp;nbsp;{&lt;br&gt;
8.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make);&lt;br&gt;
9.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
10.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(v.make.length());&lt;br&gt;
11.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
12.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
13.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;null&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;0&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;10&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_0_0_0_0:5" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;many&amp;nbsp;classes&amp;nbsp;definitions&amp;nbsp;&amp;nbsp;can&amp;nbsp;one&amp;nbsp;.java&amp;nbsp;file&amp;nbsp;contains&amp;nbsp;?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;2&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;As&amp;nbsp;many&amp;nbsp;,&amp;nbsp;as&amp;nbsp;you&amp;nbsp;need&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_0_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;:What&amp;nbsp;does&amp;nbsp;'-d'&amp;nbsp;option&amp;nbsp;mean&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Suppose&amp;nbsp;you&amp;nbsp;want&amp;nbsp;the&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;to&amp;nbsp;be&amp;nbsp;in&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory.&amp;nbsp;You&lt;br&gt;
can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;of&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;to&amp;nbsp;achieve&amp;nbsp;this.&amp;nbsp;The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;fl&amp;nbsp;ag&amp;nbsp;has&amp;nbsp;two&amp;nbsp;effects:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;compiled&amp;nbsp;code&amp;nbsp;will&amp;nbsp;be&amp;nbsp;output&amp;nbsp;in&amp;nbsp;the&amp;nbsp;directory&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;the&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&amp;nbsp;that&amp;nbsp;matches&amp;nbsp;the&amp;nbsp;package&amp;nbsp;names&amp;nbsp;of&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;is&lt;br&gt;
created&amp;nbsp;automatically&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory.&lt;br&gt;
&lt;br&gt;
Consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;command,&amp;nbsp;executed&amp;nbsp;from&amp;nbsp;the&amp;nbsp;c:\myproject\src&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;c:\myproject\build&amp;nbsp;.\com\sybex\payroll\Employee.java&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-&amp;nbsp;d&amp;nbsp;flag&amp;nbsp;specifies&amp;nbsp;the&amp;nbsp;output&amp;nbsp;directory&amp;nbsp;as&amp;nbsp;c:\myproject\build&amp;nbsp;.&amp;nbsp;Assuming&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
compiles&amp;nbsp;successfully,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;creates&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;Employee.class&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
directory:&lt;br&gt;
&lt;br&gt;
c:\myproject\build\com\sybex\payroll\Employee.class</questionanswer>
  </question>
  <question id="1_0_0_0_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compile&amp;nbsp;java&amp;nbsp;code&amp;nbsp;in&amp;nbsp;console,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;classpath&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Create&amp;nbsp;file&amp;nbsp;Program.java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Program{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;arg){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(11*11);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Compile&amp;nbsp;code&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;Program.java&lt;br&gt;
Execute&amp;nbsp;:&amp;nbsp;java&amp;nbsp;Program&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;will&amp;nbsp;get&amp;nbsp;result&amp;nbsp;:&amp;nbsp;121&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
javac&amp;nbsp;-d&amp;nbsp;bin&amp;nbsp;-cp&amp;nbsp;libs/joda-time-2.2.jar&amp;nbsp;src/your/package/*.java&lt;br&gt;
This&amp;nbsp;assumes&amp;nbsp;you&amp;nbsp;run&amp;nbsp;it&amp;nbsp;in&amp;nbsp;your&amp;nbsp;project's&amp;nbsp;directory.&lt;br&gt;
(!!!&amp;nbsp;You&amp;nbsp;can&amp;nbsp;set&amp;nbsp;-cp&amp;nbsp;as&amp;nbsp;___&amp;nbsp;all&amp;nbsp;folder&amp;nbsp;___&amp;nbsp;:&amp;nbsp;javac&amp;nbsp;-d&amp;nbsp;-cp&amp;nbsp;d:\lib\*&amp;nbsp;Program.java)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;-d&amp;nbsp;flag&amp;nbsp;tells&amp;nbsp;javac&amp;nbsp;where&amp;nbsp;to&amp;nbsp;put&amp;nbsp;the&amp;nbsp;output&amp;nbsp;files.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;-cp&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;a&amp;nbsp;shorthand&amp;nbsp;for&amp;nbsp;-classpath.&amp;nbsp;I&amp;nbsp;got&amp;nbsp;these&amp;nbsp;parameters&lt;br&gt;
based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;.classpath&amp;nbsp;file&amp;nbsp;in&amp;nbsp;your&amp;nbsp;question.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;general&amp;nbsp;you&amp;nbsp;can&amp;nbsp;figure&amp;nbsp;out&amp;nbsp;what&amp;nbsp;is&amp;nbsp;needed&amp;nbsp;by&lt;br&gt;
reading&amp;nbsp;and&amp;nbsp;understanding&amp;nbsp;the&amp;nbsp;errors&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;of&amp;nbsp;javac.&lt;br&gt;
I&amp;nbsp;bet&amp;nbsp;you&amp;nbsp;got&amp;nbsp;many&amp;nbsp;cannot&amp;nbsp;find&amp;nbsp;symbol&amp;nbsp;errors&amp;nbsp;&lt;br&gt;
at&amp;nbsp;first,&amp;nbsp;because&amp;nbsp;the&amp;nbsp;"symbols"&amp;nbsp;were&amp;nbsp;not&amp;nbsp;on&amp;nbsp;your&amp;nbsp;&lt;br&gt;
classpath,&amp;nbsp;so&amp;nbsp;javac&amp;nbsp;could&amp;nbsp;not&amp;nbsp;possibly&amp;nbsp;know&amp;nbsp;how&amp;nbsp;to&amp;nbsp;find&amp;nbsp;them.</questionanswer>
  </question>
  <question id="1_0_0_0_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;are&amp;nbsp;*.jar&amp;nbsp;files&amp;nbsp;?&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;.jar&amp;nbsp;file&amp;nbsp;with&amp;nbsp;bytecode&amp;nbsp;inside&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Bytecode&amp;nbsp;can&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;archived,&lt;br&gt;
compressed&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;known&amp;nbsp;as&amp;nbsp;JAR&amp;nbsp;files.&lt;br&gt;
JAR&amp;nbsp;is&amp;nbsp;short&amp;nbsp;for&amp;nbsp;Java&amp;nbsp;archive.&amp;nbsp;The&amp;nbsp;compiler&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;fi&amp;nbsp;nd&amp;nbsp;bytecode&amp;nbsp;files&amp;nbsp;in&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;without&lt;br&gt;
needing&amp;nbsp;to&amp;nbsp;uncompress&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;onto&amp;nbsp;your&amp;nbsp;file&amp;nbsp;system.&lt;br&gt;
JAR&amp;nbsp;files&amp;nbsp;are&amp;nbsp;the&amp;nbsp;most&amp;nbsp;common&amp;nbsp;way&lt;br&gt;
to&amp;nbsp;distribute&amp;nbsp;Java&amp;nbsp;code,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;exam&amp;nbsp;tests&amp;nbsp;your&lt;br&gt;
understanding&amp;nbsp;of&amp;nbsp;JAR&amp;nbsp;files&amp;nbsp;and&amp;nbsp;how&amp;nbsp;they&lt;br&gt;
relate&amp;nbsp;to&amp;nbsp;CLASSPATH.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;JDK&amp;nbsp;comes&amp;nbsp;with&amp;nbsp;the&amp;nbsp;tool&amp;nbsp;jar.exe&amp;nbsp;for&amp;nbsp;creating&lt;br&gt;
and&amp;nbsp;extracting&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;les.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;command&amp;nbsp;adds&lt;br&gt;
the&amp;nbsp;bytecode&amp;nbsp;fi&amp;nbsp;les&amp;nbsp;of&amp;nbsp;the&amp;nbsp;c:\myproject\build&amp;nbsp;directory&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&lt;br&gt;
JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;named&amp;nbsp;myproject.jar&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
C:\myproject\build&amp;nbsp;&gt;&amp;nbsp;jar&amp;nbsp;-cvf&amp;nbsp;myproject.jar&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;ProgramLib.jar&amp;nbsp;file&amp;nbsp;on&amp;nbsp;Desktop(which&amp;nbsp;contains&amp;nbsp;class&amp;nbsp;Program)&lt;br&gt;
-&amp;nbsp;We&amp;nbsp;have&amp;nbsp;file&amp;nbsp;/home/andrew/UsingProgramJava.java&amp;nbsp;,&amp;nbsp;which&amp;nbsp;use&amp;nbsp;Program&amp;nbsp;class&lt;br&gt;
&amp;nbsp;from&amp;nbsp;ProgramLib.jar&lt;br&gt;
&lt;br&gt;
Compilation:&lt;br&gt;
javac&amp;nbsp;-cp&amp;nbsp;~/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava.java&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Execution:&lt;br&gt;
java&amp;nbsp;-cp&amp;nbsp;.:/home/andrew/Desktop/ProgramLib.jar&amp;nbsp;UsingProgramJava&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
JAR&amp;nbsp;Files&amp;nbsp;and&amp;nbsp;Package&amp;nbsp;Names&lt;br&gt;
If&amp;nbsp;a&amp;nbsp;class&amp;nbsp;is&amp;nbsp;in&amp;nbsp;a&amp;nbsp;package,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;must&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;directory&amp;nbsp;structure&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;.class&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;is&amp;nbsp;included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
Notice&amp;nbsp;in&amp;nbsp;the&amp;nbsp;verbose&amp;nbsp;output&amp;nbsp;of&amp;nbsp;the&amp;nbsp;jar&lt;br&gt;
command&amp;nbsp;shown&amp;nbsp;earlier,&amp;nbsp;the&amp;nbsp;necessary&amp;nbsp;\com&amp;nbsp;directory&lt;br&gt;
and&amp;nbsp;subdirectories&amp;nbsp;matching&amp;nbsp;our&lt;br&gt;
package&amp;nbsp;names&amp;nbsp;are&amp;nbsp;added&amp;nbsp;to&amp;nbsp;the&amp;nbsp;JAR.&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;add&amp;nbsp;a&amp;nbsp;JAR&amp;nbsp;fi&amp;nbsp;le&amp;nbsp;to&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;In&amp;nbsp;fact,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;common&amp;nbsp;to&amp;nbsp;have&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;JAR&lt;br&gt;
fi&amp;nbsp;les&amp;nbsp;in&amp;nbsp;your&amp;nbsp;CLASSPATH&amp;nbsp;.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;demonstrates&lt;br&gt;
adding&amp;nbsp;myproject.jar&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;CLASSPATH&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Windows&amp;nbsp;machine,&amp;nbsp;then&amp;nbsp;running&amp;nbsp;the&amp;nbsp;&lt;br&gt;
TestColors&amp;nbsp;program&amp;nbsp;(which&amp;nbsp;is&amp;nbsp;in&lt;br&gt;
myproject.jar&amp;nbsp;):&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;set&amp;nbsp;CLASSPATH=c:\myproject\build\myproject.jar;&lt;br&gt;
C:\&amp;nbsp;&gt;&amp;nbsp;java&amp;nbsp;com.sybex.demos.TestColors</questionanswer>
  </question>
  <question id="1_0_0_0_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;-&amp;nbsp;Line&amp;nbsp;Arguments&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.exe&amp;nbsp;executable&amp;nbsp;starts&amp;nbsp;the&amp;nbsp;JVM,&amp;nbsp;and&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;you&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;name&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;main&amp;nbsp;method.&amp;nbsp;The&amp;nbsp;command-line&lt;br&gt;
arguments&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;main&amp;nbsp;method&amp;nbsp;as&amp;nbsp;a&amp;nbsp;single&amp;nbsp;array&amp;nbsp;of&amp;nbsp;String&amp;nbsp;objects.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;PrintGreetings&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;main&lt;br&gt;
and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;executed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;command&amp;nbsp;line&amp;nbsp;in&amp;nbsp;Figure&amp;nbsp;1.4&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
java&amp;nbsp;com.sybex.demos.PrintGreetings&amp;nbsp;hi&amp;nbsp;goodbye&amp;nbsp;see&amp;nbsp;you&amp;nbsp;later&lt;br&gt;
&lt;br&gt;
1.&amp;nbsp;package&amp;nbsp;com.sybex.demos;&lt;br&gt;
2.&amp;nbsp;public&amp;nbsp;class&amp;nbsp;PrintGreetings&amp;nbsp;{&lt;br&gt;
3.&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
4.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;args.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;System.out.println(args[i]);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;}&lt;br&gt;
8.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Result&amp;nbsp;:&lt;br&gt;
hi&lt;br&gt;
goodbye&lt;br&gt;
see&lt;br&gt;
you&lt;br&gt;
later&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
All&amp;nbsp;command&amp;nbsp;-&amp;nbsp;line&amp;nbsp;arguments&amp;nbsp;are&amp;nbsp;treated&amp;nbsp;as&amp;nbsp;String&lt;br&gt;
objects,&amp;nbsp;even&amp;nbsp;if&amp;nbsp;they&amp;nbsp;represent&amp;nbsp;another&amp;nbsp;data&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;wrapper&lt;br&gt;
classes&amp;nbsp;in&amp;nbsp;java.lang&amp;nbsp;contain&amp;nbsp;helpful&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;parsing&lt;br&gt;
strings&amp;nbsp;into&amp;nbsp;other&amp;nbsp;data&amp;nbsp;types.</questionanswer>
  </question>
  <question id="1_0_0_0_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reference&amp;nbsp;vs.&amp;nbsp;Primitive&amp;nbsp;Types&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;applications&amp;nbsp;contain&amp;nbsp;two&amp;nbsp;types&amp;nbsp;of&amp;nbsp;data:&amp;nbsp;primitive&amp;nbsp;types&lt;br&gt;
and&amp;nbsp;reference&amp;nbsp;types&amp;nbsp;.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;section,&amp;nbsp;we&amp;nbsp;will&amp;nbsp;discuss&amp;nbsp;the&amp;nbsp;differences&lt;br&gt;
between&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
Primitive&amp;nbsp;Types&lt;br&gt;
Java&amp;nbsp;has&amp;nbsp;eight&amp;nbsp;built-in&amp;nbsp;data&amp;nbsp;types,&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;.&lt;br&gt;
byte&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;–128&amp;nbsp;to&amp;nbsp;127&lt;br&gt;
short&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;–32768&amp;nbsp;to&amp;nbsp;32767&lt;br&gt;
int&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;–2147483648&amp;nbsp;to&amp;nbsp;2147483647&lt;br&gt;
long&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;–9223372036854775808&amp;nbsp;to&amp;nbsp;9223372036854775807&lt;br&gt;
float&amp;nbsp;32&amp;nbsp;bits&amp;nbsp;2–149&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;–&amp;nbsp;2–23)&amp;nbsp;·&amp;nbsp;2127&lt;br&gt;
double&amp;nbsp;64&amp;nbsp;bits&amp;nbsp;2–1074&amp;nbsp;to&amp;nbsp;(2&amp;nbsp;–&amp;nbsp;2–52)&amp;nbsp;·&amp;nbsp;21023&lt;br&gt;
char&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;'\u0000'&amp;nbsp;to&amp;nbsp;'\uffff'&amp;nbsp;(0&amp;nbsp;to&amp;nbsp;65535)&lt;br&gt;
boolean&amp;nbsp;unspecified&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Not&amp;nbsp;all&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;Don&amp;nbsp;’&amp;nbsp;t&amp;nbsp;try&amp;nbsp;to&amp;nbsp;memorize&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&amp;nbsp;values&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;long&amp;nbsp;,&amp;nbsp;float&amp;nbsp;,&amp;nbsp;or&amp;nbsp;double&amp;nbsp;,&amp;nbsp;but&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;know&amp;nbsp;their&amp;nbsp;size&amp;nbsp;in&amp;nbsp;bits.&amp;nbsp;However,&amp;nbsp;you&lt;br&gt;
should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;state&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&lt;br&gt;
a&amp;nbsp;byte&amp;nbsp;exactly&amp;nbsp;and&amp;nbsp;recognize&amp;nbsp;when&amp;nbsp;a&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int&amp;nbsp;has&amp;nbsp;likely&amp;nbsp;gone&lt;br&gt;
beyond&amp;nbsp;its&amp;nbsp;range.&amp;nbsp;Expect&amp;nbsp;a&amp;nbsp;question&amp;nbsp;involving&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;a&amp;nbsp;char&amp;nbsp;,&lt;br&gt;
especially&amp;nbsp;because&amp;nbsp;a&amp;nbsp;char&amp;nbsp;in&amp;nbsp;C/C++&amp;nbsp;is&amp;nbsp;only&amp;nbsp;8&amp;nbsp;bits&amp;nbsp;and&lt;br&gt;
uses&amp;nbsp;the&amp;nbsp;ASCII&amp;nbsp;format,&amp;nbsp;while&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;char&amp;nbsp;is&amp;nbsp;16&amp;nbsp;bits&amp;nbsp;and&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;UNICODE&amp;nbsp;format.&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
Reference&amp;nbsp;Types&lt;br&gt;
Reference&amp;nbsp;types&amp;nbsp;are&amp;nbsp;variables&amp;nbsp;that&amp;nbsp;are&amp;nbsp;class&amp;nbsp;types,&amp;nbsp;interface&amp;nbsp;types,&amp;nbsp;and&amp;nbsp;array&amp;nbsp;types.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;(an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class).&amp;nbsp;Unlike&lt;br&gt;
primitive&amp;nbsp;types&amp;nbsp;that&amp;nbsp;hold&amp;nbsp;their&amp;nbsp;values&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;where&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;allocated,&lt;br&gt;
references&amp;nbsp;do&amp;nbsp;not&amp;nbsp;hold&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;they&amp;nbsp;refer&amp;nbsp;to.&amp;nbsp;Instead,&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;“&amp;nbsp;points&amp;nbsp;”&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;by&amp;nbsp;storing&amp;nbsp;the&amp;nbsp;memory&lt;br&gt;
address&amp;nbsp;where&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;located,&amp;nbsp;a&amp;nbsp;concept&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;a&amp;nbsp;pointer&amp;nbsp;.&lt;br&gt;
However,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&amp;nbsp;does&amp;nbsp;not&amp;nbsp;allow&amp;nbsp;a&amp;nbsp;programmer&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&lt;br&gt;
physical&amp;nbsp;memory&amp;nbsp;address&amp;nbsp;in&amp;nbsp;any&amp;nbsp;way,&amp;nbsp;so&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;a&amp;nbsp;pointer,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;only&amp;nbsp;use&lt;br&gt;
a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;gain&amp;nbsp;access&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;fi&amp;nbsp;elds&amp;nbsp;and&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;it&amp;nbsp;refers&amp;nbsp;to.&amp;nbsp;&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;impossible&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;address&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;of&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;variable.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;’&amp;nbsp;s&amp;nbsp;take&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;some&amp;nbsp;examples&amp;nbsp;that&amp;nbsp;declare&amp;nbsp;and&amp;nbsp;initialize&amp;nbsp;reference&amp;nbsp;types.&amp;nbsp;Suppose&lt;br&gt;
we&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Date&amp;nbsp;and&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
java.util.Date&amp;nbsp;today;&lt;br&gt;
String&amp;nbsp;greeting;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;today&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Date&amp;nbsp;object.&amp;nbsp;The&lt;br&gt;
greeting&amp;nbsp;variable&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;that&amp;nbsp;can&amp;nbsp;only&amp;nbsp;point&amp;nbsp;to&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;value&amp;nbsp;is&amp;nbsp;assigned&lt;br&gt;
to&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;in&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;ways:&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;type.&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;reference&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;using&amp;nbsp;the&amp;nbsp;new&amp;nbsp;keyword.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;assign&amp;nbsp;these&amp;nbsp;references&amp;nbsp;to&amp;nbsp;new&amp;nbsp;objects:&lt;br&gt;
&lt;br&gt;
today&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.util.Date();&lt;br&gt;
greeting&amp;nbsp;=&amp;nbsp;“How&amp;nbsp;are&amp;nbsp;you?”;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
In&amp;nbsp;addition,&amp;nbsp;__&amp;nbsp;arrays&amp;nbsp;__&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;have&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;Java&lt;br&gt;
language&amp;nbsp;implicitly&amp;nbsp;defi&amp;nbsp;nes&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;type&amp;nbsp;for&amp;nbsp;each&amp;nbsp;possible&amp;nbsp;array&amp;nbsp;type:&amp;nbsp;one&amp;nbsp;for&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
eight&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;and&amp;nbsp;also&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;array.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;references&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;type:&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;[]&amp;nbsp;grades;&lt;br&gt;
String&amp;nbsp;[]&amp;nbsp;args;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(&amp;nbsp;&amp;nbsp;):&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;imas&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[]{1,1,1};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(imas.length);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer[]&amp;nbsp;Imas2&amp;nbsp;=&amp;nbsp;imas;&amp;nbsp;//&amp;nbsp;!!!!!!!!!!!!!&amp;nbsp;Error&amp;nbsp;required:&amp;nbsp;Integer[]&amp;nbsp;found:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int[]&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;can&amp;nbsp;also&amp;nbsp;assign&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;another&amp;nbsp;reference&amp;nbsp;as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;their&amp;nbsp;data&amp;nbsp;types&amp;nbsp;are&lt;br&gt;
compatible.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;assigns&amp;nbsp;two&amp;nbsp;ArrayList&amp;nbsp;references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other:&lt;br&gt;
&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a1&amp;nbsp;=&lt;br&gt;
new&amp;nbsp;java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
java.util.ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;a2&amp;nbsp;=&amp;nbsp;a1;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;references&amp;nbsp;a1&amp;nbsp;and&amp;nbsp;a2&amp;nbsp;both&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;an&amp;nbsp;ArrayList&amp;nbsp;that&amp;nbsp;contains&lt;br&gt;
Integer&amp;nbsp;objects.&amp;nbsp;(Two&amp;nbsp;references&amp;nbsp;pointing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object&amp;nbsp;is&amp;nbsp;a&amp;nbsp;common&amp;nbsp;occurrence&amp;nbsp;in&lt;br&gt;
Java.)&amp;nbsp;The&amp;nbsp;ArrayList&amp;nbsp;object&amp;nbsp;can&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;using&amp;nbsp;either&amp;nbsp;reference.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Let&amp;nbsp;’&amp;nbsp;s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;different&amp;nbsp;example.&amp;nbsp;Examine&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;that&amp;nbsp;assigns&amp;nbsp;two&lt;br&gt;
references&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other&amp;nbsp;and&amp;nbsp;determine&amp;nbsp;if&amp;nbsp;it&amp;nbsp;compiles&amp;nbsp;successfully:&lt;br&gt;
&lt;br&gt;
java.math.BigDecimal&amp;nbsp;bd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;java.math.BigDecimal(2.75);&lt;br&gt;
String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;bd;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;bd&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;BigDecimal&amp;nbsp;,&amp;nbsp;and&amp;nbsp;s&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;.&amp;nbsp;These&amp;nbsp;two&amp;nbsp;classes&amp;nbsp;are&lt;br&gt;
not&amp;nbsp;compatible,&amp;nbsp;so&amp;nbsp;assigning&amp;nbsp;s&amp;nbsp;to&amp;nbsp;bd&amp;nbsp;generates&amp;nbsp;the&amp;nbsp;following&amp;nbsp;compiler&amp;nbsp;error:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
The&amp;nbsp;null&amp;nbsp;Type&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;a&amp;nbsp;special&amp;nbsp;data&amp;nbsp;type&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;for&amp;nbsp;null&amp;nbsp;.&amp;nbsp;The&amp;nbsp;null&amp;nbsp;type&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;a&amp;nbsp;name,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;be&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type.&amp;nbsp;However,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;assign&amp;nbsp;any&amp;nbsp;reference&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;null&amp;nbsp;type:&lt;br&gt;
String&amp;nbsp;firstName&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Runnable&amp;nbsp;[]&amp;nbsp;targets&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
Primitive&amp;nbsp;types&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;null&amp;nbsp;,&amp;nbsp;only&amp;nbsp;references.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;valid:&lt;br&gt;
int&amp;nbsp;x=&amp;nbsp;null;&amp;nbsp;//does&amp;nbsp;not&amp;nbsp;compile</questionanswer>
  </question>
  <question id="1_0_0_0_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;Literals&amp;nbsp;and&amp;nbsp;the&amp;nbsp;String&amp;nbsp;Pool&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Which&amp;nbsp;GOF&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;related&amp;nbsp;to&amp;nbsp;String&amp;nbsp;poll&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;new&amp;nbsp;keyword&amp;nbsp;is&amp;nbsp;not&amp;nbsp;required&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;String&amp;nbsp;object&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;you?&amp;#8221;&amp;nbsp;because&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;string&amp;nbsp;literal.&amp;nbsp;String&amp;nbsp;literals&amp;nbsp;get&amp;nbsp;special&amp;nbsp;treatment&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Behind&amp;nbsp;the&amp;nbsp;scenes,&lt;br&gt;
the&amp;nbsp;JVM&amp;nbsp;instantiates&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object&amp;nbsp;for&amp;nbsp;&amp;#8220;How&amp;nbsp;are&amp;nbsp;you?&amp;#8221;&amp;nbsp;and&amp;nbsp;stores&amp;nbsp;it&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;pool.&lt;br&gt;
The&amp;nbsp;greeting&amp;nbsp;reference&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;this&amp;nbsp;String&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;Because&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;immutable&amp;nbsp;(which&amp;nbsp;means&amp;nbsp;they&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;changed),&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;can&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;optimize&amp;nbsp;the&lt;br&gt;
use&amp;nbsp;of&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;by&amp;nbsp;allowing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;two&amp;nbsp;String&amp;nbsp;references&amp;nbsp;actually&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;string&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pool,&amp;nbsp;as&lt;br&gt;
shown&amp;nbsp;in&amp;nbsp;the&amp;nbsp;following&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
String&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;;&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;might&amp;nbsp;think&amp;nbsp;if&amp;nbsp;the&amp;nbsp;two&amp;nbsp;references&amp;nbsp;point&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object,&amp;nbsp;then&amp;nbsp;changing&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;one&amp;nbsp;object&lt;br&gt;
would&amp;nbsp;inadvertently&amp;nbsp;change&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;other.&amp;nbsp;But&amp;nbsp;String&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable,&amp;nbsp;so&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;statement&amp;nbsp;only&amp;nbsp;changes&amp;nbsp;s2:&lt;br&gt;
&lt;br&gt;
s2&amp;nbsp;=&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;reference&amp;nbsp;s2&amp;nbsp;now&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;Jersey&amp;#8221;,&amp;nbsp;but&amp;nbsp;s1&amp;nbsp;still&amp;nbsp;points&amp;nbsp;to&amp;nbsp;&amp;#8220;New&amp;nbsp;York&amp;#8221;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='680'&amp;nbsp;height='600'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/java_string_pool.png'/&gt;&lt;br&gt;
&lt;br&gt;
!!!!!&amp;nbsp;___&amp;nbsp;Stackofervlow:&lt;br&gt;
The&amp;nbsp;string&amp;nbsp;pool&amp;nbsp;is&amp;nbsp;the&amp;nbsp;JVM's&amp;nbsp;particular&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;interning:&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;science,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;a&amp;nbsp;method&amp;nbsp;of&amp;nbsp;storing&amp;nbsp;only&amp;nbsp;one&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;each&amp;nbsp;distinct&amp;nbsp;string&amp;nbsp;value,&amp;nbsp;which&amp;nbsp;must&amp;nbsp;be&amp;nbsp;immutable.&amp;nbsp;Interning&amp;nbsp;strings&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;makes&amp;nbsp;some&amp;nbsp;string&amp;nbsp;processing&amp;nbsp;tasks&amp;nbsp;more&amp;nbsp;time-&amp;nbsp;or&amp;nbsp;space-efficient&amp;nbsp;at&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;requiring&amp;nbsp;more&amp;nbsp;time&amp;nbsp;when&amp;nbsp;the&amp;nbsp;string&amp;nbsp;is&amp;nbsp;created&amp;nbsp;or&amp;nbsp;interned.&amp;nbsp;The&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;distinct&amp;nbsp;values&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool.&lt;br&gt;
&lt;br&gt;
Basically,&amp;nbsp;a&amp;nbsp;string&amp;nbsp;intern&amp;nbsp;pool&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;runtime&amp;nbsp;to&amp;nbsp;save&amp;nbsp;memory&amp;nbsp;by&amp;nbsp;preserving&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;immutable&amp;nbsp;strings&amp;nbsp;in&amp;nbsp;a&amp;nbsp;pool&amp;nbsp;so&amp;nbsp;that&amp;nbsp;areas&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&amp;nbsp;can&amp;nbsp;reuse&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;common&amp;nbsp;strings&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;multiple&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;an&amp;nbsp;interesting&amp;nbsp;side&amp;nbsp;note,&amp;nbsp;string&amp;nbsp;interning&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;flyweight&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;design&amp;nbsp;pattern:&lt;br&gt;
&lt;br&gt;
__&amp;nbsp;Flyweight&amp;nbsp;__&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern.&amp;nbsp;A&amp;nbsp;flyweight&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&lt;br&gt;
that&amp;nbsp;minimizes&amp;nbsp;memory&amp;nbsp;use&amp;nbsp;by&amp;nbsp;sharing&amp;nbsp;as&amp;nbsp;much&amp;nbsp;data&amp;nbsp;as&amp;nbsp;possible&lt;br&gt;
with&amp;nbsp;other&amp;nbsp;similar&amp;nbsp;objects;&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;use&amp;nbsp;objects&lt;br&gt;
in&amp;nbsp;large&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;repeated&amp;nbsp;representation&amp;nbsp;would&amp;nbsp;use&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unacceptable&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
</questions>
