<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_3_2_0" name="Udemy15VideosQuestions" nofquestions="14" nofsubcategories="0" filename="udemy15videosquestions1_0_0_3_2_0.xml">
  <question id="1_0_0_3_2_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part&amp;nbsp;1:&amp;nbsp;What&amp;nbsp;are&amp;nbsp;ways&amp;nbsp;of&amp;nbsp;creating/starting&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Ways&amp;nbsp;of&amp;nbsp;starting/creating&amp;nbsp;threads&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;Extends&amp;nbsp;thread&lt;br&gt;
package&amp;nbsp;com.my.part1StartThreadsWays;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ExtendsThread&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtendsThread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ExtendsThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtendsThread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ExtendsThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
2)&lt;br&gt;
package&amp;nbsp;com.my.part1StartThreadsWays;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ImplementsRunnable&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ImplementsRunnable());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ImplementsRunnable());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
3)&amp;nbsp;Anonymous&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;lambdas&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.my.part1StartThreadsWays;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;AnonymousRunnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part2&amp;nbsp;:&amp;nbsp;What&amp;nbsp;is&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://tutorials.jenkov.com/java-concurrency/volatile.html&lt;br&gt;
======================================&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;guarantees&amp;nbsp;visibility&amp;nbsp;of&amp;nbsp;changes&amp;nbsp;to&amp;nbsp;variables&amp;nbsp;across&amp;nbsp;threads.&lt;br&gt;
This&amp;nbsp;may&amp;nbsp;sound&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;abstract,&amp;nbsp;so&amp;nbsp;let&amp;nbsp;me&amp;nbsp;elaborate.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;a&amp;nbsp;multithreaded&amp;nbsp;application&amp;nbsp;where&amp;nbsp;the&amp;nbsp;threads&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;non-volatile&amp;nbsp;variables,&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;may&amp;nbsp;copy&amp;nbsp;variables&amp;nbsp;from&amp;nbsp;main&amp;nbsp;memory&lt;br&gt;
into&amp;nbsp;a&amp;nbsp;CPU&amp;nbsp;cache&amp;nbsp;while&amp;nbsp;working&amp;nbsp;on&amp;nbsp;them,&amp;nbsp;for&amp;nbsp;performance&amp;nbsp;reasons.&amp;nbsp;If&amp;nbsp;your&amp;nbsp;computer&amp;nbsp;contains&amp;nbsp;more&amp;nbsp;than&amp;nbsp;one&amp;nbsp;CPU,&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;may&amp;nbsp;run&lt;br&gt;
on&amp;nbsp;a&amp;nbsp;different&amp;nbsp;CPU.&amp;nbsp;That&amp;nbsp;means,&amp;nbsp;that&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;may&amp;nbsp;copy&amp;nbsp;the&amp;nbsp;variables&amp;nbsp;into&amp;nbsp;the&amp;nbsp;CPU&amp;nbsp;cache&amp;nbsp;of&amp;nbsp;different&amp;nbsp;CPUs.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;illustrated&amp;nbsp;here:&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br&gt;
volatile&amp;nbsp;only&amp;nbsp;ensures,&amp;nbsp;that&amp;nbsp;at&amp;nbsp;the&amp;nbsp;moment&amp;nbsp;of&amp;nbsp;access&amp;nbsp;of&amp;nbsp;such&amp;nbsp;a&amp;nbsp;variable,&amp;nbsp;the&amp;nbsp;new&amp;nbsp;value&amp;nbsp;will&amp;nbsp;be&amp;nbsp;immediately&amp;nbsp;visible&amp;nbsp;to&lt;br&gt;
all&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;and&amp;nbsp;the&amp;nbsp;order&amp;nbsp;of&amp;nbsp;execution&amp;nbsp;ensures,&amp;nbsp;that&amp;nbsp;the&amp;nbsp;code&amp;nbsp;is&amp;nbsp;at&amp;nbsp;the&amp;nbsp;state&amp;nbsp;you&amp;nbsp;would&amp;nbsp;expect&amp;nbsp;it&amp;nbsp;to&amp;nbsp;be.&lt;br&gt;
==============&lt;br&gt;
http://stackoverflow.com/questions/19744508/volatile-vs-atomic&lt;br&gt;
Volatile&amp;nbsp;and&amp;nbsp;Atomic&amp;nbsp;are&amp;nbsp;two&amp;nbsp;different&amp;nbsp;concepts.&amp;nbsp;Volatile&amp;nbsp;ensures,&amp;nbsp;that&amp;nbsp;a&amp;nbsp;certain,&amp;nbsp;expected&amp;nbsp;(memory)&amp;nbsp;state&amp;nbsp;is&amp;nbsp;true&amp;nbsp;across&lt;br&gt;
different&amp;nbsp;threads,&amp;nbsp;while&amp;nbsp;Atomics&amp;nbsp;ensure&amp;nbsp;that&amp;nbsp;operation&amp;nbsp;on&amp;nbsp;variables&amp;nbsp;are&amp;nbsp;performed&amp;nbsp;atomically.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Volatile&amp;nbsp;eradicates&amp;nbsp;visibility&amp;nbsp;problem&amp;nbsp;but&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;deal&amp;nbsp;with&amp;nbsp;atomicity.&amp;nbsp;Volatile&amp;nbsp;will&amp;nbsp;prevent&amp;nbsp;compiler&amp;nbsp;to&amp;nbsp;reorder&amp;nbsp;the&amp;nbsp;instruction&lt;br&gt;
which&amp;nbsp;involves&amp;nbsp;write&amp;nbsp;and&amp;nbsp;subsequent&amp;nbsp;read&amp;nbsp;of&amp;nbsp;a&amp;nbsp;volatile&amp;nbsp;variable.&amp;nbsp;e.g.&amp;nbsp;k++&amp;nbsp;Here&amp;nbsp;k++&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;single&amp;nbsp;machine&amp;nbsp;instruction&amp;nbsp;rather&amp;nbsp;it&amp;nbsp;is&amp;nbsp;three&amp;nbsp;machine&amp;nbsp;instructions.&lt;br&gt;
&lt;br&gt;
copy&amp;nbsp;the&amp;nbsp;value&amp;nbsp;to&amp;nbsp;register&lt;br&gt;
increment&amp;nbsp;it&lt;br&gt;
place&amp;nbsp;it&amp;nbsp;back&lt;br&gt;
So&amp;nbsp;even&amp;nbsp;though&amp;nbsp;you&amp;nbsp;declare&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;volatile&amp;nbsp;it&amp;nbsp;will&amp;nbsp;not&amp;nbsp;make&amp;nbsp;this&amp;nbsp;operation&amp;nbsp;atomic,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;can&lt;br&gt;
see&amp;nbsp;a&amp;nbsp;intermediate&amp;nbsp;result&amp;nbsp;which&amp;nbsp;is&amp;nbsp;a&amp;nbsp;stale&amp;nbsp;or&amp;nbsp;unwanted&amp;nbsp;value&amp;nbsp;for&amp;nbsp;the&amp;nbsp;other&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==============&lt;br&gt;
&lt;br&gt;
Simple&amp;nbsp;example:&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part2VolatileKeyword&amp;nbsp;extends&amp;nbsp;Thread{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;volatile&amp;nbsp;boolean&amp;nbsp;running&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;//&amp;nbsp;!!!&amp;nbsp;Must&amp;nbsp;be&amp;nbsp;volatile,&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;what&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;have&amp;nbsp;it&amp;nbsp;is&amp;nbsp;own&amp;nbsp;running&amp;nbsp;variable&amp;nbsp;(and&amp;nbsp;not&amp;nbsp;cached&amp;nbsp;copy)&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(running){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Running");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(100);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part2VolatileKeyword&amp;nbsp;proc1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part2VolatileKeyword();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;proc1.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scanner&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;scanner.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;proc1.shutdown();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;shutdown()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;running&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;wrong&amp;nbsp;in&amp;nbsp;such&amp;nbsp;code&amp;nbsp;?&amp;nbsp;&lt;br&gt;
How&amp;nbsp;synchronization&amp;nbsp;could&amp;nbsp;help&amp;nbsp;?&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.atomic.AtomicInteger;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part3AppSynchronizationKeyword&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Incrementing&amp;quot;);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part3AppSynchronizationKeyword&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part3AppSynchronizationKeyword();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.doWork();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;doWork()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;atomicCount.incrementAndGet();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;expect&amp;nbsp;20000&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(count);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>We&amp;nbsp;expect&amp;nbsp;20000,&amp;nbsp;but&amp;nbsp;sometimes&amp;nbsp;get&amp;nbsp;number&amp;nbsp;less&amp;nbsp;than&amp;nbsp;20000,&amp;nbsp;this&amp;nbsp;is&amp;nbsp;&lt;br&gt;
because&amp;nbsp;++&amp;nbsp;is&amp;nbsp;not&amp;nbsp;atomic&amp;nbsp;operation&amp;nbsp;(when&amp;nbsp;two&amp;nbsp;threads&amp;nbsp;increment&amp;nbsp;value&amp;nbsp;in&amp;nbsp;same&amp;nbsp;time,&amp;nbsp;only&amp;nbsp;one&amp;nbsp;increment&amp;nbsp;will&amp;nbsp;be&amp;nbsp;performed)&lt;br&gt;
&lt;br&gt;
Possible&amp;nbsp;solutions&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1)&amp;nbsp;Use&amp;nbsp;atomic&amp;nbsp;varialbe&amp;nbsp;(from&amp;nbsp;java.concurrent&amp;nbsp;package)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2)&amp;nbsp;Create&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;'public&amp;nbsp;void&amp;nbsp;synchronized&amp;nbsp;increment(){count++}'&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Solution&amp;nbsp;with&amp;nbsp;atomic&amp;nbsp;variable&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.atomic.AtomicInteger;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;22.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part3AppSynchronizationKeyword&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;//&amp;nbsp;making&amp;nbsp;volatile&amp;nbsp;DOESN'T&amp;nbsp;help&amp;nbsp;!!!&amp;nbsp;,&amp;nbsp;we&amp;nbsp;should&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;AtomicInteger&amp;nbsp;atomicCount&amp;nbsp;=&amp;nbsp;new&amp;nbsp;AtomicInteger(0);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Incrementing");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part3AppSynchronizationKeyword&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part3AppSynchronizationKeyword();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.doWork();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;doWork()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;atomicCount.incrementAndGet();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;atomicCount.incrementAndGet();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;expect&amp;nbsp;20000&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(count);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(atomicCount.get());&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;also&amp;nbsp;can&amp;nbsp;use&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;incrementCount(){&amp;nbsp;count++},&amp;nbsp;but&amp;nbsp;Atomic&amp;nbsp;integer&amp;nbsp;is&amp;nbsp;better))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Synchronized&amp;nbsp;blocks&amp;nbsp;in&amp;nbsp;java&amp;nbsp;,&amp;nbsp;when&amp;nbsp;to&amp;nbsp;use&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>You&amp;nbsp;do&amp;nbsp;not&amp;nbsp;have&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;a&amp;nbsp;whole&amp;nbsp;method.&amp;nbsp;Sometimes&amp;nbsp;it&amp;nbsp;is&amp;nbsp;preferable&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;only&amp;nbsp;part&amp;nbsp;of&amp;nbsp;a&amp;nbsp;method.&lt;br&gt;
Java&amp;nbsp;synchronized&amp;nbsp;blocks&amp;nbsp;inside&amp;nbsp;methods&amp;nbsp;makes&amp;nbsp;this&amp;nbsp;possible.&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;block&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;code&amp;nbsp;inside&amp;nbsp;an&amp;nbsp;unsynchronized&amp;nbsp;Java&amp;nbsp;method:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(int&amp;nbsp;value){&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized(this){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.count&amp;nbsp;+=&amp;nbsp;value;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Monitor&amp;nbsp;&lt;br&gt;
This&amp;nbsp;example&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;synchronized&amp;nbsp;block&amp;nbsp;construct&amp;nbsp;to&amp;nbsp;mark&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code&amp;nbsp;as&amp;nbsp;synchronized.&lt;br&gt;
This&amp;nbsp;code&amp;nbsp;will&amp;nbsp;now&amp;nbsp;execute&amp;nbsp;as&amp;nbsp;if&amp;nbsp;it&amp;nbsp;was&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method.&lt;br&gt;
&lt;br&gt;
Notice&amp;nbsp;how&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;synchronized&amp;nbsp;block&amp;nbsp;construct&amp;nbsp;takes&amp;nbsp;an&amp;nbsp;object&amp;nbsp;in&amp;nbsp;parentheses.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;example&amp;nbsp;"this"&amp;nbsp;is&amp;nbsp;used,&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;the&amp;nbsp;add&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called&amp;nbsp;on.&amp;nbsp;The&amp;nbsp;object&amp;nbsp;taken&amp;nbsp;in&amp;nbsp;the&amp;nbsp;parentheses&amp;nbsp;by&amp;nbsp;the&amp;nbsp;synchronized&amp;nbsp;construct&amp;nbsp;is&amp;nbsp;called&amp;nbsp;a&amp;nbsp;MONITOR&amp;nbsp;object.&lt;br&gt;
The&amp;nbsp;code&amp;nbsp;is&amp;nbsp;said&amp;nbsp;to&amp;nbsp;be&amp;nbsp;synchronized&amp;nbsp;on&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;object.&amp;nbsp;A&amp;nbsp;synchronized&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;object&amp;nbsp;it&amp;nbsp;belongs&amp;nbsp;to&amp;nbsp;as&amp;nbsp;monitor&amp;nbsp;object.&lt;br&gt;
&lt;br&gt;
Only&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;execute&amp;nbsp;inside&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;code&amp;nbsp;block&amp;nbsp;synchronized&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;monitor&amp;nbsp;object.&lt;br&gt;
=====================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;with&amp;nbsp;two&amp;nbsp;locks&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(time&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;this&amp;nbsp;program&amp;nbsp;is&amp;nbsp;approximately&amp;nbsp;2100&amp;nbsp;ms,&amp;nbsp;and&amp;nbsp;two&amp;nbsp;lists&amp;nbsp;contains&amp;nbsp;2000&amp;nbsp;elements)&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part4MultipleLocksandSynchronizedBlocks{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;list1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;list2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Object&amp;nbsp;lock1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Object&amp;nbsp;lock2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;stage1(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock1){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list1.add(random.nextInt());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;stage2(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock2){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list2.add(random.nextInt());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;process(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stage1();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stage2();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;void&amp;nbsp;doWork()&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;start&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;process();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;process();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;end&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Time&amp;nbsp;take&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;(end&amp;nbsp;-&amp;nbsp;start));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("List1&amp;nbsp;size:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;list1.size()&amp;nbsp;+&amp;nbsp;";&amp;nbsp;List2&amp;nbsp;size:"&amp;nbsp;+&amp;nbsp;list2.size());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Part4MultipleLocksandSynchronizedBlocks().doWork();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Create&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;executor&amp;nbsp;with&amp;nbsp;2&amp;nbsp;threads,&amp;nbsp;and&amp;nbsp;submit&amp;nbsp;5&amp;nbsp;Runnables.&lt;br&gt;
ExecutorService.shutdown&amp;nbsp;vs&amp;nbsp;ExetutorService.shutdownNow.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;while&amp;nbsp;submitted&amp;nbsp;tasks&amp;nbsp;are&amp;nbsp;completed?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.ExecutorService;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.Executors;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.TimeUnit;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part5ThreadPools&amp;nbsp;implements&amp;nbsp;Runnable{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;id;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Part5ThreadPools(int&amp;nbsp;id){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.id&amp;nbsp;=&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Started:"&amp;nbsp;+&amp;nbsp;id);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(5000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Completed:"&amp;nbsp;+&amp;nbsp;id);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExecutorService&amp;nbsp;executor&amp;nbsp;=&amp;nbsp;Executors.newFixedThreadPool(2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;5;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.submit(new&amp;nbsp;Part5ThreadPools(i));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("All&amp;nbsp;tasks&amp;nbsp;submitted");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.shutdown();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.awaitTermination(1,&amp;nbsp;TimeUnit.HOURS);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("All&amp;nbsp;tasks&amp;nbsp;completed");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//http://stackoverflow.com/questions/11520189/difference-between-shutdown-and-shutdownnow-of-executor-service&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*In&amp;nbsp;summary,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;think&amp;nbsp;of&amp;nbsp;it&amp;nbsp;that&amp;nbsp;way:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;shutdown()&amp;nbsp;will&amp;nbsp;just&amp;nbsp;tell&amp;nbsp;the&amp;nbsp;executor&amp;nbsp;service&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can't&amp;nbsp;accept&amp;nbsp;new&amp;nbsp;tasks,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;but&amp;nbsp;the&amp;nbsp;already&amp;nbsp;submitted&amp;nbsp;tasks&amp;nbsp;continue&amp;nbsp;to&amp;nbsp;run&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;shutdownNow()&amp;nbsp;will&amp;nbsp;do&amp;nbsp;the&amp;nbsp;same&amp;nbsp;AND&amp;nbsp;will&amp;nbsp;try&amp;nbsp;to&amp;nbsp;cancel&amp;nbsp;the&amp;nbsp;already&amp;nbsp;submitted&amp;nbsp;tasks&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;by&amp;nbsp;interrupting&amp;nbsp;the&amp;nbsp;relevant&amp;nbsp;threads.&amp;nbsp;Note&amp;nbsp;that&amp;nbsp;if&amp;nbsp;your&amp;nbsp;tasks&amp;nbsp;ignore&amp;nbsp;the&amp;nbsp;interruption,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shutdownNow&amp;nbsp;will&amp;nbsp;behave&amp;nbsp;exactly&amp;nbsp;the&amp;nbsp;same&amp;nbsp;way&amp;nbsp;as&amp;nbsp;shutdown.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
==============================================&lt;br&gt;
P.S&amp;nbsp;awaitTermination&lt;br&gt;
&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;timeout&amp;nbsp;the&amp;nbsp;maximum&amp;nbsp;time&amp;nbsp;to&amp;nbsp;wait&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;unit&amp;nbsp;the&amp;nbsp;time&amp;nbsp;unit&amp;nbsp;of&amp;nbsp;the&amp;nbsp;timeout&amp;nbsp;argument&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@return&amp;nbsp;{@code&amp;nbsp;true}&amp;nbsp;if&amp;nbsp;this&amp;nbsp;executor&amp;nbsp;terminated&amp;nbsp;and&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{@code&amp;nbsp;false}&amp;nbsp;if&amp;nbsp;the&amp;nbsp;timeout&amp;nbsp;elapsed&amp;nbsp;before&amp;nbsp;termination&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@throws&amp;nbsp;InterruptedException&amp;nbsp;if&amp;nbsp;interrupted&amp;nbsp;while&amp;nbsp;waiting&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;awaitTermination(long&amp;nbsp;timeout,&amp;nbsp;TimeUnit&amp;nbsp;unit)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throws&amp;nbsp;InterruptedException;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;https://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html&lt;br&gt;
//&lt;br&gt;
//&lt;br&gt;
&lt;br&gt;
OUTPTUT:&lt;br&gt;
&lt;br&gt;
Started:0&lt;br&gt;
Started:1&lt;br&gt;
All&amp;nbsp;tasks&amp;nbsp;submitted&lt;br&gt;
Completed:1&lt;br&gt;
Completed:0&lt;br&gt;
Started:2&lt;br&gt;
Started:3&lt;br&gt;
Completed:2&lt;br&gt;
Completed:3&lt;br&gt;
Started:4&lt;br&gt;
Completed:4&lt;br&gt;
All&amp;nbsp;tasks&amp;nbsp;completed</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CountDownLatch&amp;nbsp;class,&amp;nbsp;describe.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;almost&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;CyclicBarier,&amp;nbsp;describe&amp;nbsp;difference.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>java.util.concurrent.CountDownLatch&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;synchronization&amp;nbsp;aid&amp;nbsp;that&amp;nbsp;allows&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;operations&amp;nbsp;being&amp;nbsp;performed&amp;nbsp;in&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;completes.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;CountDownLatch&amp;nbsp;is&amp;nbsp;initialized&amp;nbsp;with&amp;nbsp;a&amp;nbsp;given&amp;nbsp;count.&amp;nbsp;The&amp;nbsp;await&amp;nbsp;methods&amp;nbsp;block&amp;nbsp;until&amp;nbsp;the&amp;nbsp;current&amp;nbsp;count&amp;nbsp;reaches&amp;nbsp;zero&amp;nbsp;due&amp;nbsp;to&amp;nbsp;invocations&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;countDown()&amp;nbsp;method,&amp;nbsp;after&amp;nbsp;which&amp;nbsp;all&amp;nbsp;waiting&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;released&amp;nbsp;and&amp;nbsp;any&amp;nbsp;subsequent&amp;nbsp;invocations&amp;nbsp;of&amp;nbsp;await&amp;nbsp;return&amp;nbsp;immediately.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;one-shot&amp;nbsp;phenomenon&amp;nbsp;--&amp;nbsp;the&amp;nbsp;count&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;reset.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;need&amp;nbsp;a&amp;nbsp;version&amp;nbsp;that&amp;nbsp;resets&amp;nbsp;the&amp;nbsp;count,&amp;nbsp;consider&amp;nbsp;using&amp;nbsp;a&amp;nbsp;CyclicBarrier.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example:&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.CountDownLatch;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.ExecutorService;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.Executors;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;27.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part6CountDownLatches&amp;nbsp;implements&amp;nbsp;Runnable{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;CountDownLatch&amp;nbsp;latch;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Part6CountDownLatches(CountDownLatch&amp;nbsp;latch)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.latch&amp;nbsp;=&amp;nbsp;latch;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(2000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;"&amp;nbsp;+&amp;nbsp;System.currentTimeMillis()/1000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;latch.countDown();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExecutorService&amp;nbsp;executor&amp;nbsp;=&amp;nbsp;Executors.newFixedThreadPool(2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CountDownLatch&amp;nbsp;latch&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CountDownLatch(3);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i=0;i&lt;3;i++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.submit(new&amp;nbsp;Part6CountDownLatches(latch));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;latch.await();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("TASKS&amp;nbsp;COMPLETED");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.shutdown();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Output:&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358449&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358449&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358451&lt;br&gt;
TASKS&amp;nbsp;COMPLETED&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;comment&amp;nbsp;block&amp;nbsp;with&amp;nbsp;'latch.await()',&amp;nbsp;then&amp;nbsp;Output&amp;nbsp;will&amp;nbsp;be:&lt;br&gt;
TASKS&amp;nbsp;COMPLETED&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358507&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358507&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;some&amp;nbsp;long&amp;nbsp;running&amp;nbsp;task&amp;nbsp;1483358509</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Implement&amp;nbsp;Producer-consumer&amp;nbsp;pattern&amp;nbsp;using,&amp;nbsp;ArrayBlockingQueue.&lt;br&gt;
ArrayBlockingQueue&amp;nbsp;-&amp;nbsp;describe&amp;nbsp;this&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;output&amp;nbsp;?&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.ArrayBlockingQueue;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.BlockingQueue;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part7ConsumerProducerUsingArrayBlockingQueue&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;BlockingQueue&lt;Integer&gt;&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayBlockingQueue(10);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part7ConsumerProducerUsingArrayBlockingQueue&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part7ConsumerProducerUsingArrayBlockingQueue();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.procuder();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.consumer();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;procuder()&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(55);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;queue.put(random.nextInt());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;consumer()&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(100);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;value&amp;nbsp;=&amp;nbsp;queue.take();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Taken&amp;nbsp;value:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;value&amp;nbsp;+&amp;nbsp;&amp;quot;;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;queue.size());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>java.util.concurrent.ArrayBlockingQueue&lt;E&gt;&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;classic&amp;nbsp;"bounded&amp;nbsp;buffer",&amp;nbsp;in&amp;nbsp;which&amp;nbsp;a&amp;nbsp;fixed-sized&amp;nbsp;array&amp;nbsp;holds&amp;nbsp;elements&amp;nbsp;inserted&amp;nbsp;by&amp;nbsp;producers&amp;nbsp;and&amp;nbsp;extracted&amp;nbsp;by&amp;nbsp;consumers.&lt;br&gt;
Once&amp;nbsp;created,&amp;nbsp;the&amp;nbsp;capacity&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;changed.&amp;nbsp;Attempts&amp;nbsp;to&amp;nbsp;put&amp;nbsp;an&amp;nbsp;element&amp;nbsp;into&amp;nbsp;a&amp;nbsp;full&amp;nbsp;queue&amp;nbsp;will&amp;nbsp;result&amp;nbsp;in&amp;nbsp;the&amp;nbsp;operation&amp;nbsp;blocking;&lt;br&gt;
attempts&amp;nbsp;to&amp;nbsp;take&amp;nbsp;an&amp;nbsp;element&amp;nbsp;from&amp;nbsp;an&amp;nbsp;empty&amp;nbsp;queue&amp;nbsp;will&amp;nbsp;similarly&amp;nbsp;block.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;capacity&amp;nbsp;is&amp;nbsp;reached,&amp;nbsp;then&amp;nbsp;adding&amp;nbsp;new&amp;nbsp;elements&amp;nbsp;will&amp;nbsp;block&amp;nbsp;execution&amp;nbsp;UNTIL&amp;nbsp;first&amp;nbsp;element&amp;nbsp;will&amp;nbsp;be&amp;nbsp;consumed!!!!&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Output&amp;nbsp;is&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;293769786;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;0&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1602208059;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;1&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;2053949583;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;2&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1470910999;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;3&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1363053800;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;4&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1345190556;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;4&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;875152182;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;5&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-39232013;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;6&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-79859801;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;7&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-912771658;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;8&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1134166040;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-218235245;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1642684023;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1865329537;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1728851534;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;1882664025;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-108846491;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-415915968;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-1700543927;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;1547766920;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;936902395;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-220559176;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-957412035;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;10&lt;br&gt;
Taken&amp;nbsp;value:&amp;nbsp;-247104963;&amp;nbsp;Queue&amp;nbsp;size&amp;nbsp;is:&amp;nbsp;9&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
NOTE&amp;nbsp;!!!&amp;nbsp;Look&amp;nbsp;at&amp;nbsp;'9'&amp;nbsp;and&amp;nbsp;'10'&amp;nbsp;values&amp;nbsp;(and&amp;nbsp;think&amp;nbsp;why&amp;nbsp;=))</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;'wait'&amp;nbsp;and&amp;nbsp;'notify'&amp;nbsp;methods&amp;nbsp;?&lt;br&gt;
Provide&amp;nbsp;simple&amp;nbsp;hello&amp;nbsp;world&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>!!!&amp;nbsp;wait&amp;nbsp;and&amp;nbsp;notify&amp;nbsp;can&amp;nbsp;be&amp;nbsp;executed&amp;nbsp;only&amp;nbsp;in&amp;nbsp;synchronized&amp;nbsp;blocks,&amp;nbsp;and&amp;nbsp;only&amp;nbsp;ON&amp;nbsp;monitor&amp;nbsp;!!!!&lt;br&gt;
&lt;br&gt;
http://howtodoinjava.com/core-java/multi-threading/how-to-work-with-wait-notify-and-notifyall-in-java/&lt;br&gt;
The&amp;nbsp;Object&amp;nbsp;class&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;has&amp;nbsp;three&amp;nbsp;final&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;allow&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;communicate&amp;nbsp;about&amp;nbsp;the&amp;nbsp;locked&amp;nbsp;status&amp;nbsp;of&amp;nbsp;a&amp;nbsp;resource.&amp;nbsp;These&amp;nbsp;are&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1)&amp;nbsp;wait()&amp;nbsp;:&amp;nbsp;It&amp;nbsp;tells&amp;nbsp;the&amp;nbsp;calling&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;give&amp;nbsp;up&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;go&amp;nbsp;to&amp;nbsp;sleep&amp;nbsp;until&amp;nbsp;some&amp;nbsp;other&amp;nbsp;thread&lt;br&gt;
enters&amp;nbsp;the&amp;nbsp;same&amp;nbsp;monitor&amp;nbsp;and&amp;nbsp;calls&amp;nbsp;notify().&amp;nbsp;The&amp;nbsp;wait()&amp;nbsp;method&amp;nbsp;releases&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;waiting&amp;nbsp;and&amp;nbsp;reacquires&lt;br&gt;
the&amp;nbsp;lock&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;returning&amp;nbsp;from&amp;nbsp;the&amp;nbsp;wait()&amp;nbsp;method.&amp;nbsp;The&amp;nbsp;wait()&amp;nbsp;method&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;tightly&amp;nbsp;integrated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;synchronization&amp;nbsp;lock,&lt;br&gt;
using&amp;nbsp;a&amp;nbsp;feature&amp;nbsp;not&amp;nbsp;available&amp;nbsp;directly&amp;nbsp;from&amp;nbsp;the&amp;nbsp;synchronization&amp;nbsp;mechanism.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;possible&amp;nbsp;for&amp;nbsp;us&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;wait()&amp;nbsp;method&amp;nbsp;purely&amp;nbsp;in&amp;nbsp;Java:&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;native&amp;nbsp;method.&lt;br&gt;
General&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;calling&amp;nbsp;wait()&amp;nbsp;method&amp;nbsp;is&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
synchronized(&amp;nbsp;lockObject&amp;nbsp;)&lt;br&gt;
{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(&amp;nbsp;!&amp;nbsp;condition&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockObject.wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//take&amp;nbsp;the&amp;nbsp;action&amp;nbsp;here;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2)notify()&amp;nbsp;:&amp;nbsp;It&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;one&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;called&amp;nbsp;wait()&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object.&amp;nbsp;It&amp;nbsp;should&amp;nbsp;be&lt;br&gt;
noted&amp;nbsp;that&amp;nbsp;calling&amp;nbsp;notify()&amp;nbsp;does&amp;nbsp;not&amp;nbsp;actually&amp;nbsp;give&amp;nbsp;up&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;a&amp;nbsp;resource.&amp;nbsp;It&amp;nbsp;tells&amp;nbsp;a&amp;nbsp;waiting&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;that&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;wake&amp;nbsp;up.&lt;br&gt;
However,&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;not&amp;nbsp;actually&amp;nbsp;given&amp;nbsp;up&amp;nbsp;until&amp;nbsp;the&amp;nbsp;notifier’s&amp;nbsp;synchronized&amp;nbsp;block&lt;br&gt;
has&amp;nbsp;completed.&amp;nbsp;So,&amp;nbsp;if&amp;nbsp;a&amp;nbsp;notifier&amp;nbsp;calls&amp;nbsp;notify()&amp;nbsp;on&amp;nbsp;a&amp;nbsp;resource&amp;nbsp;but&amp;nbsp;the&amp;nbsp;notifier&amp;nbsp;still&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;10&amp;nbsp;seconds&amp;nbsp;of&lt;br&gt;
actions&amp;nbsp;on&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;within&amp;nbsp;its&amp;nbsp;synchronized&amp;nbsp;block,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;had&amp;nbsp;been&amp;nbsp;waiting&amp;nbsp;will&amp;nbsp;need&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;at&amp;nbsp;least&lt;br&gt;
another&amp;nbsp;additional&amp;nbsp;10&amp;nbsp;seconds&amp;nbsp;for&amp;nbsp;the&amp;nbsp;notifier&amp;nbsp;to&amp;nbsp;release&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&amp;nbsp;object,&amp;nbsp;even&amp;nbsp;though&amp;nbsp;notify()&amp;nbsp;had&amp;nbsp;been&amp;nbsp;called.&lt;br&gt;
&lt;br&gt;
synchronized(lockObject)&amp;nbsp;&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//establish_the_condition;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockObject.notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//any&amp;nbsp;additional&amp;nbsp;code&amp;nbsp;if&amp;nbsp;needed&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3)notifyAll()&amp;nbsp;:&amp;nbsp;It&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;all&amp;nbsp;the&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;called&amp;nbsp;wait()&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object.&lt;br&gt;
The&amp;nbsp;highest&amp;nbsp;priority&amp;nbsp;thread&amp;nbsp;will&amp;nbsp;run&amp;nbsp;first&amp;nbsp;in&amp;nbsp;most&amp;nbsp;of&amp;nbsp;the&amp;nbsp;situation,&amp;nbsp;though&amp;nbsp;not&amp;nbsp;guaranteed.&amp;nbsp;Other&amp;nbsp;things&amp;nbsp;are&amp;nbsp;same&amp;nbsp;as&amp;nbsp;notify()&amp;nbsp;method&amp;nbsp;above.&lt;br&gt;
General&amp;nbsp;syntax&amp;nbsp;for&amp;nbsp;calling&amp;nbsp;notify()&amp;nbsp;method&amp;nbsp;is&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
synchronized(lockObject)&amp;nbsp;&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;establish_the_condition;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockObject.notifyAll();&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
One&amp;nbsp;thread&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;user&amp;nbsp;type&amp;nbsp;line&amp;nbsp;of&amp;nbsp;text&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.ArrayBlockingQueue;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.BlockingQueue;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;27.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part8WaitNotifyHelloWorld&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;BlockingQueue&amp;nbsp;queue&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayBlockingQueue(10);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;consume(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scanner&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(this){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Type&amp;nbsp;text&amp;nbsp;line");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;scanner.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;produce()&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(this){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Producer&amp;nbsp;thread&amp;nbsp;running...");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Producer&amp;nbsp;resumed...");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("wait&amp;nbsp;and&amp;nbsp;notify");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part8WaitNotifyHelloWorld&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part8WaitNotifyHelloWorld();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.produce();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.consume();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Object().wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Implemente&amp;nbsp;consumer-producer&amp;nbsp;pattern&amp;nbsp;using&amp;nbsp;only&amp;nbsp;'wait'&amp;nbsp;and&amp;nbsp;'notify'.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Working&amp;nbsp;example&amp;nbsp;&amp;nbsp;&lt;br&gt;
(My&amp;nbsp;note:&amp;nbsp;both&amp;nbsp;consumer&amp;nbsp;and&amp;nbsp;producer&amp;nbsp;use&amp;nbsp;both&amp;nbsp;'wait'&amp;nbsp;and&amp;nbsp;'notify')&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.LinkedList;&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;27.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part9ConsumerProducerUsingLowLevel&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;LinkedList&lt;Integer&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;LIMIT&amp;nbsp;=&amp;nbsp;10;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Object&amp;nbsp;lock&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;produce()&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;value&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(list.size()&amp;nbsp;==&amp;nbsp;LIMIT){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Adding&amp;nbsp;to&amp;nbsp;list&amp;nbsp;value:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(value++);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;r&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(r.nextInt(100));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;consume()&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;r&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(list.size()==0){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print("List&amp;nbsp;size&amp;nbsp;is&amp;nbsp;"&amp;nbsp;+&amp;nbsp;list.size());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;value&amp;nbsp;=&amp;nbsp;list.removeFirst();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(";&amp;nbsp;value&amp;nbsp;is&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(r.nextInt(1000));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part9ConsumerProducerUsingLowLevel&amp;nbsp;part9ConsumerProducerUsingLowLevel&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part9ConsumerProducerUsingLowLevel();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;part9ConsumerProducerUsingLowLevel.produce();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;part9ConsumerProducerUsingLowLevel.consume();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;ReentrantLock&amp;nbsp;?&amp;nbsp;&lt;br&gt;
Why&amp;nbsp;use&amp;nbsp;a&amp;nbsp;ReentrantLock&amp;nbsp;if&amp;nbsp;one&amp;nbsp;can&amp;nbsp;use&amp;nbsp;synchronized(this)?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;reentrant&amp;nbsp;mutual&amp;nbsp;exclusion&amp;nbsp;Lock&amp;nbsp;with&amp;nbsp;the&amp;nbsp;same&amp;nbsp;basic&amp;nbsp;behavior&amp;nbsp;and&amp;nbsp;semantics&amp;nbsp;as&amp;nbsp;the&amp;nbsp;implicit&amp;nbsp;monitor&amp;nbsp;lock&amp;nbsp;accessed&lt;br&gt;
using&amp;nbsp;synchronized&amp;nbsp;methods&amp;nbsp;and&amp;nbsp;statements,&amp;nbsp;but&amp;nbsp;with&amp;nbsp;EXTENDED&amp;nbsp;capabilities.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;ReentrantLock&amp;nbsp;is&amp;nbsp;owned&amp;nbsp;by&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;last&amp;nbsp;successfully&amp;nbsp;locking,&amp;nbsp;but&amp;nbsp;not&amp;nbsp;yet&amp;nbsp;unlocking&amp;nbsp;it.&lt;br&gt;
A&amp;nbsp;thread&amp;nbsp;invoking&amp;nbsp;lock&amp;nbsp;will&amp;nbsp;return,&amp;nbsp;successfully&amp;nbsp;acquiring&amp;nbsp;the&amp;nbsp;lock,&amp;nbsp;when&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;not&amp;nbsp;owned&amp;nbsp;by&amp;nbsp;another&amp;nbsp;thread.&lt;br&gt;
The&amp;nbsp;method&amp;nbsp;will&amp;nbsp;return&amp;nbsp;immediately&amp;nbsp;if&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;already&amp;nbsp;owns&amp;nbsp;the&amp;nbsp;lock.&amp;nbsp;This&amp;nbsp;can&amp;nbsp;be&amp;nbsp;checked&amp;nbsp;using&amp;nbsp;methods&amp;nbsp;isHeldByCurrentThread(),&amp;nbsp;and&amp;nbsp;getHoldCount().&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
====&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;use&amp;nbsp;a&amp;nbsp;ReentrantLock&amp;nbsp;if&amp;nbsp;one&amp;nbsp;can&amp;nbsp;use&amp;nbsp;synchronized(this)?&lt;br&gt;
http://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1)&amp;nbsp;A&amp;nbsp;ReentrantLock&amp;nbsp;is&amp;nbsp;unstructured,&amp;nbsp;unlike&amp;nbsp;synchronized&amp;nbsp;constructs&amp;nbsp;--&amp;nbsp;i.e.&amp;nbsp;you&amp;nbsp;don't&amp;nbsp;need&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;block&amp;nbsp;structure&amp;nbsp;for&amp;nbsp;locking&amp;nbsp;and&amp;nbsp;can&amp;nbsp;even&amp;nbsp;hold&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;across&amp;nbsp;methods.&amp;nbsp;An&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
private&amp;nbsp;ReentrantLock&amp;nbsp;lock;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;foo()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;lock.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;bar()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
2)use&amp;nbsp;it&amp;nbsp;when&amp;nbsp;you&amp;nbsp;actually&amp;nbsp;need&amp;nbsp;something&amp;nbsp;it&amp;nbsp;provides&amp;nbsp;that&amp;nbsp;synchronized&amp;nbsp;doesn't,&amp;nbsp;like&amp;nbsp;timed&amp;nbsp;lock&amp;nbsp;waits,&amp;nbsp;interruptible&lt;br&gt;
lock&amp;nbsp;waits,&amp;nbsp;non-block-structured&amp;nbsp;locks,&amp;nbsp;multiple&amp;nbsp;condition&amp;nbsp;variables,&amp;nbsp;or&amp;nbsp;lock&amp;nbsp;polling.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;Extended&amp;nbsp;capabilities&amp;nbsp;of&amp;nbsp;reentrant&amp;nbsp;lock&amp;nbsp;include&amp;nbsp;:-&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;have&amp;nbsp;more&amp;nbsp;than&amp;nbsp;one&amp;nbsp;condition&amp;nbsp;variable&amp;nbsp;per&amp;nbsp;monitor.&amp;nbsp;Monitors&amp;nbsp;that&amp;nbsp;use&amp;nbsp;the&amp;nbsp;synchronized&amp;nbsp;keyword&amp;nbsp;can&amp;nbsp;only&amp;nbsp;have&amp;nbsp;one.&lt;br&gt;
This&amp;nbsp;means&amp;nbsp;reentrant&amp;nbsp;locks&amp;nbsp;support&amp;nbsp;more&amp;nbsp;than&amp;nbsp;one&amp;nbsp;wait()/notify()&amp;nbsp;queue.&amp;nbsp;2)&amp;nbsp;The&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;"fair".&amp;nbsp;"[fair]&amp;nbsp;locks&lt;br&gt;
favor&amp;nbsp;granting&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;longest-waiting&amp;nbsp;thread.&amp;nbsp;Otherwise&amp;nbsp;this&amp;nbsp;lock&amp;nbsp;does&amp;nbsp;not&amp;nbsp;guarantee&amp;nbsp;any&amp;nbsp;particular&amp;nbsp;access&amp;nbsp;order."&amp;nbsp;Synchronized&amp;nbsp;blocks&amp;nbsp;are&amp;nbsp;unfair.&lt;br&gt;
3)&amp;nbsp;The&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;check&amp;nbsp;if&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;being&amp;nbsp;held.&amp;nbsp;4)&amp;nbsp;The&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;get&amp;nbsp;the&amp;nbsp;list&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;waiting&amp;nbsp;on&amp;nbsp;the&amp;nbsp;lock.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=========&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;synchronize&amp;nbsp;increment&amp;nbsp;operations&amp;nbsp;with&amp;nbsp;ReentrantLock:&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.locks.Lock;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.locks.ReentrantLock;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;27.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part10ReentrantLocks&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Lock&amp;nbsp;lock&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ReentrantLock();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;firstThread()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increment();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;secondThread()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increment();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;increment()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finished()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Count&amp;nbsp;is&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;count);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part10ReentrantLocks&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part10ReentrantLocks();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.firstThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.secondThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.finished();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Output:&lt;br&gt;
Count&amp;nbsp;is&amp;nbsp;:20000</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;deadlock&amp;nbsp;?&lt;br&gt;
Provide&amp;nbsp;code&amp;nbsp;which&amp;nbsp;cause&amp;nbsp;dealock.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;detect&amp;nbsp;deadlock&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Deadlock&amp;nbsp;describes&amp;nbsp;a&amp;nbsp;situation&amp;nbsp;where&amp;nbsp;two&amp;nbsp;or&amp;nbsp;more&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;blocked&amp;nbsp;forever,&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;each&amp;nbsp;other.&lt;br&gt;
(in&amp;nbsp;my&amp;nbsp;understanding&amp;nbsp;to&amp;nbsp;cause&amp;nbsp;dealock&amp;nbsp;TWO&amp;nbsp;threads&amp;nbsp;should&amp;nbsp;obtain&amp;nbsp;two&amp;nbsp;locks&amp;nbsp;in&amp;nbsp;reverse&amp;nbsp;order)&lt;br&gt;
&lt;br&gt;
Very&amp;nbsp;simple&amp;nbsp;example&amp;nbsp;&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;03.01.17.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;VerySimpleDeadlockImplementation&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Object&amp;nbsp;lock1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Object&amp;nbsp;lock2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;thread1()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock1)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock2)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;thread2()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock2)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(lock1)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Deadlock&amp;nbsp;example");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VerySimpleDeadlockImplementation&amp;nbsp;app&amp;nbsp;=&amp;nbsp;new&amp;nbsp;VerySimpleDeadlockImplementation();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.thread1();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;app.thread2();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
=======================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;to&amp;nbsp;detect&amp;nbsp;deadlock&amp;nbsp;?&amp;nbsp;&lt;br&gt;
I&amp;nbsp;used&amp;nbsp;JCONSOLE,&amp;nbsp;here&amp;nbsp;are&amp;nbsp;steps:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1)&amp;nbsp;Laund&amp;nbsp;jconsole&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2)&amp;nbsp;Connect&amp;nbsp;to&amp;nbsp;your&amp;nbsp;java&amp;nbsp;application&amp;nbsp;(connection-&gt;new&amp;nbsp;connection....)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3)&amp;nbsp;On&amp;nbsp;the&amp;nbsp;'threads'&amp;nbsp;tab&amp;nbsp;,&amp;nbsp;in&amp;nbsp;the&amp;nbsp;bottom&amp;nbsp;you&amp;nbsp;can&amp;nbsp;see&amp;nbsp;list&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;and&amp;nbsp;button&amp;nbsp;"Detect&amp;nbsp;Deadlock",&amp;nbsp;click&amp;nbsp;on&amp;nbsp;this,&amp;nbsp;and&amp;nbsp;you'll&amp;nbsp;got&amp;nbsp;description&amp;nbsp;about&amp;nbsp;your&amp;nbsp;deadlock&lt;br&gt;
&lt;br&gt;
===============&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;More&amp;nbsp;realistic&amp;nbsp;example&amp;nbsp;of&amp;nbsp;deadlock&amp;nbsp;(with&amp;nbsp;Account&amp;nbsp;class)&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.locks.ReentrantLock;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part11DeadLock&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Account&amp;nbsp;acc1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Account();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Account&amp;nbsp;acc2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Account();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ReentrantLock&amp;nbsp;lock1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ReentrantLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ReentrantLock&amp;nbsp;lock2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ReentrantLock();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;firstThread(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc1.transfer(acc1,&amp;nbsp;acc2,&amp;nbsp;random.nextInt(10));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;secondThread(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc2.transfer(acc2,&amp;nbsp;acc1,&amp;nbsp;random.nextInt(10));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finished(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Account&amp;nbsp;1&amp;nbsp;balance:"&amp;nbsp;+&amp;nbsp;acc1.getBalance());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Account&amp;nbsp;2&amp;nbsp;balance:"&amp;nbsp;+&amp;nbsp;acc2.getBalance());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Total&amp;nbsp;balance:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;(acc1.getBalance()&amp;nbsp;+&amp;nbsp;acc2.getBalance()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Starting&amp;nbsp;threads,&amp;nbsp;which&amp;nbsp;will&amp;nbsp;cause&amp;nbsp;deadlock");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part11DeadLock&amp;nbsp;runner&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part11DeadLock();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.firstThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.secondThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.finished();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Account{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;balance&amp;nbsp;=&amp;nbsp;10000;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;deposit(int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance+=&amp;nbsp;amount;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;withdraw(int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance-=&amp;nbsp;amount;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getBalance(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;balance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;transfer(Account&amp;nbsp;acc1,&amp;nbsp;Account&amp;nbsp;acc2,&amp;nbsp;int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc1.withdraw(amount);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc2.deposit(amount);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part&amp;nbsp;11&amp;nbsp;Deadlock,&amp;nbsp;how&amp;nbsp;to&amp;nbsp;write&amp;nbsp;code&amp;nbsp;which&amp;nbsp;will&amp;nbsp;not&amp;nbsp;cause&amp;nbsp;deadlock&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://www.javaworld.com/article/2075692/java-concurrency/avoid-synchronization-deadlocks.html&lt;br&gt;
https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;this&amp;nbsp;course&amp;nbsp;simple&amp;nbsp;algorithm&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;deadlock&amp;nbsp;&lt;br&gt;
//&amp;nbsp;simple&amp;nbsp;methods,&amp;nbsp;which&amp;nbsp;help&amp;nbsp;us&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;deadlock&lt;br&gt;
private&amp;nbsp;void&amp;nbsp;acquireLocks(Lock&amp;nbsp;firstLock,&amp;nbsp;Lock&amp;nbsp;secondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;gotFirstLock&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;gotSecondLock&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gotFirstLock&amp;nbsp;=&amp;nbsp;firstLock.tryLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gotSecondLock&amp;nbsp;=&amp;nbsp;secondLock.tryLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotFirstLock&amp;nbsp;&amp;&amp;&amp;nbsp;gotSecondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotFirstLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;firstLock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotSecondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;secondLock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Full&amp;nbsp;example&amp;nbsp;(with&amp;nbsp;account&amp;nbsp;money&amp;nbsp;trasfering)&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.locks.Lock;&lt;br&gt;
import&amp;nbsp;java.util.concurrent.locks.ReentrantLock;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part11DeadLockRESOLUTIONALGORITHM&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Account1&amp;nbsp;acc1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Account1();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Account1&amp;nbsp;acc2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Account1();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Lock&amp;nbsp;lock1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ReentrantLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Lock&amp;nbsp;lock2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ReentrantLock();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;acquireLocks(Lock&amp;nbsp;firstLock,&amp;nbsp;Lock&amp;nbsp;secondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;gotFirstLock&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;gotSecondLock&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gotFirstLock&amp;nbsp;=&amp;nbsp;firstLock.tryLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gotSecondLock&amp;nbsp;=&amp;nbsp;secondLock.tryLock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotFirstLock&amp;nbsp;&amp;&amp;&amp;nbsp;gotSecondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotFirstLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;firstLock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(gotSecondLock){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;secondLock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;firstThread(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acquireLocks(lock2,&amp;nbsp;lock1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc1.transfer(acc1,&amp;nbsp;acc2,&amp;nbsp;random.nextInt(10));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;secondThread(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;random&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acquireLocks(lock1,&amp;nbsp;lock2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc2.transfer(acc2,&amp;nbsp;acc1,&amp;nbsp;random.nextInt(10));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock1.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock2.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;finished(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Account&amp;nbsp;1&amp;nbsp;balance:"&amp;nbsp;+&amp;nbsp;acc1.getBalance());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Account&amp;nbsp;2&amp;nbsp;balance:"&amp;nbsp;+&amp;nbsp;acc2.getBalance());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Total&amp;nbsp;balance:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;(acc1.getBalance()&amp;nbsp;+&amp;nbsp;acc2.getBalance()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Starting&amp;nbsp;threads,&amp;nbsp;which&amp;nbsp;will&amp;nbsp;cause&amp;nbsp;deadlock");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part11DeadLockRESOLUTIONALGORITHM&amp;nbsp;runner&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Part11DeadLockRESOLUTIONALGORITHM();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.firstThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.secondThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runner.finished();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Account1{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;balance&amp;nbsp;=&amp;nbsp;10000;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;deposit(int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance+=&amp;nbsp;amount;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;withdraw(int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance-=&amp;nbsp;amount;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getBalance(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;balance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;transfer(Account1&amp;nbsp;acc1,&amp;nbsp;Account1&amp;nbsp;acc2,&amp;nbsp;int&amp;nbsp;amount){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc1.withdraw(amount);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;acc2.deposit(amount);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:12" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Part&amp;nbsp;12,&amp;nbsp;What&amp;nbsp;is&amp;nbsp;Semaphore&amp;nbsp;?&lt;br&gt;
Provide&amp;nbsp;some&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html&lt;br&gt;
A&amp;nbsp;counting&amp;nbsp;semaphore.&amp;nbsp;Conceptually,&amp;nbsp;a&amp;nbsp;semaphore&amp;nbsp;maintains&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;permits.&amp;nbsp;Each&amp;nbsp;acquire()&amp;nbsp;blocks&amp;nbsp;if&amp;nbsp;necessary&amp;nbsp;until&amp;nbsp;a&amp;nbsp;permit&amp;nbsp;is&amp;nbsp;available,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;takes&amp;nbsp;it.&amp;nbsp;Each&amp;nbsp;release()&amp;nbsp;adds&amp;nbsp;a&amp;nbsp;permit,&amp;nbsp;potentially&amp;nbsp;releasing&amp;nbsp;a&amp;nbsp;blocking&amp;nbsp;acquirer.&amp;nbsp;However,&amp;nbsp;no&amp;nbsp;actual&amp;nbsp;permit&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;used;&amp;nbsp;the&amp;nbsp;Semaphore&amp;nbsp;just&amp;nbsp;keeps&amp;nbsp;a&amp;nbsp;count&amp;nbsp;of&amp;nbsp;the&amp;nbsp;number&amp;nbsp;available&amp;nbsp;and&amp;nbsp;acts&amp;nbsp;accordingly.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;you&amp;nbsp;can&amp;nbsp;aquire&amp;nbsp;more&amp;nbsp;than&amp;nbsp;1&amp;nbsp;PERMIT!!!&amp;nbsp;(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;acquire(int&amp;nbsp;permits)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
......&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simple&amp;nbsp;example&lt;br&gt;
App&amp;nbsp;started&amp;nbsp;4&amp;nbsp;threads,&amp;nbsp;and&amp;nbsp;creates&amp;nbsp;semaphore&amp;nbsp;with&amp;nbsp;2&amp;nbsp;permits&amp;nbsp;(so&amp;nbsp;only&amp;nbsp;two&amp;nbsp;threads&amp;nbsp;can&amp;nbsp;'aquire'&amp;nbsp;semaphore&amp;nbsp;and&amp;nbsp;run,&amp;nbsp;another&amp;nbsp;threads&amp;nbsp;must&amp;nbsp;wait&amp;nbsp;while&amp;nbsp;running&amp;nbsp;threads&amp;nbsp;call&amp;nbsp;'release')&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.concurrent.Semaphore;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part12Semaphores&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Semaphore&amp;nbsp;sem&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Semaphore(2);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.acquire();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Started:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(3000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Finishe:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.release();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.acquire();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Started:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(3000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Finishe:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.release();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.acquire();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Started:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.acquire();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(3000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Finishe:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.release();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(()-&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.acquire();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Started:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(3000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Finishe:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sem.release();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Started:&amp;nbsp;Thread-0&lt;br&gt;
Started:&amp;nbsp;Thread-1&lt;br&gt;
Finishe:&amp;nbsp;Thread-0&lt;br&gt;
Started:&amp;nbsp;Thread-2&lt;br&gt;
Finishe:&amp;nbsp;Thread-1&lt;br&gt;
Started:&amp;nbsp;Thread-3&lt;br&gt;
Finishe:&amp;nbsp;Thread-3&lt;br&gt;
Finishe:&amp;nbsp;Thread-2&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Description&amp;nbsp;;&amp;nbsp;so,&amp;nbsp;thread-0&amp;nbsp;and&amp;nbsp;thread-1&amp;nbsp;started,&amp;nbsp;2&amp;nbsp;and&amp;nbsp;3&amp;nbsp;threads&amp;nbsp;must&amp;nbsp;wait,&amp;nbsp;after&amp;nbsp;threads&amp;nbsp;0&amp;nbsp;and&amp;nbsp;1&amp;nbsp;call&amp;nbsp;sem.release&amp;nbsp;threads&amp;nbsp;2&amp;nbsp;and&amp;nbsp;3&amp;nbsp;start&amp;nbsp;progress.</questionanswer>
  </question>
  <question id="1_0_0_3_2_0:13" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;to&amp;nbsp;stop&amp;nbsp;Thread&amp;nbsp;correctly&amp;nbsp;?&lt;br&gt;
Why&amp;nbsp;Thread.stop&amp;nbsp;is&amp;nbsp;deprecated&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Thread.interrupt()&amp;nbsp;sets&amp;nbsp;the&amp;nbsp;interrupted&amp;nbsp;status/flag&amp;nbsp;of&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread.&amp;nbsp;Then&amp;nbsp;code&amp;nbsp;running&amp;nbsp;in&amp;nbsp;that&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;MAY&amp;nbsp;poll&amp;nbsp;the&amp;nbsp;interrupted&lt;br&gt;
status&amp;nbsp;and&amp;nbsp;handle&amp;nbsp;it&amp;nbsp;appropriately.&amp;nbsp;Some&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;block&amp;nbsp;such&amp;nbsp;as&amp;nbsp;Object.wait()&amp;nbsp;may&amp;nbsp;consume&amp;nbsp;the&amp;nbsp;interrupted&amp;nbsp;status&amp;nbsp;immediately&amp;nbsp;and&lt;br&gt;
throw&amp;nbsp;an&amp;nbsp;appropriate&amp;nbsp;exception&amp;nbsp;(usually&amp;nbsp;InterruptedException)&lt;br&gt;
&lt;br&gt;
Interruption&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;not&amp;nbsp;pre-emptive.&amp;nbsp;Put&amp;nbsp;another&amp;nbsp;way&amp;nbsp;both&amp;nbsp;threads&amp;nbsp;have&amp;nbsp;to&amp;nbsp;cooperate&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;process&amp;nbsp;the&amp;nbsp;interrupt&amp;nbsp;properly.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;does&amp;nbsp;not&amp;nbsp;poll&amp;nbsp;the&amp;nbsp;interrupted&amp;nbsp;status&amp;nbsp;the&amp;nbsp;interrupt&amp;nbsp;is&amp;nbsp;effectively&amp;nbsp;ignored.&lt;br&gt;
&lt;br&gt;
Polling&amp;nbsp;occurs&amp;nbsp;via&amp;nbsp;the&amp;nbsp;Thread.interrupted()&amp;nbsp;method&amp;nbsp;which&amp;nbsp;returns&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;interrupted&amp;nbsp;status&amp;nbsp;AND&amp;nbsp;clears&amp;nbsp;that&amp;nbsp;interrupt&amp;nbsp;flag.&lt;br&gt;
Usually&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;might&amp;nbsp;then&amp;nbsp;do&amp;nbsp;something&amp;nbsp;such&amp;nbsp;as&amp;nbsp;throw&amp;nbsp;InterruptedException.&lt;br&gt;
&lt;br&gt;
EDIT&amp;nbsp;(from&amp;nbsp;Thilo&amp;nbsp;comments):&amp;nbsp;Some&amp;nbsp;API&amp;nbsp;methods&amp;nbsp;have&amp;nbsp;built&amp;nbsp;in&amp;nbsp;interrupt&amp;nbsp;handling.&amp;nbsp;Of&amp;nbsp;the&amp;nbsp;top&amp;nbsp;of&amp;nbsp;my&amp;nbsp;head&amp;nbsp;this&amp;nbsp;includes.&lt;br&gt;
&lt;br&gt;
Object.wait()/Thread.sleep()&lt;br&gt;
Most&amp;nbsp;java.util.concurrent&amp;nbsp;structures&lt;br&gt;
Java&amp;nbsp;NIO&amp;nbsp;(but&amp;nbsp;not&amp;nbsp;java.io)&amp;nbsp;and&amp;nbsp;it&amp;nbsp;does&amp;nbsp;NOT&amp;nbsp;use&amp;nbsp;InterruptedException,&amp;nbsp;instead&amp;nbsp;using&amp;nbsp;ClosedByInterruptException.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simple&amp;nbsp;example&amp;nbsp;of&amp;nbsp;interrupting&amp;nbsp;threads&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;main&amp;nbsp;line&amp;nbsp;is&amp;nbsp;checking&amp;nbsp;if&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;was&amp;nbsp;interrupted:&amp;nbsp;if(Thread.currentThread().isInterrupted()){&lt;br&gt;
package&amp;nbsp;com.my;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;27.11.16.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Part14InterruptingThreads&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;thread&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(()&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;1E7;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(Thread.currentThread().isInterrupted()){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("I&amp;nbsp;was&amp;nbsp;interrupted&amp;nbsp;at&amp;nbsp;"&amp;nbsp;+&amp;nbsp;i&amp;nbsp;+&amp;nbsp;"&amp;nbsp;iteration");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Math.sin(i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(500);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread.interrupt();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;Thread.stop&amp;nbsp;is&amp;nbsp;deprecated&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stop()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;inherently&amp;nbsp;unsafe.&amp;nbsp;Stopping&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;with&amp;nbsp;Thread.stop&amp;nbsp;causes&amp;nbsp;it&amp;nbsp;to&amp;nbsp;unlock&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;MONITORS&amp;nbsp;that&amp;nbsp;it&amp;nbsp;has&amp;nbsp;locked&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(as&amp;nbsp;a&amp;nbsp;natural&amp;nbsp;consequence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;unchecked&amp;nbsp;ThreadDeath&amp;nbsp;exception&amp;nbsp;propagating&amp;nbsp;up&amp;nbsp;the&amp;nbsp;stack).&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If&amp;nbsp;any&amp;nbsp;of&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;previously&amp;nbsp;protected&amp;nbsp;by&amp;nbsp;these&amp;nbsp;monitors&amp;nbsp;were&amp;nbsp;in&amp;nbsp;an&amp;nbsp;inconsistent&amp;nbsp;state,&amp;nbsp;the&amp;nbsp;damaged&amp;nbsp;objects&amp;nbsp;become&amp;nbsp;visible&amp;nbsp;to&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other&amp;nbsp;threads,&amp;nbsp;potentially&amp;nbsp;resulting&amp;nbsp;in&amp;nbsp;arbitrary&amp;nbsp;behavior.&amp;nbsp;Many&amp;nbsp;uses&amp;nbsp;of&amp;nbsp;stop&amp;nbsp;should&amp;nbsp;be&amp;nbsp;replaced&amp;nbsp;by&amp;nbsp;code&amp;nbsp;that&amp;nbsp;simply&amp;nbsp;modifies&amp;nbsp;some&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;indicate&amp;nbsp;that&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;should&amp;nbsp;stop&amp;nbsp;running.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Deprecated&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;void&amp;nbsp;stop()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SecurityManager&amp;nbsp;security&amp;nbsp;=&amp;nbsp;System.getSecurityManager();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(security&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;checkAccess();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(this&amp;nbsp;!=&amp;nbsp;Thread.currentThread())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;A&amp;nbsp;zero&amp;nbsp;status&amp;nbsp;value&amp;nbsp;corresponds&amp;nbsp;to&amp;nbsp;"NEW",&amp;nbsp;it&amp;nbsp;can't&amp;nbsp;change&amp;nbsp;to&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;not-NEW&amp;nbsp;because&amp;nbsp;we&amp;nbsp;hold&amp;nbsp;the&amp;nbsp;lock.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(threadStatus&amp;nbsp;!=&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resume();&amp;nbsp;//&amp;nbsp;Wake&amp;nbsp;up&amp;nbsp;thread&amp;nbsp;if&amp;nbsp;it&amp;nbsp;was&amp;nbsp;suspended;&amp;nbsp;no-op&amp;nbsp;otherwise&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;The&amp;nbsp;VM&amp;nbsp;can&amp;nbsp;handle&amp;nbsp;all&amp;nbsp;thread&amp;nbsp;states&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stop0(new&amp;nbsp;ThreadDeath());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</questionanswer>
  </question>
</questions>
