<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_4_0" name="Io_and_Serialization_ApressBEGINNING_Java7" nofquestions="9" nofsubcategories="0" filename="io_and_serialization_apressbeginning_java71_0_0_4_0.xml">
  <question id="1_0_0_4_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;java.io&amp;nbsp;package,&amp;nbsp;describe.&amp;nbsp;List&amp;nbsp;main&amp;nbsp;classes.&lt;br&gt;
java.io.File&amp;nbsp;class,&amp;nbsp;describe.&lt;br&gt;
Write&amp;nbsp;program&amp;nbsp;which&amp;nbsp;lists&amp;nbsp;files&amp;nbsp;in&amp;nbsp;some&amp;nbsp;directory.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Main&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;java.io&amp;nbsp;package&amp;nbsp;:&lt;br&gt;
&amp;nbsp;-&amp;nbsp;FIle&lt;br&gt;
&amp;nbsp;-&amp;nbsp;RandomAccessFile&lt;br&gt;
&amp;nbsp;-&amp;nbsp;Streams&amp;nbsp;classes&lt;br&gt;
&amp;nbsp;-&amp;nbsp;Readers&amp;nbsp;and&amp;nbsp;Writers&amp;nbsp;classes&lt;br&gt;
&lt;br&gt;
=============================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.io.File&amp;nbsp;class&lt;br&gt;
&lt;br&gt;
File&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;most&amp;nbsp;important&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;java.io.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;offers&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;platform?s&amp;nbsp;available&amp;nbsp;filesystem(s)&amp;nbsp;via&amp;nbsp;its&amp;nbsp;concrete&amp;nbsp;java.io.File&amp;nbsp;class.&lt;br&gt;
File&amp;nbsp;declares&amp;nbsp;the&amp;nbsp;File[]&amp;nbsp;listRoots()&amp;nbsp;class&amp;nbsp;method&amp;nbsp;to&amp;nbsp;return&amp;nbsp;the&amp;nbsp;root&amp;nbsp;directories&amp;nbsp;(roots)&amp;nbsp;of&lt;br&gt;
available&amp;nbsp;filesystems&amp;nbsp;as&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;File&amp;nbsp;objects.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&amp;nbsp;Dumping&amp;nbsp;available&amp;nbsp;filesystem&amp;nbsp;roots&amp;nbsp;to&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;output&amp;nbsp;device&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
class&amp;nbsp;DumpRoots{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File[]&amp;nbsp;roots&amp;nbsp;=&amp;nbsp;File.listRoots();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(File&amp;nbsp;root:&amp;nbsp;roots)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(root);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
When&amp;nbsp;I&amp;nbsp;run&amp;nbsp;this&amp;nbsp;application&amp;nbsp;on&amp;nbsp;my&amp;nbsp;Windows&amp;nbsp;XP&amp;nbsp;platform,&amp;nbsp;I&amp;nbsp;receive&amp;nbsp;the&amp;nbsp;following&amp;nbsp;output,&lt;br&gt;
which&amp;nbsp;reveals&amp;nbsp;four&amp;nbsp;available&amp;nbsp;roots:&lt;br&gt;
A:\&lt;br&gt;
C:\&lt;br&gt;
D:\&lt;br&gt;
E:\&lt;br&gt;
If&amp;nbsp;I&amp;nbsp;ran&amp;nbsp;DumpRoots&amp;nbsp;on&amp;nbsp;a&amp;nbsp;Unix&amp;nbsp;or&amp;nbsp;Linux&amp;nbsp;platform,&amp;nbsp;I&amp;nbsp;would&amp;nbsp;receive&amp;nbsp;one&amp;nbsp;output&amp;nbsp;line&amp;nbsp;consisting&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
virtual&amp;nbsp;filesystem&amp;nbsp;root&amp;nbsp;(/).&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
&amp;nbsp;Apart&amp;nbsp;from&amp;nbsp;using&amp;nbsp;listRoots(),&amp;nbsp;you&amp;nbsp;can&amp;nbsp;obtain&amp;nbsp;a&amp;nbsp;File&amp;nbsp;instance&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;a&amp;nbsp;File&amp;nbsp;constructor&amp;nbsp;such&amp;nbsp;as&lt;br&gt;
File(String&amp;nbsp;pathname),&amp;nbsp;which&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;File&amp;nbsp;instance&amp;nbsp;that&amp;nbsp;stores&amp;nbsp;the&amp;nbsp;pathname&amp;nbsp;string.&amp;nbsp;The&amp;nbsp;following&lt;br&gt;
assignment&amp;nbsp;statements&amp;nbsp;demonstrate&amp;nbsp;this&amp;nbsp;constructor:&lt;br&gt;
&lt;br&gt;
File&amp;nbsp;file1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File("/x/y");&amp;nbsp;//&amp;nbsp;Linux&lt;br&gt;
File&amp;nbsp;file2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File("C:\\temp\\x.dat");&amp;nbsp;//&amp;nbsp;WIndows&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
The&amp;nbsp;conversion&amp;nbsp;of&amp;nbsp;a&amp;nbsp;pathname&amp;nbsp;string&amp;nbsp;to&amp;nbsp;or&amp;nbsp;from&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;pathname&amp;nbsp;is&amp;nbsp;inherently&lt;br&gt;
platformdependent.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;pathname&amp;nbsp;string&amp;nbsp;is&amp;nbsp;converted&amp;nbsp;to&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;pathname,&amp;nbsp;the&amp;nbsp;names&lt;br&gt;
within&amp;nbsp;it&amp;nbsp;are&amp;nbsp;separated&amp;nbsp;by&amp;nbsp;the&amp;nbsp;default&amp;nbsp;name-separator&amp;nbsp;character&amp;nbsp;or&amp;nbsp;by&amp;nbsp;any&amp;nbsp;other&amp;nbsp;name-separator&lt;br&gt;
character&amp;nbsp;that&amp;nbsp;is&amp;nbsp;supported&amp;nbsp;by&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;platform.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;File(String&amp;nbsp;pathname)&amp;nbsp;converts&lt;br&gt;
pathname&amp;nbsp;string&amp;nbsp;/x/y&amp;nbsp;to&amp;nbsp;abstract&amp;nbsp;pathname&amp;nbsp;/x/y&amp;nbsp;on&amp;nbsp;a&amp;nbsp;Unix&amp;nbsp;or&amp;nbsp;Linux&amp;nbsp;platform,&amp;nbsp;and&amp;nbsp;this&amp;nbsp;same&amp;nbsp;pathname&lt;br&gt;
string&amp;nbsp;to&amp;nbsp;abstract&amp;nbsp;pathname&amp;nbsp;\x\y&amp;nbsp;on&amp;nbsp;a&amp;nbsp;Windows&amp;nbsp;platform.&lt;br&gt;
&lt;br&gt;
SO&amp;nbsp;,&amp;nbsp;use&amp;nbsp;only&amp;nbsp;&amp;nbsp;'/'&amp;nbsp;slash&amp;nbsp;in&amp;nbsp;pathnames&amp;nbsp;(to&amp;nbsp;work&amp;nbsp;in&amp;nbsp;linux&amp;nbsp;and&amp;nbsp;windows)&lt;br&gt;
File&amp;nbsp;file2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File("C:/temp/x.dat");&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;The&amp;nbsp;default&amp;nbsp;&amp;nbsp;-&amp;nbsp;&gt;name-separator&amp;nbsp;character&amp;nbsp;is&amp;nbsp;obtainable&amp;nbsp;from&amp;nbsp;system&amp;nbsp;property&amp;nbsp;file.separator,&lt;br&gt;
and&amp;nbsp;is&amp;nbsp;also&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;File?s&amp;nbsp;separator&amp;nbsp;and&amp;nbsp;separatorChar&amp;nbsp;class&amp;nbsp;fields.&amp;nbsp;The&amp;nbsp;first&amp;nbsp;field&amp;nbsp;stores&amp;nbsp;the&lt;br&gt;
character&amp;nbsp;in&amp;nbsp;a&amp;nbsp;java.lang.String&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;the&amp;nbsp;second&amp;nbsp;field&amp;nbsp;stores&amp;nbsp;it&amp;nbsp;as&amp;nbsp;a&amp;nbsp;char&amp;nbsp;value.&amp;nbsp;Neither&lt;br&gt;
name&amp;nbsp;of&amp;nbsp;these&amp;nbsp;final&amp;nbsp;fields&amp;nbsp;follows&amp;nbsp;the&amp;nbsp;convention&amp;nbsp;of&amp;nbsp;appearing&amp;nbsp;entirely&amp;nbsp;in&amp;nbsp;uppercase.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
!!!!!!!!!!&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;The&amp;nbsp;java.io&amp;nbsp;package?s&amp;nbsp;classes&amp;nbsp;default&amp;nbsp;to&amp;nbsp;resolving&amp;nbsp;&amp;nbsp;-&gt;&amp;nbsp;&amp;nbsp;relative&amp;nbsp;pathnames&amp;nbsp;against&amp;nbsp;the&amp;nbsp;current&amp;nbsp;user&amp;nbsp;(also&lt;br&gt;
known&amp;nbsp;as&amp;nbsp;working)&amp;nbsp;directory,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;identified&amp;nbsp;by&amp;nbsp;system&amp;nbsp;property&amp;nbsp;__&amp;nbsp;user.dir&amp;nbsp;__&amp;nbsp;(IN&amp;nbsp;eclipse&amp;nbsp;it&amp;nbsp;is&amp;nbsp;project&amp;nbsp;folder),&lt;br&gt;
and&amp;nbsp;which&amp;nbsp;is&amp;nbsp;typically&amp;nbsp;the&amp;nbsp;directory&amp;nbsp;in&amp;nbsp;which&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;was&amp;nbsp;launched.&amp;nbsp;&lt;br&gt;
====&lt;br&gt;
&lt;br&gt;
File&amp;nbsp;Methods&amp;nbsp;for&amp;nbsp;Learning&amp;nbsp;About&amp;nbsp;a&amp;nbsp;Stored&amp;nbsp;Abstract&amp;nbsp;Pathname&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;File&amp;nbsp;getAbsoluteFile()&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;absolute&amp;nbsp;form&amp;nbsp;of&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&amp;nbsp;abstract&lt;br&gt;
pathname.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;new&lt;br&gt;
File(this.getAbsolutePath()).&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;getAbsolutePath()&lt;br&gt;
-&amp;nbsp;File&amp;nbsp;getCanonicalFile()&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;getCanonicalPath()&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;canonical&amp;nbsp;pathname&amp;nbsp;string&amp;nbsp;of&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&amp;nbsp;abstract&amp;nbsp;pathname.&amp;nbsp;This&amp;nbsp;method&lt;br&gt;
first&amp;nbsp;converts&amp;nbsp;this&amp;nbsp;pathname&amp;nbsp;to&amp;nbsp;absolute&amp;nbsp;form&amp;nbsp;when&amp;nbsp;necessary,&amp;nbsp;as&amp;nbsp;if&amp;nbsp;by&amp;nbsp;invoking&lt;br&gt;
getAbsolutePath(),&amp;nbsp;and&amp;nbsp;then&amp;nbsp;maps&amp;nbsp;it&amp;nbsp;to&amp;nbsp;its&amp;nbsp;unique&amp;nbsp;form&amp;nbsp;in&amp;nbsp;a&amp;nbsp;platform-dependent&amp;nbsp;way.&amp;nbsp;Doing&lt;br&gt;
so&amp;nbsp;typically&amp;nbsp;involves&amp;nbsp;removing&amp;nbsp;redundant&amp;nbsp;names&amp;nbsp;such&amp;nbsp;as&amp;nbsp;?.?&amp;nbsp;and&amp;nbsp;?..?&amp;nbsp;from&amp;nbsp;the&amp;nbsp;pathname,&lt;br&gt;
resolving&amp;nbsp;symbolic&amp;nbsp;links&amp;nbsp;(on&amp;nbsp;Unix&amp;nbsp;platforms),&amp;nbsp;and&amp;nbsp;converting&amp;nbsp;drive&amp;nbsp;letters&amp;nbsp;to&amp;nbsp;a&amp;nbsp;standard&amp;nbsp;case&lt;br&gt;
(on&amp;nbsp;Windows&amp;nbsp;platforms).&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs&lt;br&gt;
(creating&amp;nbsp;the&amp;nbsp;canonical&amp;nbsp;pathname&amp;nbsp;may&amp;nbsp;require&amp;nbsp;filesystem&amp;nbsp;queries).&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;getName()&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;getParent()&amp;nbsp;&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;pathname&amp;nbsp;string&amp;nbsp;of&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&lt;br&gt;
abstract&amp;nbsp;pathname,&amp;nbsp;or&amp;nbsp;return&amp;nbsp;null&amp;nbsp;when&amp;nbsp;this&amp;nbsp;pathname&lt;br&gt;
doesn?t&amp;nbsp;name&amp;nbsp;a&amp;nbsp;parent&amp;nbsp;directory.&lt;br&gt;
-&amp;nbsp;File&amp;nbsp;getParentFile()&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;getPath()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;isAbsolute()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;canExecute()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;canRead()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;canWrite()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;exists()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;isDirectory()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;isFile()&lt;br&gt;
Return&amp;nbsp;true&amp;nbsp;when&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&amp;nbsp;abstract&amp;nbsp;pathname&amp;nbsp;refers&lt;br&gt;
to&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;normal&amp;nbsp;file.&amp;nbsp;A&amp;nbsp;file&amp;nbsp;is&amp;nbsp;normal&amp;nbsp;when&amp;nbsp;it?s&amp;nbsp;not&amp;nbsp;a&lt;br&gt;
directory&amp;nbsp;and&amp;nbsp;satisfies&amp;nbsp;other&amp;nbsp;platform-dependent&amp;nbsp;criteria:&amp;nbsp;it?s&lt;br&gt;
not&amp;nbsp;a&amp;nbsp;symbolic&amp;nbsp;link&amp;nbsp;or&amp;nbsp;a&amp;nbsp;named&amp;nbsp;pipe,&amp;nbsp;for&amp;nbsp;example.&amp;nbsp;Any&lt;br&gt;
nondirectory&amp;nbsp;file&amp;nbsp;created&amp;nbsp;by&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;application&amp;nbsp;is&amp;nbsp;guaranteed&lt;br&gt;
to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;normal&amp;nbsp;file.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;isHidden()&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;lastModified()&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;length()&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;length&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;denoted&amp;nbsp;by&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&lt;br&gt;
abstract&amp;nbsp;pathname.&amp;nbsp;The&amp;nbsp;return&amp;nbsp;value&amp;nbsp;is&amp;nbsp;unspecified&amp;nbsp;when&amp;nbsp;the&lt;br&gt;
pathname&amp;nbsp;denotes&amp;nbsp;a&amp;nbsp;directory,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;be&amp;nbsp;0&amp;nbsp;when&amp;nbsp;the&amp;nbsp;file&lt;br&gt;
doesn?t&amp;nbsp;exist&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;&amp;nbsp;Java&amp;nbsp;6&amp;nbsp;added&amp;nbsp;long&amp;nbsp;getFreeSpace(),&amp;nbsp;long&amp;nbsp;getTotalSpace(),&amp;nbsp;and&amp;nbsp;long&amp;nbsp;getUsableSpace()&lt;br&gt;
methods&amp;nbsp;to&amp;nbsp;File&amp;nbsp;that&amp;nbsp;return&amp;nbsp;disk&amp;nbsp;space&amp;nbsp;information&amp;nbsp;about&amp;nbsp;the&amp;nbsp;partition&amp;nbsp;(a&amp;nbsp;platform-specific&lt;br&gt;
portion&amp;nbsp;of&amp;nbsp;storage&amp;nbsp;for&amp;nbsp;a&amp;nbsp;filesystem;&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;C:\)&amp;nbsp;described&amp;nbsp;by&amp;nbsp;the&amp;nbsp;File&amp;nbsp;instance?s&amp;nbsp;pathname.&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;Java&amp;nbsp;6&amp;nbsp;added&amp;nbsp;to&amp;nbsp;File&amp;nbsp;new&amp;nbsp;boolean&amp;nbsp;setExecutable(boolean&amp;nbsp;executable),&amp;nbsp;boolean&lt;br&gt;
setExecutable(boolean&amp;nbsp;executable,&amp;nbsp;boolean&amp;nbsp;ownerOnly),&amp;nbsp;boolean&amp;nbsp;setReadable(boolean&amp;nbsp;readable),&lt;br&gt;
boolean&amp;nbsp;setReadable(boolean&amp;nbsp;readable,&amp;nbsp;boolean&amp;nbsp;ownerOnly),&amp;nbsp;boolean&amp;nbsp;setWritable(boolean&lt;br&gt;
writable),&amp;nbsp;and&amp;nbsp;boolean&amp;nbsp;setWritable(boolean&amp;nbsp;writable,&amp;nbsp;boolean&amp;nbsp;ownerOnly)&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;let&amp;nbsp;you&amp;nbsp;set&amp;nbsp;the&lt;br&gt;
owner?s&amp;nbsp;or&amp;nbsp;everybody?s&amp;nbsp;execute,&amp;nbsp;read,&amp;nbsp;and&amp;nbsp;write&amp;nbsp;permissions&amp;nbsp;(respectively)&amp;nbsp;for&amp;nbsp;the&amp;nbsp;file&amp;nbsp;identified&amp;nbsp;by&amp;nbsp;the&amp;nbsp;File&lt;br&gt;
object?s&amp;nbsp;abstract&amp;nbsp;pathname.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;String[]&amp;nbsp;list()&lt;br&gt;
Return&amp;nbsp;array&amp;nbsp;of&amp;nbsp;files&amp;nbsp;in&amp;nbsp;directory&lt;br&gt;
-&amp;nbsp;String[]&amp;nbsp;list(FilenameFilterfilter)&lt;br&gt;
-&amp;nbsp;File[]&amp;nbsp;listFiles()&lt;br&gt;
-&amp;nbsp;File[]&amp;nbsp;listFiles(FileFilterfilter)&lt;br&gt;
-&amp;nbsp;File[]&amp;nbsp;listFiles(FilenameFilterfilter)&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;createNewFile()&lt;br&gt;
Atomically&amp;nbsp;create&amp;nbsp;a&amp;nbsp;new,&amp;nbsp;empty&amp;nbsp;file&amp;nbsp;named&amp;nbsp;by&amp;nbsp;this&lt;br&gt;
File&amp;nbsp;object?s&amp;nbsp;abstract&amp;nbsp;pathname&amp;nbsp;if&amp;nbsp;and&amp;nbsp;only&amp;nbsp;if&amp;nbsp;a&amp;nbsp;file&lt;br&gt;
with&amp;nbsp;this&amp;nbsp;name&amp;nbsp;does&amp;nbsp;not&amp;nbsp;yet&amp;nbsp;exist.&amp;nbsp;The&amp;nbsp;check&amp;nbsp;for&amp;nbsp;file&lt;br&gt;
existence&amp;nbsp;and&amp;nbsp;the&amp;nbsp;creation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;when&amp;nbsp;it&amp;nbsp;doesn?t&lt;br&gt;
exist&amp;nbsp;are&amp;nbsp;a&amp;nbsp;single&amp;nbsp;operation&amp;nbsp;that?s&amp;nbsp;atomic&amp;nbsp;with&amp;nbsp;respect&lt;br&gt;
to&amp;nbsp;all&amp;nbsp;other&amp;nbsp;filesystem&amp;nbsp;activities&amp;nbsp;that&amp;nbsp;might&amp;nbsp;affect&amp;nbsp;the&lt;br&gt;
file.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;when&amp;nbsp;the&amp;nbsp;named&amp;nbsp;file&lt;br&gt;
doesn?t&amp;nbsp;exist&amp;nbsp;and&amp;nbsp;was&amp;nbsp;successfully&amp;nbsp;created,&amp;nbsp;and&lt;br&gt;
returns&amp;nbsp;false&amp;nbsp;when&amp;nbsp;the&amp;nbsp;named&amp;nbsp;file&amp;nbsp;already&amp;nbsp;exists.&amp;nbsp;It&lt;br&gt;
throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;File&amp;nbsp;createTempFile(String&lt;br&gt;
prefix,&amp;nbsp;String&amp;nbsp;suffix)&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;delete()&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;deleteOnExit()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;mkdir()&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;mkdirs()&lt;br&gt;
Create&amp;nbsp;the&amp;nbsp;directory&amp;nbsp;and&amp;nbsp;any&amp;nbsp;necessary&amp;nbsp;intermediate&amp;nbsp;directories&amp;nbsp;named&lt;br&gt;
by&amp;nbsp;this&amp;nbsp;File&amp;nbsp;object?s&amp;nbsp;abstract&amp;nbsp;pathname.&amp;nbsp;Return&amp;nbsp;true&amp;nbsp;when&amp;nbsp;successful;&amp;nbsp;otherwise,&lt;br&gt;
return&amp;nbsp;false.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;renameTo(File&amp;nbsp;dest)&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;setLastModified(long&amp;nbsp;time)&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;setReadOnly()&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;compareTo(File&amp;nbsp;pathname)&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;equals(Object&amp;nbsp;obj)&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;hashCode()&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
============&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;Obtaining&amp;nbsp;file&amp;nbsp;information&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;file;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ObtainInfoAboutFile&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;args.length&amp;nbsp;&gt;&amp;nbsp;0&amp;nbsp;?&amp;nbsp;args[0]&amp;nbsp;:&amp;nbsp;System.getProperty("user.dir");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File&amp;nbsp;file&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(filename);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Exists&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;file.exists());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Absolute&amp;nbsp;path&amp;nbsp;=&amp;nbsp;"+file.getAbsolutePath());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Canonical&amp;nbsp;path&amp;nbsp;=&amp;nbsp;"+file.getCanonicalPath());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Name&amp;nbsp;=&amp;nbsp;"+file.getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Parent&amp;nbsp;=&amp;nbsp;"+file.getAbsoluteFile().getParent());&amp;nbsp;//&amp;nbsp;Get&amp;nbsp;parent&amp;nbsp;,&amp;nbsp;when&amp;nbsp;file&amp;nbsp;hasnt&amp;nbsp;absolute&amp;nbsp;path&amp;nbsp;!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Path&amp;nbsp;=&amp;nbsp;"+file.getPath());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Is&amp;nbsp;absolute&amp;nbsp;=&amp;nbsp;"+file.isAbsolute());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Is&amp;nbsp;folder&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;file.isDirectory());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
==============&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;&amp;nbsp;List&amp;nbsp;&amp;nbsp;files&amp;nbsp;with&amp;nbsp;some&amp;nbsp;'extension'&amp;nbsp;in&amp;nbsp;Directory&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;file;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
import&amp;nbsp;java.io.FilenameFilter;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ListFilesInDirectoryWithSomeExtension&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(final&amp;nbsp;String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(args.length&amp;nbsp;!=&amp;nbsp;2)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println("Please&amp;nbsp;set&amp;nbsp;Directory&amp;nbsp;name&amp;nbsp;and&amp;nbsp;file&amp;nbsp;extension");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File&amp;nbsp;file&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(args[0]);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FilenameFilter&amp;nbsp;fnf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FilenameFilter()&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;accept(File&amp;nbsp;dir,&amp;nbsp;String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name.endsWith(args[1]);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String[]&amp;nbsp;list&amp;nbsp;=&amp;nbsp;file.list(fnf);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;nbsp;String.format("Files&amp;nbsp;in&amp;nbsp;&amp;nbsp;'%s'&amp;nbsp;directory&amp;nbsp;with&amp;nbsp;'%s'&amp;nbsp;extension",&amp;nbsp;args[0],&amp;nbsp;args[0]));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(String&amp;nbsp;item&amp;nbsp;:&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=========================&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;Experimenting&amp;nbsp;with&amp;nbsp;temporary&amp;nbsp;files&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
class&amp;nbsp;TempFileDemo&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(System.getProperty("java.io.tmpdir"));&amp;nbsp;//&amp;nbsp;!@!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;File.createTempFile("text",&amp;nbsp;".txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(temp);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;temp.deleteOnExit();&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
After&amp;nbsp;outputting&amp;nbsp;the&amp;nbsp;location&amp;nbsp;where&amp;nbsp;temporary&amp;nbsp;files&amp;nbsp;are&amp;nbsp;stored,&amp;nbsp;TempFileDemo&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;temporary&amp;nbsp;file&lt;br&gt;
whose&amp;nbsp;name&amp;nbsp;begins&amp;nbsp;with&amp;nbsp;text&amp;nbsp;and&amp;nbsp;has&amp;nbsp;extension&amp;nbsp;&amp;nbsp;.txt.&amp;nbsp;TempFileDemo&amp;nbsp;next&amp;nbsp;outputs&amp;nbsp;the&amp;nbsp;temporary&amp;nbsp;file?s&lt;br&gt;
name&amp;nbsp;and&amp;nbsp;registers&amp;nbsp;the&amp;nbsp;temporary&amp;nbsp;file&amp;nbsp;for&amp;nbsp;deletion&amp;nbsp;upon&amp;nbsp;the&amp;nbsp;successful&amp;nbsp;termination&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application.&lt;br&gt;
I&amp;nbsp;observed&amp;nbsp;the&amp;nbsp;following&amp;nbsp;output&amp;nbsp;during&amp;nbsp;one&amp;nbsp;run&amp;nbsp;of&amp;nbsp;TempFileDemo&amp;nbsp;(and&amp;nbsp;the&amp;nbsp;file&amp;nbsp;disappeared&amp;nbsp;on&amp;nbsp;exit):&lt;br&gt;
&lt;br&gt;
C:\DOCUME~1\JEFFFR~1\LOCALS~1\Temp\&lt;br&gt;
C:\DOCUME~1\JEFFFR~1\LOCALS~1\Temp\text3436502412322813057.txt&lt;br&gt;
================</questionanswer>
  </question>
  <question id="1_0_0_4_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;Stream&amp;nbsp;Classes,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
Along&amp;nbsp;with&amp;nbsp;File&amp;nbsp;and&amp;nbsp;RandomAccessFile,&amp;nbsp;Java&amp;nbsp;uses&amp;nbsp;streams&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;I/O&amp;nbsp;operations.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;__&amp;nbsp;stream&amp;nbsp;__&amp;nbsp;is&amp;nbsp;an&amp;nbsp;ordered&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;of&amp;nbsp;arbitrary&amp;nbsp;length.&amp;nbsp;Bytes&amp;nbsp;flow&amp;nbsp;over&amp;nbsp;an&lt;br&gt;
output&amp;nbsp;stream&amp;nbsp;from&amp;nbsp;an&amp;nbsp;application&amp;nbsp;to&amp;nbsp;a&amp;nbsp;destination,&amp;nbsp;and&amp;nbsp;flow&amp;nbsp;over&amp;nbsp;an&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;from&amp;nbsp;a&lt;br&gt;
source&amp;nbsp;to&amp;nbsp;an&amp;nbsp;application.&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
Note&amp;nbsp;Java?s&amp;nbsp;use&amp;nbsp;of&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;analogous&amp;nbsp;to&amp;nbsp;saying&amp;nbsp;?stream&amp;nbsp;of&amp;nbsp;water?,&amp;nbsp;?stream&amp;nbsp;of&amp;nbsp;electrons?,&lt;br&gt;
and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='830'&amp;nbsp;height='650'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/JavaStreams.png'/&gt;&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;recognizes&amp;nbsp;various&amp;nbsp;stream&amp;nbsp;destinations;&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;byte&amp;nbsp;arrays,&amp;nbsp;files,&amp;nbsp;screens,&amp;nbsp;and&lt;br&gt;
sockets&amp;nbsp;(network&amp;nbsp;endpoints).&amp;nbsp;Java&amp;nbsp;also&amp;nbsp;recognizes&amp;nbsp;various&amp;nbsp;stream&amp;nbsp;sources.&amp;nbsp;Examples&amp;nbsp;include&lt;br&gt;
byte&amp;nbsp;arrays,&amp;nbsp;files,&amp;nbsp;keyboards,&amp;nbsp;and&amp;nbsp;sockets.&lt;br&gt;
======================================&lt;br&gt;
The&amp;nbsp;java.io&amp;nbsp;package&amp;nbsp;provides&amp;nbsp;several&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;and&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;are&lt;br&gt;
descendents&amp;nbsp;of&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;---&gt;&gt;&amp;nbsp;OutputStream&amp;nbsp;and&amp;nbsp;InputStream&amp;nbsp;&amp;nbsp;classes&amp;nbsp;&lt;&lt;----.&lt;br&gt;
&lt;br&gt;
OutputStream&amp;nbsp;Methods&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;close()&amp;nbsp;&lt;br&gt;
Close&amp;nbsp;this&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;and&amp;nbsp;release&amp;nbsp;any&amp;nbsp;system&amp;nbsp;resources&amp;nbsp;associated&amp;nbsp;with&lt;br&gt;
the&amp;nbsp;stream.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
(Because&amp;nbsp;OutputStream&amp;nbsp;implements&amp;nbsp;Closeable,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;output&amp;nbsp;streams&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;try-with-resources&amp;nbsp;statement.)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;flush()&lt;br&gt;
Flush&amp;nbsp;this&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;by&amp;nbsp;writing&amp;nbsp;any&amp;nbsp;buffered&amp;nbsp;output&amp;nbsp;bytes&amp;nbsp;to&amp;nbsp;the&amp;nbsp;destination.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;write(byte[]&amp;nbsp;b)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;write(byte[]&amp;nbsp;b,&amp;nbsp;int&amp;nbsp;off,&amp;nbsp;int&amp;nbsp;len)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;write(int&amp;nbsp;b)&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;The&amp;nbsp;close()&amp;nbsp;method&amp;nbsp;automatically&amp;nbsp;flushes&amp;nbsp;the&amp;nbsp;output&amp;nbsp;stream.&amp;nbsp;When&amp;nbsp;an&amp;nbsp;application&lt;br&gt;
ends&amp;nbsp;before&amp;nbsp;close()&amp;nbsp;is&amp;nbsp;called,&amp;nbsp;the&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;automatically&amp;nbsp;closed&amp;nbsp;and&amp;nbsp;its&amp;nbsp;data&lt;br&gt;
is&amp;nbsp;flushed.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
InputStream&amp;nbsp;Methods&amp;nbsp;:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;available()&lt;br&gt;
Return&amp;nbsp;an&amp;nbsp;estimate&amp;nbsp;of&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;from&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&lt;br&gt;
via&amp;nbsp;the&amp;nbsp;next&amp;nbsp;read()&amp;nbsp;method&amp;nbsp;call&amp;nbsp;(or&amp;nbsp;skipped&amp;nbsp;over&amp;nbsp;via&amp;nbsp;skip())&amp;nbsp;without&amp;nbsp;blocking&amp;nbsp;the&lt;br&gt;
calling&amp;nbsp;thread.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;close()&lt;br&gt;
Close&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;and&amp;nbsp;release&amp;nbsp;any&amp;nbsp;system&amp;nbsp;resources&lt;br&gt;
associated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;stream.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&lt;br&gt;
when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&amp;nbsp;(Because&amp;nbsp;InputStream&amp;nbsp;implements&lt;br&gt;
Closeable,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;input&amp;nbsp;streams&amp;nbsp;with&amp;nbsp;the&amp;nbsp;try-with&amp;nbsp;resources&amp;nbsp;statement.)&amp;nbsp;&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;mark(int&amp;nbsp;readlimit)&lt;br&gt;
Mark&amp;nbsp;the&amp;nbsp;current&amp;nbsp;position&amp;nbsp;in&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream.&amp;nbsp;A&amp;nbsp;subsequent&lt;br&gt;
call&amp;nbsp;to&amp;nbsp;reset()&amp;nbsp;repositions&amp;nbsp;this&amp;nbsp;stream&amp;nbsp;to&amp;nbsp;the&amp;nbsp;last&amp;nbsp;marked&lt;br&gt;
position&amp;nbsp;so&amp;nbsp;that&amp;nbsp;subsequent&amp;nbsp;read&amp;nbsp;operations&amp;nbsp;reread&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
bytes.&amp;nbsp;The&amp;nbsp;readlimit&amp;nbsp;argument&amp;nbsp;tells&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;to&lt;br&gt;
allow&amp;nbsp;that&amp;nbsp;many&amp;nbsp;bytes&amp;nbsp;to&amp;nbsp;be&amp;nbsp;read&amp;nbsp;before&amp;nbsp;invalidating&amp;nbsp;this&lt;br&gt;
mark&amp;nbsp;(so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;reset&amp;nbsp;to&amp;nbsp;the&amp;nbsp;marked&lt;br&gt;
position)&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;markSupported()&lt;br&gt;
Return&amp;nbsp;true&amp;nbsp;when&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;supports&amp;nbsp;mark()&amp;nbsp;and&lt;br&gt;
reset();&amp;nbsp;otherwise,&amp;nbsp;return&amp;nbsp;false.&lt;br&gt;
-int&amp;nbsp;read()&lt;br&gt;
Read&amp;nbsp;and&amp;nbsp;return&amp;nbsp;(as&amp;nbsp;an&amp;nbsp;int&amp;nbsp;in&amp;nbsp;the&amp;nbsp;range&amp;nbsp;0&amp;nbsp;to&amp;nbsp;255)&amp;nbsp;the&amp;nbsp;next&amp;nbsp;byte&amp;nbsp;from&amp;nbsp;this&lt;br&gt;
input&amp;nbsp;stream,&amp;nbsp;or&amp;nbsp;return&amp;nbsp;-1&amp;nbsp;when&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;reached.&amp;nbsp;This&lt;br&gt;
method&amp;nbsp;blocks&amp;nbsp;until&amp;nbsp;input&amp;nbsp;is&amp;nbsp;available,&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;detected,&lt;br&gt;
or&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;is&amp;nbsp;thrown.&amp;nbsp;It&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;read(byte[]&amp;nbsp;b)&amp;nbsp;&lt;br&gt;
Read&amp;nbsp;some&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;from&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;and&amp;nbsp;store&amp;nbsp;them&amp;nbsp;in&amp;nbsp;byte&lt;br&gt;
array&amp;nbsp;b.&amp;nbsp;Return&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;actually&amp;nbsp;read&amp;nbsp;(which&amp;nbsp;might&amp;nbsp;be&amp;nbsp;less&lt;br&gt;
than&amp;nbsp;b?s&amp;nbsp;length&amp;nbsp;but&amp;nbsp;is&amp;nbsp;never&amp;nbsp;more&amp;nbsp;than&amp;nbsp;this&amp;nbsp;length),&amp;nbsp;or&amp;nbsp;return&amp;nbsp;-1&amp;nbsp;when&amp;nbsp;the&lt;br&gt;
end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;reached&amp;nbsp;(no&amp;nbsp;byte&amp;nbsp;is&amp;nbsp;available&amp;nbsp;to&amp;nbsp;read).&amp;nbsp;This&amp;nbsp;method&amp;nbsp;blocks&lt;br&gt;
until&amp;nbsp;input&amp;nbsp;is&amp;nbsp;available,&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;detected,&amp;nbsp;or&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;is&lt;br&gt;
thrown.&amp;nbsp;It&amp;nbsp;throws&amp;nbsp;NullPointerException&amp;nbsp;when&amp;nbsp;b&amp;nbsp;is&amp;nbsp;null,&amp;nbsp;and&amp;nbsp;IOException&amp;nbsp;when&lt;br&gt;
an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;read(byte[]&amp;nbsp;b,&amp;nbsp;int&amp;nbsp;off,&amp;nbsp;int&amp;nbsp;len)&lt;br&gt;
Read&amp;nbsp;no&amp;nbsp;more&amp;nbsp;than&amp;nbsp;len&amp;nbsp;bytes&amp;nbsp;from&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;and&amp;nbsp;store&amp;nbsp;them&amp;nbsp;in&amp;nbsp;byte&lt;br&gt;
array&amp;nbsp;b,&amp;nbsp;starting&amp;nbsp;at&amp;nbsp;the&amp;nbsp;offset&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;off.&amp;nbsp;Return&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&lt;br&gt;
actually&amp;nbsp;read&amp;nbsp;(which&amp;nbsp;might&amp;nbsp;be&amp;nbsp;less&amp;nbsp;than&amp;nbsp;len&amp;nbsp;but&amp;nbsp;is&amp;nbsp;never&amp;nbsp;more&amp;nbsp;than&amp;nbsp;len),&amp;nbsp;or&lt;br&gt;
return&amp;nbsp;-1&amp;nbsp;when&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;reached&amp;nbsp;(no&amp;nbsp;byte&amp;nbsp;is&amp;nbsp;available&amp;nbsp;to&lt;br&gt;
read).&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;reset()&amp;nbsp;&lt;br&gt;
Reposition&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;to&amp;nbsp;the&amp;nbsp;position&amp;nbsp;at&amp;nbsp;the&amp;nbsp;time&amp;nbsp;mark()&amp;nbsp;was&amp;nbsp;last&amp;nbsp;called.&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;has&amp;nbsp;not&amp;nbsp;been&amp;nbsp;marked&lt;br&gt;
or&amp;nbsp;the&amp;nbsp;mark&amp;nbsp;has&amp;nbsp;been&amp;nbsp;invalidated.&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;skip(long&amp;nbsp;n)&lt;br&gt;
Skip&amp;nbsp;over&amp;nbsp;and&amp;nbsp;discard&amp;nbsp;n&amp;nbsp;bytes&amp;nbsp;of&amp;nbsp;data&amp;nbsp;from&amp;nbsp;this&amp;nbsp;input&amp;nbsp;stream.&amp;nbsp;This&amp;nbsp;method&lt;br&gt;
might&amp;nbsp;skip&amp;nbsp;over&amp;nbsp;some&amp;nbsp;smaller&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;(possibly&amp;nbsp;zero);&amp;nbsp;for&amp;nbsp;example,&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;reached&amp;nbsp;before&amp;nbsp;n&amp;nbsp;bytes&amp;nbsp;have&amp;nbsp;been&amp;nbsp;skipped.&lt;br&gt;
The&amp;nbsp;actual&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;skipped&amp;nbsp;is&amp;nbsp;returned.&lt;br&gt;
&lt;br&gt;
==============================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;and&amp;nbsp;FileInputStream&lt;br&gt;
&lt;br&gt;
Files&amp;nbsp;are&amp;nbsp;common&amp;nbsp;stream&amp;nbsp;destinations&amp;nbsp;and&amp;nbsp;sources.&amp;nbsp;The&amp;nbsp;concrete&amp;nbsp;FileOutputStream&lt;br&gt;
class&amp;nbsp;lets&amp;nbsp;you&amp;nbsp;write&amp;nbsp;a&amp;nbsp;stream&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;to&amp;nbsp;a&amp;nbsp;file;&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;FileInputStream&amp;nbsp;class&lt;br&gt;
lets&amp;nbsp;you&amp;nbsp;read&amp;nbsp;a&amp;nbsp;stream&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;from&amp;nbsp;a&amp;nbsp;file.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FileOutputStream&amp;nbsp;subclasses&amp;nbsp;OutputStream&amp;nbsp;and&amp;nbsp;declares&amp;nbsp;five&amp;nbsp;constructors&amp;nbsp;for&amp;nbsp;creating&lt;br&gt;
file&amp;nbsp;output&amp;nbsp;streams.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;FileOutputStream(String&amp;nbsp;name)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;file&amp;nbsp;output&lt;br&gt;
stream&amp;nbsp;to&amp;nbsp;the&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;identified&amp;nbsp;by&amp;nbsp;name.&amp;nbsp;This&amp;nbsp;constructor&amp;nbsp;throws&amp;nbsp;FileNotFoundException&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;file&amp;nbsp;doesn?t&amp;nbsp;exist&amp;nbsp;and&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;created,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;directory&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;a&amp;nbsp;normal&lt;br&gt;
file,&amp;nbsp;or&amp;nbsp;the&amp;nbsp;file&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;otherwise&amp;nbsp;opened&amp;nbsp;foroutput.&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;uses&amp;nbsp;FileOutputStream(String&amp;nbsp;name)&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;file&amp;nbsp;output&amp;nbsp;stream&lt;br&gt;
with&amp;nbsp;employee.dat&amp;nbsp;as&amp;nbsp;its&amp;nbsp;destination:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream("employee.dat");&lt;br&gt;
&lt;br&gt;
!!&lt;br&gt;
Tip&amp;nbsp;:&amp;nbsp;FileOutputStream(String&amp;nbsp;name)&amp;nbsp;overwrites&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file.&amp;nbsp;To&amp;nbsp;append&amp;nbsp;data&amp;nbsp;instead&amp;nbsp;of&lt;br&gt;
overwriting&amp;nbsp;existing&amp;nbsp;content,&amp;nbsp;call&amp;nbsp;a&amp;nbsp;FileOutputStream&amp;nbsp;constructor&amp;nbsp;that&amp;nbsp;includes&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;append&lt;br&gt;
parameter&amp;nbsp;and&amp;nbsp;pass&amp;nbsp;true&amp;nbsp;to&amp;nbsp;this&amp;nbsp;parameter.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FileInputStream&amp;nbsp;subclasses&amp;nbsp;InputStream&amp;nbsp;and&amp;nbsp;declares&amp;nbsp;three&amp;nbsp;constructors&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;file&amp;nbsp;input&lt;br&gt;
streams.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;FileInputStream(String&amp;nbsp;name)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;file&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;from&amp;nbsp;the&amp;nbsp;existing&lt;br&gt;
file&amp;nbsp;identified&amp;nbsp;by&amp;nbsp;name.&amp;nbsp;This&amp;nbsp;constructor&amp;nbsp;throws&amp;nbsp;FileNotFoundException&amp;nbsp;when&amp;nbsp;the&amp;nbsp;file&amp;nbsp;doesn?t&amp;nbsp;exist,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;directory&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;a&amp;nbsp;normal&amp;nbsp;file,&amp;nbsp;or&amp;nbsp;there&amp;nbsp;is&amp;nbsp;some&amp;nbsp;other&amp;nbsp;reason&amp;nbsp;for&amp;nbsp;why&amp;nbsp;the&amp;nbsp;file&amp;nbsp;cannot&amp;nbsp;be&lt;br&gt;
opened&amp;nbsp;for&amp;nbsp;input.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;uses&amp;nbsp;FileInputStream(String&amp;nbsp;name)&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;file&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;with&lt;br&gt;
employee.dat&amp;nbsp;as&amp;nbsp;its&amp;nbsp;source:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream("employee.dat");&lt;br&gt;
&lt;br&gt;
=============&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating&amp;nbsp;a&amp;nbsp;hexadecimal&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;file&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
package&amp;nbsp;streams;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FileInputStream_Create_hexadecimal_representation_of_a_file&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;static&amp;nbsp;String&amp;nbsp;LINE_SEPARATOR&amp;nbsp;=&amp;nbsp;System.getProperty("line.separator");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;dest&amp;nbsp;=&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scan&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(args.length&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filename&amp;nbsp;=System.getProperty("user.dir/")&amp;nbsp;+&amp;nbsp;args[0];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dest&amp;nbsp;=&amp;nbsp;filename&amp;nbsp;+&amp;nbsp;".hex";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Input&amp;nbsp;filename&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filename&amp;nbsp;=System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/"&amp;nbsp;+&amp;nbsp;scan.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dest&amp;nbsp;=&amp;nbsp;filename&amp;nbsp;+&amp;nbsp;".hex";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(FileInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream(filename);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(dest))&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringBuffer&amp;nbsp;sb&amp;nbsp;=&amp;nbsp;new&amp;nbsp;StringBuffer();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;offset&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;ch;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;((ch&amp;nbsp;=&amp;nbsp;fis.read())&amp;nbsp;!=&amp;nbsp;-1)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;((offset&amp;nbsp;%&amp;nbsp;16)&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeStr(fos,&amp;nbsp;toHexStr(offset,&amp;nbsp;8));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fos.write('&amp;nbsp;');&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeStr(fos,&amp;nbsp;toHexStr(ch,&amp;nbsp;2));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fos.write('&amp;nbsp;');&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(ch&amp;nbsp;&lt;&amp;nbsp;32&amp;nbsp;||&amp;nbsp;ch&amp;nbsp;&gt;&amp;nbsp;127)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.append('.');&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.append((char)&amp;nbsp;ch);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;((++offset&amp;nbsp;%&amp;nbsp;16)&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeStr(fos,&amp;nbsp;sb.toString()&amp;nbsp;+&amp;nbsp;LINE_SEPARATOR);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.setLength(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(sb.length()&amp;nbsp;!=&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;16&amp;nbsp;-&amp;nbsp;sb.length();&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeStr(fos,&amp;nbsp;"&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeStr(fos,&amp;nbsp;sb.toString()&amp;nbsp;+&amp;nbsp;LINE_SEPARATOR);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;String&amp;nbsp;toHexStr(int&amp;nbsp;value,&amp;nbsp;int&amp;nbsp;fieldWidth)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringBuffer&amp;nbsp;sb&amp;nbsp;=&amp;nbsp;new&amp;nbsp;StringBuffer(Integer.toHexString(value));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.reverse();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;len&amp;nbsp;=&amp;nbsp;sb.length();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;fieldWidth&amp;nbsp;-&amp;nbsp;len;&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.append('0');&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.reverse();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;sb.toString();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;void&amp;nbsp;writeStr(FileOutputStream&amp;nbsp;fos,&amp;nbsp;String&amp;nbsp;s)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;s.length();&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fos.write(s.charAt(i));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===============================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FilterOutputStream&amp;nbsp;and&amp;nbsp;FilterInputStream&lt;br&gt;
File&amp;nbsp;streams&amp;nbsp;pass&amp;nbsp;bytes&amp;nbsp;unchanged&amp;nbsp;to&amp;nbsp;their&amp;nbsp;destinations.&amp;nbsp;Java&amp;nbsp;also&amp;nbsp;supports&amp;nbsp;filter&amp;nbsp;streams&amp;nbsp;that&lt;br&gt;
buffer,&amp;nbsp;--&gt;&amp;nbsp;compress/uncompress&amp;nbsp;&lt;--,&amp;nbsp;--&gt;encrypt/decrypt&amp;nbsp;&lt;--,&amp;nbsp;or&amp;nbsp;otherwise&amp;nbsp;manipulate&amp;nbsp;an&amp;nbsp;input&lt;br&gt;
stream?s&amp;nbsp;byte&amp;nbsp;sequence&amp;nbsp;before&amp;nbsp;it&amp;nbsp;reaches&amp;nbsp;its&amp;nbsp;destination.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;filter&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;takes&amp;nbsp;the&amp;nbsp;data&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;its&amp;nbsp;write()&amp;nbsp;methods&amp;nbsp;(the&amp;nbsp;input&amp;nbsp;stream),&amp;nbsp;filters&amp;nbsp;it,&lt;br&gt;
and&amp;nbsp;writes&amp;nbsp;the&amp;nbsp;filtered&amp;nbsp;data&amp;nbsp;to&amp;nbsp;an&amp;nbsp;underlying&amp;nbsp;output&amp;nbsp;stream,&amp;nbsp;which&amp;nbsp;might&amp;nbsp;be&amp;nbsp;another&amp;nbsp;filter&amp;nbsp;output&lt;br&gt;
stream&amp;nbsp;or&amp;nbsp;a&amp;nbsp;destination&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;such&amp;nbsp;as&amp;nbsp;a&amp;nbsp;file&amp;nbsp;output&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
Filter&amp;nbsp;output&amp;nbsp;streams&amp;nbsp;are&amp;nbsp;created&amp;nbsp;from&amp;nbsp;subclasses&amp;nbsp;of&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;FilterOutputStream&amp;nbsp;class,&lt;br&gt;
an&amp;nbsp;OutputStream&amp;nbsp;subclass.&amp;nbsp;FilterOutputStream&amp;nbsp;declares&amp;nbsp;a&amp;nbsp;single&amp;nbsp;FilterOutputStream(OutputStream&amp;nbsp;out)&lt;br&gt;
constructor&amp;nbsp;that&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;filter&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;built&amp;nbsp;on&amp;nbsp;top&amp;nbsp;of&amp;nbsp;out,&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;output&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EXAMPLE&amp;nbsp;:&amp;nbsp;Scramble/UnScramble&amp;nbsp;-&amp;nbsp;files&amp;nbsp;&amp;nbsp;(scramble&amp;nbsp;-&amp;nbsp;shyfruvaty)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;streams;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileNotFoundException;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.FilterInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FilterOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.InputStream;&lt;br&gt;
import&amp;nbsp;java.io.OutputStream;&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;Scramble&amp;nbsp;-&amp;nbsp;shyfruvaty&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FilterOutputStreamScramble&amp;nbsp;extends&amp;nbsp;FilterOutputStream{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;map;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;FilterOutputStreamScramble(OutputStream&amp;nbsp;out,&amp;nbsp;int[]&amp;nbsp;map)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(out);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map&amp;nbsp;==&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;NullPointerException("map&amp;nbsp;is&amp;nbsp;null");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map.length&amp;nbsp;!=&amp;nbsp;256)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;IllegalArgumentException("map.length&amp;nbsp;!=&amp;nbsp;256");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.map&amp;nbsp;=&amp;nbsp;map;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;write(int&amp;nbsp;b)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//out.write(b&amp;nbsp;+&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.write(map[b]);&amp;nbsp;//&amp;nbsp;scramble&amp;nbsp;based&amp;nbsp;on&amp;nbsp;map&amp;nbsp;,&amp;nbsp;map&amp;nbsp;is&amp;nbsp;the&amp;nbsp;key&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println("Using&amp;nbsp;FilterOutputStream");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scan&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;keysMap&amp;nbsp;=&amp;nbsp;createRandomMap();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Input&amp;nbsp;filename&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&amp;nbsp;+"/files/"+&amp;nbsp;scan.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Start&amp;nbsp;Scrambling&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(FileInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream(filename);&amp;nbsp;FilterOutputStreamScramble&amp;nbsp;sos&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;FilterOutputStreamScramble(new&amp;nbsp;FileOutputStream(filename+".scrambled"),&amp;nbsp;keysMap)){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;b&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;((b&amp;nbsp;=&amp;nbsp;fis.read())&amp;nbsp;!=&amp;nbsp;-1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sos.write(b);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;End&amp;nbsp;Scrambling&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Start&amp;nbsp;&amp;nbsp;Unscrabling&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(UnscrambleInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;UnscrambleInputStream(new&amp;nbsp;FileInputStream(filename+".scrambled"),&amp;nbsp;keysMap);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(filename&amp;nbsp;+&amp;nbsp;".scrambled"&amp;nbsp;+&amp;nbsp;".unscrambled");){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;b&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(&amp;nbsp;(b&amp;nbsp;=&amp;nbsp;fis.read())&amp;nbsp;!=&amp;nbsp;-1)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fos.write(b);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e1)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e1.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Finish&amp;nbsp;Unscrabling&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;int[]&amp;nbsp;createRandomMap()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int[]&amp;nbsp;map&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[256];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;map.length;&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map[i]&amp;nbsp;=&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;shuffle&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Random&amp;nbsp;r&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;map.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;n&amp;nbsp;=&amp;nbsp;r.nextInt(map.length);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;temp&amp;nbsp;=&amp;nbsp;map[i];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map[i]&amp;nbsp;=&amp;nbsp;map[n];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map[n]&amp;nbsp;=&amp;nbsp;temp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;map;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;UnscrambleInputStream&amp;nbsp;extends&amp;nbsp;FilterInputStream&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int[]&amp;nbsp;reversedMap;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UnscrambleInputStream(InputStream&amp;nbsp;in,&amp;nbsp;int[]&amp;nbsp;map)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map&amp;nbsp;==&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;NullPointerException("map&amp;nbsp;is&amp;nbsp;null");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map.length&amp;nbsp;!=&amp;nbsp;256)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;IllegalArgumentException("map.length&amp;nbsp;!=&amp;nbsp;256");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.reversedMap&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[256];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i=0;i&lt;256;i++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.reversedMap[map[i]]&amp;nbsp;=&amp;nbsp;i&amp;nbsp;;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;read()&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;value&amp;nbsp;=&amp;nbsp;in.read();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(value&amp;nbsp;==&amp;nbsp;-1&amp;nbsp;){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;value;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.reversedMap[value];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;read(byte[]&amp;nbsp;b,&amp;nbsp;int&amp;nbsp;off,&amp;nbsp;int&amp;nbsp;len)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;nBytes&amp;nbsp;=&amp;nbsp;in.read(b,&amp;nbsp;off,&amp;nbsp;len);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(nBytes&amp;nbsp;&lt;=&amp;nbsp;0)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;nBytes;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;nBytes;&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b[off&amp;nbsp;+&amp;nbsp;i]&amp;nbsp;=&amp;nbsp;(byte)&amp;nbsp;reversedMap[off&amp;nbsp;+&amp;nbsp;i];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;nBytes;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
THIS&amp;nbsp;Example&amp;nbsp;scramble&amp;nbsp;input&amp;nbsp;file,&amp;nbsp;and&amp;nbsp;after&amp;nbsp;this&amp;nbsp;unscramle.&lt;br&gt;
(We&amp;nbsp;used&amp;nbsp;random&amp;nbsp;array&amp;nbsp;for&amp;nbsp;scramle,&amp;nbsp;this&amp;nbsp;array&amp;nbsp;is&amp;nbsp;using&amp;nbsp;as&amp;nbsp;keys&amp;nbsp;for&amp;nbsp;uscramble)&lt;br&gt;
&lt;br&gt;
================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedOutputStream&amp;nbsp;and&amp;nbsp;BufferedInputStream&lt;br&gt;
&lt;br&gt;
FileOutputStream&amp;nbsp;and&amp;nbsp;FileInputStream&amp;nbsp;have&amp;nbsp;a&amp;nbsp;performance&amp;nbsp;problem.&amp;nbsp;Each&amp;nbsp;file&amp;nbsp;output&lt;br&gt;
stream&amp;nbsp;write()&amp;nbsp;method&amp;nbsp;call&amp;nbsp;and&amp;nbsp;file&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;read()&amp;nbsp;method&amp;nbsp;call&amp;nbsp;results&amp;nbsp;in&amp;nbsp;a&amp;nbsp;call&amp;nbsp;to&lt;br&gt;
one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;platform?s&amp;nbsp;native&amp;nbsp;methods,&amp;nbsp;and&amp;nbsp;these&amp;nbsp;native&amp;nbsp;method&amp;nbsp;calls&amp;nbsp;slow&lt;br&gt;
down&amp;nbsp;I/O.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;concrete&amp;nbsp;BufferedOutputStream&amp;nbsp;and&amp;nbsp;BufferedInputStream&amp;nbsp;filter&amp;nbsp;stream&amp;nbsp;classes&lt;br&gt;
improve&amp;nbsp;performance&amp;nbsp;by&amp;nbsp;minimizing&amp;nbsp;underlying&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;write()&amp;nbsp;and&amp;nbsp;underlying&amp;nbsp;input&lt;br&gt;
stream&amp;nbsp;read()&amp;nbsp;method&amp;nbsp;calls.&amp;nbsp;Instead,&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;BufferedOutputStream?s&amp;nbsp;write()&amp;nbsp;and&lt;br&gt;
BufferedInputStream?s&amp;nbsp;read()&amp;nbsp;methods&amp;nbsp;take&amp;nbsp;Java&amp;nbsp;buffers&amp;nbsp;into&amp;nbsp;account:&lt;br&gt;
&amp;nbsp;-&amp;nbsp;&amp;nbsp;&amp;nbsp;When&amp;nbsp;a&amp;nbsp;write&amp;nbsp;buffer&amp;nbsp;is&amp;nbsp;full,&amp;nbsp;write()&amp;nbsp;calls&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;write()&lt;br&gt;
method&amp;nbsp;to&amp;nbsp;empty&amp;nbsp;the&amp;nbsp;buffer.&amp;nbsp;Subsequent&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;BufferedOutputStream?s&amp;nbsp;write()&lt;br&gt;
methods&amp;nbsp;store&amp;nbsp;bytes&amp;nbsp;in&amp;nbsp;this&amp;nbsp;buffer&amp;nbsp;until&amp;nbsp;it?s&amp;nbsp;once&amp;nbsp;again&amp;nbsp;full.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;When&amp;nbsp;the&amp;nbsp;read&amp;nbsp;buffer&amp;nbsp;is&amp;nbsp;empty,&amp;nbsp;read()&amp;nbsp;calls&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;read()&lt;br&gt;
method&amp;nbsp;to&amp;nbsp;fill&amp;nbsp;the&amp;nbsp;buffer.&amp;nbsp;Subsequent&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;BufferedInputStream?s&amp;nbsp;read()&lt;br&gt;
methods&amp;nbsp;return&amp;nbsp;bytes&amp;nbsp;from&amp;nbsp;this&amp;nbsp;buffer&amp;nbsp;until&amp;nbsp;it?s&amp;nbsp;once&amp;nbsp;again&amp;nbsp;empty.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
BufferedOutputStream&amp;nbsp;declares&amp;nbsp;the&amp;nbsp;following&amp;nbsp;constructors:&lt;br&gt;
-&amp;nbsp;BufferedOutputStream(OutputStream&amp;nbsp;out)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;buffered&amp;nbsp;output&amp;nbsp;stream&amp;nbsp;that&lt;br&gt;
streams&amp;nbsp;its&amp;nbsp;output&amp;nbsp;to&amp;nbsp;out.&amp;nbsp;An&amp;nbsp;internal&amp;nbsp;buffer&amp;nbsp;is&amp;nbsp;created&amp;nbsp;to&amp;nbsp;store&amp;nbsp;bytes&amp;nbsp;written&amp;nbsp;to&amp;nbsp;out.&lt;br&gt;
-&amp;nbsp;BufferedOutputStream(OutputStream&amp;nbsp;out,&amp;nbsp;int&amp;nbsp;size)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;buffered&amp;nbsp;output&lt;br&gt;
stream&amp;nbsp;that&amp;nbsp;streams&amp;nbsp;its&amp;nbsp;output&amp;nbsp;to&amp;nbsp;out.&amp;nbsp;An&amp;nbsp;internal&amp;nbsp;buffer&amp;nbsp;of&amp;nbsp;length&amp;nbsp;size&amp;nbsp;is&amp;nbsp;created&amp;nbsp;to&lt;br&gt;
store&amp;nbsp;bytes&amp;nbsp;written&amp;nbsp;to&amp;nbsp;out.&lt;br&gt;
&lt;br&gt;
BufferedInputStream&amp;nbsp;declares&amp;nbsp;the&amp;nbsp;following&amp;nbsp;constructors:&lt;br&gt;
-&amp;nbsp;BufferedInputStream(InputStream&amp;nbsp;in)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;buffered&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;that&lt;br&gt;
streams&amp;nbsp;its&amp;nbsp;input&amp;nbsp;from&amp;nbsp;in.&amp;nbsp;An&amp;nbsp;internal&amp;nbsp;buffer&amp;nbsp;is&amp;nbsp;created&amp;nbsp;to&amp;nbsp;store&amp;nbsp;bytes&amp;nbsp;read&amp;nbsp;from&amp;nbsp;in.&lt;br&gt;
-&amp;nbsp;BufferedInputStream(InputStream&amp;nbsp;in,&amp;nbsp;int&amp;nbsp;size)&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;buffered&amp;nbsp;input&amp;nbsp;stream&lt;br&gt;
that&amp;nbsp;streams&amp;nbsp;its&amp;nbsp;input&amp;nbsp;from&amp;nbsp;in.&amp;nbsp;An&amp;nbsp;internal&amp;nbsp;buffer&amp;nbsp;of&amp;nbsp;length&amp;nbsp;size&amp;nbsp;is&amp;nbsp;created&amp;nbsp;to&amp;nbsp;store&lt;br&gt;
bytes&amp;nbsp;read&amp;nbsp;from&amp;nbsp;in.&lt;br&gt;
&lt;br&gt;
write&amp;nbsp;method&amp;nbsp;in&amp;nbsp;BufferedOutputStream&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;write(int&amp;nbsp;b)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(count&amp;nbsp;&gt;=&amp;nbsp;buf.length)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flushBuffer();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buf[count++]&amp;nbsp;=&amp;nbsp;(byte)b;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;streams;&lt;br&gt;
import&amp;nbsp;java.io.BufferedOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
import&amp;nbsp;java.io.FileNotFoundException;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BufferedOutputStreamHelloWorld&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scan&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;scan.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/"&amp;nbsp;+&amp;nbsp;filename&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedOutputStream&amp;nbsp;bos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;BufferedOutputStream(fos);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;text&amp;nbsp;=&amp;nbsp;"Hello";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;text.length();&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bos.write(text.charAt(i));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bos.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fos.close();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===========================================================&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DataOutputStream&amp;nbsp;and&amp;nbsp;DataInputStream&lt;br&gt;
&lt;br&gt;
FileOutputStream&amp;nbsp;and&amp;nbsp;FileInputStream&amp;nbsp;are&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;and&amp;nbsp;reading&amp;nbsp;bytes&amp;nbsp;and&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;bytes.&lt;br&gt;
However,&amp;nbsp;they&amp;nbsp;provide&amp;nbsp;no&amp;nbsp;support&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;and&amp;nbsp;reading&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;values&amp;nbsp;(such&amp;nbsp;as&amp;nbsp;integers)&amp;nbsp;and&lt;br&gt;
strings.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;this&amp;nbsp;reason,&amp;nbsp;Java&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;--&gt;&gt;&amp;nbsp;DataOutputStream&amp;nbsp;and&amp;nbsp;DataInputStream&amp;nbsp;filter&amp;nbsp;stream&lt;br&gt;
classes.&amp;nbsp;Each&amp;nbsp;class&amp;nbsp;overcomes&amp;nbsp;this&amp;nbsp;limitation&amp;nbsp;by&amp;nbsp;providing&amp;nbsp;methods&amp;nbsp;to&amp;nbsp;write&amp;nbsp;or&amp;nbsp;read&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;values&lt;br&gt;
and&amp;nbsp;strings&amp;nbsp;in&amp;nbsp;a&amp;nbsp;platform-independent&amp;nbsp;way:&lt;br&gt;
-&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;values&amp;nbsp;are&amp;nbsp;written&amp;nbsp;and&amp;nbsp;read&amp;nbsp;in&amp;nbsp;big-endian&amp;nbsp;format&amp;nbsp;(the&amp;nbsp;most&amp;nbsp;significant&amp;nbsp;byte&lt;br&gt;
comes&amp;nbsp;first).&amp;nbsp;Check&amp;nbsp;out&amp;nbsp;Wikipedia?s&amp;nbsp;?Endianness?&amp;nbsp;entry&lt;br&gt;
-&amp;nbsp;&amp;nbsp;Floating-point&amp;nbsp;and&amp;nbsp;double&amp;nbsp;precision&amp;nbsp;floating-point&amp;nbsp;values&amp;nbsp;are&amp;nbsp;written&amp;nbsp;and&amp;nbsp;read&lt;br&gt;
according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;IEEE&amp;nbsp;754&amp;nbsp;standard,&amp;nbsp;which&amp;nbsp;specifies&amp;nbsp;four&amp;nbsp;bytes&amp;nbsp;per&amp;nbsp;floating-point&lt;br&gt;
value&amp;nbsp;and&amp;nbsp;eight&amp;nbsp;bytes&amp;nbsp;per&amp;nbsp;double&amp;nbsp;precision&amp;nbsp;floating-point&amp;nbsp;value.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;Strings&amp;nbsp;are&amp;nbsp;written&amp;nbsp;and&amp;nbsp;read&amp;nbsp;according&amp;nbsp;to&amp;nbsp;a&amp;nbsp;modified&amp;nbsp;version&amp;nbsp;of&amp;nbsp;UTF-8,&amp;nbsp;a&amp;nbsp;variablelength&lt;br&gt;
encoding&amp;nbsp;standard&amp;nbsp;for&amp;nbsp;efficiently&amp;nbsp;storing&amp;nbsp;two-byte&amp;nbsp;Unicode&amp;nbsp;characters.&lt;br&gt;
Check&amp;nbsp;out&amp;nbsp;Wikipedia?s&amp;nbsp;?UTF-8?&amp;nbsp;entry&lt;br&gt;
&lt;br&gt;
DataOutputStream&amp;nbsp;declares&amp;nbsp;a&amp;nbsp;single&amp;nbsp;DataOutputStream(OutputStream&amp;nbsp;out)&amp;nbsp;constructor.&amp;nbsp;Because&lt;br&gt;
this&amp;nbsp;class&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;DataOutput&amp;nbsp;interface,&amp;nbsp;DataOutputStream&amp;nbsp;also&amp;nbsp;provides&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
same-named&amp;nbsp;write&amp;nbsp;methods&amp;nbsp;as&amp;nbsp;provided&amp;nbsp;by&amp;nbsp;RandomAccessFile.&lt;br&gt;
DataInputStream&amp;nbsp;declares&amp;nbsp;a&amp;nbsp;single&amp;nbsp;DataInputStream(InputStream&amp;nbsp;in)&amp;nbsp;constructor.&amp;nbsp;Because&amp;nbsp;this&lt;br&gt;
class&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;DataInput&amp;nbsp;interface,&amp;nbsp;DataInputStream&amp;nbsp;also&amp;nbsp;provides&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;same-named&lt;br&gt;
read&amp;nbsp;methods&amp;nbsp;as&amp;nbsp;provided&amp;nbsp;by&amp;nbsp;RandomAccessFile.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;save&amp;nbsp;and&amp;nbsp;read&amp;nbsp;from&amp;nbsp;file&amp;nbsp;Java&amp;nbsp;types&amp;nbsp;:&amp;nbsp;int,&amp;nbsp;double&amp;nbsp;and&amp;nbsp;String&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;streams;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.DataInputStream;&lt;br&gt;
import&amp;nbsp;java.io.DataOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.File;&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;DataOutputStreamandDataInputStream&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File&amp;nbsp;file&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File(System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/int_double_string_int_double_string.txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Bean&amp;nbsp;[]&amp;nbsp;beans&amp;nbsp;=&amp;nbsp;{new&amp;nbsp;Bean(1,&amp;nbsp;1.0,&amp;nbsp;"hello&amp;nbsp;1"),&amp;nbsp;new&amp;nbsp;Bean(2,&amp;nbsp;2.0,&amp;nbsp;"hello&amp;nbsp;2"),&amp;nbsp;new&amp;nbsp;Bean(3,&amp;nbsp;3.0,&amp;nbsp;"hello&amp;nbsp;3")};&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DataOutputStream&amp;nbsp;dos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;DataOutputStream(new&amp;nbsp;FileOutputStream(file));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;beans.length;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dos.writeInt(beans[i].getI());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dos.writeDouble(beans[i].getD());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dos.writeUTF(beans[i].getS());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dos.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DataInputStream&amp;nbsp;dis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;DataInputStream(new&amp;nbsp;FileInputStream(file));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList&lt;Bean&gt;&amp;nbsp;beansList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(dis.available()&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;beansList.add(new&amp;nbsp;Bean(dis.readInt(),&amp;nbsp;dis.readDouble(),&amp;nbsp;dis.readUTF()));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dis.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(Bean&amp;nbsp;item&amp;nbsp;:&amp;nbsp;beansList){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Bean&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;double&amp;nbsp;d;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;s;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Bean(int&amp;nbsp;i,&amp;nbsp;double&amp;nbsp;d,&amp;nbsp;String&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.i&amp;nbsp;=&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.d&amp;nbsp;=&amp;nbsp;d;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.s&amp;nbsp;=&amp;nbsp;s;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"{"&amp;nbsp;+&amp;nbsp;this.getI()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&amp;nbsp;+&amp;nbsp;this.getD()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&amp;nbsp;+&amp;nbsp;this.getS()&amp;nbsp;+&amp;nbsp;"}";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getI()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;double&amp;nbsp;getD()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;d;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getS()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;s;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=========================================================</questionanswer>
  </question>
  <question id="1_0_0_4_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;Writer&amp;nbsp;and&amp;nbsp;Reader&amp;nbsp;Classes,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;examples.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.io&amp;nbsp;package&amp;nbsp;provides&amp;nbsp;several&amp;nbsp;writer&amp;nbsp;and&amp;nbsp;reader&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;are&amp;nbsp;descendents&amp;nbsp;of&amp;nbsp;the&amp;nbsp;abstract&lt;br&gt;
Writer&amp;nbsp;and&amp;nbsp;Reader&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='560'&amp;nbsp;height='560'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/JavaReadersAndWriters.png'/&gt;&lt;br&gt;
=====&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Writer&amp;nbsp;and&amp;nbsp;Reader&lt;br&gt;
Java&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;Writer&amp;nbsp;and&amp;nbsp;Reader&amp;nbsp;classes&amp;nbsp;for&amp;nbsp;performing&amp;nbsp;character&amp;nbsp;I/O.&amp;nbsp;Writer&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
superclass&amp;nbsp;of&amp;nbsp;all&amp;nbsp;writer&amp;nbsp;subclasses.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;list&amp;nbsp;identifies&amp;nbsp;differences&amp;nbsp;between&amp;nbsp;Writer&lt;br&gt;
and&amp;nbsp;OutputStream:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Writer&amp;nbsp;declares&amp;nbsp;several&amp;nbsp;append()&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;appending&amp;nbsp;characters&amp;nbsp;to&amp;nbsp;this&amp;nbsp;writer.&lt;br&gt;
These&amp;nbsp;methods&amp;nbsp;exist&amp;nbsp;because&amp;nbsp;Writer&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;java.lang.Appendable&lt;br&gt;
interface,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;used&amp;nbsp;in&amp;nbsp;partnership&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Formatter&amp;nbsp;class&amp;nbsp;(see&amp;nbsp;Appendix&amp;nbsp;C)&lt;br&gt;
to&amp;nbsp;output&amp;nbsp;formatted&amp;nbsp;strings.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Writer&amp;nbsp;declares&amp;nbsp;additional&amp;nbsp;write()&amp;nbsp;methods,&amp;nbsp;including&amp;nbsp;a&amp;nbsp;convenient&amp;nbsp;void&lt;br&gt;
write(String&amp;nbsp;str)&amp;nbsp;method&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object?s&amp;nbsp;characters&amp;nbsp;to&amp;nbsp;this&amp;nbsp;writer.&lt;br&gt;
&lt;br&gt;
Reader&amp;nbsp;is&amp;nbsp;the&amp;nbsp;superclass&amp;nbsp;of&amp;nbsp;all&amp;nbsp;reader&amp;nbsp;subclasses.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;list&amp;nbsp;identifies&amp;nbsp;differences&lt;br&gt;
between&amp;nbsp;Reader&amp;nbsp;and&amp;nbsp;InputStream:&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Reader&amp;nbsp;declares&amp;nbsp;read(char[])&amp;nbsp;and&amp;nbsp;read(char[],&amp;nbsp;int,&amp;nbsp;int)&amp;nbsp;methods&amp;nbsp;instead&amp;nbsp;of&lt;br&gt;
read(byte[])&amp;nbsp;and&amp;nbsp;read(byte[],&amp;nbsp;int,&amp;nbsp;int)&amp;nbsp;methods.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Reader&amp;nbsp;doesn?t&amp;nbsp;declare&amp;nbsp;an&amp;nbsp;available()&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Reader&amp;nbsp;declares&amp;nbsp;a&amp;nbsp;boolean&amp;nbsp;ready()&amp;nbsp;method&amp;nbsp;that&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;when&amp;nbsp;the&amp;nbsp;next&amp;nbsp;read()&lt;br&gt;
call&amp;nbsp;is&amp;nbsp;guaranteed&amp;nbsp;not&amp;nbsp;to&amp;nbsp;block&amp;nbsp;for&amp;nbsp;input.&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;Reader&amp;nbsp;declares&amp;nbsp;an&amp;nbsp;int&amp;nbsp;read(CharBuffer&amp;nbsp;target)&amp;nbsp;method&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;characters&lt;br&gt;
from&amp;nbsp;a&amp;nbsp;character&amp;nbsp;buffer.&lt;br&gt;
&lt;br&gt;
==============================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStreamWriter&amp;nbsp;and&amp;nbsp;InputStreamReader&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;concrete&amp;nbsp;OutputStreamWriter&amp;nbsp;class&amp;nbsp;(a&amp;nbsp;Writer&amp;nbsp;subclass)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bridge&amp;nbsp;between&amp;nbsp;an&lt;br&gt;
incoming&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;characters&amp;nbsp;and&amp;nbsp;an&amp;nbsp;outgoing&amp;nbsp;stream&amp;nbsp;of&amp;nbsp;bytes.&amp;nbsp;Characters&lt;br&gt;
written&amp;nbsp;to&amp;nbsp;this&amp;nbsp;writer&amp;nbsp;are&amp;nbsp;encoded&amp;nbsp;into&amp;nbsp;bytes&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;default&amp;nbsp;or&amp;nbsp;specified&lt;br&gt;
character&amp;nbsp;encoding.&lt;br&gt;
&lt;br&gt;
OutputStreamWriter&amp;nbsp;declares&amp;nbsp;four&amp;nbsp;constructors,&amp;nbsp;including&amp;nbsp;the&amp;nbsp;following:&lt;br&gt;
-&amp;nbsp;&amp;nbsp;OutputStreamWriter(OutputStream&amp;nbsp;out)&lt;br&gt;
-&amp;nbsp;&amp;nbsp;OutputStreamWriter(OutputStream&amp;nbsp;out,&amp;nbsp;String&amp;nbsp;charsetName)&lt;br&gt;
creates&amp;nbsp;a&amp;nbsp;bridge&amp;nbsp;between&amp;nbsp;an&amp;nbsp;incoming&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;characters&amp;nbsp;(passed&amp;nbsp;to&lt;br&gt;
OutputStreamWriter&amp;nbsp;via&amp;nbsp;its&amp;nbsp;append()&amp;nbsp;and&amp;nbsp;write()&amp;nbsp;methods)&amp;nbsp;and&amp;nbsp;underlying&lt;br&gt;
output&amp;nbsp;stream&amp;nbsp;out.&amp;nbsp;charsetName&amp;nbsp;identifies&amp;nbsp;the&amp;nbsp;character&amp;nbsp;encoding&amp;nbsp;used&amp;nbsp;to&amp;nbsp;encode&lt;br&gt;
characters&amp;nbsp;into&amp;nbsp;bytes.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;concrete&amp;nbsp;InputStreamReader&amp;nbsp;class&amp;nbsp;(a&amp;nbsp;Reader&amp;nbsp;subclass)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;--&gt;&gt;&amp;nbsp;bridge&amp;nbsp;between&amp;nbsp;an&lt;br&gt;
incoming&amp;nbsp;stream&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;and&amp;nbsp;an&amp;nbsp;outgoing&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;characters.&amp;nbsp;Characters&amp;nbsp;read&lt;br&gt;
from&amp;nbsp;this&amp;nbsp;reader&amp;nbsp;are&amp;nbsp;decoded&amp;nbsp;from&amp;nbsp;bytes&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;default&amp;nbsp;or&amp;nbsp;specified&amp;nbsp;character&lt;br&gt;
encoding&amp;nbsp;&lt;&lt;--.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;second&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;bridge&amp;nbsp;to&amp;nbsp;an&amp;nbsp;underlying&amp;nbsp;file&amp;nbsp;output&lt;br&gt;
stream&amp;nbsp;so&amp;nbsp;that&amp;nbsp;Polish&amp;nbsp;text&amp;nbsp;can&amp;nbsp;be&amp;nbsp;written&amp;nbsp;to&amp;nbsp;an&amp;nbsp;ISO/IEC&amp;nbsp;8859-2-encoded&amp;nbsp;file.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream("polish.txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStreamWriter&amp;nbsp;osw&amp;nbsp;=&amp;nbsp;new&amp;nbsp;OutputStreamWriter(fos,&amp;nbsp;"8859_2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char&amp;nbsp;ch&amp;nbsp;=&amp;nbsp;'\u0323';&amp;nbsp;//&amp;nbsp;Accented&amp;nbsp;N.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;osw.write(ch);&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;second&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;bridge&amp;nbsp;to&amp;nbsp;an&amp;nbsp;underlying&amp;nbsp;file&amp;nbsp;input&lt;br&gt;
stream&amp;nbsp;so&amp;nbsp;that&amp;nbsp;Polish&amp;nbsp;text&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;from&amp;nbsp;an&amp;nbsp;ISO/IEC&amp;nbsp;8859-2-encoded&amp;nbsp;file.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream("polish.txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader&amp;nbsp;isr&amp;nbsp;=&amp;nbsp;new&amp;nbsp;InputStreamReader(fis,&amp;nbsp;"8859_2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;char&amp;nbsp;ch&amp;nbsp;=&amp;nbsp;isr.read(ch);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;Read&amp;nbsp;file&amp;nbsp;and&amp;nbsp;write&amp;nbsp;File&amp;nbsp;using&amp;nbsp;readers&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;writersandreaders;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.BufferedReader;&lt;br&gt;
import&amp;nbsp;java.io.BufferedWriter;&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileReader;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.InputStreamReader;&lt;br&gt;
import&amp;nbsp;java.io.OutputStreamWriter;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;UsingInputStreamReader&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader&amp;nbsp;r&amp;nbsp;=&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;InputStreamReader(new&amp;nbsp;FileInputStream(System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/1.txt"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedReader&amp;nbsp;buf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;BufferedReader(r);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;line;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(&amp;nbsp;(line&amp;nbsp;=&amp;nbsp;buf.readLine()&amp;nbsp;)&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(line);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStreamWriter&amp;nbsp;w&amp;nbsp;=&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;OutputStreamWriter(new&amp;nbsp;FileOutputStream(System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/1.txt.copy"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedWriter&amp;nbsp;bufwriter&amp;nbsp;=&amp;nbsp;new&amp;nbsp;BufferedWriter(w);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bufwriter.write("hello");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bufwriter.close();&amp;nbsp;//&amp;nbsp;dont&amp;nbsp;forget&amp;nbsp;to&amp;nbsp;close&amp;nbsp;!&amp;nbsp;all&amp;nbsp;streams&amp;nbsp;and&amp;nbsp;readers&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;w.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buf.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;r.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileWriter&amp;nbsp;and&amp;nbsp;FileReader&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FileWriter&amp;nbsp;is&amp;nbsp;a&amp;nbsp;convenience&amp;nbsp;class&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;characters&amp;nbsp;to&amp;nbsp;files.&amp;nbsp;It&amp;nbsp;subclasses&amp;nbsp;OutputStreamWriter,&amp;nbsp;and&amp;nbsp;its&lt;br&gt;
constructors&amp;nbsp;call&amp;nbsp;OutputStreamWriter(OutputStream).&amp;nbsp;An&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;this&amp;nbsp;class&amp;nbsp;is&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;code&amp;nbsp;fragment:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(pathname);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStreamWriter&amp;nbsp;osw;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;osw&amp;nbsp;=&amp;nbsp;new&amp;nbsp;OutputStreamWriter(fos,&amp;nbsp;System.getProperty("file.encoding"));&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FileReader&amp;nbsp;is&amp;nbsp;a&amp;nbsp;convenience&amp;nbsp;class&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;characters&amp;nbsp;from&amp;nbsp;files.&amp;nbsp;It&amp;nbsp;subclasses&amp;nbsp;InputStreamReader,&lt;br&gt;
and&amp;nbsp;its&amp;nbsp;constructors&amp;nbsp;call&amp;nbsp;InputStreamReader(InputStream).&amp;nbsp;An&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;this&amp;nbsp;class&amp;nbsp;is&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;code&amp;nbsp;fragment:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileInputStream&amp;nbsp;fis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream(pathname);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader&amp;nbsp;isr;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isr&amp;nbsp;=&amp;nbsp;new&amp;nbsp;InputStreamReader(fis,&amp;nbsp;System.getProperty("file.encoding"));&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;writersandreaders;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileReader;&lt;br&gt;
import&amp;nbsp;java.io.FileWriter;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FileWriterHello&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;PROJECT_FILES&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"/files/";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileWriter&amp;nbsp;fw&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileReader&amp;nbsp;fr&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fw&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileWriter(PROJECT_FILES&amp;nbsp;+&amp;nbsp;"temp.txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fw.write(".............&amp;nbsp;end");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fr&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileReader(PROJECT_FILES&amp;nbsp;+&amp;nbsp;"temp.txt");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;using&amp;nbsp;FileWriter&amp;nbsp;we&amp;nbsp;can&amp;nbsp;write&amp;nbsp;to&amp;nbsp;file&amp;nbsp;char[]&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}finally{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fw.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_4_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;RandomAccessFile&amp;nbsp;class,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Files&amp;nbsp;can&amp;nbsp;be&amp;nbsp;created&amp;nbsp;and/or&amp;nbsp;opened&amp;nbsp;for&amp;nbsp;random&amp;nbsp;access&amp;nbsp;in&amp;nbsp;which&amp;nbsp;write&amp;nbsp;and&amp;nbsp;read&amp;nbsp;operations&amp;nbsp;can&lt;br&gt;
occur&amp;nbsp;until&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;closed.&amp;nbsp;Java&amp;nbsp;supports&amp;nbsp;this&amp;nbsp;random&amp;nbsp;access&amp;nbsp;via&amp;nbsp;its&amp;nbsp;concrete&lt;br&gt;
java.io.RandomAccessFile&amp;nbsp;class.&amp;nbsp;RandomAccessFile&amp;nbsp;declares&amp;nbsp;the&amp;nbsp;following&amp;nbsp;constructors:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;RandomAccessFile(File&amp;nbsp;file,&amp;nbsp;String&amp;nbsp;mode)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;RandomAccessFile(String&amp;nbsp;pathname,&amp;nbsp;String&amp;nbsp;mode)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Either&amp;nbsp;constructor?s&amp;nbsp;mode&amp;nbsp;argument&amp;nbsp;must&amp;nbsp;be&amp;nbsp;one&amp;nbsp;of&amp;nbsp;"r",&amp;nbsp;"rw",&amp;nbsp;"rws",&amp;nbsp;or&amp;nbsp;"rwd";&amp;nbsp;otherwise,&lt;br&gt;
the&amp;nbsp;constructor&amp;nbsp;throws&amp;nbsp;IllegalArgumentException.&amp;nbsp;These&amp;nbsp;string&amp;nbsp;literals&amp;nbsp;have&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
meanings:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;"r"&amp;nbsp;informs&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;open&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;only.&amp;nbsp;Any&amp;nbsp;attempt&lt;br&gt;
to&amp;nbsp;write&amp;nbsp;to&amp;nbsp;the&amp;nbsp;file&amp;nbsp;results&amp;nbsp;in&amp;nbsp;a&amp;nbsp;thrown&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;IOException&amp;nbsp;class.&lt;br&gt;
-&amp;nbsp;"rw"&amp;nbsp;informs&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;create&amp;nbsp;and&amp;nbsp;open&amp;nbsp;a&amp;nbsp;new&amp;nbsp;file&amp;nbsp;when&amp;nbsp;it&amp;nbsp;doesn?t&amp;nbsp;exist&lt;br&gt;
for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing,&amp;nbsp;or&amp;nbsp;open&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing.&lt;br&gt;
-&amp;nbsp;"rwd"&amp;nbsp;informs&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;create&amp;nbsp;and&amp;nbsp;open&amp;nbsp;a&amp;nbsp;new&amp;nbsp;file&amp;nbsp;when&amp;nbsp;it&amp;nbsp;doesn?t&amp;nbsp;exist&lt;br&gt;
for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing,&amp;nbsp;or&amp;nbsp;open&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing.&lt;br&gt;
Furthermore,&amp;nbsp;each&amp;nbsp;update&amp;nbsp;to&amp;nbsp;the&amp;nbsp;file?s&amp;nbsp;content&amp;nbsp;must&amp;nbsp;be&amp;nbsp;written&amp;nbsp;synchronously&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;underlying&amp;nbsp;storage&amp;nbsp;device.&lt;br&gt;
-&amp;nbsp;"rws"&amp;nbsp;informs&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;create&amp;nbsp;and&amp;nbsp;open&amp;nbsp;a&amp;nbsp;new&amp;nbsp;file&amp;nbsp;when&amp;nbsp;it&amp;nbsp;doesn?t&amp;nbsp;exist&lt;br&gt;
for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing,&amp;nbsp;or&amp;nbsp;open&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing.&lt;br&gt;
Furthermore,&amp;nbsp;each&amp;nbsp;update&amp;nbsp;to&amp;nbsp;the&amp;nbsp;file?s&amp;nbsp;content&amp;nbsp;or&amp;nbsp;metadata&amp;nbsp;must&amp;nbsp;be&amp;nbsp;written&lt;br&gt;
synchronously&amp;nbsp;to&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;storage&amp;nbsp;device.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
The&amp;nbsp;"rwd"&amp;nbsp;and&amp;nbsp;"rws"&amp;nbsp;modes&amp;nbsp;ensure&amp;nbsp;than&amp;nbsp;any&amp;nbsp;writes&amp;nbsp;to&amp;nbsp;a&amp;nbsp;file&amp;nbsp;located&amp;nbsp;on&amp;nbsp;a&amp;nbsp;local&amp;nbsp;storage&amp;nbsp;device&lt;br&gt;
are&amp;nbsp;written&amp;nbsp;to&amp;nbsp;the&amp;nbsp;device,&amp;nbsp;which&amp;nbsp;guarantees&amp;nbsp;that&amp;nbsp;critical&amp;nbsp;data&amp;nbsp;isn?t&amp;nbsp;lost&amp;nbsp;when&amp;nbsp;the&amp;nbsp;operating&lt;br&gt;
system&amp;nbsp;crashes.&amp;nbsp;No&amp;nbsp;guarantee&amp;nbsp;is&amp;nbsp;made&amp;nbsp;when&amp;nbsp;the&amp;nbsp;file&amp;nbsp;doesn?t&amp;nbsp;reside&amp;nbsp;on&amp;nbsp;a&amp;nbsp;local&amp;nbsp;device.&lt;br&gt;
&lt;br&gt;
==========&lt;br&gt;
A&amp;nbsp;random&amp;nbsp;access&amp;nbsp;file&amp;nbsp;is&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;file&amp;nbsp;pointer,&amp;nbsp;a&amp;nbsp;cursor&amp;nbsp;that&amp;nbsp;identifies&amp;nbsp;the&amp;nbsp;location&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;next&amp;nbsp;byte&amp;nbsp;to&amp;nbsp;write&amp;nbsp;or&amp;nbsp;read.&amp;nbsp;When&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;file&amp;nbsp;is&amp;nbsp;opened,&amp;nbsp;the&amp;nbsp;file&amp;nbsp;pointer&amp;nbsp;is&amp;nbsp;set&amp;nbsp;to&amp;nbsp;its&amp;nbsp;first&lt;br&gt;
byte,&amp;nbsp;at&amp;nbsp;offset&amp;nbsp;0.&amp;nbsp;The&amp;nbsp;file&amp;nbsp;pointer&amp;nbsp;is&amp;nbsp;also&amp;nbsp;set&amp;nbsp;to&amp;nbsp;0&amp;nbsp;when&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;created.&lt;br&gt;
Write&amp;nbsp;and&amp;nbsp;read&amp;nbsp;operations&amp;nbsp;start&amp;nbsp;at&amp;nbsp;the&amp;nbsp;file&amp;nbsp;pointer&amp;nbsp;and&amp;nbsp;advance&amp;nbsp;it&amp;nbsp;past&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&lt;br&gt;
written&amp;nbsp;or&amp;nbsp;read.&amp;nbsp;Operations&amp;nbsp;that&amp;nbsp;write&amp;nbsp;past&amp;nbsp;the&amp;nbsp;current&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;cause&amp;nbsp;the&amp;nbsp;file&amp;nbsp;to&amp;nbsp;be&lt;br&gt;
extended.&amp;nbsp;These&amp;nbsp;operations&amp;nbsp;continue&amp;nbsp;until&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;closed.&lt;br&gt;
&lt;br&gt;
=====-===&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RandomAccessFile&amp;nbsp;Methods&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;close()&lt;br&gt;
Close&amp;nbsp;the&amp;nbsp;file&amp;nbsp;and&amp;nbsp;release&amp;nbsp;any&amp;nbsp;associated&amp;nbsp;platform&amp;nbsp;resources.&lt;br&gt;
Subsequent&amp;nbsp;writes&amp;nbsp;or&amp;nbsp;reads&amp;nbsp;result&amp;nbsp;in&amp;nbsp;IOException.&lt;br&gt;
-&amp;nbsp;FileDescriptor&amp;nbsp;getFD()&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;file?s&amp;nbsp;associated&amp;nbsp;file&amp;nbsp;descriptor&amp;nbsp;object.&amp;nbsp;This&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;getFilePointer()&lt;br&gt;
Return&amp;nbsp;the&amp;nbsp;file&amp;nbsp;pointer?s&amp;nbsp;current&amp;nbsp;zero-based&amp;nbsp;byte&amp;nbsp;offset&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;file.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;error&lt;br&gt;
occurs.&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;length()&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;read()&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;read(byte[]&amp;nbsp;b)&lt;br&gt;
Read&amp;nbsp;up&amp;nbsp;to&amp;nbsp;b.length&amp;nbsp;bytes&amp;nbsp;of&amp;nbsp;data&amp;nbsp;from&amp;nbsp;the&amp;nbsp;file&amp;nbsp;into&amp;nbsp;byte&lt;br&gt;
array&amp;nbsp;b.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;blocks&amp;nbsp;until&amp;nbsp;at&amp;nbsp;least&amp;nbsp;one&amp;nbsp;byte&amp;nbsp;of&amp;nbsp;input&amp;nbsp;is&lt;br&gt;
available.&amp;nbsp;It&amp;nbsp;returns&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;read&amp;nbsp;into&amp;nbsp;the&amp;nbsp;array,&lt;br&gt;
or&amp;nbsp;returns&amp;nbsp;-1&amp;nbsp;when&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;reached.&amp;nbsp;It&amp;nbsp;throws&lt;br&gt;
NullPointerException&amp;nbsp;when&amp;nbsp;b&amp;nbsp;is&amp;nbsp;null,&amp;nbsp;and&amp;nbsp;IOException&amp;nbsp;when&lt;br&gt;
an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;char&amp;nbsp;readChar()&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;readInt()&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;seek(long&amp;nbsp;pos)&lt;br&gt;
Set&amp;nbsp;the&amp;nbsp;file&amp;nbsp;pointer?s&amp;nbsp;current&amp;nbsp;offset&amp;nbsp;to&amp;nbsp;pos&amp;nbsp;(which&amp;nbsp;is&amp;nbsp;measured&lt;br&gt;
in&amp;nbsp;bytes&amp;nbsp;from&amp;nbsp;the&amp;nbsp;beginning&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file).&amp;nbsp;When&amp;nbsp;the&amp;nbsp;offset&amp;nbsp;is&amp;nbsp;set&lt;br&gt;
beyond&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file,&amp;nbsp;the&amp;nbsp;file?s&amp;nbsp;length&amp;nbsp;doesn?t&amp;nbsp;change.&lt;br&gt;
The&amp;nbsp;file&amp;nbsp;length&amp;nbsp;will&amp;nbsp;only&amp;nbsp;change&amp;nbsp;by&amp;nbsp;writing&amp;nbsp;after&amp;nbsp;the&amp;nbsp;offset&amp;nbsp;has&lt;br&gt;
been&amp;nbsp;set&amp;nbsp;beyond&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;file.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&lt;br&gt;
IOException&amp;nbsp;when&amp;nbsp;the&amp;nbsp;value&amp;nbsp;in&amp;nbsp;pos&amp;nbsp;is&amp;nbsp;negative,&amp;nbsp;or&amp;nbsp;when&amp;nbsp;an&lt;br&gt;
I/O&amp;nbsp;error&amp;nbsp;occurs.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;setLength(long&amp;nbsp;newLength)&lt;br&gt;
Set&amp;nbsp;the&amp;nbsp;file?s&amp;nbsp;length.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;present&amp;nbsp;length&amp;nbsp;as&amp;nbsp;returned&amp;nbsp;by&lt;br&gt;
length()&amp;nbsp;is&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;newLength,&amp;nbsp;the&amp;nbsp;file&amp;nbsp;is&amp;nbsp;truncated.&amp;nbsp;In&lt;br&gt;
this&amp;nbsp;case,&amp;nbsp;if&amp;nbsp;the&amp;nbsp;file&amp;nbsp;offset&amp;nbsp;as&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;getFilePointer()&amp;nbsp;is&lt;br&gt;
greater&amp;nbsp;than&amp;nbsp;newLength,&amp;nbsp;the&amp;nbsp;offset&amp;nbsp;will&amp;nbsp;be&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;newLength&lt;br&gt;
after&amp;nbsp;setLength()&amp;nbsp;returns.&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;skipBytes(int&amp;nbsp;n)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;write(byte[]&amp;nbsp;b)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;write(int&amp;nbsp;b)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;writeChars(String&amp;nbsp;s)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;writeInt(int&amp;nbsp;i)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
We&amp;nbsp;have&amp;nbsp;simple&amp;nbsp;class&amp;nbsp;Dto&amp;nbsp;(with&amp;nbsp;2&amp;nbsp;fields)&amp;nbsp;,&amp;nbsp;and&amp;nbsp;we&amp;nbsp;will&amp;nbsp;save&amp;nbsp;3&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;this&amp;nbsp;class&lt;br&gt;
in&amp;nbsp;RandomAccess&amp;nbsp;file&amp;nbsp;,&amp;nbsp;next&amp;nbsp;we&amp;nbsp;will&amp;nbsp;read&amp;nbsp;it&amp;nbsp;=)&amp;nbsp;Next&amp;nbsp;we&amp;nbsp;will&amp;nbsp;change&amp;nbsp;int&amp;nbsp;and&amp;nbsp;String&amp;nbsp;values&amp;nbsp;inside&lt;br&gt;
this&amp;nbsp;file.&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;randomaccessfile;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileNotFoundException;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.RandomAccessFile;&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;RandomAccessFileHello&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;FILENAME&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"/files/employee.dat";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//simplyReadWriteToRandomAccessFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//changeintValueInRandomAccessFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;changeStringInRandomAccessFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;simplyReadWriteToRandomAccessFile()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Start&amp;nbsp;&lt;SIMPLY&amp;nbsp;WRITE&amp;nbsp;READ&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RandomAccessFile&amp;nbsp;rnf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RandomAccessFile(FILENAME,&amp;nbsp;"rw");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList&lt;Dto&gt;&amp;nbsp;values&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;will&amp;nbsp;write&amp;nbsp;Strings&amp;nbsp;to&amp;nbsp;file&amp;nbsp;in&amp;nbsp;such&amp;nbsp;way&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;-&amp;nbsp;maximum&amp;nbsp;string&amp;nbsp;length&amp;nbsp;equals&amp;nbsp;100&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;-&amp;nbsp;if&amp;nbsp;string&amp;nbsp;length&amp;nbsp;is&amp;nbsp;less&amp;nbsp;then&amp;nbsp;100&amp;nbsp;,&amp;nbsp;we&amp;nbsp;will&amp;nbsp;add&amp;nbsp;spaces.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dto&amp;nbsp;val1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dto(10,&amp;nbsp;String.format("%100s",&amp;nbsp;"hello10"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dto&amp;nbsp;val2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dto(100,String.format("%100s",&amp;nbsp;"hello100")&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dto&amp;nbsp;val3&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dto(1000,&amp;nbsp;String.format("%100s",&amp;nbsp;"hello1000......"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values.add(val1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values.add(val2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values.add(val3);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Dto&amp;nbsp;item&amp;nbsp;:&amp;nbsp;values)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.writeInt(item.i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.writeUTF(item.s);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.close();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RandomAccessFile(FILENAME,&amp;nbsp;"rw");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(rnf.getFilePointer()&amp;nbsp;&lt;&amp;nbsp;rnf.length()&amp;nbsp;-&amp;nbsp;2)&amp;nbsp;{&amp;nbsp;//&amp;nbsp;i&amp;nbsp;dont&amp;nbsp;know&amp;nbsp;why&amp;nbsp;2&amp;nbsp;=)&amp;nbsp;,&amp;nbsp;but&amp;nbsp;if&amp;nbsp;works&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(rnf.readInt()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;&amp;nbsp;"&amp;nbsp;+&amp;nbsp;rnf.readUTF().trim());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;//////////////////////&amp;nbsp;FINISH&amp;nbsp;&lt;SIMPLY&amp;nbsp;WRITE&amp;nbsp;READ&gt;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;changeintValueInRandomAccessFile(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;simplyReadWriteToRandomAccessFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("=================================");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RandomAccessFile&amp;nbsp;rnf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RandomAccessFile(FILENAME,&amp;nbsp;"rw");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.seek(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.writeInt(101);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.seek(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(rnf.getFilePointer()&amp;nbsp;&lt;&amp;nbsp;rnf.length()&amp;nbsp;-&amp;nbsp;2)&amp;nbsp;{&amp;nbsp;//&amp;nbsp;i&amp;nbsp;dont&amp;nbsp;know&amp;nbsp;why&amp;nbsp;2&amp;nbsp;=)&amp;nbsp;,&amp;nbsp;but&amp;nbsp;if&amp;nbsp;works&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(rnf.readInt()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;&amp;nbsp;"&amp;nbsp;+&amp;nbsp;rnf.readUTF());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;catch&amp;nbsp;block&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;changeStringInRandomAccessFile(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Write&amp;nbsp;data&amp;nbsp;to&amp;nbsp;file&amp;nbsp;employee.dat");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;simplyReadWriteToRandomAccessFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("=================================");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RandomAccessFile&amp;nbsp;rnf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RandomAccessFile(FILENAME,&amp;nbsp;"rw");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.seek(4);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.writeUTF(String.format("%100s",&amp;nbsp;"New&amp;nbsp;Line"));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;replace&amp;nbsp;!!!&amp;nbsp;text&amp;nbsp;inside&amp;nbsp;file&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.seek(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(rnf.getFilePointer()&amp;nbsp;&lt;&amp;nbsp;rnf.length()&amp;nbsp;-&amp;nbsp;2)&amp;nbsp;{&amp;nbsp;//&amp;nbsp;i&amp;nbsp;dont&amp;nbsp;know&amp;nbsp;why&amp;nbsp;2&amp;nbsp;=)&amp;nbsp;,&amp;nbsp;but&amp;nbsp;if&amp;nbsp;works&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(rnf.readInt()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;&amp;nbsp;"&amp;nbsp;+&amp;nbsp;rnf.readUTF().trim());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rnf.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(FileNotFoundException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Dto&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Dto(int&amp;nbsp;i,&amp;nbsp;String&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.i&amp;nbsp;=&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.s&amp;nbsp;=&amp;nbsp;s;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;s;&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Conclusion&amp;nbsp;:&amp;nbsp;&lt;br&gt;
some&amp;nbsp;difficults&amp;nbsp;with&amp;nbsp;strings&amp;nbsp;in&amp;nbsp;RandomAccessFile&amp;nbsp;,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;only&amp;nbsp;replace&amp;nbsp;strings&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;br&gt;
same&amp;nbsp;length.&amp;nbsp;So&amp;nbsp;we&amp;nbsp;pad&amp;nbsp;strings&amp;nbsp;(max&amp;nbsp;size&amp;nbsp;of&amp;nbsp;our&amp;nbsp;string&amp;nbsp;=&amp;nbsp;100&amp;nbsp;)&amp;nbsp;,&amp;nbsp;and&amp;nbsp;we&amp;nbsp;can&amp;nbsp;easy&amp;nbsp;replace&amp;nbsp;&lt;br&gt;
strings&amp;nbsp;inside&amp;nbsp;file&amp;nbsp;=)&lt;br&gt;
==================================</questionanswer>
  </question>
  <question id="1_0_0_4_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;Serialization&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;forms&amp;nbsp;of&amp;nbsp;serialization&amp;nbsp;Java&amp;nbsp;supports&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
Java&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;DataOutputStream&amp;nbsp;and&amp;nbsp;DataInputStream&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;stream&amp;nbsp;primitive&lt;br&gt;
type&amp;nbsp;values&amp;nbsp;and&amp;nbsp;String&amp;nbsp;objects.&amp;nbsp;However,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;use&amp;nbsp;these&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;stream&lt;br&gt;
non-String&amp;nbsp;objects.&amp;nbsp;Instead,&amp;nbsp;you&amp;nbsp;must&amp;nbsp;use&amp;nbsp;object&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization&amp;nbsp;to&amp;nbsp;stream&lt;br&gt;
objects&amp;nbsp;of&amp;nbsp;arbitrary&amp;nbsp;types.&lt;br&gt;
&lt;br&gt;
DEF:&lt;br&gt;
Object&amp;nbsp;serialization&amp;nbsp;is&amp;nbsp;a&amp;nbsp;JVM&amp;nbsp;mechanism&amp;nbsp;for&amp;nbsp;serializing&amp;nbsp;object&amp;nbsp;state&amp;nbsp;into&amp;nbsp;a&amp;nbsp;stream&amp;nbsp;of&amp;nbsp;bytes.&lt;br&gt;
Its&amp;nbsp;deserialization&amp;nbsp;counterpart&amp;nbsp;is&amp;nbsp;a&amp;nbsp;JVM&amp;nbsp;mechanism&amp;nbsp;for&amp;nbsp;deserializing&amp;nbsp;this&amp;nbsp;state&amp;nbsp;from&amp;nbsp;a&lt;br&gt;
byte&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;An&amp;nbsp;object?s&amp;nbsp;state&amp;nbsp;consists&amp;nbsp;of&amp;nbsp;instance&amp;nbsp;fields&amp;nbsp;that&amp;nbsp;store&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;values&amp;nbsp;and/or&lt;br&gt;
references&amp;nbsp;to&amp;nbsp;other&amp;nbsp;objects.&amp;nbsp;When&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;serialized,&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;part&amp;nbsp;of&amp;nbsp;this&lt;br&gt;
state&amp;nbsp;are&amp;nbsp;also&amp;nbsp;serialized&amp;nbsp;(unless&amp;nbsp;you&amp;nbsp;prevent&amp;nbsp;them&amp;nbsp;from&amp;nbsp;being&amp;nbsp;serialized),&amp;nbsp;their&amp;nbsp;objects&amp;nbsp;are&lt;br&gt;
serialized&amp;nbsp;unless&amp;nbsp;prevented,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!&lt;br&gt;
Java&amp;nbsp;supports&amp;nbsp;THREE&amp;nbsp;FORMS&amp;nbsp;of&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;default&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization,&lt;br&gt;
-&amp;nbsp;custom&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization,&lt;br&gt;
-&amp;nbsp;externalization.&lt;br&gt;
&lt;br&gt;
===================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Default&amp;nbsp;Serialization&amp;nbsp;and&amp;nbsp;Deserialization&lt;br&gt;
&lt;br&gt;
Default&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization&amp;nbsp;is&amp;nbsp;the&amp;nbsp;easiest&amp;nbsp;form&amp;nbsp;to&amp;nbsp;use&amp;nbsp;but&amp;nbsp;offers&amp;nbsp;little&amp;nbsp;control&lt;br&gt;
over&amp;nbsp;how&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;serialized&amp;nbsp;and&amp;nbsp;deserialized.&amp;nbsp;Although&amp;nbsp;Java&amp;nbsp;handles&amp;nbsp;most&amp;nbsp;of&amp;nbsp;the&amp;nbsp;work&lt;br&gt;
on&amp;nbsp;your&amp;nbsp;behalf,&amp;nbsp;there&amp;nbsp;are&amp;nbsp;a&amp;nbsp;couple&amp;nbsp;of&amp;nbsp;tasks&amp;nbsp;that&amp;nbsp;you&amp;nbsp;must&amp;nbsp;perform.&lt;br&gt;
&lt;br&gt;
Your&amp;nbsp;first&amp;nbsp;task&amp;nbsp;is&amp;nbsp;to&amp;nbsp;have&amp;nbsp;the&amp;nbsp;class&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;that?s&amp;nbsp;to&amp;nbsp;be&amp;nbsp;serialized&amp;nbsp;implement&amp;nbsp;the&lt;br&gt;
java.io.Serializable&amp;nbsp;interface&amp;nbsp;(directly,&amp;nbsp;or&amp;nbsp;indirectly&amp;nbsp;via&amp;nbsp;the&amp;nbsp;class?s&amp;nbsp;superclass).&amp;nbsp;The&amp;nbsp;rationale&lt;br&gt;
for&amp;nbsp;implementing&amp;nbsp;Serializable&amp;nbsp;is&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;unlimited&amp;nbsp;serialization.&lt;br&gt;
&lt;br&gt;
:::&amp;nbsp;Note&amp;nbsp;Serializable&amp;nbsp;is&amp;nbsp;an&amp;nbsp;empty&amp;nbsp;marker&amp;nbsp;interface&amp;nbsp;(there&amp;nbsp;are&amp;nbsp;no&amp;nbsp;methods&amp;nbsp;to&amp;nbsp;implement)&amp;nbsp;that&amp;nbsp;a&lt;br&gt;
class&amp;nbsp;implements&amp;nbsp;to&amp;nbsp;tell&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;that&amp;nbsp;it?s&amp;nbsp;okay&amp;nbsp;to&amp;nbsp;serialize&amp;nbsp;the&amp;nbsp;class?s&amp;nbsp;objects.&amp;nbsp;When&amp;nbsp;the&lt;br&gt;
serialization&amp;nbsp;mechanism&amp;nbsp;encounters&amp;nbsp;an&amp;nbsp;object&amp;nbsp;whose&amp;nbsp;class&amp;nbsp;doesn?t&amp;nbsp;implement&amp;nbsp;Serializable,&lt;br&gt;
it&amp;nbsp;throws&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;java.io.NotSerializableException&amp;nbsp;class&amp;nbsp;(an&amp;nbsp;indirect&amp;nbsp;subclass&amp;nbsp;of&lt;br&gt;
IOException).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
writeObject()&amp;nbsp;doesn?t&amp;nbsp;serialize&amp;nbsp;the&amp;nbsp;contents&amp;nbsp;of&amp;nbsp;static&amp;nbsp;fields.&amp;nbsp;In&amp;nbsp;contrast,&amp;nbsp;it&amp;nbsp;serializes&amp;nbsp;the&lt;br&gt;
contents&amp;nbsp;of&amp;nbsp;all&amp;nbsp;instance&amp;nbsp;fields&amp;nbsp;that&amp;nbsp;are&amp;nbsp;not&amp;nbsp;explicitly&amp;nbsp;prefixed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;transient&amp;nbsp;reserved&amp;nbsp;word.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;field&amp;nbsp;declaration:&lt;br&gt;
public&amp;nbsp;transient&amp;nbsp;char[]&amp;nbsp;password;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;declaration&amp;nbsp;specifies&amp;nbsp;transient&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;serializing&amp;nbsp;a&amp;nbsp;password&amp;nbsp;for&amp;nbsp;some&amp;nbsp;hacker&amp;nbsp;to&amp;nbsp;encounter.&lt;br&gt;
The&amp;nbsp;JVM?s&amp;nbsp;serialization&amp;nbsp;mechanism&amp;nbsp;ignores&amp;nbsp;any&amp;nbsp;instance&amp;nbsp;field&amp;nbsp;that?s&amp;nbsp;marked&amp;nbsp;transient.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
Note&amp;nbsp;Because&amp;nbsp;ObjectOutputStream&amp;nbsp;implements&amp;nbsp;DataOutput,&amp;nbsp;it&amp;nbsp;also&amp;nbsp;declares&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;writing&lt;br&gt;
primitive&amp;nbsp;type&amp;nbsp;values&amp;nbsp;and&amp;nbsp;strings&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object&amp;nbsp;output&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;ObjectInputStream&amp;nbsp;class&amp;nbsp;to&amp;nbsp;initiate&amp;nbsp;the&amp;nbsp;deserialization&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object?s&amp;nbsp;state&lt;br&gt;
from&amp;nbsp;an&amp;nbsp;object&amp;nbsp;input&amp;nbsp;stream.&amp;nbsp;This&amp;nbsp;class&amp;nbsp;declares&amp;nbsp;an&amp;nbsp;ObjectInputStream(InputStream&amp;nbsp;in)&amp;nbsp;constructor&amp;nbsp;that&lt;br&gt;
chains&amp;nbsp;the&amp;nbsp;object&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;to&amp;nbsp;the&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;in.&lt;br&gt;
When&amp;nbsp;you&amp;nbsp;pass&amp;nbsp;an&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;in,&amp;nbsp;this&amp;nbsp;constructor&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;read&amp;nbsp;a&amp;nbsp;serialization&lt;br&gt;
header&amp;nbsp;from&amp;nbsp;that&amp;nbsp;input&amp;nbsp;stream.&amp;nbsp;It&amp;nbsp;throws&amp;nbsp;NullPointerException&amp;nbsp;when&amp;nbsp;in&amp;nbsp;is&amp;nbsp;null,&amp;nbsp;IOException&amp;nbsp;when&amp;nbsp;an&lt;br&gt;
I/O&amp;nbsp;error&amp;nbsp;prevents&amp;nbsp;it&amp;nbsp;from&amp;nbsp;reading&amp;nbsp;this&amp;nbsp;header,&amp;nbsp;and&amp;nbsp;java.io.StreamCorruptedException&amp;nbsp;(an&amp;nbsp;indirect&lt;br&gt;
subclass&amp;nbsp;of&amp;nbsp;IOException)&amp;nbsp;when&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;header&amp;nbsp;is&amp;nbsp;incorrect.&lt;br&gt;
ObjectInputStream&amp;nbsp;deserializes&amp;nbsp;an&amp;nbsp;object&amp;nbsp;via&amp;nbsp;its&amp;nbsp;readObject()&amp;nbsp;method.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;read&lt;br&gt;
information&amp;nbsp;about&amp;nbsp;obj?s&amp;nbsp;class&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;values&amp;nbsp;of&amp;nbsp;obj?s&amp;nbsp;instance&amp;nbsp;fields&amp;nbsp;from&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;input&lt;br&gt;
stream.&lt;br&gt;
&lt;br&gt;
Every&amp;nbsp;serialized&amp;nbsp;object&amp;nbsp;has&amp;nbsp;an&amp;nbsp;&amp;nbsp;--&gt;&gt;&amp;nbsp;identifier.&amp;nbsp;The&amp;nbsp;deserialization&amp;nbsp;mechanism&amp;nbsp;compares&amp;nbsp;the&amp;nbsp;identifier&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;object&amp;nbsp;being&amp;nbsp;deserialized&amp;nbsp;with&amp;nbsp;the&amp;nbsp;serialized&amp;nbsp;identifier&amp;nbsp;of&amp;nbsp;its&amp;nbsp;class&amp;nbsp;(all&amp;nbsp;serializable&amp;nbsp;classes&amp;nbsp;are&lt;br&gt;
automatically&amp;nbsp;given&amp;nbsp;unique&amp;nbsp;identifiers&amp;nbsp;unless&amp;nbsp;they&amp;nbsp;explicitly&amp;nbsp;specify&amp;nbsp;their&amp;nbsp;own&amp;nbsp;identifiers)&amp;nbsp;and&amp;nbsp;causes&lt;br&gt;
InvalidClassException&amp;nbsp;to&amp;nbsp;be&amp;nbsp;thrown&amp;nbsp;when&amp;nbsp;it&amp;nbsp;detects&amp;nbsp;a&amp;nbsp;mismatch.&lt;br&gt;
Perhaps&amp;nbsp;you?ve&amp;nbsp;added&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;field&amp;nbsp;to&amp;nbsp;a&amp;nbsp;class,&amp;nbsp;and&amp;nbsp;you&amp;nbsp;want&amp;nbsp;the&amp;nbsp;deserialization&amp;nbsp;mechanism&amp;nbsp;to&lt;br&gt;
set&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;field&amp;nbsp;to&amp;nbsp;a&amp;nbsp;default&amp;nbsp;value&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;have&amp;nbsp;readObject()&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;InvalidClassException&lt;br&gt;
instance.&amp;nbsp;(The&amp;nbsp;next&amp;nbsp;time&amp;nbsp;you&amp;nbsp;serialize&amp;nbsp;the&amp;nbsp;object,&amp;nbsp;the&amp;nbsp;new&amp;nbsp;field?s&amp;nbsp;value&amp;nbsp;will&amp;nbsp;be&amp;nbsp;written&amp;nbsp;out.)&lt;br&gt;
----&gt;&gt;&amp;nbsp;You&amp;nbsp;can&amp;nbsp;avoid&amp;nbsp;the&amp;nbsp;thrown&amp;nbsp;InvalidClassException&amp;nbsp;instance&amp;nbsp;by&amp;nbsp;adding&amp;nbsp;a&amp;nbsp;static&amp;nbsp;final&amp;nbsp;long&lt;br&gt;
serialVersionUID&amp;nbsp;=&amp;nbsp;long&amp;nbsp;integer&amp;nbsp;value;&amp;nbsp;declaration&amp;nbsp;to&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;long&amp;nbsp;integer&amp;nbsp;value&amp;nbsp;must&amp;nbsp;be&lt;br&gt;
unique&amp;nbsp;and&amp;nbsp;is&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;stream&amp;nbsp;unique&amp;nbsp;identifier&amp;nbsp;(SUID).&lt;br&gt;
During&amp;nbsp;deserialization,&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;will&amp;nbsp;compare&amp;nbsp;the&amp;nbsp;deserialized&amp;nbsp;object?s&amp;nbsp;SUID&amp;nbsp;to&amp;nbsp;its&amp;nbsp;class?s&amp;nbsp;SUID.&amp;nbsp;If&lt;br&gt;
they&amp;nbsp;match,&amp;nbsp;readObject()&amp;nbsp;won?t&amp;nbsp;throw&amp;nbsp;InvalidClassException&amp;nbsp;when&amp;nbsp;it&amp;nbsp;encounters&amp;nbsp;a&amp;nbsp;compatible&amp;nbsp;class&lt;br&gt;
change&amp;nbsp;(e.g.,&amp;nbsp;adding&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;field).&amp;nbsp;However,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;still&amp;nbsp;throw&amp;nbsp;this&amp;nbsp;exception&amp;nbsp;when&amp;nbsp;it&amp;nbsp;encounters&amp;nbsp;an&lt;br&gt;
incompatible&amp;nbsp;class&amp;nbsp;change&amp;nbsp;(e.g.,&amp;nbsp;changing&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;field?s&amp;nbsp;name&amp;nbsp;or&amp;nbsp;type).&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee:&amp;nbsp;static&amp;nbsp;final&amp;nbsp;long&amp;nbsp;serialVersionUID&amp;nbsp;=&amp;nbsp;-6768634186769913248L;&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;serialization;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.EOFException;&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileNotFoundException;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.ObjectInputStream;&lt;br&gt;
import&amp;nbsp;java.io.ObjectOutputStream;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;DefaultSerialization&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;static&amp;nbsp;String&amp;nbsp;FILENAME&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&amp;nbsp;+&amp;nbsp;"serializedEmployees.dat";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException,&amp;nbsp;ClassNotFoundException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeObjects();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;readObjectsFromFile();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;writeObjects()&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee&amp;nbsp;e1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Employee("Andrew",&amp;nbsp;22,&amp;nbsp;"111");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee&amp;nbsp;e2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Employee("Ivan",&amp;nbsp;44,&amp;nbsp;"222");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ObjectOutputStream&amp;nbsp;oos&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;ObjectOutputStream(new&amp;nbsp;FileOutputStream(FILENAME));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.writeObject(e1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.writeObject(e2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;readObjectsFromFile()&amp;nbsp;throws&amp;nbsp;IOException,&amp;nbsp;ClassNotFoundException{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ObjectInputStream&amp;nbsp;ois&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ObjectInputStream(new&amp;nbsp;FileInputStream(FILENAME));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee&amp;nbsp;item&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(&amp;nbsp;(item&amp;nbsp;=&amp;nbsp;(Employee)ois.readObject())&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item.getName()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&amp;nbsp;+&amp;nbsp;item.getAge()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&amp;nbsp;+&amp;nbsp;item.getPass());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}catch(EOFException&amp;nbsp;e){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("end&amp;nbsp;of&amp;nbsp;file&amp;nbsp;");&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;best&amp;nbsp;solution&amp;nbsp;to&amp;nbsp;find&amp;nbsp;eof&amp;nbsp;file&amp;nbsp;is&amp;nbsp;to&amp;nbsp;write&amp;nbsp;'count'&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;on&amp;nbsp;the&amp;nbsp;begin&amp;nbsp;of&amp;nbsp;file&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ois.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Employee&amp;nbsp;implements&amp;nbsp;java.io.Serializable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transient&amp;nbsp;private&amp;nbsp;String&amp;nbsp;pass&amp;nbsp;=&amp;nbsp;"***";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age,&amp;nbsp;String&amp;nbsp;pass)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.pass&amp;nbsp;=&amp;nbsp;pass;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;getAge()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;getPass(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;pass;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Andrew&amp;nbsp;22&amp;nbsp;null&lt;br&gt;
Ivan&amp;nbsp;44&amp;nbsp;null&lt;br&gt;
end&amp;nbsp;of&amp;nbsp;file&amp;nbsp;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;null&amp;nbsp;for&amp;nbsp;transient&amp;nbsp;fields&amp;nbsp;!!!!!!!!!!!!!&lt;br&gt;
===================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Custom&amp;nbsp;Serialization&amp;nbsp;and&amp;nbsp;Deserialization&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;serialize&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;doesn?t&lt;br&gt;
implement&amp;nbsp;Serializable.&amp;nbsp;As&amp;nbsp;a&amp;nbsp;workaround,&amp;nbsp;you&amp;nbsp;subclass&amp;nbsp;this&amp;nbsp;other&amp;nbsp;class,&amp;nbsp;have&amp;nbsp;the&amp;nbsp;subclass&lt;br&gt;
implement&amp;nbsp;Serializable,&amp;nbsp;and&amp;nbsp;forward&amp;nbsp;subclass&amp;nbsp;constructor&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;the&amp;nbsp;superclass.&lt;br&gt;
Although&amp;nbsp;this&amp;nbsp;workaround&amp;nbsp;lets&amp;nbsp;you&amp;nbsp;serialize&amp;nbsp;subclass&amp;nbsp;objects,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;deserialize&lt;br&gt;
these&amp;nbsp;serialized&amp;nbsp;objects&amp;nbsp;when&amp;nbsp;the&amp;nbsp;----&gt;&gt;&amp;nbsp;superclass&amp;nbsp;doesn?t&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;noargument&amp;nbsp;constructor,&amp;nbsp;&lt;&lt;--&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;required&amp;nbsp;by&amp;nbsp;the&amp;nbsp;deserialization&amp;nbsp;mechanism.&lt;br&gt;
&lt;br&gt;
To&amp;nbsp;allow&amp;nbsp;subtypes&amp;nbsp;of&amp;nbsp;non-serializable&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;be&amp;nbsp;serialized,&amp;nbsp;the&amp;nbsp;subtype&amp;nbsp;may&amp;nbsp;assume&amp;nbsp;responsibility&amp;nbsp;for&lt;br&gt;
saving&amp;nbsp;and&amp;nbsp;restoring&amp;nbsp;the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;the&amp;nbsp;supertype's&amp;nbsp;public,&amp;nbsp;protected,&amp;nbsp;and&amp;nbsp;(if&amp;nbsp;accessible)&amp;nbsp;package&amp;nbsp;fields.&lt;br&gt;
The&amp;nbsp;subtype&amp;nbsp;may&amp;nbsp;assume&amp;nbsp;this&amp;nbsp;responsibility&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&amp;nbsp;class&amp;nbsp;it&amp;nbsp;extends&amp;nbsp;hasan&amp;nbsp;accessible&amp;nbsp;no-arg&amp;nbsp;constructor&lt;br&gt;
to&amp;nbsp;initialize&amp;nbsp;the&amp;nbsp;class's&amp;nbsp;state.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;an&amp;nbsp;error&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;class&amp;nbsp;Serializable&amp;nbsp;if&amp;nbsp;this&amp;nbsp;is&amp;nbsp;not&amp;nbsp;the&amp;nbsp;case.&amp;nbsp;The&amp;nbsp;error&amp;nbsp;will&lt;br&gt;
be&amp;nbsp;detected&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;serialization;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.ObjectInputStream;&lt;br&gt;
import&amp;nbsp;java.io.ObjectOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.Serializable;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;CustomSerialization&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;static&amp;nbsp;String&amp;nbsp;FILENAME&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"serializedEmployees.dat";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
/*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(ObjectOutputStream&amp;nbsp;oos&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ObjectOutputStream(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;FileOutputStream("employee.dat")))&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SerEmployee&amp;nbsp;se&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SerEmployee("John&amp;nbsp;Doe");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(se);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.writeObject(se);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("se&amp;nbsp;object&amp;nbsp;written&amp;nbsp;to&amp;nbsp;file");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(ObjectInputStream&amp;nbsp;ois&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ObjectInputStream(new&amp;nbsp;FileInputStream(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"employee.dat")))&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;o&amp;nbsp;=&amp;nbsp;ois.readObject();&amp;nbsp;//&amp;nbsp;serialization.SerEmployee;&amp;nbsp;no&amp;nbsp;valid&amp;nbsp;constructor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;because&amp;nbsp;parent&amp;nbsp;object&amp;nbsp;hasnt&amp;nbsp;empty&amp;nbsp;constructor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("se&amp;nbsp;object&amp;nbsp;read&amp;nbsp;from&amp;nbsp;byte&amp;nbsp;array");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}*/&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Employee1&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Employee1(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
/*&lt;br&gt;
class&amp;nbsp;SerEmployee&amp;nbsp;extends&amp;nbsp;Employee1&amp;nbsp;implements&amp;nbsp;Serializable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SerEmployee(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(name);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;because&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;hasnt&amp;nbsp;emty&amp;nbsp;constructor&amp;nbsp;we&amp;nbsp;need&amp;nbsp;Custom&amp;nbsp;Serialization&lt;br&gt;
}*/&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;SerEmployee&amp;nbsp;implements&amp;nbsp;Serializable&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Employee1&amp;nbsp;emp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SerEmployee(String&amp;nbsp;name){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;emp&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Employee1(name);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;writeObject(ObjectOutputStream&amp;nbsp;oos)&amp;nbsp;throws&amp;nbsp;IOException{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oos.writeUTF(name);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;readObject(ObjectInputStream&amp;nbsp;ois)throws&amp;nbsp;ClassNotFoundException,&amp;nbsp;IOException{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&amp;nbsp;=&amp;nbsp;ois.readUTF();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;emp&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Employee1(name);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
======================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Externalization&lt;br&gt;
Along&amp;nbsp;with&amp;nbsp;default&amp;nbsp;serialization/deserialization&amp;nbsp;and&amp;nbsp;custom&amp;nbsp;serialization/deserialization,&amp;nbsp;Java&lt;br&gt;
supports&amp;nbsp;externalization.&amp;nbsp;Unlike&amp;nbsp;default/custom&amp;nbsp;serialization/deserialization,&amp;nbsp;externalization&lt;br&gt;
offers&amp;nbsp;complete&amp;nbsp;control&amp;nbsp;over&amp;nbsp;the&amp;nbsp;serialization&amp;nbsp;and&amp;nbsp;deserialization&amp;nbsp;tasks.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;!!!!!!!!!!!!!&amp;nbsp;&amp;nbsp;Difference&amp;nbsp;between&amp;nbsp;Serialization&amp;nbsp;and&amp;nbsp;Externalization&amp;nbsp;:::::::::::&lt;br&gt;
Externalization&amp;nbsp;helps&amp;nbsp;you&amp;nbsp;improve&amp;nbsp;the&amp;nbsp;performance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;reflection-based&amp;nbsp;serialization&lt;br&gt;
and&amp;nbsp;deserialization&amp;nbsp;mechanisms&amp;nbsp;by&amp;nbsp;giving&amp;nbsp;you&amp;nbsp;complete&amp;nbsp;control&amp;nbsp;over&amp;nbsp;what&amp;nbsp;fields&amp;nbsp;are&amp;nbsp;serialized&lt;br&gt;
and&amp;nbsp;deserialized.&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;supports&amp;nbsp;externalization&amp;nbsp;via&amp;nbsp;its&amp;nbsp;java.io.Externalizable&amp;nbsp;&lt;&lt;--&amp;nbsp;interface.&amp;nbsp;This&amp;nbsp;interface&amp;nbsp;declares&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;pair&amp;nbsp;of&amp;nbsp;public&amp;nbsp;methods:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;writeExternal(ObjectOutput&amp;nbsp;out)&amp;nbsp;saves&amp;nbsp;the&amp;nbsp;calling&amp;nbsp;object?s&amp;nbsp;contents&amp;nbsp;by&lt;br&gt;
calling&amp;nbsp;various&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;the&amp;nbsp;out&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&lt;br&gt;
an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs.&amp;nbsp;(java.io.ObjectOutput&amp;nbsp;is&amp;nbsp;a&amp;nbsp;subinterface&amp;nbsp;of&amp;nbsp;DataOutput&amp;nbsp;and&amp;nbsp;is&lt;br&gt;
implemented&amp;nbsp;by&amp;nbsp;ObjectOutputStream.)&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;readExternal(ObjectInput&amp;nbsp;in)&amp;nbsp;restores&amp;nbsp;the&amp;nbsp;calling&amp;nbsp;object?s&amp;nbsp;contents&amp;nbsp;by&lt;br&gt;
calling&amp;nbsp;various&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;the&amp;nbsp;in&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;when&lt;br&gt;
an&amp;nbsp;I/O&amp;nbsp;error&amp;nbsp;occurs,&amp;nbsp;and&amp;nbsp;ClassNotFoundException&amp;nbsp;when&amp;nbsp;the&amp;nbsp;class&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
being&amp;nbsp;restored&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;found.&amp;nbsp;(java.io.ObjectInput&amp;nbsp;is&amp;nbsp;a&amp;nbsp;subinterface&amp;nbsp;of&lt;br&gt;
DataInput&amp;nbsp;and&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;by&amp;nbsp;ObjectInputStream.)&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.Externalizable;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.io.ObjectInput;&lt;br&gt;
import&amp;nbsp;java.io.ObjectOutput;&lt;br&gt;
class&amp;nbsp;Employee&amp;nbsp;implements&amp;nbsp;Externalizable&lt;br&gt;
{&lt;br&gt;
private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
public&amp;nbsp;Employee()&lt;br&gt;
{&lt;br&gt;
System.out.println("Employee()&amp;nbsp;called");&lt;br&gt;
}&lt;br&gt;
Employee(String&amp;nbsp;name,&amp;nbsp;int&amp;nbsp;age)&lt;br&gt;
{&lt;br&gt;
this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
}&lt;br&gt;
String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;name;&amp;nbsp;}&lt;br&gt;
int&amp;nbsp;getAge()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;age;&amp;nbsp;}&lt;br&gt;
@Override&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;readExternal(ObjectInput&amp;nbsp;in)&lt;br&gt;
throws&amp;nbsp;IOException,&amp;nbsp;ClassNotFoundException&lt;br&gt;
{&lt;br&gt;
System.out.println("readExternal()&amp;nbsp;called");&lt;br&gt;
name&amp;nbsp;=&amp;nbsp;in.readUTF();&lt;br&gt;
age&amp;nbsp;=&amp;nbsp;in.readInt();&lt;br&gt;
}&lt;br&gt;
@Override&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;writeExternal(ObjectOutput&amp;nbsp;out)&amp;nbsp;throws&amp;nbsp;IOException&lt;br&gt;
{&lt;br&gt;
System.out.println("writeExternal()&amp;nbsp;called");&lt;br&gt;
out.writeUTF(name);&lt;br&gt;
out.writeInt(age);&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&lt;br&gt;
{&lt;br&gt;
try&amp;nbsp;(ObjectOutputStream&amp;nbsp;oos&amp;nbsp;=&lt;br&gt;
new&amp;nbsp;ObjectOutputStream(new&amp;nbsp;FileOutputStream(FILENAME)))&lt;br&gt;
{&lt;br&gt;
Employee&amp;nbsp;emp&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Employee("John&amp;nbsp;Doe",&amp;nbsp;36);&lt;br&gt;
oos.writeObject(emp);&lt;br&gt;
}&lt;br&gt;
catch&amp;nbsp;(IOException&amp;nbsp;ioe)&lt;br&gt;
{&lt;br&gt;
System.err.println("I/O&amp;nbsp;error:&amp;nbsp;"+ioe.getMessage());&lt;br&gt;
return;&lt;br&gt;
}&lt;br&gt;
try&amp;nbsp;(ObjectInputStream&amp;nbsp;ois&amp;nbsp;=&lt;br&gt;
new&amp;nbsp;ObjectInputStream(new&amp;nbsp;FileInputStream(FILENAME)))&lt;br&gt;
{&lt;br&gt;
Employee&amp;nbsp;emp&amp;nbsp;=&amp;nbsp;(Employee)&amp;nbsp;ois.readObject();&lt;br&gt;
System.out.println(emp.getName());&lt;br&gt;
System.out.println(emp.getAge());&lt;br&gt;
}&lt;br&gt;
catch&amp;nbsp;(ClassNotFoundException&amp;nbsp;cnfe)&lt;br&gt;
{&lt;br&gt;
System.err.println(cnfe.getMessage());&lt;br&gt;
}&lt;br&gt;
catch&amp;nbsp;(IOException&amp;nbsp;ioe)&lt;br&gt;
{&lt;br&gt;
System.err.println(ioe.getMessage());&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;must&amp;nbsp;override&amp;nbsp;methods&amp;nbsp;:&amp;nbsp;readExternal&amp;nbsp;and&amp;nbsp;writeExternal&amp;nbsp;,&amp;nbsp;but&lt;br&gt;
in&amp;nbsp;main&amp;nbsp;we&amp;nbsp;use&amp;nbsp;readObject&amp;nbsp;and&amp;nbsp;writeObject.&lt;br&gt;
======================================================</questionanswer>
  </question>
  <question id="1_0_0_4_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;NIO&amp;nbsp;,&amp;nbsp;describe&amp;nbsp;main&amp;nbsp;features.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>New&amp;nbsp;I/O,&amp;nbsp;(officially&amp;nbsp;"Non-Blocking&amp;nbsp;I/O",&amp;nbsp;and&amp;nbsp;usually&amp;nbsp;called&amp;nbsp;simply&amp;nbsp;NIO),&amp;nbsp;is&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language&amp;nbsp;APIs&lt;br&gt;
that&amp;nbsp;offer&amp;nbsp;features&amp;nbsp;for&amp;nbsp;intensive&amp;nbsp;I/O&amp;nbsp;operations.&amp;nbsp;It&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;with&amp;nbsp;the&amp;nbsp;J2SE&amp;nbsp;1.4&amp;nbsp;release&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;by&amp;nbsp;Sun&amp;nbsp;Microsystems&lt;br&gt;
to&amp;nbsp;complement&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;standard&amp;nbsp;I/O.&amp;nbsp;NIO&amp;nbsp;was&amp;nbsp;developed&amp;nbsp;under&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Community&amp;nbsp;Process&amp;nbsp;as&amp;nbsp;JSR&amp;nbsp;51.[2]&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;extension&amp;nbsp;to&amp;nbsp;NIO&amp;nbsp;that&amp;nbsp;offers&amp;nbsp;a&amp;nbsp;new&amp;nbsp;file&amp;nbsp;system&amp;nbsp;API,&amp;nbsp;called&amp;nbsp;NIO2,&amp;nbsp;was&amp;nbsp;released&amp;nbsp;with&amp;nbsp;Java&amp;nbsp;SE&amp;nbsp;7&amp;nbsp;("Dolphin").[3]&lt;br&gt;
&lt;br&gt;
============================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Features&amp;nbsp;and&amp;nbsp;organization&lt;br&gt;
The&amp;nbsp;APIs&amp;nbsp;of&amp;nbsp;NIO&amp;nbsp;were&amp;nbsp;designed&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;low-level&amp;nbsp;I/O&amp;nbsp;operations&amp;nbsp;of&amp;nbsp;modern&amp;nbsp;operating&amp;nbsp;systems.&lt;br&gt;
Although&amp;nbsp;the&amp;nbsp;APIs&amp;nbsp;are&amp;nbsp;themselves&amp;nbsp;relatively&amp;nbsp;high-level,&amp;nbsp;the&amp;nbsp;intent&amp;nbsp;is&amp;nbsp;to&amp;nbsp;facilitate&amp;nbsp;an&amp;nbsp;implementation&amp;nbsp;that&amp;nbsp;can&amp;nbsp;directly&lt;br&gt;
use&amp;nbsp;the&amp;nbsp;most&amp;nbsp;efficient&amp;nbsp;operations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;platform.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;APIs&amp;nbsp;are&amp;nbsp;provided&amp;nbsp;in&amp;nbsp;the&amp;nbsp;--&gt;&gt;&amp;nbsp;java.nio&amp;nbsp;package&amp;nbsp;&lt;&lt;--&amp;nbsp;and&amp;nbsp;its&amp;nbsp;subpackages.&amp;nbsp;The&amp;nbsp;documentation&lt;br&gt;
by&amp;nbsp;Oracle&amp;nbsp;identifies&amp;nbsp;these&amp;nbsp;features.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Buffers&amp;nbsp;for&amp;nbsp;data&amp;nbsp;of&amp;nbsp;primitive&amp;nbsp;types&lt;br&gt;
-&amp;nbsp;Character&amp;nbsp;set&amp;nbsp;encoders&amp;nbsp;and&amp;nbsp;decoders&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;pattern-matching&amp;nbsp;facility&amp;nbsp;based&amp;nbsp;on&amp;nbsp;Perl-style&amp;nbsp;regular&amp;nbsp;expressions&amp;nbsp;(in&amp;nbsp;package&amp;nbsp;java.util.regex)&lt;br&gt;
-&amp;nbsp;Channels,&amp;nbsp;a&amp;nbsp;new&amp;nbsp;primitive&amp;nbsp;I/O&amp;nbsp;abstraction&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;file&amp;nbsp;interface&amp;nbsp;that&amp;nbsp;supports&amp;nbsp;locks&amp;nbsp;and&amp;nbsp;memory&amp;nbsp;mapping&amp;nbsp;of&amp;nbsp;files&amp;nbsp;up&amp;nbsp;to&amp;nbsp;Integer.MAX_VALUE&amp;nbsp;bytes&amp;nbsp;(2&amp;nbsp;GiB)&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;multiplexed,&amp;nbsp;non-blocking&amp;nbsp;I/O&amp;nbsp;facility&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;scalable&amp;nbsp;servers&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
======================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jenkov.com&amp;nbsp;Classification&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
-Java&amp;nbsp;NIO:&amp;nbsp;Channels&amp;nbsp;and&amp;nbsp;Buffers&amp;nbsp;&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;IO&amp;nbsp;API&amp;nbsp;you&amp;nbsp;work&amp;nbsp;with&amp;nbsp;byte&amp;nbsp;streams&amp;nbsp;and&amp;nbsp;character&amp;nbsp;streams.&amp;nbsp;In&amp;nbsp;NIO&amp;nbsp;you&amp;nbsp;work&amp;nbsp;with&amp;nbsp;channels&amp;nbsp;and&lt;br&gt;
buffers.&amp;nbsp;Data&amp;nbsp;is&amp;nbsp;always&amp;nbsp;read&amp;nbsp;from&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;into&amp;nbsp;a&amp;nbsp;buffer,&amp;nbsp;or&amp;nbsp;written&amp;nbsp;from&amp;nbsp;a&amp;nbsp;buffer&amp;nbsp;to&amp;nbsp;a&amp;nbsp;channel.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Java&amp;nbsp;NIO:&amp;nbsp;Asynchronous&amp;nbsp;IO&lt;br&gt;
Java&amp;nbsp;NIO&amp;nbsp;enables&amp;nbsp;you&amp;nbsp;to&amp;nbsp;do&amp;nbsp;asynchronous&amp;nbsp;IO.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;ask&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;to&amp;nbsp;read&amp;nbsp;data&amp;nbsp;into&amp;nbsp;a&amp;nbsp;buffer.&lt;br&gt;
While&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;reads&amp;nbsp;data&amp;nbsp;into&amp;nbsp;the&amp;nbsp;buffer,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;do&amp;nbsp;something&amp;nbsp;else.&amp;nbsp;Once&amp;nbsp;data&amp;nbsp;is&amp;nbsp;read&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;buffer,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;then&amp;nbsp;continue&amp;nbsp;processing&amp;nbsp;it.&amp;nbsp;The&amp;nbsp;same&amp;nbsp;is&amp;nbsp;true&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;data&amp;nbsp;to&amp;nbsp;channels.&lt;br&gt;
&lt;br&gt;
-Java&amp;nbsp;NIO:&amp;nbsp;Selectors&lt;br&gt;
Java&amp;nbsp;NIO&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;"selectors".&amp;nbsp;A&amp;nbsp;selector&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;can&amp;nbsp;monitor&amp;nbsp;multiple&amp;nbsp;channels&lt;br&gt;
for&amp;nbsp;events&amp;nbsp;(like:&amp;nbsp;connection&amp;nbsp;opened,&amp;nbsp;data&amp;nbsp;arrived&amp;nbsp;etc.).&amp;nbsp;Thus,&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;monitor&amp;nbsp;multiple&amp;nbsp;channels&amp;nbsp;for&amp;nbsp;data.&lt;br&gt;
&lt;br&gt;
==========================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.nio&amp;nbsp;package&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
Packages&amp;nbsp;:&amp;nbsp;&lt;br&gt;
java.nio&lt;br&gt;
java.nio.channels&lt;br&gt;
java.nio.channels.spi&lt;br&gt;
java.nio.charset&lt;br&gt;
java.nio.charset.spi&lt;br&gt;
java.nio.file&lt;br&gt;
java.nio.file.attribute&lt;br&gt;
java.nio.file.spi&lt;br&gt;
&lt;br&gt;
Classes&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Buffer&lt;br&gt;
ByteBuffer&lt;br&gt;
ByteOrder&lt;br&gt;
CharBuffer&lt;br&gt;
DoubleBuffer&lt;br&gt;
FloatBuffer&lt;br&gt;
IntBuffer&lt;br&gt;
LongBuffer&lt;br&gt;
MappedByteBuffer&lt;br&gt;
ShortBuffer&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Channels&amp;nbsp;and&amp;nbsp;Buffers&lt;br&gt;
Typically,&amp;nbsp;all&amp;nbsp;IO&amp;nbsp;in&amp;nbsp;NIO&amp;nbsp;starts&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Channel.&amp;nbsp;A&amp;nbsp;Channel&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;like&amp;nbsp;a&amp;nbsp;stream.&amp;nbsp;From&amp;nbsp;the&amp;nbsp;Channel&lt;br&gt;
data&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Buffer.&amp;nbsp;Data&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;written&amp;nbsp;from&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Channel.&amp;nbsp;Here&amp;nbsp;is&lt;br&gt;
an&amp;nbsp;illustration&amp;nbsp;of&amp;nbsp;that:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Channel&amp;nbsp;--------&gt;&amp;nbsp;Buffer&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Buffer&amp;nbsp;----------&gt;&amp;nbsp;Channel&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;several&amp;nbsp;Channel&amp;nbsp;and&amp;nbsp;Buffer&amp;nbsp;types.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;Channel&amp;nbsp;implementations&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;NIO:&amp;nbsp;&lt;br&gt;
FileChannel&lt;br&gt;
DatagramChannel&lt;br&gt;
SocketChannel&lt;br&gt;
ServerSocketChannel&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;you&amp;nbsp;can&amp;nbsp;see,&amp;nbsp;these&amp;nbsp;channels&amp;nbsp;cover&amp;nbsp;UDP&amp;nbsp;+&amp;nbsp;TCP&amp;nbsp;network&amp;nbsp;IO,&amp;nbsp;and&amp;nbsp;file&amp;nbsp;IO.&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;a&amp;nbsp;few&amp;nbsp;interesting&amp;nbsp;interfaces&amp;nbsp;accompanying&amp;nbsp;these&amp;nbsp;classes&amp;nbsp;too,&amp;nbsp;but&amp;nbsp;I'll&amp;nbsp;keep&amp;nbsp;them&amp;nbsp;out&lt;br&gt;
of&amp;nbsp;this&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;overview&amp;nbsp;for&amp;nbsp;simplicity's&amp;nbsp;sake.&amp;nbsp;They'll&amp;nbsp;be&amp;nbsp;explained&amp;nbsp;where&amp;nbsp;relevant,&amp;nbsp;in&amp;nbsp;other&amp;nbsp;texts&lt;br&gt;
of&amp;nbsp;this&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;tutorial.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;the&amp;nbsp;core&amp;nbsp;Buffer&amp;nbsp;implementations&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;NIO:&amp;nbsp;&lt;br&gt;
ByteBuffer&lt;br&gt;
CharBuffer&lt;br&gt;
DoubleBuffer&lt;br&gt;
FloatBuffer&lt;br&gt;
IntBuffer&lt;br&gt;
LongBuffer&lt;br&gt;
ShortBuffer&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;These&amp;nbsp;Buffer's&amp;nbsp;cover&amp;nbsp;the&amp;nbsp;basic&amp;nbsp;data&amp;nbsp;types&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;send&amp;nbsp;via&amp;nbsp;IO:&amp;nbsp;byte,&amp;nbsp;short,&amp;nbsp;int,&amp;nbsp;long,&amp;nbsp;float,&amp;nbsp;double&amp;nbsp;and&amp;nbsp;characters.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;also&amp;nbsp;has&amp;nbsp;a&amp;nbsp;MappedByteBuffer&amp;nbsp;which&amp;nbsp;is&amp;nbsp;used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;memory&amp;nbsp;mapped&amp;nbsp;files.&amp;nbsp;I'll&amp;nbsp;leave&lt;br&gt;
this&amp;nbsp;Buffer&amp;nbsp;out&amp;nbsp;of&amp;nbsp;this&amp;nbsp;overview&amp;nbsp;though.&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selectors&lt;br&gt;
A&amp;nbsp;Selector&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;multiple&amp;nbsp;Channel's.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;handy&amp;nbsp;if&amp;nbsp;your&amp;nbsp;application&amp;nbsp;has&lt;br&gt;
many&amp;nbsp;connections&amp;nbsp;(Channels)&amp;nbsp;open,&amp;nbsp;but&amp;nbsp;only&amp;nbsp;has&amp;nbsp;low&amp;nbsp;traffic&amp;nbsp;on&amp;nbsp;each&amp;nbsp;connection.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;in&amp;nbsp;a&amp;nbsp;chat&amp;nbsp;server.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;illustration&amp;nbsp;of&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;using&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;3&amp;nbsp;Channel's:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selector&lt;br&gt;
Channel&amp;nbsp;&amp;nbsp;&amp;nbsp;Channel&amp;nbsp;Channel&lt;br&gt;
&lt;br&gt;
To&amp;nbsp;use&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;you&amp;nbsp;register&amp;nbsp;the&amp;nbsp;Channel's&amp;nbsp;with&amp;nbsp;it.&amp;nbsp;Then&amp;nbsp;you&amp;nbsp;call&amp;nbsp;it's&amp;nbsp;select()&amp;nbsp;method.&amp;nbsp;This&lt;br&gt;
method&amp;nbsp;will&amp;nbsp;block&amp;nbsp;until&amp;nbsp;there&amp;nbsp;is&amp;nbsp;an&amp;nbsp;event&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;registered&amp;nbsp;channels.&amp;nbsp;Once&amp;nbsp;the&lt;br&gt;
method&amp;nbsp;returns,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;then&amp;nbsp;process&amp;nbsp;these&amp;nbsp;events.&amp;nbsp;Examples&amp;nbsp;of&amp;nbsp;events&amp;nbsp;are&amp;nbsp;incoming&lt;br&gt;
connection,&amp;nbsp;data&amp;nbsp;received&amp;nbsp;etc.</questionanswer>
  </question>
  <question id="1_0_0_4_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;NIO&amp;nbsp;,&amp;nbsp;buffers&amp;nbsp;and&amp;nbsp;channels&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;example&amp;nbsp;of&amp;nbsp;reading&amp;nbsp;and&amp;nbsp;writing&amp;nbsp;files&amp;nbsp;using&amp;nbsp;NIO.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;NIO&amp;nbsp;Buffer&lt;br&gt;
Java&amp;nbsp;NIO&amp;nbsp;Buffers&amp;nbsp;are&amp;nbsp;used&amp;nbsp;when&amp;nbsp;interacting&amp;nbsp;with&amp;nbsp;NIO&amp;nbsp;Channels.&amp;nbsp;As&amp;nbsp;you&amp;nbsp;know,&amp;nbsp;data&amp;nbsp;is&amp;nbsp;read&amp;nbsp;from&amp;nbsp;channels&lt;br&gt;
into&amp;nbsp;buffers,&amp;nbsp;and&amp;nbsp;written&amp;nbsp;from&amp;nbsp;buffers&amp;nbsp;into&amp;nbsp;channels.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;A&amp;nbsp;buffer&amp;nbsp;is&amp;nbsp;essentially&amp;nbsp;a&amp;nbsp;block&amp;nbsp;of&amp;nbsp;memory&amp;nbsp;into&amp;nbsp;which&amp;nbsp;you&amp;nbsp;can&amp;nbsp;write&amp;nbsp;data,&amp;nbsp;which&amp;nbsp;you&amp;nbsp;can&amp;nbsp;then&amp;nbsp;later&amp;nbsp;read&lt;br&gt;
again.&amp;nbsp;This&amp;nbsp;memory&amp;nbsp;block&amp;nbsp;is&amp;nbsp;wrapped&amp;nbsp;in&amp;nbsp;a&amp;nbsp;NIO&amp;nbsp;Buffer&amp;nbsp;object,&amp;nbsp;which&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;methods&lt;br&gt;
that&amp;nbsp;makes&amp;nbsp;it&amp;nbsp;easier&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;block.&lt;br&gt;
&lt;br&gt;
===================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Basic&amp;nbsp;Buffer&amp;nbsp;Usage&lt;br&gt;
Using&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;to&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;data&amp;nbsp;typically&amp;nbsp;follows&amp;nbsp;this&amp;nbsp;little&amp;nbsp;4-step&amp;nbsp;process:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Write&amp;nbsp;data&amp;nbsp;into&amp;nbsp;the&amp;nbsp;Buffer&lt;br&gt;
-&amp;nbsp;Call&amp;nbsp;buffer.flip()&lt;br&gt;
-&amp;nbsp;Read&amp;nbsp;data&amp;nbsp;out&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Buffer&lt;br&gt;
-&amp;nbsp;Call&amp;nbsp;buffer.clear()&amp;nbsp;or&amp;nbsp;buffer.compact()&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;you&amp;nbsp;write&amp;nbsp;data&amp;nbsp;into&amp;nbsp;a&amp;nbsp;buffer,&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;keeps&amp;nbsp;track&amp;nbsp;of&amp;nbsp;how&amp;nbsp;much&amp;nbsp;data&amp;nbsp;you&amp;nbsp;have&amp;nbsp;written.&amp;nbsp;Once&lt;br&gt;
you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;read&amp;nbsp;the&amp;nbsp;data,&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;switch&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;from&amp;nbsp;writing&amp;nbsp;mode&amp;nbsp;into&amp;nbsp;reading&amp;nbsp;mode&amp;nbsp;using&lt;br&gt;
the&amp;nbsp;flip()&amp;nbsp;method&amp;nbsp;call.&amp;nbsp;In&amp;nbsp;reading&amp;nbsp;mode&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;lets&amp;nbsp;you&amp;nbsp;read&amp;nbsp;all&amp;nbsp;the&amp;nbsp;data&amp;nbsp;written&amp;nbsp;into&amp;nbsp;the&amp;nbsp;buffer.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Once&amp;nbsp;you&amp;nbsp;have&amp;nbsp;read&amp;nbsp;all&amp;nbsp;the&amp;nbsp;data,&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;clear&amp;nbsp;the&amp;nbsp;buffer,&amp;nbsp;to&amp;nbsp;make&amp;nbsp;it&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;writing&amp;nbsp;again.&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;do&amp;nbsp;this&amp;nbsp;in&amp;nbsp;two&amp;nbsp;ways:&amp;nbsp;By&amp;nbsp;calling&amp;nbsp;clear()&amp;nbsp;or&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;compact().&amp;nbsp;The&amp;nbsp;clear()&amp;nbsp;method&amp;nbsp;clears&amp;nbsp;the&amp;nbsp;whole&lt;br&gt;
buffer.&amp;nbsp;The&amp;nbsp;compact()&amp;nbsp;method&amp;nbsp;only&amp;nbsp;clears&amp;nbsp;the&amp;nbsp;data&amp;nbsp;which&amp;nbsp;you&amp;nbsp;have&amp;nbsp;already&amp;nbsp;read.&amp;nbsp;Any&amp;nbsp;unread&amp;nbsp;data&amp;nbsp;is&lt;br&gt;
moved&amp;nbsp;to&amp;nbsp;the&amp;nbsp;beginning&amp;nbsp;of&amp;nbsp;the&amp;nbsp;buffer,&amp;nbsp;and&amp;nbsp;data&amp;nbsp;will&amp;nbsp;now&amp;nbsp;be&amp;nbsp;written&amp;nbsp;into&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;after&amp;nbsp;the&amp;nbsp;unread&amp;nbsp;data.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;&lt;br&gt;
RandomAccessFile&amp;nbsp;aFile&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RandomAccessFile("data/nio-data.txt",&amp;nbsp;"rw");&lt;br&gt;
FileChannel&amp;nbsp;inChannel&amp;nbsp;=&amp;nbsp;aFile.getChannel();&lt;br&gt;
&lt;br&gt;
//create&amp;nbsp;buffer&amp;nbsp;with&amp;nbsp;capacity&amp;nbsp;of&amp;nbsp;48&amp;nbsp;bytes&lt;br&gt;
ByteBuffer&amp;nbsp;buf&amp;nbsp;=&amp;nbsp;ByteBuffer.allocate(48);&lt;br&gt;
&lt;br&gt;
int&amp;nbsp;bytesRead&amp;nbsp;=&amp;nbsp;inChannel.read(buf);&amp;nbsp;//read&amp;nbsp;into&amp;nbsp;buffer.&lt;br&gt;
while&amp;nbsp;(bytesRead&amp;nbsp;!=&amp;nbsp;-1)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;buf.flip();&amp;nbsp;&amp;nbsp;//make&amp;nbsp;buffer&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;read&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;while(buf.hasRemaining()){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print((char)&amp;nbsp;buf.get());&amp;nbsp;//&amp;nbsp;read&amp;nbsp;1&amp;nbsp;byte&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;buf.clear();&amp;nbsp;//make&amp;nbsp;buffer&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;writing&lt;br&gt;
&amp;nbsp;&amp;nbsp;bytesRead&amp;nbsp;=&amp;nbsp;inChannel.read(buf);&lt;br&gt;
}&lt;br&gt;
aFile.close();&lt;br&gt;
&lt;br&gt;
==================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Buffer&amp;nbsp;Capacity,&amp;nbsp;Position&amp;nbsp;and&amp;nbsp;Limit&lt;br&gt;
A&amp;nbsp;Buffer&amp;nbsp;has&amp;nbsp;three&amp;nbsp;properties&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;familiar&amp;nbsp;with,&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;how&amp;nbsp;a&lt;br&gt;
Buffer&amp;nbsp;works.&amp;nbsp;These&amp;nbsp;are:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;capacity&lt;br&gt;
-&amp;nbsp;position&lt;br&gt;
-&amp;nbsp;limit&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='300'&amp;nbsp;height='250'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/buffers-modes.png'/&gt;&lt;br&gt;
&lt;br&gt;
==================================================&lt;br&gt;
Buffer&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;comes&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&amp;nbsp;Buffer&amp;nbsp;types:&amp;nbsp;&lt;br&gt;
ByteBuffer&lt;br&gt;
MappedByteBuffer&lt;br&gt;
CharBuffer&lt;br&gt;
DoubleBuffer&lt;br&gt;
FloatBuffer&lt;br&gt;
IntBuffer&lt;br&gt;
LongBuffer&lt;br&gt;
ShortBuffer&lt;br&gt;
&lt;br&gt;
&amp;nbsp;As&amp;nbsp;you&amp;nbsp;can&amp;nbsp;see,&amp;nbsp;these&amp;nbsp;Buffer&amp;nbsp;types&amp;nbsp;represent&amp;nbsp;different&amp;nbsp;data&amp;nbsp;types.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&lt;br&gt;
they&amp;nbsp;let&amp;nbsp;you&amp;nbsp;work&amp;nbsp;with&amp;nbsp;the&amp;nbsp;bytes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;as&amp;nbsp;char,&amp;nbsp;short,&amp;nbsp;int,&amp;nbsp;long,&amp;nbsp;float&amp;nbsp;or&amp;nbsp;double&amp;nbsp;instead.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;MappedByteBuffer&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;special,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;be&amp;nbsp;covered&amp;nbsp;in&amp;nbsp;its&amp;nbsp;own&amp;nbsp;text.&lt;br&gt;
===========================================&lt;br&gt;
Allocating&amp;nbsp;a&amp;nbsp;Buffer&lt;br&gt;
&lt;br&gt;
&amp;nbsp;To&amp;nbsp;obtain&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;object&amp;nbsp;you&amp;nbsp;must&amp;nbsp;first&amp;nbsp;allocate&amp;nbsp;it.&amp;nbsp;Every&amp;nbsp;Buffer&amp;nbsp;class&amp;nbsp;has&amp;nbsp;an&amp;nbsp;allocate()&lt;br&gt;
method&amp;nbsp;that&amp;nbsp;does&amp;nbsp;this.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;showing&amp;nbsp;the&amp;nbsp;allocation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;ByteBuffer,&amp;nbsp;with&amp;nbsp;a&lt;br&gt;
capacity&amp;nbsp;of&amp;nbsp;48&amp;nbsp;bytes:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
ByteBuffer&amp;nbsp;buf&amp;nbsp;=&amp;nbsp;ByteBuffer.allocate(48);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;allocating&amp;nbsp;a&amp;nbsp;CharBuffer&amp;nbsp;with&amp;nbsp;space&amp;nbsp;for&amp;nbsp;1024&amp;nbsp;characters:&amp;nbsp;&lt;br&gt;
CharBuffer&amp;nbsp;buf&amp;nbsp;=&amp;nbsp;CharBuffer.allocate(1024);&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
Writing&amp;nbsp;Data&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Buffer&lt;br&gt;
&lt;br&gt;
&amp;nbsp;You&amp;nbsp;can&amp;nbsp;write&amp;nbsp;data&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;in&amp;nbsp;two&amp;nbsp;ways:&amp;nbsp;&lt;br&gt;
Write&amp;nbsp;data&amp;nbsp;from&amp;nbsp;a&amp;nbsp;Channel&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Buffer&lt;br&gt;
Write&amp;nbsp;data&amp;nbsp;into&amp;nbsp;the&amp;nbsp;Buffer&amp;nbsp;yourself,&amp;nbsp;via&amp;nbsp;the&amp;nbsp;buffer's&amp;nbsp;put()&amp;nbsp;methods.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;showing&amp;nbsp;how&amp;nbsp;a&amp;nbsp;Channel&amp;nbsp;can&amp;nbsp;write&amp;nbsp;data&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Buffer:&amp;nbsp;&lt;br&gt;
int&amp;nbsp;bytesRead&amp;nbsp;=&amp;nbsp;inChannel.read(buf);&amp;nbsp;//read&amp;nbsp;into&amp;nbsp;buffer.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;that&amp;nbsp;writes&amp;nbsp;data&amp;nbsp;into&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;via&amp;nbsp;the&amp;nbsp;put()&amp;nbsp;method:&amp;nbsp;&lt;br&gt;
buf.put(127);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;There&amp;nbsp;are&amp;nbsp;many&amp;nbsp;other&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;the&amp;nbsp;put()&amp;nbsp;method,&amp;nbsp;allowing&amp;nbsp;you&amp;nbsp;to&amp;nbsp;write&amp;nbsp;data&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;Buffer&amp;nbsp;in&amp;nbsp;many&amp;nbsp;different&amp;nbsp;ways.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;writing&amp;nbsp;at&amp;nbsp;specific&amp;nbsp;positions,&amp;nbsp;or&amp;nbsp;writing&amp;nbsp;an&lt;br&gt;
array&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;into&amp;nbsp;the&amp;nbsp;buffer.&amp;nbsp;See&amp;nbsp;the&amp;nbsp;JavaDoc&amp;nbsp;for&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;buffer&amp;nbsp;implementation&amp;nbsp;for&amp;nbsp;more&amp;nbsp;details.&lt;br&gt;
&lt;br&gt;
=====================================================&lt;br&gt;
flip()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;flip()&amp;nbsp;method&amp;nbsp;switches&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;from&amp;nbsp;writing&amp;nbsp;mode&amp;nbsp;to&amp;nbsp;reading&amp;nbsp;mode.&amp;nbsp;Calling&amp;nbsp;flip()&amp;nbsp;sets&lt;br&gt;
the&amp;nbsp;position&amp;nbsp;back&amp;nbsp;to&amp;nbsp;0,&amp;nbsp;and&amp;nbsp;sets&amp;nbsp;the&amp;nbsp;limit&amp;nbsp;to&amp;nbsp;where&amp;nbsp;position&amp;nbsp;just&amp;nbsp;was.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;position&amp;nbsp;now&amp;nbsp;marks&amp;nbsp;the&amp;nbsp;reading&amp;nbsp;position,&amp;nbsp;and&amp;nbsp;limit&amp;nbsp;marks&amp;nbsp;how&amp;nbsp;many&amp;nbsp;bytes,&lt;br&gt;
chars&amp;nbsp;etc.&amp;nbsp;were&amp;nbsp;written&amp;nbsp;into&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;-&amp;nbsp;the&amp;nbsp;limit&amp;nbsp;of&amp;nbsp;how&amp;nbsp;many&amp;nbsp;bytes,&amp;nbsp;chars&amp;nbsp;etc.&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read.&lt;br&gt;
&lt;br&gt;
=====================================================&lt;br&gt;
rewind()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;Buffer.rewind()&amp;nbsp;sets&amp;nbsp;the&amp;nbsp;position&amp;nbsp;back&amp;nbsp;to&amp;nbsp;0,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;can&amp;nbsp;reread&amp;nbsp;all&amp;nbsp;the&amp;nbsp;data&amp;nbsp;in&amp;nbsp;the&amp;nbsp;buffer.&lt;br&gt;
The&amp;nbsp;limit&amp;nbsp;remains&amp;nbsp;untouched,&amp;nbsp;thus&amp;nbsp;still&amp;nbsp;marking&amp;nbsp;how&amp;nbsp;many&amp;nbsp;elements&amp;nbsp;(bytes,&amp;nbsp;chars&amp;nbsp;etc.)&amp;nbsp;that&amp;nbsp;can&lt;br&gt;
be&amp;nbsp;read&amp;nbsp;from&amp;nbsp;the&amp;nbsp;Buffer.&lt;br&gt;
===============================================&lt;br&gt;
mark()&amp;nbsp;and&amp;nbsp;reset()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;You&amp;nbsp;can&amp;nbsp;mark&amp;nbsp;a&amp;nbsp;given&amp;nbsp;position&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Buffer&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;the&amp;nbsp;Buffer.mark()&amp;nbsp;method.&amp;nbsp;You&amp;nbsp;can&lt;br&gt;
then&amp;nbsp;later&amp;nbsp;reset&amp;nbsp;the&amp;nbsp;position&amp;nbsp;back&amp;nbsp;to&amp;nbsp;the&amp;nbsp;marked&amp;nbsp;position&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;the&amp;nbsp;Buffer.reset()&amp;nbsp;method.&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example:&amp;nbsp;&lt;br&gt;
buffer.mark();&lt;br&gt;
&lt;br&gt;
//call&amp;nbsp;buffer.get()&amp;nbsp;a&amp;nbsp;couple&amp;nbsp;of&amp;nbsp;times,&amp;nbsp;e.g.&amp;nbsp;during&amp;nbsp;parsing.&lt;br&gt;
&lt;br&gt;
buffer.reset();&amp;nbsp;&amp;nbsp;//set&amp;nbsp;position&amp;nbsp;back&amp;nbsp;to&amp;nbsp;mark.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
equals()&amp;nbsp;and&amp;nbsp;compareTo()&lt;br&gt;
&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;compare&amp;nbsp;two&amp;nbsp;buffers&amp;nbsp;using&amp;nbsp;equals()&amp;nbsp;and&amp;nbsp;compareTo().&lt;br&gt;
&lt;br&gt;
=========================================================&lt;br&gt;
--------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
=========================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Channels&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;NIO&amp;nbsp;Channels&amp;nbsp;are&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;streams&amp;nbsp;with&amp;nbsp;a&amp;nbsp;few&amp;nbsp;differences:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;can&amp;nbsp;both&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Channels.&amp;nbsp;Streams&amp;nbsp;are&amp;nbsp;typically&amp;nbsp;one-way&amp;nbsp;(read&amp;nbsp;or&amp;nbsp;write).&lt;br&gt;
-&amp;nbsp;Channels&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;and&amp;nbsp;written&amp;nbsp;asynchronously.&lt;br&gt;
-&amp;nbsp;Channels&amp;nbsp;always&amp;nbsp;read&amp;nbsp;to,&amp;nbsp;or&amp;nbsp;write&amp;nbsp;from,&amp;nbsp;a&amp;nbsp;Buffer.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;mentioned&amp;nbsp;above,&amp;nbsp;you&amp;nbsp;read&amp;nbsp;data&amp;nbsp;from&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;into&amp;nbsp;a&amp;nbsp;buffer,&amp;nbsp;and&amp;nbsp;write&amp;nbsp;data&amp;nbsp;from&amp;nbsp;a&lt;br&gt;
buffer&amp;nbsp;into&amp;nbsp;a&amp;nbsp;channel.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;illustration&amp;nbsp;of&amp;nbsp;that:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Channel&amp;nbsp;Implementations&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;are&amp;nbsp;the&amp;nbsp;most&amp;nbsp;important&amp;nbsp;Channel&amp;nbsp;implementations&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;NIO:&amp;nbsp;&lt;br&gt;
FileChannel&lt;br&gt;
DatagramChannel&lt;br&gt;
SocketChannel&lt;br&gt;
ServerSocketChannel&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;FileChannel&amp;nbsp;reads&amp;nbsp;data&amp;nbsp;from&amp;nbsp;and&amp;nbsp;to&amp;nbsp;files.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;DatagramChannel&amp;nbsp;can&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;data&amp;nbsp;over&amp;nbsp;the&amp;nbsp;network&amp;nbsp;via&amp;nbsp;UDP.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;SocketChannel&amp;nbsp;can&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;data&amp;nbsp;over&amp;nbsp;the&amp;nbsp;network&amp;nbsp;via&amp;nbsp;TCP.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;ServerSocketChannel&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;listen&amp;nbsp;for&amp;nbsp;incoming&amp;nbsp;TCP&amp;nbsp;connections,&amp;nbsp;like&amp;nbsp;a&amp;nbsp;web&lt;br&gt;
server&amp;nbsp;does.&amp;nbsp;For&amp;nbsp;each&amp;nbsp;incoming&amp;nbsp;connection&amp;nbsp;a&amp;nbsp;SocketChannel&amp;nbsp;is&amp;nbsp;created.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;of&amp;nbsp;using&amp;nbsp;channels&amp;nbsp;:&amp;nbsp;look&amp;nbsp;in&amp;nbsp;Buffers&amp;nbsp;part&amp;nbsp;(in&amp;nbsp;previous&amp;nbsp;part&amp;nbsp;of&amp;nbsp;question)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FileChannel&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;do&amp;nbsp;a&amp;nbsp;file&amp;nbsp;copy,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;potentially&amp;nbsp;far&amp;nbsp;more&amp;nbsp;efficient&amp;nbsp;than&lt;br&gt;
using&amp;nbsp;old&amp;nbsp;read/write&amp;nbsp;with&amp;nbsp;a&amp;nbsp;byte&amp;nbsp;array.&amp;nbsp;The&amp;nbsp;typical&amp;nbsp;code&amp;nbsp;for&amp;nbsp;this&amp;nbsp;is:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;//&amp;nbsp;Getting&amp;nbsp;file&amp;nbsp;channels&lt;br&gt;
&amp;nbsp;FileChannel&amp;nbsp;in&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream(source).getChannel();&lt;br&gt;
&amp;nbsp;FileChannel&amp;nbsp;out&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(target).getChannel();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;//&amp;nbsp;JavaVM&amp;nbsp;does&amp;nbsp;its&amp;nbsp;best&amp;nbsp;to&amp;nbsp;do&amp;nbsp;this&amp;nbsp;as&amp;nbsp;native&amp;nbsp;I/O&amp;nbsp;operations.&lt;br&gt;
&amp;nbsp;in.transferTo(0,&amp;nbsp;in.size(),&amp;nbsp;out);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;//&amp;nbsp;Closing&amp;nbsp;file&amp;nbsp;channels&amp;nbsp;will&amp;nbsp;close&amp;nbsp;corresponding&amp;nbsp;stream&amp;nbsp;objects&amp;nbsp;as&amp;nbsp;well.&lt;br&gt;
&amp;nbsp;out.close();&lt;br&gt;
&amp;nbsp;in.close();&lt;br&gt;
=========================================================&lt;br&gt;
--------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
=========================================================&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Copy&amp;nbsp;file&amp;nbsp;using&amp;nbsp;NIO&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;nio;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.FileInputStream;&lt;br&gt;
import&amp;nbsp;java.io.FileOutputStream;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.nio.MappedByteBuffer;&lt;br&gt;
import&amp;nbsp;java.nio.channels.FileChannel;&lt;br&gt;
import&amp;nbsp;java.util.Scanner;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;CopyFileUsingNIO&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;String&amp;nbsp;files&amp;nbsp;=&amp;nbsp;System.getProperty("user.dir")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"/files/";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scanner&amp;nbsp;scanner&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Scanner(System.in);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Input&amp;nbsp;file&amp;nbsp;to&amp;nbsp;copy&amp;nbsp;(from&amp;nbsp;files&amp;nbsp;dir)");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;fileToCopy&amp;nbsp;=&amp;nbsp;scanner.nextLine();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;fileToCopyFullPath&amp;nbsp;=&amp;nbsp;files&amp;nbsp;+&amp;nbsp;fileToCopy;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Input&amp;nbsp;destination&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;destination&amp;nbsp;=&amp;nbsp;scanner.nextLine()&amp;nbsp;+&amp;nbsp;"/"&amp;nbsp;+&amp;nbsp;fileToCopy;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileInputStream&amp;nbsp;fIn;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileOutputStream&amp;nbsp;fOut;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FileChannel&amp;nbsp;fIChan,&amp;nbsp;fOChan;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;fSize;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MappedByteBuffer&amp;nbsp;mBuf;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fIn&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream(fileToCopyFullPath);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fOut&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream(destination);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fIChan&amp;nbsp;=&amp;nbsp;fIn.getChannel();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fOChan&amp;nbsp;=&amp;nbsp;fOut.getChannel();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fSize&amp;nbsp;=&amp;nbsp;fIChan.size();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mBuf&amp;nbsp;=&amp;nbsp;fIChan.map(FileChannel.MapMode.READ_ONLY,&amp;nbsp;0,&amp;nbsp;fSize);&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Channel&amp;nbsp;-&gt;&amp;nbsp;Buffer&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fOChan.write(mBuf);&amp;nbsp;//&amp;nbsp;this&amp;nbsp;copies&amp;nbsp;the&amp;nbsp;file&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Buffer&amp;nbsp;-&gt;&amp;nbsp;Channel&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fIChan.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fIn.close();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fOChan.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fOut.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_4_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;NIO&amp;nbsp;Selectors,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Provide&amp;nbsp;examples.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;Selector&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;component&amp;nbsp;which&amp;nbsp;can&amp;nbsp;examine&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;NIO&amp;nbsp;Channel's,&amp;nbsp;and&amp;nbsp;determine&amp;nbsp;which&amp;nbsp;channels&amp;nbsp;are&lt;br&gt;
ready&amp;nbsp;for&amp;nbsp;e.g.&amp;nbsp;reading&amp;nbsp;or&amp;nbsp;writing.&amp;nbsp;This&amp;nbsp;way&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;manage&amp;nbsp;multiple&amp;nbsp;channels,&amp;nbsp;and&amp;nbsp;thus&amp;nbsp;multiple&amp;nbsp;network&lt;br&gt;
connections.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;Use&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;?&lt;br&gt;
The&amp;nbsp;advantage&amp;nbsp;of&amp;nbsp;using&amp;nbsp;just&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;multiple&amp;nbsp;channels&amp;nbsp;is&amp;nbsp;that&amp;nbsp;you&amp;nbsp;need&amp;nbsp;less&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;handle&lt;br&gt;
the&amp;nbsp;channels.&amp;nbsp;Actually,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;just&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;all&amp;nbsp;of&amp;nbsp;your&amp;nbsp;channels.&amp;nbsp;Switching&amp;nbsp;between&amp;nbsp;threads&amp;nbsp;is&lt;br&gt;
expensive&amp;nbsp;for&amp;nbsp;an&amp;nbsp;operating&amp;nbsp;system,&amp;nbsp;and&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;takes&amp;nbsp;up&amp;nbsp;some&amp;nbsp;resources&amp;nbsp;(memory)&amp;nbsp;in&amp;nbsp;the&amp;nbsp;operating&amp;nbsp;system&amp;nbsp;too.&lt;br&gt;
Therefore,&amp;nbsp;the&amp;nbsp;less&amp;nbsp;threads&amp;nbsp;you&amp;nbsp;use,&amp;nbsp;the&amp;nbsp;better.&lt;br&gt;
&lt;br&gt;
Keep&amp;nbsp;in&amp;nbsp;mind&amp;nbsp;though,&amp;nbsp;that&amp;nbsp;modern&amp;nbsp;operating&amp;nbsp;systems&amp;nbsp;and&amp;nbsp;CPU's&amp;nbsp;become&amp;nbsp;better&amp;nbsp;and&amp;nbsp;better&amp;nbsp;at&amp;nbsp;multitasking,&amp;nbsp;so&amp;nbsp;the&lt;br&gt;
overheads&amp;nbsp;of&amp;nbsp;multithreading&amp;nbsp;becomes&amp;nbsp;smaller&amp;nbsp;over&amp;nbsp;time.&amp;nbsp;In&amp;nbsp;fact,&amp;nbsp;if&amp;nbsp;a&amp;nbsp;CPU&amp;nbsp;has&amp;nbsp;multiple&amp;nbsp;cores,&amp;nbsp;you&amp;nbsp;might&amp;nbsp;be&amp;nbsp;wasting&lt;br&gt;
CPU&amp;nbsp;power&amp;nbsp;by&amp;nbsp;not&amp;nbsp;multitasking.&amp;nbsp;Anyways,&amp;nbsp;that&amp;nbsp;design&amp;nbsp;discussion&amp;nbsp;belongs&amp;nbsp;in&amp;nbsp;a&amp;nbsp;different&amp;nbsp;text.&amp;nbsp;It&amp;nbsp;suffices&amp;nbsp;to&amp;nbsp;say&amp;nbsp;here,&lt;br&gt;
that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;handle&amp;nbsp;multiple&amp;nbsp;channels&amp;nbsp;with&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread,&amp;nbsp;using&amp;nbsp;a&amp;nbsp;Selector.&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;illustration&amp;nbsp;of&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;using&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;3&amp;nbsp;Channel's:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;THREAD&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selector&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Channel&amp;nbsp;Channel&amp;nbsp;Channel&lt;br&gt;
&lt;br&gt;
=================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating&amp;nbsp;a&amp;nbsp;Selector&lt;br&gt;
You&amp;nbsp;create&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;the&amp;nbsp;Selector.open()&amp;nbsp;method,&amp;nbsp;like&amp;nbsp;this:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selector&amp;nbsp;selector&amp;nbsp;=&amp;nbsp;Selector.open();&lt;br&gt;
===================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Registering&amp;nbsp;Channels&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Selector&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;order&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;Channel&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;you&amp;nbsp;must&amp;nbsp;register&amp;nbsp;the&amp;nbsp;Channel&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Selector.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;done&amp;nbsp;using&lt;br&gt;
the&amp;nbsp;SelectableChannel.register()&amp;nbsp;method,&amp;nbsp;like&amp;nbsp;this:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.configureBlocking(false);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey&amp;nbsp;key&amp;nbsp;=&amp;nbsp;channel.register(selector,&amp;nbsp;SelectionKey.OP_READ);&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Channel&amp;nbsp;must&amp;nbsp;be&amp;nbsp;in&amp;nbsp;non-blocking&amp;nbsp;mode&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Selector.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;use&amp;nbsp;FileChannel's&lt;br&gt;
with&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;since&amp;nbsp;FileChannel's&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;switched&amp;nbsp;into&amp;nbsp;non-blocking&amp;nbsp;mode.&amp;nbsp;Socket&amp;nbsp;channels&amp;nbsp;will&amp;nbsp;work&amp;nbsp;fine&amp;nbsp;though.&lt;br&gt;
&lt;br&gt;
Notice&amp;nbsp;the&amp;nbsp;second&amp;nbsp;parameter&amp;nbsp;of&amp;nbsp;the&amp;nbsp;register()&amp;nbsp;method.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;an&amp;nbsp;"interest&amp;nbsp;set",&amp;nbsp;meaning&amp;nbsp;what&amp;nbsp;events&amp;nbsp;you&amp;nbsp;are&lt;br&gt;
interested&amp;nbsp;in&amp;nbsp;listening&amp;nbsp;for&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Channel,&amp;nbsp;via&amp;nbsp;the&amp;nbsp;Selector.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;four&amp;nbsp;different&amp;nbsp;events&amp;nbsp;you&amp;nbsp;can&amp;nbsp;listen&amp;nbsp;for:&amp;nbsp;&lt;br&gt;
Connect&lt;br&gt;
Accept&lt;br&gt;
Read&lt;br&gt;
Write&lt;br&gt;
&lt;br&gt;
&amp;nbsp;A&amp;nbsp;channel&amp;nbsp;that&amp;nbsp;"fires&amp;nbsp;an&amp;nbsp;event"&amp;nbsp;is&amp;nbsp;also&amp;nbsp;said&amp;nbsp;to&amp;nbsp;be&amp;nbsp;"ready"&amp;nbsp;for&amp;nbsp;that&amp;nbsp;event.&amp;nbsp;So,&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;that&amp;nbsp;has&amp;nbsp;connected&lt;br&gt;
successfully&amp;nbsp;to&amp;nbsp;another&amp;nbsp;server&amp;nbsp;is&amp;nbsp;"connect&amp;nbsp;ready".&amp;nbsp;A&amp;nbsp;server&amp;nbsp;socket&amp;nbsp;channel&amp;nbsp;which&amp;nbsp;accepts&amp;nbsp;an&amp;nbsp;incoming&amp;nbsp;connection&amp;nbsp;is&lt;br&gt;
"accept"&amp;nbsp;ready.&amp;nbsp;A&amp;nbsp;channel&amp;nbsp;that&amp;nbsp;has&amp;nbsp;data&amp;nbsp;ready&amp;nbsp;to&amp;nbsp;be&amp;nbsp;read&amp;nbsp;is&amp;nbsp;"read"&amp;nbsp;ready.&amp;nbsp;A&amp;nbsp;channel&amp;nbsp;that&amp;nbsp;is&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;you&amp;nbsp;to&amp;nbsp;write&amp;nbsp;data&amp;nbsp;to&lt;br&gt;
it,&amp;nbsp;is&amp;nbsp;"write"&amp;nbsp;ready.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
These&amp;nbsp;four&amp;nbsp;events&amp;nbsp;are&amp;nbsp;represented&amp;nbsp;by&amp;nbsp;the&amp;nbsp;four&amp;nbsp;SelectionKey&amp;nbsp;constants:&amp;nbsp;&lt;br&gt;
SelectionKey.OP_CONNECT&lt;br&gt;
SelectionKey.OP_ACCEPT&lt;br&gt;
SelectionKey.OP_READ&lt;br&gt;
SelectionKey.OP_WRITE&lt;br&gt;
&lt;br&gt;
&amp;nbsp;If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;interested&amp;nbsp;in&amp;nbsp;more&amp;nbsp;than&amp;nbsp;one&amp;nbsp;event,&amp;nbsp;OR&amp;nbsp;the&amp;nbsp;constants&amp;nbsp;together,&amp;nbsp;like&amp;nbsp;this:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;interestSet&amp;nbsp;=&amp;nbsp;SelectionKey.OP_READ&amp;nbsp;|&amp;nbsp;SelectionKey.OP_WRITE;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
=====================================================&lt;br&gt;
SelectionKey's&lt;br&gt;
&lt;br&gt;
&amp;nbsp;As&amp;nbsp;you&amp;nbsp;saw&amp;nbsp;in&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;section,&amp;nbsp;when&amp;nbsp;you&amp;nbsp;register&amp;nbsp;a&amp;nbsp;Channel&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;the&amp;nbsp;register()&lt;br&gt;
method&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;SelectionKey&amp;nbsp;objects.&amp;nbsp;This&amp;nbsp;SelectionKey&amp;nbsp;object&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;few&amp;nbsp;interesting&amp;nbsp;properties:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;interest&amp;nbsp;set&lt;br&gt;
The&amp;nbsp;ready&amp;nbsp;set&lt;br&gt;
The&amp;nbsp;Channel&lt;br&gt;
The&amp;nbsp;Selector&lt;br&gt;
An&amp;nbsp;attached&amp;nbsp;object&amp;nbsp;(optional)&lt;br&gt;
&lt;br&gt;
&amp;nbsp;I'll&amp;nbsp;describe&amp;nbsp;these&amp;nbsp;properties&amp;nbsp;below.&lt;br&gt;
===========================================&lt;br&gt;
Interest&amp;nbsp;Set&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;interest&amp;nbsp;set&amp;nbsp;is&amp;nbsp;the&amp;nbsp;set&amp;nbsp;of&amp;nbsp;events&amp;nbsp;you&amp;nbsp;are&amp;nbsp;interested&amp;nbsp;in&amp;nbsp;"selecting",&amp;nbsp;as&amp;nbsp;described&amp;nbsp;in&amp;nbsp;the&amp;nbsp;section&amp;nbsp;"Registering&lt;br&gt;
Channels&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Selector".&amp;nbsp;You&amp;nbsp;can&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;that&amp;nbsp;interest&amp;nbsp;set&amp;nbsp;via&amp;nbsp;the&amp;nbsp;SelectionKey&amp;nbsp;like&amp;nbsp;this:&amp;nbsp;&lt;br&gt;
int&amp;nbsp;interestSet&amp;nbsp;=&amp;nbsp;selectionKey.interestOps();&lt;br&gt;
&lt;br&gt;
boolean&amp;nbsp;isInterestedInAccept&amp;nbsp;&amp;nbsp;=&amp;nbsp;interestSet&amp;nbsp;&amp;&amp;nbsp;SelectionKey.OP_ACCEPT;&lt;br&gt;
boolean&amp;nbsp;isInterestedInConnect&amp;nbsp;=&amp;nbsp;interestSet&amp;nbsp;&amp;&amp;nbsp;SelectionKey.OP_CONNECT;&lt;br&gt;
boolean&amp;nbsp;isInterestedInRead&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=&amp;nbsp;interestSet&amp;nbsp;&amp;&amp;nbsp;SelectionKey.OP_READ;&lt;br&gt;
boolean&amp;nbsp;isInterestedInWrite&amp;nbsp;&amp;nbsp;&amp;nbsp;=&amp;nbsp;interestSet&amp;nbsp;&amp;&amp;nbsp;SelectionKey.OP_WRITE;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;As&amp;nbsp;you&amp;nbsp;can&amp;nbsp;see,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;AND&amp;nbsp;the&amp;nbsp;interest&amp;nbsp;set&amp;nbsp;with&amp;nbsp;the&amp;nbsp;given&amp;nbsp;SelectionKey&amp;nbsp;constant&amp;nbsp;to&amp;nbsp;find&amp;nbsp;out&lt;br&gt;
if&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;event&amp;nbsp;is&amp;nbsp;in&amp;nbsp;the&amp;nbsp;interest&amp;nbsp;set.&lt;br&gt;
&lt;br&gt;
================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Channel&amp;nbsp;+&amp;nbsp;Selector&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Accessing&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;+&amp;nbsp;selector&amp;nbsp;from&amp;nbsp;the&amp;nbsp;SelectionKey&amp;nbsp;is&amp;nbsp;trivial.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;how&amp;nbsp;it's&amp;nbsp;done:&amp;nbsp;&lt;br&gt;
Channel&amp;nbsp;&amp;nbsp;channel&amp;nbsp;&amp;nbsp;=&amp;nbsp;selectionKey.channel();&lt;br&gt;
&lt;br&gt;
Selector&amp;nbsp;selector&amp;nbsp;=&amp;nbsp;selectionKey.selector();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selecting&amp;nbsp;Channels&amp;nbsp;via&amp;nbsp;a&amp;nbsp;Selector&lt;br&gt;
&lt;br&gt;
Once&amp;nbsp;you&amp;nbsp;have&amp;nbsp;register&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;channels&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Selector&amp;nbsp;you&amp;nbsp;can&amp;nbsp;call&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;select()&amp;nbsp;methods.&lt;br&gt;
These&amp;nbsp;methods&amp;nbsp;return&amp;nbsp;the&amp;nbsp;channels&amp;nbsp;that&amp;nbsp;are&amp;nbsp;"ready"&amp;nbsp;for&amp;nbsp;the&amp;nbsp;events&amp;nbsp;you&amp;nbsp;are&amp;nbsp;interested&amp;nbsp;in&amp;nbsp;(connect,&amp;nbsp;accept,&lt;br&gt;
read&amp;nbsp;or&amp;nbsp;write).&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;interested&amp;nbsp;in&amp;nbsp;channels&amp;nbsp;that&amp;nbsp;are&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;reading,&amp;nbsp;you&amp;nbsp;will&amp;nbsp;receive&amp;nbsp;the&lt;br&gt;
channels&amp;nbsp;that&amp;nbsp;are&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;reading&amp;nbsp;from&amp;nbsp;the&amp;nbsp;select()&amp;nbsp;methods.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Here&amp;nbsp;are&amp;nbsp;the&amp;nbsp;select()&amp;nbsp;methods:&amp;nbsp;&lt;br&gt;
int&amp;nbsp;select()&lt;br&gt;
int&amp;nbsp;select(long&amp;nbsp;timeout)&lt;br&gt;
int&amp;nbsp;selectNow()&lt;br&gt;
&lt;br&gt;
select()&amp;nbsp;blocks&amp;nbsp;until&amp;nbsp;at&amp;nbsp;least&amp;nbsp;one&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;the&amp;nbsp;events&amp;nbsp;you&amp;nbsp;registered&amp;nbsp;for.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
select(long&amp;nbsp;timeout)&amp;nbsp;does&amp;nbsp;the&amp;nbsp;same&amp;nbsp;as&amp;nbsp;select()&amp;nbsp;except&amp;nbsp;it&amp;nbsp;blocks&amp;nbsp;for&amp;nbsp;a&amp;nbsp;maximum&amp;nbsp;of&amp;nbsp;timeout&amp;nbsp;milliseconds&amp;nbsp;(the&amp;nbsp;parameter).&lt;br&gt;
&lt;br&gt;
==============================================================&lt;br&gt;
&lt;br&gt;
wakeUp()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;A&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;has&amp;nbsp;called&amp;nbsp;the&amp;nbsp;select()&amp;nbsp;method&amp;nbsp;which&amp;nbsp;is&amp;nbsp;blocked,&amp;nbsp;can&amp;nbsp;be&amp;nbsp;made&amp;nbsp;to&amp;nbsp;leave&amp;nbsp;the&amp;nbsp;select()&amp;nbsp;method,&amp;nbsp;even&amp;nbsp;if&lt;br&gt;
no&amp;nbsp;channels&amp;nbsp;are&amp;nbsp;yet&amp;nbsp;ready.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;done&amp;nbsp;by&amp;nbsp;having&amp;nbsp;a&amp;nbsp;different&amp;nbsp;thread&amp;nbsp;call&amp;nbsp;the&amp;nbsp;Selector.wakeup()&amp;nbsp;method&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Selector&lt;br&gt;
which&amp;nbsp;the&amp;nbsp;first&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;called&amp;nbsp;select()&amp;nbsp;on.&amp;nbsp;The&amp;nbsp;thread&amp;nbsp;waiting&amp;nbsp;inside&amp;nbsp;select()&amp;nbsp;will&amp;nbsp;then&amp;nbsp;return&amp;nbsp;immediately.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;If&amp;nbsp;a&amp;nbsp;different&amp;nbsp;thread&amp;nbsp;calls&amp;nbsp;wakeup()&amp;nbsp;and&amp;nbsp;no&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;currently&amp;nbsp;blocked&amp;nbsp;inside&amp;nbsp;select(),&amp;nbsp;the&amp;nbsp;next&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;calls&lt;br&gt;
select()&amp;nbsp;will&amp;nbsp;"wake&amp;nbsp;up"&amp;nbsp;immediately.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
close()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;When&amp;nbsp;you&amp;nbsp;are&amp;nbsp;finished&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Selector&amp;nbsp;you&amp;nbsp;call&amp;nbsp;its&amp;nbsp;close()&amp;nbsp;method.&amp;nbsp;This&amp;nbsp;closes&amp;nbsp;the&amp;nbsp;Selector&amp;nbsp;and&amp;nbsp;invalidates&amp;nbsp;all&lt;br&gt;
SelectionKey&amp;nbsp;instances&amp;nbsp;registered&amp;nbsp;with&amp;nbsp;this&amp;nbsp;Selector.&amp;nbsp;The&amp;nbsp;channels&amp;nbsp;themselves&amp;nbsp;are&amp;nbsp;not&amp;nbsp;closed.&lt;br&gt;
&lt;br&gt;
==================================================&lt;br&gt;
------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;(non&amp;nbsp;blocking&amp;nbsp;server&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;nio;&lt;br&gt;
&lt;br&gt;
/*Traditional&amp;nbsp;IO&amp;nbsp;is&amp;nbsp;blocking&amp;nbsp;in&amp;nbsp;nature.&amp;nbsp;For&amp;nbsp;example&amp;nbsp;traditional&amp;nbsp;socket&amp;nbsp;connection&amp;nbsp;is&amp;nbsp;blocking,&amp;nbsp;wherein&amp;nbsp;the&amp;nbsp;server&amp;nbsp;waits&lt;br&gt;
&amp;nbsp;for&amp;nbsp;a&amp;nbsp;client&amp;nbsp;connection&amp;nbsp;and&amp;nbsp;once&amp;nbsp;the&amp;nbsp;client&amp;nbsp;connection&amp;nbsp;is&amp;nbsp;obtained&amp;nbsp;an&amp;nbsp;independent&amp;nbsp;thread&amp;nbsp;handles&amp;nbsp;the&amp;nbsp;operation&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
&amp;nbsp;client.&amp;nbsp;Java&amp;nbsp;NIO&amp;nbsp;introduces&amp;nbsp;non&amp;nbsp;blocking&amp;nbsp;IO&amp;nbsp;wherein&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;read&amp;nbsp;or&amp;nbsp;write&amp;nbsp;events.&lt;br&gt;
&amp;nbsp;It&amp;nbsp;also&amp;nbsp;introduces&amp;nbsp;multiplexing,&amp;nbsp;a&amp;nbsp;concept&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;explained&amp;nbsp;as&amp;nbsp;follows&amp;nbsp;:&amp;nbsp;imagine&amp;nbsp;a&amp;nbsp;waiter&amp;nbsp;in&amp;nbsp;a&amp;nbsp;restaurant&lt;br&gt;
&amp;nbsp;attending&amp;nbsp;at&amp;nbsp;a&amp;nbsp;table.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;restaurant&amp;nbsp;manager&amp;nbsp;had&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;one&amp;nbsp;waiter&amp;nbsp;per&amp;nbsp;table&amp;nbsp;then&amp;nbsp;the&amp;nbsp;restaurant&amp;nbsp;would&amp;nbsp;quickly&amp;nbsp;go&lt;br&gt;
&amp;nbsp;out&amp;nbsp;of&amp;nbsp;business.&amp;nbsp;Instead&amp;nbsp;the&amp;nbsp;waiter&amp;nbsp;attends&amp;nbsp;multiple&amp;nbsp;tables&amp;nbsp;(multiplexing)&amp;nbsp;and&amp;nbsp;does&amp;nbsp;not&amp;nbsp;wait&amp;nbsp;permanently&amp;nbsp;on&amp;nbsp;one&amp;nbsp;table&amp;nbsp;(non&amp;nbsp;blocking).&lt;br&gt;
&amp;nbsp;Before&amp;nbsp;we&amp;nbsp;go&amp;nbsp;into&amp;nbsp;the&amp;nbsp;code,&amp;nbsp;lets&amp;nbsp;look&amp;nbsp;into&amp;nbsp;some&amp;nbsp;basic&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;make&amp;nbsp;up&amp;nbsp;the&amp;nbsp;'Selector'&amp;nbsp;framework.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Important&amp;nbsp;Classes&lt;br&gt;
&amp;nbsp;-&amp;nbsp;NetworkChannel-&amp;nbsp;is&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;to&amp;nbsp;a&amp;nbsp;network&amp;nbsp;socket.&amp;nbsp;The&amp;nbsp;bind&amp;nbsp;method&amp;nbsp;binds&amp;nbsp;the&amp;nbsp;socket&amp;nbsp;to&amp;nbsp;a&amp;nbsp;local&amp;nbsp;address.&lt;br&gt;
&amp;nbsp;-&amp;nbsp;SelectableChannel-&amp;nbsp;Defines&amp;nbsp;method&amp;nbsp;using&amp;nbsp;what&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;can&amp;nbsp;be&amp;nbsp;multiplexed&amp;nbsp;(used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&lt;br&gt;
&amp;nbsp;other&amp;nbsp;channels)&amp;nbsp;with&amp;nbsp;the&amp;nbsp;help&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Selector.&amp;nbsp;Selectable&amp;nbsp;channels&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;by&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;A&amp;nbsp;selectable&lt;br&gt;
&amp;nbsp;channel&amp;nbsp;may&amp;nbsp;operate&amp;nbsp;in&amp;nbsp;a&amp;nbsp;blocking&amp;nbsp;or&amp;nbsp;nonblocking&amp;nbsp;mode.&lt;br&gt;
&amp;nbsp;-&amp;nbsp;Selector&amp;nbsp;-&amp;nbsp;Selector&amp;nbsp;handles&amp;nbsp;the&amp;nbsp;combination&amp;nbsp;of&amp;nbsp;multiple&amp;nbsp;selectablechannels.&amp;nbsp;A&amp;nbsp;selectablechannel&amp;nbsp;is&amp;nbsp;registered&lt;br&gt;
&amp;nbsp;to&amp;nbsp;a&amp;nbsp;selector.&amp;nbsp;This&amp;nbsp;registration&amp;nbsp;is&amp;nbsp;represented&amp;nbsp;by&amp;nbsp;a&amp;nbsp;selectionKey.&amp;nbsp;A&amp;nbsp;selector&amp;nbsp;mentions&amp;nbsp;the&amp;nbsp;registered&amp;nbsp;keys,&amp;nbsp;selected&lt;br&gt;
&amp;nbsp;keys&amp;nbsp;and&amp;nbsp;cancelled&amp;nbsp;keys.&amp;nbsp;The&amp;nbsp;operating&amp;nbsp;system&amp;nbsp;is&amp;nbsp;checked&amp;nbsp;for&amp;nbsp;the&amp;nbsp;readiness&amp;nbsp;of&amp;nbsp;each&amp;nbsp;channel.&amp;nbsp;As&amp;nbsp;soon&amp;nbsp;as&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;is&lt;br&gt;
&amp;nbsp;ready&amp;nbsp;its&amp;nbsp;key&amp;nbsp;is&amp;nbsp;put&amp;nbsp;into&amp;nbsp;the&amp;nbsp;selected&amp;nbsp;keys.&amp;nbsp;A&amp;nbsp;selector&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;by&amp;nbsp;concurrent&amp;nbsp;threads&amp;nbsp;by&amp;nbsp;their&amp;nbsp;selection&amp;nbsp;keys&amp;nbsp;may&amp;nbsp;not.&lt;br&gt;
&amp;nbsp;-&amp;nbsp;AbstactSelectableChannel-Represents&amp;nbsp;the&amp;nbsp;basic&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;selectable&amp;nbsp;channels.&amp;nbsp;It&amp;nbsp;contains&amp;nbsp;methods&amp;nbsp;for&lt;br&gt;
&amp;nbsp;registering,&amp;nbsp;deregistering&amp;nbsp;and&amp;nbsp;closing&amp;nbsp;channels.&amp;nbsp;It&amp;nbsp;also&amp;nbsp;has&amp;nbsp;the&amp;nbsp;information&amp;nbsp;of&amp;nbsp;whether&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;blocked&amp;nbsp;or&amp;nbsp;not&lt;br&gt;
&amp;nbsp;and&amp;nbsp;keeps&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;current&amp;nbsp;keys&lt;br&gt;
&amp;nbsp;-&amp;nbsp;SocketChannel-It&amp;nbsp;represents&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;for&amp;nbsp;a&amp;nbsp;socket,&amp;nbsp;such&amp;nbsp;that&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;can&amp;nbsp;be&amp;nbsp;selected.&amp;nbsp;Socket&amp;nbsp;channels&amp;nbsp;support&lt;br&gt;
&amp;nbsp;non&amp;nbsp;blocking&amp;nbsp;connections.&amp;nbsp;Socket&amp;nbsp;Channels&amp;nbsp;are&amp;nbsp;thread&amp;nbsp;safe&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.net.InetSocketAddress;&lt;br&gt;
import&amp;nbsp;java.nio.ByteBuffer;&lt;br&gt;
import&amp;nbsp;java.nio.CharBuffer;&lt;br&gt;
import&amp;nbsp;java.nio.channels.SelectionKey;&lt;br&gt;
import&amp;nbsp;java.nio.channels.Selector;&lt;br&gt;
import&amp;nbsp;java.nio.channels.ServerSocketChannel;&lt;br&gt;
import&amp;nbsp;java.nio.channels.SocketChannel;&lt;br&gt;
import&amp;nbsp;java.nio.charset.Charset;&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
import&amp;nbsp;java.util.Iterator;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
import&amp;nbsp;java.util.Set;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;NIOSelectorsAndNIOServerExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;String&amp;nbsp;clientChannel&amp;nbsp;=&amp;nbsp;"clientChannel";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;String&amp;nbsp;serverChannel&amp;nbsp;=&amp;nbsp;"serverChannel";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;String&amp;nbsp;channelType&amp;nbsp;=&amp;nbsp;"channelType";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;ServerSocketChannel&amp;nbsp;represents&amp;nbsp;a&amp;nbsp;channel&amp;nbsp;for&amp;nbsp;sockets&amp;nbsp;that&amp;nbsp;listen&amp;nbsp;to&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;incoming&amp;nbsp;connections.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@throws&amp;nbsp;IOException&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;port&amp;nbsp;=&amp;nbsp;4444;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;localhost&amp;nbsp;=&amp;nbsp;"localhost";&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;a&amp;nbsp;new&amp;nbsp;serversocketchannel.&amp;nbsp;The&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;unbound.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ServerSocketChannel&amp;nbsp;channel&amp;nbsp;=&amp;nbsp;ServerSocketChannel.open();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;bind&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;to&amp;nbsp;an&amp;nbsp;address.&amp;nbsp;The&amp;nbsp;channel&amp;nbsp;starts&amp;nbsp;listening&amp;nbsp;to&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;incoming&amp;nbsp;connections.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.bind(new&amp;nbsp;InetSocketAddress(localhost,&amp;nbsp;port));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;mark&amp;nbsp;the&amp;nbsp;serversocketchannel&amp;nbsp;as&amp;nbsp;non&amp;nbsp;blocking&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.configureBlocking(false);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;a&amp;nbsp;selector&amp;nbsp;that&amp;nbsp;will&amp;nbsp;by&amp;nbsp;used&amp;nbsp;for&amp;nbsp;multiplexing.&amp;nbsp;The&amp;nbsp;selector&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;registers&amp;nbsp;the&amp;nbsp;socketserverchannel&amp;nbsp;as&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;well&amp;nbsp;as&amp;nbsp;all&amp;nbsp;socketchannels&amp;nbsp;that&amp;nbsp;are&amp;nbsp;created&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Selector&amp;nbsp;selector&amp;nbsp;=&amp;nbsp;Selector.open();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;register&amp;nbsp;the&amp;nbsp;serversocketchannel&amp;nbsp;with&amp;nbsp;the&amp;nbsp;selector.&amp;nbsp;The&amp;nbsp;OP_ACCEPT&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;option&amp;nbsp;marks&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;a&amp;nbsp;selection&amp;nbsp;key&amp;nbsp;as&amp;nbsp;ready&amp;nbsp;when&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;accepts&amp;nbsp;a&amp;nbsp;new&amp;nbsp;connection.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;When&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;socket&amp;nbsp;server&amp;nbsp;accepts&amp;nbsp;a&amp;nbsp;connection&amp;nbsp;this&amp;nbsp;key&amp;nbsp;is&amp;nbsp;added&amp;nbsp;to&amp;nbsp;the&amp;nbsp;list&amp;nbsp;of&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;selected&amp;nbsp;keys&amp;nbsp;of&amp;nbsp;the&amp;nbsp;selector.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;when&amp;nbsp;asked&amp;nbsp;for&amp;nbsp;the&amp;nbsp;selected&amp;nbsp;keys,&amp;nbsp;this&amp;nbsp;key&amp;nbsp;is&amp;nbsp;returned&amp;nbsp;and&amp;nbsp;hence&amp;nbsp;we&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;know&amp;nbsp;that&amp;nbsp;a&amp;nbsp;new&amp;nbsp;connection&amp;nbsp;has&amp;nbsp;been&amp;nbsp;accepted.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey&amp;nbsp;socketServerSelectionKey&amp;nbsp;=&amp;nbsp;channel.register(selector,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey.OP_ACCEPT);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;set&amp;nbsp;property&amp;nbsp;in&amp;nbsp;the&amp;nbsp;key&amp;nbsp;that&amp;nbsp;identifies&amp;nbsp;the&amp;nbsp;channel&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;properties&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;String&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;properties.put(channelType,&amp;nbsp;serverChannel);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;socketServerSelectionKey.attach(properties);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;the&amp;nbsp;selected&amp;nbsp;keys&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(;;)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;select&amp;nbsp;method&amp;nbsp;is&amp;nbsp;a&amp;nbsp;blocking&amp;nbsp;method&amp;nbsp;which&amp;nbsp;returns&amp;nbsp;when&amp;nbsp;atleast&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;registered&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;selected.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;when&amp;nbsp;the&amp;nbsp;socket&amp;nbsp;accepts&amp;nbsp;a&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;new&amp;nbsp;connection,&amp;nbsp;this&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;will&amp;nbsp;return.&amp;nbsp;Once&amp;nbsp;a&amp;nbsp;socketclient&amp;nbsp;is&amp;nbsp;added&amp;nbsp;to&amp;nbsp;the&amp;nbsp;list&amp;nbsp;of&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;registered&amp;nbsp;channels,&amp;nbsp;then&amp;nbsp;this&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;would&amp;nbsp;also&amp;nbsp;return&amp;nbsp;when&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;clients&amp;nbsp;has&amp;nbsp;data&amp;nbsp;to&amp;nbsp;be&amp;nbsp;read&amp;nbsp;or&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;written.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;also&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;a&amp;nbsp;nonblocking&amp;nbsp;select&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;using&amp;nbsp;the&amp;nbsp;selectNow()&amp;nbsp;function.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;We&amp;nbsp;can&amp;nbsp;also&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;maximum&amp;nbsp;time&amp;nbsp;for&amp;nbsp;which&amp;nbsp;a&amp;nbsp;select&amp;nbsp;function&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;can&amp;nbsp;be&amp;nbsp;blocked&amp;nbsp;using&amp;nbsp;the&amp;nbsp;select(long&amp;nbsp;timeout)&amp;nbsp;function.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(selector.select()&amp;nbsp;==&amp;nbsp;0)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;select&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;with&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;selected&amp;nbsp;keys&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Set&lt;SelectionKey&gt;&amp;nbsp;selectedKeys&amp;nbsp;=&amp;nbsp;selector.selectedKeys();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&lt;SelectionKey&gt;&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;selectedKeys.iterator();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(iterator.hasNext())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey&amp;nbsp;key&amp;nbsp;=&amp;nbsp;iterator.next();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;selection&amp;nbsp;key&amp;nbsp;could&amp;nbsp;either&amp;nbsp;by&amp;nbsp;the&amp;nbsp;socketserver&amp;nbsp;informing&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;that&amp;nbsp;a&amp;nbsp;new&amp;nbsp;connection&amp;nbsp;has&amp;nbsp;been&amp;nbsp;made,&amp;nbsp;or&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;a&amp;nbsp;socket&amp;nbsp;client&amp;nbsp;that&amp;nbsp;is&amp;nbsp;ready&amp;nbsp;for&amp;nbsp;read/write&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;use&amp;nbsp;the&amp;nbsp;properties&amp;nbsp;object&amp;nbsp;attached&amp;nbsp;to&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;to&amp;nbsp;find&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;out&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;channel.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(((Map&lt;?,&amp;nbsp;?&gt;)&amp;nbsp;key.attachment()).get(channelType).equals(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;serverChannel))&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;a&amp;nbsp;new&amp;nbsp;connection&amp;nbsp;has&amp;nbsp;been&amp;nbsp;obtained.&amp;nbsp;This&amp;nbsp;channel&amp;nbsp;is&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;therefore&amp;nbsp;a&amp;nbsp;socket&amp;nbsp;server.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ServerSocketChannel&amp;nbsp;serverSocketChannel&amp;nbsp;=&amp;nbsp;(ServerSocketChannel)&amp;nbsp;key&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.channel();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;accept&amp;nbsp;the&amp;nbsp;new&amp;nbsp;connection&amp;nbsp;on&amp;nbsp;the&amp;nbsp;server&amp;nbsp;socket.&amp;nbsp;Since&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;server&amp;nbsp;socket&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;marked&amp;nbsp;as&amp;nbsp;non&amp;nbsp;blocking&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;channel&amp;nbsp;will&amp;nbsp;return&amp;nbsp;null&amp;nbsp;if&amp;nbsp;no&amp;nbsp;client&amp;nbsp;is&amp;nbsp;connected.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SocketChannel&amp;nbsp;clientSocketChannel&amp;nbsp;=&amp;nbsp;serverSocketChannel&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.accept();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(clientSocketChannel&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;set&amp;nbsp;the&amp;nbsp;client&amp;nbsp;connection&amp;nbsp;to&amp;nbsp;be&amp;nbsp;non&amp;nbsp;blocking&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clientSocketChannel.configureBlocking(false);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey&amp;nbsp;clientKey&amp;nbsp;=&amp;nbsp;clientSocketChannel.register(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;selector,&amp;nbsp;SelectionKey.OP_READ,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SelectionKey.OP_WRITE);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;clientproperties&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;String&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clientproperties.put(channelType,&amp;nbsp;clientChannel);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clientKey.attach(clientproperties);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;write&amp;nbsp;something&amp;nbsp;to&amp;nbsp;the&amp;nbsp;new&amp;nbsp;created&amp;nbsp;client&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CharBuffer&amp;nbsp;buffer&amp;nbsp;=&amp;nbsp;CharBuffer.wrap("Hello&amp;nbsp;client");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(buffer.hasRemaining())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clientSocketChannel.write(Charset.defaultCharset()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.encode(buffer));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buffer.clear();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;data&amp;nbsp;is&amp;nbsp;available&amp;nbsp;for&amp;nbsp;read&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;buffer&amp;nbsp;for&amp;nbsp;reading&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ByteBuffer&amp;nbsp;buffer&amp;nbsp;=&amp;nbsp;ByteBuffer.allocate(20);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SocketChannel&amp;nbsp;clientChannel&amp;nbsp;=&amp;nbsp;(SocketChannel)&amp;nbsp;key.channel();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;bytesRead&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(key.isReadable())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;non&amp;nbsp;blocking&amp;nbsp;so&amp;nbsp;keep&amp;nbsp;it&amp;nbsp;open&amp;nbsp;till&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;count&amp;nbsp;is&amp;nbsp;&gt;=0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;((bytesRead&amp;nbsp;=&amp;nbsp;clientChannel.read(buffer))&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buffer.flip();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Charset.defaultCharset().decode(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buffer));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buffer.clear();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(bytesRead&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;key&amp;nbsp;is&amp;nbsp;automatically&amp;nbsp;invalidated&amp;nbsp;once&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;channel&amp;nbsp;is&amp;nbsp;closed&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clientChannel.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;once&amp;nbsp;a&amp;nbsp;key&amp;nbsp;is&amp;nbsp;handled,&amp;nbsp;it&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;removed&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iterator.remove();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
CLIENT&amp;nbsp;:&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.net.InetSocketAddress;&lt;br&gt;
import&amp;nbsp;java.nio.ByteBuffer;&lt;br&gt;
import&amp;nbsp;java.nio.CharBuffer;&lt;br&gt;
import&amp;nbsp;java.nio.channels.SocketChannel;&lt;br&gt;
import&amp;nbsp;java.nio.charset.Charset;&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;NIOSelectorsAndNIOClientExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IOException,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;port&amp;nbsp;=&amp;nbsp;4444;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SocketChannel&amp;nbsp;channel&amp;nbsp;=&amp;nbsp;SocketChannel.open();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;open&amp;nbsp;this&amp;nbsp;channel&amp;nbsp;in&amp;nbsp;non&amp;nbsp;blocking&amp;nbsp;mode&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.configureBlocking(false);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.connect(new&amp;nbsp;InetSocketAddress("localhost",&amp;nbsp;port));&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(!channel.finishConnect())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;System.out.println("still&amp;nbsp;connecting");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;see&amp;nbsp;if&amp;nbsp;any&amp;nbsp;message&amp;nbsp;has&amp;nbsp;been&amp;nbsp;received&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ByteBuffer&amp;nbsp;bufferA&amp;nbsp;=&amp;nbsp;ByteBuffer.allocate(20);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;message&amp;nbsp;=&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;((count&amp;nbsp;=&amp;nbsp;channel.read(bufferA))&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;flip&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;to&amp;nbsp;start&amp;nbsp;reading&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bufferA.flip();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;message&amp;nbsp;+=&amp;nbsp;Charset.defaultCharset().decode(bufferA);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(message.length()&amp;nbsp;&gt;&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(message);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;write&amp;nbsp;some&amp;nbsp;data&amp;nbsp;into&amp;nbsp;the&amp;nbsp;channel&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CharBuffer&amp;nbsp;buffer&amp;nbsp;=&amp;nbsp;CharBuffer.wrap("Hello&amp;nbsp;Server");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(buffer.hasRemaining())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.write(Charset.defaultCharset().encode(buffer));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;message&amp;nbsp;=&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_4_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;IO&amp;nbsp;:&amp;nbsp;NIO&amp;nbsp;advantages,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.nio&amp;nbsp;package,&amp;nbsp;which&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;1.4,&amp;nbsp;allows&amp;nbsp;developers&amp;nbsp;to&amp;nbsp;achieve&amp;nbsp;greater&amp;nbsp;performance&amp;nbsp;in&amp;nbsp;data&amp;nbsp;processing&lt;br&gt;
and&amp;nbsp;offers&amp;nbsp;better&amp;nbsp;scalability.&amp;nbsp;Peter&amp;nbsp;V.&amp;nbsp;Mikhalenko&amp;nbsp;explains&amp;nbsp;how&amp;nbsp;to&amp;nbsp;use&amp;nbsp;many&amp;nbsp;of&amp;nbsp;the&amp;nbsp;NIO&amp;nbsp;API's&amp;nbsp;new&amp;nbsp;features.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;java.nio&amp;nbsp;(new&amp;nbsp;input/output)&amp;nbsp;package,&amp;nbsp;which&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;1.4,&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;I/O&amp;nbsp;more&amp;nbsp;like&amp;nbsp;what&amp;nbsp;is&amp;nbsp;available&amp;nbsp;in&lt;br&gt;
other&amp;nbsp;lower-level&amp;nbsp;languages&amp;nbsp;like&amp;nbsp;C.&amp;nbsp;Many&amp;nbsp;developers&amp;nbsp;think&amp;nbsp;the&amp;nbsp;new&amp;nbsp;capabilities&amp;nbsp;offer&amp;nbsp;just&amp;nbsp;non-blocking&amp;nbsp;I/O&amp;nbsp;operations;&lt;br&gt;
however,&amp;nbsp;the&amp;nbsp;new&amp;nbsp;features&amp;nbsp;offer&amp;nbsp;many&amp;nbsp;other&amp;nbsp;new&amp;nbsp;and&amp;nbsp;interesting&amp;nbsp;features,&amp;nbsp;which&amp;nbsp;include:&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;can&amp;nbsp;memory&amp;nbsp;map&amp;nbsp;files.&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;can&amp;nbsp;read&amp;nbsp;and&amp;nbsp;write&amp;nbsp;blocks&amp;nbsp;of&amp;nbsp;data&amp;nbsp;direct&amp;nbsp;from&amp;nbsp;disk,&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;byte&amp;nbsp;by&amp;nbsp;byte.&amp;nbsp;(It&amp;nbsp;deals&amp;nbsp;with&amp;nbsp;the&amp;nbsp;endian&amp;nbsp;problem&lt;br&gt;
when&amp;nbsp;you&amp;nbsp;fish&amp;nbsp;the&amp;nbsp;data&amp;nbsp;out&amp;nbsp;of&amp;nbsp;the&amp;nbsp;buffer&amp;nbsp;not&amp;nbsp;during&amp;nbsp;the&amp;nbsp;read.)&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;can&amp;nbsp;do&amp;nbsp;non-blocking&amp;nbsp;asynchronous&amp;nbsp;I/O.&lt;br&gt;
-&amp;nbsp;You&amp;nbsp;can&amp;nbsp;lock&amp;nbsp;files&amp;nbsp;or&amp;nbsp;parts&amp;nbsp;of&amp;nbsp;files.&lt;br&gt;
&lt;br&gt;
======================&lt;br&gt;
&lt;br&gt;
Non-blocking&amp;nbsp;operations&lt;br&gt;
&lt;br&gt;
Non-blocking&amp;nbsp;operations&amp;nbsp;are&amp;nbsp;the&amp;nbsp;most&amp;nbsp;popular&amp;nbsp;and&amp;nbsp;widely&amp;nbsp;used&amp;nbsp;feature&amp;nbsp;of&amp;nbsp;the&amp;nbsp;new&amp;nbsp;I/O&amp;nbsp;API.&amp;nbsp;In&amp;nbsp;order&amp;nbsp;to&amp;nbsp;configure&amp;nbsp;the&lt;br&gt;
channel&amp;nbsp;to&amp;nbsp;be&amp;nbsp;non-blocking,&amp;nbsp;you&amp;nbsp;should&amp;nbsp;call&amp;nbsp;the&amp;nbsp;configureBlocking()&amp;nbsp;method.&amp;nbsp;For&amp;nbsp;SocketChannel,&amp;nbsp;this&amp;nbsp;is&amp;nbsp;how&amp;nbsp;you&amp;nbsp;do&amp;nbsp;that:&lt;br&gt;
&lt;br&gt;
String&amp;nbsp;host&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
&lt;br&gt;
InetSocketAddress&amp;nbsp;socketAddress&amp;nbsp;=&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;new&amp;nbsp;InetSocketAddress(host,&amp;nbsp;1234);&lt;br&gt;
&lt;br&gt;
channel&amp;nbsp;=&amp;nbsp;SocketChannel.open();&lt;br&gt;
&lt;br&gt;
channel.configureBlocking(false);&lt;br&gt;
&lt;br&gt;
channel.connect(socketAddress);&lt;br&gt;
&lt;br&gt;
======================&lt;br&gt;
&lt;br&gt;
Conclusion&lt;br&gt;
&lt;br&gt;
Although&amp;nbsp;many&amp;nbsp;developers&amp;nbsp;think&amp;nbsp;the&amp;nbsp;new&amp;nbsp;I/O&amp;nbsp;capabilities&amp;nbsp;just&amp;nbsp;offer&amp;nbsp;non-blocking&amp;nbsp;I/O&amp;nbsp;operations,&amp;nbsp;this&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;completely&amp;nbsp;accurate.&amp;nbsp;The&amp;nbsp;new&amp;nbsp;I/O&amp;nbsp;offers&amp;nbsp;several&amp;nbsp;new&amp;nbsp;concepts&amp;nbsp;(such&amp;nbsp;as&amp;nbsp;channels)&amp;nbsp;and&amp;nbsp;new&amp;nbsp;ways&amp;nbsp;of&amp;nbsp;working&lt;br&gt;
with&amp;nbsp;I/O&amp;nbsp;operations&amp;nbsp;through&amp;nbsp;buffers,&amp;nbsp;charsets,&amp;nbsp;and&amp;nbsp;file&amp;nbsp;mapping.&amp;nbsp;The&amp;nbsp;java.nio&amp;nbsp;package&amp;nbsp;allows&amp;nbsp;developers&amp;nbsp;to&lt;br&gt;
achieve&amp;nbsp;greater&amp;nbsp;performance&amp;nbsp;in&amp;nbsp;data&amp;nbsp;processing,&amp;nbsp;as&amp;nbsp;well&amp;nbsp;as&amp;nbsp;better&amp;nbsp;scalability.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;more&amp;nbsp;in-depth&amp;nbsp;details&amp;nbsp;about&amp;nbsp;NIO&amp;nbsp;features,&amp;nbsp;take&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;Sun's&amp;nbsp;JSR&amp;nbsp;51&amp;nbsp;and&amp;nbsp;the&amp;nbsp;quick&amp;nbsp;Sun&amp;nbsp;NIO&amp;nbsp;guide.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
</questions>
