<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_6_1_0" name="ClojureHelloWorldQuestions" nofquestions="1" nofsubcategories="0" filename="clojurehelloworldquestions1_6_1_0.xml">
  <question id="1_6_1_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;we&amp;nbsp;should&amp;nbsp;use&amp;nbsp;Clojure&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://clojure.org/about/rationale&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Clojure&amp;nbsp;meets&amp;nbsp;its&amp;nbsp;goals&amp;nbsp;by:&amp;nbsp;embracing&amp;nbsp;an&amp;nbsp;industry-standard,&amp;nbsp;open&amp;nbsp;platform&amp;nbsp;-&amp;nbsp;the&amp;nbsp;JVM;&amp;nbsp;modernizing&amp;nbsp;a&amp;nbsp;venerable&amp;nbsp;language&amp;nbsp;-&amp;nbsp;Lisp;&lt;br&gt;
fostering&amp;nbsp;functional&amp;nbsp;programming&amp;nbsp;with&amp;nbsp;immutable&amp;nbsp;persistent&amp;nbsp;data&amp;nbsp;structures;&lt;br&gt;
and&amp;nbsp;providing&amp;nbsp;built-in&amp;nbsp;concurrency&amp;nbsp;support&amp;nbsp;via&amp;nbsp;software&amp;nbsp;transactional&amp;nbsp;memory&amp;nbsp;and&amp;nbsp;asynchronous&amp;nbsp;agents.&lt;br&gt;
The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;robust,&amp;nbsp;practical,&amp;nbsp;and&amp;nbsp;fast.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;Clojure?&lt;br&gt;
&lt;br&gt;
Why&amp;nbsp;did&amp;nbsp;I&amp;nbsp;write&amp;nbsp;yet&amp;nbsp;another&amp;nbsp;programming&amp;nbsp;language?&amp;nbsp;Basically&amp;nbsp;because&amp;nbsp;I&amp;nbsp;wanted:&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;Lisp&lt;br&gt;
for&amp;nbsp;Functional&amp;nbsp;Programming&lt;br&gt;
symbiotic&amp;nbsp;with&amp;nbsp;an&amp;nbsp;established&amp;nbsp;Platform&lt;br&gt;
designed&amp;nbsp;for&amp;nbsp;Concurrency&lt;br&gt;
and&amp;nbsp;couldn’t&amp;nbsp;find&amp;nbsp;one.&amp;nbsp;Here’s&amp;nbsp;an&amp;nbsp;outline&amp;nbsp;of&amp;nbsp;some&amp;nbsp;of&amp;nbsp;the&amp;nbsp;motivating&amp;nbsp;ideas&amp;nbsp;behind&amp;nbsp;Clojure.&lt;br&gt;
&lt;br&gt;
-----------&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Lisp&amp;nbsp;is&amp;nbsp;a&amp;nbsp;good&amp;nbsp;thing&lt;br&gt;
&lt;br&gt;
Often&amp;nbsp;emulated/pillaged,&amp;nbsp;still&amp;nbsp;not&amp;nbsp;duplicated&lt;br&gt;
Lambda&amp;nbsp;calculus&amp;nbsp;yields&amp;nbsp;an&amp;nbsp;extremely&amp;nbsp;small&amp;nbsp;core&lt;br&gt;
Almost&amp;nbsp;no&amp;nbsp;syntax&lt;br&gt;
Core&amp;nbsp;advantage&amp;nbsp;still&amp;nbsp;code-as-data&amp;nbsp;and&amp;nbsp;syntactic&amp;nbsp;abstraction&lt;br&gt;
What&amp;nbsp;about&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;Lisps&amp;nbsp;(Common&amp;nbsp;Lisp&amp;nbsp;and&amp;nbsp;Scheme)?&lt;br&gt;
Slow/no&amp;nbsp;innovation&amp;nbsp;post&amp;nbsp;standardization&lt;br&gt;
Core&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;mutable,&amp;nbsp;not&amp;nbsp;extensible&lt;br&gt;
No&amp;nbsp;concurrency&amp;nbsp;in&amp;nbsp;specs&lt;br&gt;
Good&amp;nbsp;implementations&amp;nbsp;already&amp;nbsp;exist&amp;nbsp;for&amp;nbsp;JVM&amp;nbsp;(ABCL,&amp;nbsp;Kawa,&amp;nbsp;SISC&amp;nbsp;et&amp;nbsp;al)&lt;br&gt;
Standard&amp;nbsp;Lisps&amp;nbsp;are&amp;nbsp;their&amp;nbsp;own&amp;nbsp;platforms&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Lisp&amp;nbsp;not&amp;nbsp;constrained&amp;nbsp;by&amp;nbsp;backwards&amp;nbsp;compatibility&lt;br&gt;
Extends&amp;nbsp;the&amp;nbsp;code-as-data&amp;nbsp;paradigm&amp;nbsp;to&amp;nbsp;maps&amp;nbsp;and&amp;nbsp;vectors&lt;br&gt;
Defaults&amp;nbsp;to&amp;nbsp;immutability&lt;br&gt;
Core&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;are&amp;nbsp;extensible&amp;nbsp;abstractions&lt;br&gt;
Embraces&amp;nbsp;a&amp;nbsp;platform&amp;nbsp;(JVM)&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Functional&amp;nbsp;programming&amp;nbsp;is&amp;nbsp;a&amp;nbsp;good&amp;nbsp;thing&lt;br&gt;
&lt;br&gt;
Immutable&amp;nbsp;data&amp;nbsp;+&amp;nbsp;first-class&amp;nbsp;functions&lt;br&gt;
Could&amp;nbsp;always&amp;nbsp;be&amp;nbsp;done&amp;nbsp;in&amp;nbsp;Lisp,&amp;nbsp;by&amp;nbsp;discipline/convention&lt;br&gt;
But&amp;nbsp;if&amp;nbsp;a&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;can&amp;nbsp;be&amp;nbsp;mutated,&amp;nbsp;dangerous&amp;nbsp;to&amp;nbsp;presume&amp;nbsp;it&amp;nbsp;won’t&amp;nbsp;be&lt;br&gt;
In&amp;nbsp;traditional&amp;nbsp;Lisp,&amp;nbsp;only&amp;nbsp;the&amp;nbsp;list&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;is&amp;nbsp;structurally&amp;nbsp;recursive&lt;br&gt;
Pure&amp;nbsp;functional&amp;nbsp;languages&amp;nbsp;tend&amp;nbsp;to&amp;nbsp;strongly&amp;nbsp;static&amp;nbsp;types&lt;br&gt;
Not&amp;nbsp;for&amp;nbsp;everyone,&amp;nbsp;or&amp;nbsp;every&amp;nbsp;task&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;a&amp;nbsp;functional&amp;nbsp;language&amp;nbsp;with&amp;nbsp;a&amp;nbsp;dynamic&amp;nbsp;emphasis&lt;br&gt;
All&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;immutable&amp;nbsp;&amp;&amp;nbsp;persistent,&amp;nbsp;supporting&amp;nbsp;recursion&lt;br&gt;
Heterogeneous&amp;nbsp;collections,&amp;nbsp;return&amp;nbsp;types&lt;br&gt;
Dynamic&amp;nbsp;polymorphism&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Languages&amp;nbsp;and&amp;nbsp;Platforms&lt;br&gt;
&lt;br&gt;
VMs,&amp;nbsp;not&amp;nbsp;OSes,&amp;nbsp;are&amp;nbsp;the&amp;nbsp;platforms&amp;nbsp;of&amp;nbsp;the&amp;nbsp;future,&amp;nbsp;providing:&lt;br&gt;
Type&amp;nbsp;system&lt;br&gt;
Dynamic&amp;nbsp;enforcement&amp;nbsp;and&amp;nbsp;safety&lt;br&gt;
Libraries&lt;br&gt;
Abstract&amp;nbsp;away&amp;nbsp;OSes&lt;br&gt;
Huge&amp;nbsp;set&amp;nbsp;of&amp;nbsp;facilities&lt;br&gt;
Built-in&amp;nbsp;and&amp;nbsp;3rd-party&lt;br&gt;
Memory&amp;nbsp;and&amp;nbsp;other&amp;nbsp;resource&amp;nbsp;management&lt;br&gt;
GC&amp;nbsp;is&amp;nbsp;platform,&amp;nbsp;not&amp;nbsp;language,&amp;nbsp;facility&lt;br&gt;
Bytecode&amp;nbsp;+&amp;nbsp;JIT&amp;nbsp;compilation&lt;br&gt;
Abstracts&amp;nbsp;away&amp;nbsp;hardware&lt;br&gt;
Language&amp;nbsp;as&amp;nbsp;platform&amp;nbsp;vs.&amp;nbsp;language&amp;nbsp;+&amp;nbsp;platform&lt;br&gt;
Old&amp;nbsp;way&amp;nbsp;-&amp;nbsp;each&amp;nbsp;language&amp;nbsp;defines&amp;nbsp;its&amp;nbsp;own&amp;nbsp;runtime&lt;br&gt;
GC,&amp;nbsp;bytecode,&amp;nbsp;type&amp;nbsp;system,&amp;nbsp;libraries&amp;nbsp;etc&lt;br&gt;
New&amp;nbsp;way&amp;nbsp;(JVM,&amp;nbsp;.Net)&lt;br&gt;
Common&amp;nbsp;runtime&amp;nbsp;independent&amp;nbsp;of&amp;nbsp;language&lt;br&gt;
Language&amp;nbsp;built&amp;nbsp;for&amp;nbsp;platform&amp;nbsp;vs&amp;nbsp;language&amp;nbsp;ported-to&amp;nbsp;platform&lt;br&gt;
Many&amp;nbsp;new&amp;nbsp;languages&amp;nbsp;still&amp;nbsp;take&amp;nbsp;'Language&amp;nbsp;as&amp;nbsp;platform'&amp;nbsp;approach&lt;br&gt;
When&amp;nbsp;ported,&amp;nbsp;have&amp;nbsp;platform-on-platform&amp;nbsp;issues&lt;br&gt;
Memory&amp;nbsp;management,&amp;nbsp;type-system,&amp;nbsp;threading&amp;nbsp;issues&lt;br&gt;
Library&amp;nbsp;duplication&lt;br&gt;
If&amp;nbsp;original&amp;nbsp;language&amp;nbsp;based&amp;nbsp;on&amp;nbsp;C,&amp;nbsp;some&amp;nbsp;extension&amp;nbsp;libraries&amp;nbsp;written&amp;nbsp;in&amp;nbsp;C&amp;nbsp;don’t&amp;nbsp;come&amp;nbsp;over&lt;br&gt;
Platforms&amp;nbsp;are&amp;nbsp;dictated&amp;nbsp;by&amp;nbsp;clients&lt;br&gt;
'Must&amp;nbsp;run&amp;nbsp;on&amp;nbsp;JVM'&amp;nbsp;or&amp;nbsp;.Net&amp;nbsp;vs&amp;nbsp;'must&amp;nbsp;run&amp;nbsp;on&amp;nbsp;Unix'&amp;nbsp;or&amp;nbsp;Windows&lt;br&gt;
JVM&amp;nbsp;has&amp;nbsp;established&amp;nbsp;track&amp;nbsp;record&amp;nbsp;and&amp;nbsp;trust&amp;nbsp;level&lt;br&gt;
Now&amp;nbsp;also&amp;nbsp;open&amp;nbsp;source&lt;br&gt;
Interop&amp;nbsp;with&amp;nbsp;other&amp;nbsp;code&amp;nbsp;required&lt;br&gt;
C&amp;nbsp;linkage&amp;nbsp;insufficient&amp;nbsp;these&amp;nbsp;days&lt;br&gt;
Java/JVM&amp;nbsp;_is_language&amp;nbsp;+&amp;nbsp;platform&lt;br&gt;
Not&amp;nbsp;the&amp;nbsp;original&amp;nbsp;story,&amp;nbsp;but&amp;nbsp;other&amp;nbsp;languages&amp;nbsp;for&amp;nbsp;JVM&amp;nbsp;always&amp;nbsp;existed,&amp;nbsp;now&amp;nbsp;embraced&amp;nbsp;by&amp;nbsp;Sun&lt;br&gt;
Java&amp;nbsp;can&amp;nbsp;be&amp;nbsp;tedious,&amp;nbsp;insufficiently&amp;nbsp;expressive&lt;br&gt;
Lack&amp;nbsp;of&amp;nbsp;first-class&amp;nbsp;functions,&amp;nbsp;no&amp;nbsp;type&amp;nbsp;inference,&amp;nbsp;etc&lt;br&gt;
Ability&amp;nbsp;to&amp;nbsp;call/consume&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;critical&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;the&amp;nbsp;language,&amp;nbsp;JVM&amp;nbsp;the&amp;nbsp;platform&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;Orientation&amp;nbsp;is&amp;nbsp;overrated&lt;br&gt;
&lt;br&gt;
Born&amp;nbsp;of&amp;nbsp;simulation,&amp;nbsp;now&amp;nbsp;used&amp;nbsp;for&amp;nbsp;everything,&amp;nbsp;even&amp;nbsp;when&amp;nbsp;inappropriate&lt;br&gt;
Encouraged&amp;nbsp;by&amp;nbsp;Java/C#&amp;nbsp;in&amp;nbsp;all&amp;nbsp;situations,&amp;nbsp;due&amp;nbsp;to&amp;nbsp;their&amp;nbsp;lack&amp;nbsp;of&amp;nbsp;(idiomatic)&amp;nbsp;support&amp;nbsp;for&amp;nbsp;anything&amp;nbsp;else&lt;br&gt;
Mutable&amp;nbsp;stateful&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;the&amp;nbsp;new&amp;nbsp;spaghetti&amp;nbsp;code&lt;br&gt;
Hard&amp;nbsp;to&amp;nbsp;understand,&amp;nbsp;test,&amp;nbsp;reason&amp;nbsp;about&lt;br&gt;
Concurrency&amp;nbsp;disaster&lt;br&gt;
Inheritance&amp;nbsp;is&amp;nbsp;not&amp;nbsp;the&amp;nbsp;only&amp;nbsp;way&amp;nbsp;to&amp;nbsp;do&amp;nbsp;polymorphism&lt;br&gt;
"It&amp;nbsp;is&amp;nbsp;better&amp;nbsp;to&amp;nbsp;have&amp;nbsp;100&amp;nbsp;functions&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;one&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;than&amp;nbsp;to&amp;nbsp;have&amp;nbsp;10&amp;nbsp;functions&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;10&amp;nbsp;data&amp;nbsp;structures."&amp;nbsp;-&amp;nbsp;Alan&amp;nbsp;J.&amp;nbsp;Perlis&lt;br&gt;
Clojure&amp;nbsp;models&amp;nbsp;its&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;as&amp;nbsp;immutable&amp;nbsp;objects&amp;nbsp;represented&amp;nbsp;by&amp;nbsp;interfaces,&amp;nbsp;and&amp;nbsp;otherwise&amp;nbsp;does&amp;nbsp;not&amp;nbsp;offer&amp;nbsp;its&amp;nbsp;own&amp;nbsp;class&amp;nbsp;system.&lt;br&gt;
Many&amp;nbsp;functions&amp;nbsp;defined&amp;nbsp;on&amp;nbsp;few&amp;nbsp;primary&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;(seq,&amp;nbsp;map,&amp;nbsp;vector,&amp;nbsp;set).&lt;br&gt;
Write&amp;nbsp;Java&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;consume&amp;nbsp;and&amp;nbsp;extend&amp;nbsp;Java&amp;nbsp;from&amp;nbsp;Clojure.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Polymorphism&amp;nbsp;is&amp;nbsp;a&amp;nbsp;good&amp;nbsp;thing&lt;br&gt;
&lt;br&gt;
Switch&amp;nbsp;statements,&amp;nbsp;structural&amp;nbsp;matching&amp;nbsp;etc&amp;nbsp;yield&amp;nbsp;brittle&amp;nbsp;systems&lt;br&gt;
Polymorphism&amp;nbsp;yields&amp;nbsp;extensible,&amp;nbsp;flexible&amp;nbsp;systems&lt;br&gt;
Clojure&amp;nbsp;multimethods&amp;nbsp;decouple&amp;nbsp;polymorphism&amp;nbsp;from&amp;nbsp;OO&amp;nbsp;and&amp;nbsp;types&lt;br&gt;
Supports&amp;nbsp;multiple&amp;nbsp;taxonomies&lt;br&gt;
Dispatches&amp;nbsp;via&amp;nbsp;static,&amp;nbsp;dynamic&amp;nbsp;or&amp;nbsp;external&amp;nbsp;properties,&amp;nbsp;metadata,&amp;nbsp;etc&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Concurrency&amp;nbsp;and&amp;nbsp;the&amp;nbsp;multi-core&amp;nbsp;future&lt;br&gt;
&lt;br&gt;
Immutability&amp;nbsp;makes&amp;nbsp;much&amp;nbsp;of&amp;nbsp;the&amp;nbsp;problem&amp;nbsp;go&amp;nbsp;away&lt;br&gt;
Share&amp;nbsp;freely&amp;nbsp;between&amp;nbsp;threads&lt;br&gt;
But&amp;nbsp;changing&amp;nbsp;state&amp;nbsp;a&amp;nbsp;reality&amp;nbsp;for&amp;nbsp;simulations&amp;nbsp;and&amp;nbsp;for&amp;nbsp;in-program&amp;nbsp;proxies&amp;nbsp;to&amp;nbsp;the&amp;nbsp;outside&amp;nbsp;world&lt;br&gt;
Locking&amp;nbsp;is&amp;nbsp;too&amp;nbsp;hard&amp;nbsp;to&amp;nbsp;get&amp;nbsp;right&amp;nbsp;over&amp;nbsp;and&amp;nbsp;over&amp;nbsp;again&lt;br&gt;
Clojure’s&amp;nbsp;software&amp;nbsp;transactional&amp;nbsp;memory&amp;nbsp;and&amp;nbsp;agent&amp;nbsp;systems&amp;nbsp;do&amp;nbsp;the&amp;nbsp;hard&amp;nbsp;part&lt;br&gt;
In&amp;nbsp;short,&amp;nbsp;I&amp;nbsp;think&amp;nbsp;Clojure&amp;nbsp;occupies&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;niche&amp;nbsp;as&amp;nbsp;a&amp;nbsp;functional&amp;nbsp;Lisp&amp;nbsp;for&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;with&amp;nbsp;strong&amp;nbsp;concurrency&amp;nbsp;support.&amp;nbsp;Check&amp;nbsp;out&amp;nbsp;some&amp;nbsp;of&amp;nbsp;the&amp;nbsp;features.&lt;br&gt;
&lt;br&gt;
=======================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http://thecleancoder.blogspot.com/2010/08/why-clojure.html&lt;br&gt;
Why&amp;nbsp;Clojure?&lt;br&gt;
So&amp;nbsp;why&amp;nbsp;is&amp;nbsp;Clojure&amp;nbsp;the&amp;nbsp;best&amp;nbsp;option&amp;nbsp;for&amp;nbsp;a&amp;nbsp;functional&amp;nbsp;language?&amp;nbsp;&amp;nbsp;After&amp;nbsp;all,&amp;nbsp;there&amp;nbsp;are&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;functional&amp;nbsp;languages&amp;nbsp;out&amp;nbsp;there.&amp;nbsp;&lt;br&gt;
Some&amp;nbsp;are&amp;nbsp;old,&amp;nbsp;like&amp;nbsp;Haskell,&amp;nbsp;and&amp;nbsp;Erlang.&amp;nbsp;&amp;nbsp;Some&amp;nbsp;are&amp;nbsp;new&amp;nbsp;like&amp;nbsp;Scala&amp;nbsp;and&amp;nbsp;F#.&amp;nbsp;&amp;nbsp;Why&amp;nbsp;is&amp;nbsp;Clojure&amp;nbsp;the&amp;nbsp;language&amp;nbsp;that&amp;nbsp;has&amp;nbsp;everybody&amp;nbsp;so&amp;nbsp;fired&amp;nbsp;up?&amp;nbsp;&amp;nbsp;Here&amp;nbsp;are&amp;nbsp;just&amp;nbsp;a&amp;nbsp;few&amp;nbsp;reasons.&lt;br&gt;
&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;Lisp.&amp;nbsp;&amp;nbsp;And&amp;nbsp;Lisp&amp;nbsp;is&amp;nbsp;a&amp;nbsp;functional,&amp;nbsp;simple,&amp;nbsp;well-known,&amp;nbsp;elegant&amp;nbsp;language.&amp;nbsp;The&amp;nbsp;syntax&amp;nbsp;is&amp;nbsp;almost&amp;nbsp;laughably&amp;nbsp;terse.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;in&amp;nbsp;contrast&amp;nbsp;to&amp;nbsp;languages&amp;nbsp;like&amp;nbsp;F#&amp;nbsp;and&amp;nbsp;Scala&amp;nbsp;which&amp;nbsp;have&amp;nbsp;a&amp;nbsp;complexity&amp;nbsp;and&amp;nbsp;"quirkiness"&amp;nbsp;reminiscent&amp;nbsp;of&amp;nbsp;C++.&lt;br&gt;
&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;Java.&amp;nbsp;&amp;nbsp;Clojure&amp;nbsp;sits&amp;nbsp;on&amp;nbsp;top&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;stack,&amp;nbsp;and&amp;nbsp;has&amp;nbsp;the&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;inter-operate&amp;nbsp;with&amp;nbsp;Java&amp;nbsp;with&amp;nbsp;extreme&amp;nbsp;ease.&amp;nbsp;&lt;br&gt;
Java&amp;nbsp;programs&amp;nbsp;can&amp;nbsp;call&amp;nbsp;Clojure,&amp;nbsp;and&amp;nbsp;Clojure&amp;nbsp;can&amp;nbsp;call&amp;nbsp;Java.&amp;nbsp;&amp;nbsp;You&amp;nbsp;can&amp;nbsp;write&amp;nbsp;Clojure&amp;nbsp;code&amp;nbsp;that&amp;nbsp;derives&amp;nbsp;from&amp;nbsp;Java&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;overrides&amp;nbsp;Java&amp;nbsp;methods.&lt;br&gt;
In&amp;nbsp;short,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;can&amp;nbsp;do&amp;nbsp;it&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;do&amp;nbsp;it&amp;nbsp;in&amp;nbsp;Clojure.&amp;nbsp;&amp;nbsp;What's&amp;nbsp;more&amp;nbsp;there&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Clojure&amp;nbsp;port&amp;nbsp;for&amp;nbsp;the&amp;nbsp;CLR!&lt;br&gt;
So&amp;nbsp;Clojure&amp;nbsp;may&amp;nbsp;be&amp;nbsp;the&amp;nbsp;only&amp;nbsp;functional&amp;nbsp;language&amp;nbsp;that&amp;nbsp;inter-operates&amp;nbsp;well&amp;nbsp;with&amp;nbsp;both&amp;nbsp;major&amp;nbsp;VMs.&lt;br&gt;
&lt;br&gt;
Clojure&amp;nbsp;implements&amp;nbsp;Software&amp;nbsp;Transactional&amp;nbsp;Memory&amp;nbsp;which&amp;nbsp;means&amp;nbsp;that&amp;nbsp;any&amp;nbsp;time&amp;nbsp;a&amp;nbsp;Clojure&amp;nbsp;programmer&amp;nbsp;want's&amp;nbsp;to&amp;nbsp;change&lt;br&gt;
the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;a&amp;nbsp;variable,&amp;nbsp;they&amp;nbsp;must&amp;nbsp;do&amp;nbsp;so&amp;nbsp;using&amp;nbsp;the&amp;nbsp;same&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;transaction&amp;nbsp;management&amp;nbsp;as&amp;nbsp;they&amp;nbsp;would&amp;nbsp;use&amp;nbsp;for&amp;nbsp;a&amp;nbsp;database.&lt;br&gt;
This&amp;nbsp;enforces&amp;nbsp;the&amp;nbsp;functional&amp;nbsp;paradigm&amp;nbsp;do&amp;nbsp;a&amp;nbsp;degree&amp;nbsp;that&amp;nbsp;few&amp;nbsp;other&amp;nbsp;functional&amp;nbsp;languages&amp;nbsp;do.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;STM&amp;nbsp;facilities&amp;nbsp;of&amp;nbsp;Clojure&amp;nbsp;are&amp;nbsp;elegant&amp;nbsp;and&amp;nbsp;simple,&amp;nbsp;just&amp;nbsp;like&amp;nbsp;the&amp;nbsp;rest&amp;nbsp;of&amp;nbsp;the&amp;nbsp;language.&amp;nbsp;&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;intrude&amp;nbsp;where&amp;nbsp;they&amp;nbsp;aren't&amp;nbsp;needed,&amp;nbsp;and&amp;nbsp;they&amp;nbsp;are&amp;nbsp;simple&amp;nbsp;to&amp;nbsp;employ&amp;nbsp;where&amp;nbsp;state&amp;nbsp;must&amp;nbsp;be&amp;nbsp;changed.&lt;br&gt;
&amp;nbsp;&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;fast.&amp;nbsp;&amp;nbsp;Data&amp;nbsp;structures&amp;nbsp;in&amp;nbsp;functional&amp;nbsp;languages&amp;nbsp;are&amp;nbsp;immutable.&amp;nbsp;&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;you&amp;nbsp;can't&amp;nbsp;add&amp;nbsp;an&amp;nbsp;item&amp;nbsp;to&amp;nbsp;a&amp;nbsp;list,&amp;nbsp;instead&amp;nbsp;you&lt;br&gt;
create&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;list&amp;nbsp;with&amp;nbsp;the&amp;nbsp;new&amp;nbsp;item&amp;nbsp;added.&amp;nbsp;&amp;nbsp;This&amp;nbsp;copying&amp;nbsp;could&amp;nbsp;obviously&amp;nbsp;slow&amp;nbsp;things&amp;nbsp;down&amp;nbsp;a&amp;nbsp;lot.&amp;nbsp;&lt;br&gt;
Clojure&amp;nbsp;manages&amp;nbsp;complex&amp;nbsp;immutable&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;using&amp;nbsp;a&amp;nbsp;sharing&amp;nbsp;technique&amp;nbsp;that&amp;nbsp;eliminates&amp;nbsp;the&amp;nbsp;need&amp;nbsp;to&amp;nbsp;make&amp;nbsp;deep&amp;nbsp;copies&lt;br&gt;
of&amp;nbsp;those&amp;nbsp;structures.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;Clojure&amp;nbsp;runs&amp;nbsp;very&amp;nbsp;fast.&amp;nbsp;&amp;nbsp;&lt;br&gt;
Clojure&amp;nbsp;is&amp;nbsp;supported.&amp;nbsp;&amp;nbsp;There&amp;nbsp;are&amp;nbsp;tutorials&amp;nbsp;and&amp;nbsp;blogs.&amp;nbsp;&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;IDE&amp;nbsp;plugins.&amp;nbsp;&amp;nbsp;And&amp;nbsp;there&amp;nbsp;are&amp;nbsp;mailing&amp;nbsp;lists&amp;nbsp;and&amp;nbsp;user&amp;nbsp;groups.&amp;nbsp;&amp;nbsp;If&amp;nbsp;you&amp;nbsp;program&amp;nbsp;in&amp;nbsp;Clojure,&amp;nbsp;you&amp;nbsp;won't&amp;nbsp;be&amp;nbsp;alone.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
============================================================================&lt;br&gt;
http://blog.venanti.us/why-clojure/</questionanswer>
  </question>
</questions>
