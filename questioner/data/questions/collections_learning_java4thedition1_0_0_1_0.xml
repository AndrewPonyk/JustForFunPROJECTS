<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_1_0" name="Collections_Learning_java4thEdition" nofquestions="29" nofsubcategories="0" filename="collections_learning_java4thedition1_0_0_1_0.xml">
  <question id="1_0_0_1_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Collections&amp;nbsp;:&amp;nbsp;What&amp;nbsp;were&amp;nbsp;two&amp;nbsp;major&amp;nbsp;drawbacks&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Framework&amp;nbsp;&lt;br&gt;
Prior&amp;nbsp;to&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;?&amp;nbsp;&amp;nbsp;(&amp;nbsp;tip&amp;nbsp;:&amp;nbsp;types&amp;nbsp;problem&amp;nbsp;and&amp;nbsp;primitives&amp;nbsp;types&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Prior&amp;nbsp;to&amp;nbsp;Java&amp;nbsp;5,&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;had&amp;nbsp;_&amp;nbsp;two&amp;nbsp;major&amp;nbsp;drawbacks&amp;nbsp;_.&lt;br&gt;
The&amp;nbsp;_first_&amp;nbsp;was&amp;nbsp;that&amp;nbsp;—not&amp;nbsp;having&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with—collections&lt;br&gt;
were&amp;nbsp;by&amp;nbsp;necessity&amp;nbsp;untyped&amp;nbsp;and&amp;nbsp;worked&amp;nbsp;only&amp;nbsp;with&amp;nbsp;anonymous&amp;nbsp;Objects&lt;br&gt;
instead&amp;nbsp;of&amp;nbsp;real&amp;nbsp;types&amp;nbsp;like&amp;nbsp;Dates&amp;nbsp;and&amp;nbsp;Strings.&amp;nbsp;This&amp;nbsp;meant&amp;nbsp;that&amp;nbsp;you&amp;nbsp;had&amp;nbsp;to&amp;nbsp;perform&lt;br&gt;
a&amp;nbsp;type&amp;nbsp;cast&amp;nbsp;every&amp;nbsp;time&amp;nbsp;you&amp;nbsp;took&amp;nbsp;an&amp;nbsp;object&amp;nbsp;out&amp;nbsp;of&amp;nbsp;a&amp;nbsp;collection.&lt;br&gt;
This&amp;nbsp;flew&amp;nbsp;in&amp;nbsp;the&amp;nbsp;face&amp;nbsp;of&amp;nbsp;Java’s&amp;nbsp;compile-time&amp;nbsp;type&amp;nbsp;safety.&amp;nbsp;But&amp;nbsp;in&amp;nbsp;practice,&lt;br&gt;
this&amp;nbsp;was&amp;nbsp;less&amp;nbsp;a&amp;nbsp;problem&amp;nbsp;than&amp;nbsp;it&amp;nbsp;was&amp;nbsp;just&amp;nbsp;plain&amp;nbsp;cumbersome&amp;nbsp;and&amp;nbsp;tedious.&lt;br&gt;
The&amp;nbsp;_second_&amp;nbsp;issue&amp;nbsp;was&amp;nbsp;that,&amp;nbsp;for&amp;nbsp;practical&amp;nbsp;reasons,&amp;nbsp;collections&amp;nbsp;could&lt;br&gt;
work&amp;nbsp;only&amp;nbsp;with&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;not&amp;nbsp;with&amp;nbsp;primitive&lt;br&gt;
types.&amp;nbsp;This&amp;nbsp;meant&amp;nbsp;that&amp;nbsp;any&amp;nbsp;time&amp;nbsp;you&amp;nbsp;wanted&amp;nbsp;to&amp;nbsp;put&amp;nbsp;a&amp;nbsp;number&lt;br&gt;
or&amp;nbsp;other&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;into&amp;nbsp;a&amp;nbsp;collection,&amp;nbsp;you&amp;nbsp;had&amp;nbsp;to&amp;nbsp;store&amp;nbsp;it&amp;nbsp;in&lt;br&gt;
a&amp;nbsp;wrapper&amp;nbsp;class&amp;nbsp;first&amp;nbsp;and&amp;nbsp;unpack&amp;nbsp;it&amp;nbsp;later&amp;nbsp;upon&amp;nbsp;retrieving&amp;nbsp;it.&lt;br&gt;
The&amp;nbsp;combination&amp;nbsp;of&amp;nbsp;these&amp;nbsp;factors&amp;nbsp;made&amp;nbsp;code&amp;nbsp;working&amp;nbsp;with&amp;nbsp;collections&amp;nbsp;less&lt;br&gt;
readable&amp;nbsp;and&amp;nbsp;more&amp;nbsp;dangerous&amp;nbsp;to&amp;nbsp;boot.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;This&amp;nbsp;all&amp;nbsp;changed&amp;nbsp;with&amp;nbsp;the&amp;nbsp;introduction&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;and&amp;nbsp;autoboxing&amp;nbsp;of&amp;nbsp;primitive&lt;br&gt;
values.&lt;br&gt;
===</questionanswer>
  </question>
  <question id="1_0_0_1_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;is&amp;nbsp;based&amp;nbsp;around&amp;nbsp;a&amp;nbsp;handful&amp;nbsp;of&amp;nbsp;interfaces&amp;nbsp;in&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util&lt;br&gt;
package.&amp;nbsp;These&amp;nbsp;interfaces&amp;nbsp;are&amp;nbsp;divided&amp;nbsp;into&amp;nbsp;two&amp;nbsp;hierarchies.&lt;br&gt;
WHAT&amp;nbsp;ARE&amp;nbsp;THESE&amp;nbsp;TWO&amp;nbsp;CATEGORIES,&amp;nbsp;describe?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;is&amp;nbsp;based&amp;nbsp;around&amp;nbsp;a&amp;nbsp;handful&amp;nbsp;of&amp;nbsp;interfaces&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;java.util&amp;nbsp;package.&amp;nbsp;These&amp;nbsp;interfaces&amp;nbsp;are&amp;nbsp;divided&amp;nbsp;into&amp;nbsp;_two_&amp;nbsp;hierarchies.&lt;br&gt;
The&amp;nbsp;_first_&amp;nbsp;hierarchy&amp;nbsp;descends&amp;nbsp;from&amp;nbsp;the&amp;nbsp;Collection&amp;nbsp;interface.&amp;nbsp;This&amp;nbsp;interface&lt;br&gt;
(and&amp;nbsp;its&amp;nbsp;descendants)&amp;nbsp;represents&amp;nbsp;a&amp;nbsp;container&amp;nbsp;that&amp;nbsp;holds&amp;nbsp;other&amp;nbsp;objects.&lt;br&gt;
The&amp;nbsp;_second_,&amp;nbsp;separate&amp;nbsp;hierarchy&amp;nbsp;is&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Map&lt;br&gt;
interface,&amp;nbsp;which&amp;nbsp;represents&amp;nbsp;a&amp;nbsp;group&amp;nbsp;of&amp;nbsp;key/value&amp;nbsp;pairs&amp;nbsp;where&amp;nbsp;the&amp;nbsp;key&amp;nbsp;can&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;used&amp;nbsp;to&lt;br&gt;
retrieve&amp;nbsp;the&amp;nbsp;value&amp;nbsp;in&amp;nbsp;an&amp;nbsp;efficient&amp;nbsp;way.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='770'&amp;nbsp;height='670'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/collectionsall.png'/&gt;&lt;br&gt;
===&lt;br&gt;
Collection&amp;nbsp;interface&amp;nbsp;&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;add(&amp;nbsp;element&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;remove(&amp;nbsp;element&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;contains(&amp;nbsp;element&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;int&amp;nbsp;size()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isEmpty()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Iterator&amp;nbsp;iterator()&lt;br&gt;
Use&amp;nbsp;this&amp;nbsp;method&amp;nbsp;to&amp;nbsp;examine&amp;nbsp;all&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;collection.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;returns&lt;br&gt;
an&amp;nbsp;Iterator,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;to&amp;nbsp;step&amp;nbsp;through&amp;nbsp;the&amp;nbsp;collection&amp;#8217;s&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elements.&lt;br&gt;
We&amp;#8217;ll&amp;nbsp;talk&amp;nbsp;more&amp;nbsp;about&amp;nbsp;iterators&amp;nbsp;in&amp;nbsp;the&amp;nbsp;next&amp;nbsp;section.&lt;br&gt;
-&amp;nbsp;Additionally,&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;addAll(),&amp;nbsp;removeAll(),&amp;nbsp;and&amp;nbsp;containsAll()&amp;nbsp;accept&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;another&lt;br&gt;
Collection&amp;nbsp;and&amp;nbsp;add,&amp;nbsp;remove,&amp;nbsp;or&amp;nbsp;test&amp;nbsp;for&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;the&amp;nbsp;supplied&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Generics&amp;nbsp;and&amp;nbsp;collections&lt;br&gt;
When&amp;nbsp;using&amp;nbsp;generics,&amp;nbsp;the&amp;nbsp;Collection&amp;nbsp;type&amp;nbsp;is&amp;nbsp;parameterized&amp;nbsp;with&amp;nbsp;a&amp;nbsp;specific&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;element&amp;nbsp;that&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;will&amp;nbsp;hold.&amp;nbsp;This&amp;nbsp;makes&amp;nbsp;a&amp;nbsp;generic&lt;br&gt;
collection&amp;nbsp;of&amp;nbsp;&amp;#8220;anything&amp;#8221;&amp;nbsp;into&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;some&amp;nbsp;type&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;element.&lt;br&gt;
&lt;br&gt;
Collection&lt;Date&gt;&amp;nbsp;dates&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&amp;nbsp;//&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;()&amp;nbsp;would&lt;br&gt;
//&amp;nbsp;also&amp;nbsp;work.&lt;br&gt;
dates.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&lt;br&gt;
dates.add(&amp;nbsp;&amp;quot;foo&amp;quot;&amp;nbsp;)&amp;nbsp;//&amp;nbsp;Error;&amp;nbsp;string&amp;nbsp;type&amp;nbsp;where&amp;nbsp;Date&amp;nbsp;expected!!&lt;br&gt;
&lt;br&gt;
ArrayList&amp;nbsp;is&amp;nbsp;just&amp;nbsp;one&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;Collection;&amp;nbsp;we&amp;#8217;ll&amp;nbsp;talk&amp;nbsp;about&amp;nbsp;it&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;later.&lt;br&gt;
=&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;working&amp;nbsp;with&amp;nbsp;very&amp;nbsp;old&amp;nbsp;Java&amp;nbsp;code&amp;nbsp;that&amp;nbsp;predates&amp;nbsp;generics,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;simply&amp;nbsp;drop&lt;br&gt;
the&amp;nbsp;types&amp;nbsp;and&amp;nbsp;perform&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;casts.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
Collection&amp;nbsp;dates&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
dates.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;unchecked,&amp;nbsp;compile-time&amp;nbsp;warning&lt;br&gt;
Date&amp;nbsp;date&amp;nbsp;=&amp;nbsp;(Date)dates.get(&amp;nbsp;0&amp;nbsp;);&lt;br&gt;
==&lt;br&gt;
Legacy&amp;nbsp;code&amp;nbsp;and&amp;nbsp;runtime&amp;nbsp;type&amp;nbsp;safety&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;working&amp;nbsp;with&amp;nbsp;legacy&amp;nbsp;Java&amp;nbsp;code&amp;nbsp;that&amp;nbsp;predates&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;generics&lt;br&gt;
and&amp;nbsp;you&amp;nbsp;do&amp;nbsp;not&amp;nbsp;wish&amp;nbsp;to&amp;nbsp;introduce&amp;nbsp;generics&amp;nbsp;to&amp;nbsp;it,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;still&amp;nbsp;add&lt;br&gt;
a&amp;nbsp;layer&amp;nbsp;of&amp;nbsp;type&amp;nbsp;safety&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;by&amp;nbsp;switching&amp;nbsp;to&amp;nbsp;a&amp;nbsp;runtime&amp;nbsp;type-checked&lt;br&gt;
version&amp;nbsp;of&amp;nbsp;your&amp;nbsp;collection&amp;nbsp;types.&amp;nbsp;Java&amp;nbsp;supplies&lt;br&gt;
runtime-checked&amp;nbsp;wrappers&amp;nbsp;for&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;basic&amp;nbsp;collection&amp;nbsp;types.&amp;nbsp;These&lt;br&gt;
wrappers&amp;nbsp;enforce&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;Java&amp;nbsp;element&amp;nbsp;type&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;by&amp;nbsp;throwing&lt;br&gt;
ClassCastException&amp;nbsp;if&amp;nbsp;the&amp;nbsp;wrong&lt;br&gt;
element&amp;nbsp;is&amp;nbsp;inserted.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
list&amp;nbsp;=&amp;nbsp;Collections.checkedList(&amp;nbsp;list,&amp;nbsp;Date.class&amp;nbsp;);&lt;br&gt;
list.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&lt;br&gt;
list.add(&amp;nbsp;&amp;quot;foo&amp;quot;&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Runtime&amp;nbsp;ClassCastException!&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
Converting&amp;nbsp;between&amp;nbsp;collections&amp;nbsp;and&amp;nbsp;arrays&lt;br&gt;
Converting&amp;nbsp;between&amp;nbsp;collections&amp;nbsp;and&amp;nbsp;arrays&amp;nbsp;is&amp;nbsp;easy.&amp;nbsp;For&amp;nbsp;convenience,&amp;nbsp;the&lt;br&gt;
elements&amp;nbsp;of&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;can&amp;nbsp;be&amp;nbsp;retrieved&amp;nbsp;as&amp;nbsp;an&amp;nbsp;array&amp;nbsp;using&amp;nbsp;the&amp;nbsp;following&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;methods:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;Object[]&amp;nbsp;toArray()&lt;br&gt;
public&amp;nbsp;&lt;E&gt;&amp;nbsp;E[]&amp;nbsp;toArray(&amp;nbsp;E[]&amp;nbsp;a&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;plain&amp;nbsp;Object&amp;nbsp;array.&amp;nbsp;With&amp;nbsp;the&amp;nbsp;second&amp;nbsp;form,&amp;nbsp;we&lt;br&gt;
can&amp;nbsp;be&amp;nbsp;more&amp;nbsp;specific&amp;nbsp;and&amp;nbsp;get&amp;nbsp;back&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;the&amp;nbsp;correct&amp;nbsp;element&amp;nbsp;type&amp;nbsp;.&lt;br&gt;
If&amp;nbsp;we&amp;nbsp;supply&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&lt;br&gt;
sufficient&amp;nbsp;size,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;be&amp;nbsp;filled&amp;nbsp;in&amp;nbsp;with&amp;nbsp;the&amp;nbsp;values.&amp;nbsp;But&amp;nbsp;if&amp;nbsp;the&amp;nbsp;array&amp;nbsp;is&amp;nbsp;too&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;short&amp;nbsp;(e.g.,&amp;nbsp;zero&lt;br&gt;
length),&amp;nbsp;a&amp;nbsp;new&amp;nbsp;array&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;type&amp;nbsp;but&amp;nbsp;the&amp;nbsp;required&amp;nbsp;length&amp;nbsp;will&amp;nbsp;be&amp;nbsp;created&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&lt;br&gt;
returned&amp;nbsp;to&amp;nbsp;us.&amp;nbsp;So&amp;nbsp;you&amp;nbsp;can&amp;nbsp;just&amp;nbsp;pass&amp;nbsp;in&amp;nbsp;an&amp;nbsp;empty&amp;nbsp;array&amp;nbsp;of&amp;nbsp;the&amp;nbsp;correct&amp;nbsp;type&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&amp;nbsp;Collection&lt;String&gt;&amp;nbsp;myCollection&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;[]&amp;nbsp;myStrings&amp;nbsp;=&amp;nbsp;myCollection.toArray(&amp;nbsp;new&amp;nbsp;String[0]&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
=============================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Map&amp;nbsp;Interface&lt;br&gt;
The&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;also&amp;nbsp;includes&amp;nbsp;the&amp;nbsp;java.util.Map,&amp;nbsp;which&amp;nbsp;is&lt;br&gt;
a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;key/value&amp;nbsp;pairs.&lt;br&gt;
Maps&amp;nbsp;store&lt;br&gt;
and&amp;nbsp;retrieve&amp;nbsp;elements&amp;nbsp;with&amp;nbsp;key&amp;nbsp;values;&amp;nbsp;they&amp;nbsp;are&amp;nbsp;very&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;things&lt;br&gt;
like&amp;nbsp;caches&amp;nbsp;or&amp;nbsp;minimalist&amp;nbsp;databases.&amp;nbsp;When&amp;nbsp;you&amp;nbsp;store&amp;nbsp;a&amp;nbsp;value&amp;nbsp;in&amp;nbsp;a&amp;nbsp;map,&lt;br&gt;
you&amp;nbsp;associate&amp;nbsp;a&amp;nbsp;key&amp;nbsp;object&amp;nbsp;with&amp;nbsp;a&amp;nbsp;value.&amp;nbsp;When&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;look&amp;nbsp;up&amp;nbsp;the&lt;br&gt;
value,&amp;nbsp;the&amp;nbsp;map&amp;nbsp;retrieves&amp;nbsp;it&amp;nbsp;using&amp;nbsp;the&amp;nbsp;key.&lt;br&gt;
&lt;br&gt;
With&amp;nbsp;generics,&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;type&amp;nbsp;is&amp;nbsp;parameterized&amp;nbsp;with&amp;nbsp;two&amp;nbsp;types:&lt;br&gt;
one&amp;nbsp;for&amp;nbsp;the&amp;nbsp;keys&amp;nbsp;and&amp;nbsp;one&amp;nbsp;for&amp;nbsp;the&amp;nbsp;values.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;snippet&amp;nbsp;uses&amp;nbsp;a&lt;br&gt;
HashMap,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;an&amp;nbsp;efficient&amp;nbsp;type&amp;nbsp;of&amp;nbsp;map&amp;nbsp;implementation&amp;nbsp;that&amp;nbsp;we&amp;#8217;ll&amp;nbsp;discuss&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;later:&lt;br&gt;
&lt;br&gt;
Map&lt;String,&amp;nbsp;Date&gt;&amp;nbsp;dateMap&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;Date&gt;();&lt;br&gt;
dateMap.put(&amp;nbsp;&amp;quot;today&amp;quot;,&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&lt;br&gt;
Date&amp;nbsp;today&amp;nbsp;=&amp;nbsp;dateMap.get(&amp;nbsp;&amp;quot;today&amp;quot;&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;basic&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;Map&amp;nbsp;are&amp;nbsp;straightforward.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;following&amp;nbsp;methods,&lt;br&gt;
the&amp;nbsp;type&amp;nbsp;K&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;key&amp;nbsp;parameter&amp;nbsp;type&amp;nbsp;and&amp;nbsp;the&amp;nbsp;type&amp;nbsp;V&amp;nbsp;refers&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;value&amp;nbsp;parameter&amp;nbsp;type:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;put(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;,&amp;nbsp;V&amp;nbsp;value&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;get(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;remove(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;int&amp;nbsp;size()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Set&amp;nbsp;keySet()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;Set&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;all&amp;nbsp;the&amp;nbsp;keys&amp;nbsp;in&amp;nbsp;this&amp;nbsp;map.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Collection&amp;nbsp;values()&lt;br&gt;
Use&amp;nbsp;this&amp;nbsp;method&amp;nbsp;to&amp;nbsp;retrieve&amp;nbsp;all&amp;nbsp;the&amp;nbsp;values&amp;nbsp;in&amp;nbsp;this&amp;nbsp;map.&amp;nbsp;The&amp;nbsp;returned&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collection&amp;nbsp;can&lt;br&gt;
contain&amp;nbsp;duplicate&amp;nbsp;elements.&lt;br&gt;
&lt;br&gt;
Map&amp;nbsp;has&amp;nbsp;one&amp;nbsp;child&amp;nbsp;interface,&amp;nbsp;SortedMap.&amp;nbsp;A&amp;nbsp;SortedMap&amp;nbsp;maintains&lt;br&gt;
its&amp;nbsp;key/value&amp;nbsp;pairs&amp;nbsp;sorted&amp;nbsp;in&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;order&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;key&lt;br&gt;
values.&amp;nbsp;It&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;subMap(),&amp;nbsp;headMap(),&amp;nbsp;and&amp;nbsp;tailMap()&amp;nbsp;methods&amp;nbsp;for&lt;br&gt;
retrieving&amp;nbsp;sorted&amp;nbsp;map&amp;nbsp;subsets.&amp;nbsp;Like&amp;nbsp;SortedSet,&amp;nbsp;it&amp;nbsp;also&amp;nbsp;provides&lt;br&gt;
a&amp;nbsp;comparator()&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;returns&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;determines&amp;nbsp;how&lt;br&gt;
the&amp;nbsp;map&amp;nbsp;keys&amp;nbsp;are&amp;nbsp;sorted.&amp;nbsp;We'll&amp;nbsp;talk&amp;nbsp;more&amp;nbsp;about&amp;nbsp;that&amp;nbsp;later.&lt;br&gt;
Java&amp;nbsp;7&amp;nbsp;adds&amp;nbsp;a&amp;nbsp;NavigableMap&amp;nbsp;with&amp;nbsp;functionality&amp;nbsp;parallel&amp;nbsp;to&amp;nbsp;that&amp;nbsp;of&lt;br&gt;
NavigableSet;&amp;nbsp;namely,&amp;nbsp;it&amp;nbsp;adds&amp;nbsp;methods&amp;nbsp;to&amp;nbsp;search&amp;nbsp;the&amp;nbsp;sorted&lt;br&gt;
elements&amp;nbsp;for&amp;nbsp;an&amp;nbsp;element&amp;nbsp;greater&amp;nbsp;or&amp;nbsp;lesser&amp;nbsp;than&amp;nbsp;a&amp;nbsp;target&amp;nbsp;value.&lt;br&gt;
&lt;br&gt;
Finally,&amp;nbsp;we&amp;nbsp;should&amp;nbsp;make&amp;nbsp;it&amp;nbsp;clear&amp;nbsp;that&amp;nbsp;although&amp;nbsp;related,&amp;nbsp;Map&amp;nbsp;is&amp;nbsp;not&lt;br&gt;
literally&amp;nbsp;a&amp;nbsp;type&amp;nbsp;of&amp;nbsp;Collection&amp;nbsp;(Map&amp;nbsp;does&amp;nbsp;not&amp;nbsp;extend&amp;nbsp;the&amp;nbsp;Collection&lt;br&gt;
interface).&amp;nbsp;You&amp;nbsp;might&amp;nbsp;wonder&amp;nbsp;why.&amp;nbsp;All&amp;nbsp;of&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
Collection&amp;nbsp;interface&amp;nbsp;would&amp;nbsp;appear&amp;nbsp;to&amp;nbsp;make&amp;nbsp;sense&amp;nbsp;for&amp;nbsp;Map,&lt;br&gt;
except&amp;nbsp;for&amp;nbsp;iterator().&amp;nbsp;A&amp;nbsp;Map,&amp;nbsp;again,&amp;nbsp;has&amp;nbsp;two&amp;nbsp;sets&amp;nbsp;of&amp;nbsp;objects:&amp;nbsp;keys&amp;nbsp;and&lt;br&gt;
values,&amp;nbsp;and&amp;nbsp;separate&amp;nbsp;iterators&amp;nbsp;for&amp;nbsp;each.&amp;nbsp;&amp;nbsp;!!&amp;nbsp;This&amp;nbsp;is&amp;nbsp;why&amp;nbsp;a&amp;nbsp;Map&lt;br&gt;
does&amp;nbsp;not&amp;nbsp;implement&amp;nbsp;Collection.&lt;br&gt;
&lt;br&gt;
One&amp;nbsp;more&amp;nbsp;note&amp;nbsp;about&amp;nbsp;maps:&amp;nbsp;some&amp;nbsp;map&amp;nbsp;implementations&amp;nbsp;(including&amp;nbsp;Java&amp;#8217;s&amp;nbsp;standard&lt;br&gt;
HashMap)&amp;nbsp;allow&amp;nbsp;null&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;as&amp;nbsp;a&amp;nbsp;key&amp;nbsp;or&amp;nbsp;value,&amp;nbsp;but&amp;nbsp;others&amp;nbsp;may&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="1_0_0_1_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Iterating&amp;nbsp;through&amp;nbsp;collections,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Iterator&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;iterator&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;lets&amp;nbsp;you&amp;nbsp;step&amp;nbsp;through&amp;nbsp;a&amp;nbsp;sequence&amp;nbsp;of&lt;br&gt;
values.&amp;nbsp;This&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;operation&amp;nbsp;comes&amp;nbsp;up&amp;nbsp;so&amp;nbsp;often&amp;nbsp;that&amp;nbsp;it&amp;nbsp;is&amp;nbsp;given&lt;br&gt;
a&amp;nbsp;standard&amp;nbsp;interface:&amp;nbsp;java.util.Itera&amp;nbsp;tor.&amp;nbsp;The&amp;nbsp;Iterator&amp;nbsp;interface&amp;nbsp;has&lt;br&gt;
only&amp;nbsp;two&amp;nbsp;primary&amp;nbsp;methods:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;E&amp;nbsp;next()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;hasNext()&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;shows&amp;nbsp;how&amp;nbsp;you&amp;nbsp;could&amp;nbsp;use&amp;nbsp;an&amp;nbsp;Iterator&amp;nbsp;to&amp;nbsp;print&lt;br&gt;
out&amp;nbsp;every&amp;nbsp;element&amp;nbsp;of&amp;nbsp;a&amp;nbsp;collection:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printElements(Collection&amp;nbsp;c,&amp;nbsp;PrintStream&amp;nbsp;out)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;c.iterator();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(&amp;nbsp;iterator.hasNext()&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.println(&amp;nbsp;iterator.next()&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;the&amp;nbsp;traversal&amp;nbsp;methods,&amp;nbsp;Iterator&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;ability&amp;nbsp;to&lt;br&gt;
remove&amp;nbsp;an&amp;nbsp;element&amp;nbsp;from&amp;nbsp;a&amp;nbsp;collection:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;void&amp;nbsp;remove()&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;removes&amp;nbsp;the&amp;nbsp;most&amp;nbsp;recent&amp;nbsp;object&amp;nbsp;returned&amp;nbsp;from&lt;br&gt;
next()&amp;nbsp;from&amp;nbsp;the&amp;nbsp;associated&amp;nbsp;Collection.&lt;br&gt;
&lt;br&gt;
==========================&lt;br&gt;
For&amp;nbsp;loop&amp;nbsp;over&amp;nbsp;collections&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;form&amp;nbsp;of&amp;nbsp;the&amp;nbsp;for&amp;nbsp;loop,&amp;nbsp;described&amp;nbsp;in&amp;nbsp;Chapter&amp;nbsp;4,&amp;nbsp;can&amp;nbsp;operate&amp;nbsp;over&lt;br&gt;
all&amp;nbsp;types&amp;nbsp;of&amp;nbsp;Collection&amp;nbsp;objects.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;now&amp;nbsp;step&lt;br&gt;
over&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;a&amp;nbsp;typed&amp;nbsp;collection&lt;br&gt;
of&amp;nbsp;Date&amp;nbsp;objects&amp;nbsp;like&amp;nbsp;so:&lt;br&gt;
&amp;nbsp;&amp;nbsp;Collection&lt;Date&gt;&amp;nbsp;col&amp;nbsp;=&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;for(&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;:&amp;nbsp;col&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;nbsp;date&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;feature&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;built-in&amp;nbsp;for&amp;nbsp;loop&amp;nbsp;is&amp;nbsp;called&amp;nbsp;the&amp;nbsp;"enhanced"&amp;nbsp;for&amp;nbsp;loop&lt;br&gt;
(as&amp;nbsp;opposed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;pregenerics,&amp;nbsp;numeric-only&amp;nbsp;for&amp;nbsp;loop).&amp;nbsp;The&amp;nbsp;enhanced&lt;br&gt;
for&amp;nbsp;loop&amp;nbsp;applies&amp;nbsp;only&amp;nbsp;to&amp;nbsp;Collection&amp;nbsp;type&amp;nbsp;collections,&amp;nbsp;not&amp;nbsp;Maps.&amp;nbsp;Maps&lt;br&gt;
are&amp;nbsp;another&amp;nbsp;type&amp;nbsp;of&amp;nbsp;beast&amp;nbsp;that&amp;nbsp;really&amp;nbsp;contain&amp;nbsp;two&amp;nbsp;distinct&amp;nbsp;sets&amp;nbsp;of&amp;nbsp;objects&lt;br&gt;
(keys&amp;nbsp;and&amp;nbsp;values),&amp;nbsp;so&amp;nbsp;it’s&amp;nbsp;not&amp;nbsp;obvious&amp;nbsp;what&amp;nbsp;your&amp;nbsp;intentions&amp;nbsp;would&amp;nbsp;be&amp;nbsp;in&amp;nbsp;such&amp;nbsp;a&amp;nbsp;loop.&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Collection&amp;nbsp;Types(List,Set,Queue...)&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Collection&amp;nbsp;interface&amp;nbsp;has&amp;nbsp;three&amp;nbsp;child&amp;nbsp;interfaces.&amp;nbsp;Set&amp;nbsp;represents&lt;br&gt;
a&amp;nbsp;collection&amp;nbsp;in&amp;nbsp;which&amp;nbsp;duplicate&amp;nbsp;elements&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed.&amp;nbsp;List&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
collection&amp;nbsp;whose&amp;nbsp;elements&amp;nbsp;have&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;order.&amp;nbsp;The&amp;nbsp;Queue&amp;nbsp;interface&lt;br&gt;
is&amp;nbsp;a&amp;nbsp;buffer&amp;nbsp;for&amp;nbsp;objects&amp;nbsp;with&amp;nbsp;a&amp;nbsp;notion&amp;nbsp;of&amp;nbsp;a&amp;nbsp;“head”&amp;nbsp;element&amp;nbsp;that’s&lt;br&gt;
next&amp;nbsp;in&amp;nbsp;line&amp;nbsp;for&amp;nbsp;processing.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;
Set&lt;br&gt;
&lt;br&gt;
Main&amp;nbsp;classes&amp;nbsp;implementing&amp;nbsp;Set&amp;nbsp;interface&amp;nbsp;are&amp;nbsp;:&amp;nbsp;EnumSet,&amp;nbsp;HashSet,&amp;nbsp;LinkedHashSet,&amp;nbsp;TreeSet.&lt;br&gt;
&lt;br&gt;
TreeSet,&amp;nbsp;LinkedHashSet&amp;nbsp;and&amp;nbsp;HashSet&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;three&amp;nbsp;Set&amp;nbsp;implementation&amp;nbsp;in&amp;nbsp;collection&lt;br&gt;
framework&amp;nbsp;and&amp;nbsp;like&amp;nbsp;many&amp;nbsp;others&amp;nbsp;they&amp;nbsp;are&amp;nbsp;also&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;objects.&amp;nbsp;Main&amp;nbsp;feature&amp;nbsp;of&amp;nbsp;TreeSet&lt;br&gt;
is&amp;nbsp;sorting,&amp;nbsp;&amp;nbsp;LinkedHashSet&amp;nbsp;is&amp;nbsp;insertion&amp;nbsp;order&amp;nbsp;and&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;just&amp;nbsp;general&amp;nbsp;purpose&lt;br&gt;
collection&amp;nbsp;for&amp;nbsp;storing&amp;nbsp;object.&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;HashMap&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;while&amp;nbsp;TreeSet&lt;br&gt;
is&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;TreeMap.&amp;nbsp;&amp;nbsp;TreeSet&amp;nbsp;is&amp;nbsp;a&amp;nbsp;SortedSet&amp;nbsp;implementation&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;it&amp;nbsp;to&lt;br&gt;
keep&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;the&amp;nbsp;sorted&amp;nbsp;order&amp;nbsp;defined&amp;nbsp;by&amp;nbsp;either&amp;nbsp;Comparable&amp;nbsp;or&amp;nbsp;Comparator&amp;nbsp;interface.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Read&amp;nbsp;more:&amp;nbsp;http://javarevisited.blogspot.com/2012/11/difference-between-treeset-hashset-vs-linkedhashset-java.html#ixzz2vmC7oVev&lt;br&gt;
&lt;br&gt;
Set&amp;nbsp;has&amp;nbsp;no&amp;nbsp;methods&amp;nbsp;besides&amp;nbsp;the&amp;nbsp;ones&amp;nbsp;it&amp;nbsp;inherits&amp;nbsp;from&amp;nbsp;Collection.&amp;nbsp;It&amp;nbsp;simply&lt;br&gt;
enforces&amp;nbsp;its&amp;nbsp;_&amp;nbsp;no-duplicates&amp;nbsp;rule&amp;nbsp;_.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;try&amp;nbsp;to&amp;nbsp;add&amp;nbsp;an&amp;nbsp;element&amp;nbsp;that&lt;br&gt;
already&amp;nbsp;exists&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Set,&amp;nbsp;the&amp;nbsp;add()&amp;nbsp;method&amp;nbsp;simply&amp;nbsp;returns&amp;nbsp;false.&amp;nbsp;__SortedSet&lt;br&gt;
maintains&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;a&amp;nbsp;prescribed&amp;nbsp;order;&amp;nbsp;like&lt;br&gt;
a&amp;nbsp;sorted&amp;nbsp;list&amp;nbsp;that&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;no&amp;nbsp;duplicates.&amp;nbsp;It&amp;nbsp;adds&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;add()&amp;nbsp;and&lt;br&gt;
remove()&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Set&amp;nbsp;interface.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;retrieve&amp;nbsp;subsets&amp;nbsp;(which&amp;nbsp;are&amp;nbsp;also&amp;nbsp;sorted)&amp;nbsp;using&amp;nbsp;the&amp;nbsp;subSet(),&lt;br&gt;
headSet(),&amp;nbsp;and&amp;nbsp;tailSet()&amp;nbsp;methods.&amp;nbsp;These&amp;nbsp;methods&amp;nbsp;accept&amp;nbsp;one&amp;nbsp;or&amp;nbsp;a&amp;nbsp;pair&amp;nbsp;of&amp;nbsp;elements&lt;br&gt;
that&amp;nbsp;mark&amp;nbsp;the&amp;nbsp;boundaries.&amp;nbsp;The&amp;nbsp;first(),&amp;nbsp;last(),&amp;nbsp;and&amp;nbsp;comparator()&amp;nbsp;methods&amp;nbsp;provide&lt;br&gt;
access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;first&amp;nbsp;element,&amp;nbsp;the&amp;nbsp;last&amp;nbsp;element,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;object&amp;nbsp;used&amp;nbsp;to&amp;nbsp;compare&amp;nbsp;elements&lt;br&gt;
(more&amp;nbsp;on&amp;nbsp;this&amp;nbsp;later).&lt;br&gt;
Java&amp;nbsp;7&amp;nbsp;adds&amp;nbsp;___&amp;nbsp;NavigableSet,&amp;nbsp;which&amp;nbsp;extends&amp;nbsp;SortedSet&amp;nbsp;and&amp;nbsp;adds&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;finding&amp;nbsp;the&lt;br&gt;
closest&amp;nbsp;match&amp;nbsp;greater&amp;nbsp;or&amp;nbsp;lesser&amp;nbsp;than&amp;nbsp;a&amp;nbsp;target&amp;nbsp;value&amp;nbsp;within&amp;nbsp;the&amp;nbsp;sort&amp;nbsp;order&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Set.&amp;nbsp;This&lt;br&gt;
interface&amp;nbsp;can&amp;nbsp;be&amp;nbsp;implemented&amp;nbsp;efficiently&amp;nbsp;using&amp;nbsp;techniques&amp;nbsp;such&amp;nbsp;as&amp;nbsp;skip&amp;nbsp;lists,&amp;nbsp;which&amp;nbsp;make&lt;br&gt;
finding&amp;nbsp;ordered&amp;nbsp;elements&amp;nbsp;fast&amp;nbsp;(Java&amp;nbsp;7&amp;nbsp;supplies&amp;nbsp;such&amp;nbsp;an&amp;nbsp;implementation,&amp;nbsp;which&amp;nbsp;we’ll&amp;nbsp;note&lt;br&gt;
later).&lt;br&gt;
&lt;br&gt;
EnumSet&amp;nbsp;-&amp;nbsp;A&amp;nbsp;specialized&amp;nbsp;Set&amp;nbsp;implementation&amp;nbsp;for&amp;nbsp;use&amp;nbsp;with&amp;nbsp;enum&amp;nbsp;types.&amp;nbsp;All&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&lt;br&gt;
an&amp;nbsp;enum&amp;nbsp;set&amp;nbsp;must&amp;nbsp;come&amp;nbsp;from&amp;nbsp;a&amp;nbsp;single&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;that&amp;nbsp;is&amp;nbsp;specified,&amp;nbsp;explicitly&amp;nbsp;or&amp;nbsp;implicitly,&lt;br&gt;
when&amp;nbsp;the&amp;nbsp;set&amp;nbsp;is&amp;nbsp;created.&amp;nbsp;Enum&amp;nbsp;sets&amp;nbsp;are&amp;nbsp;represented&amp;nbsp;internally&amp;nbsp;as&amp;nbsp;bit&amp;nbsp;vectors.&amp;nbsp;This&amp;nbsp;representation&lt;br&gt;
is&amp;nbsp;extremely&amp;nbsp;compact&amp;nbsp;and&amp;nbsp;efficient.&amp;nbsp;The&amp;nbsp;space&amp;nbsp;and&amp;nbsp;time&amp;nbsp;performance&amp;nbsp;of&amp;nbsp;this&amp;nbsp;class&amp;nbsp;should&lt;br&gt;
be&amp;nbsp;good&amp;nbsp;enough&amp;nbsp;to&amp;nbsp;allow&amp;nbsp;its&amp;nbsp;use&amp;nbsp;as&amp;nbsp;a&amp;nbsp;high-quality,&amp;nbsp;typesafe&amp;nbsp;alternative&amp;nbsp;to&amp;nbsp;traditional&amp;nbsp;int-based&lt;br&gt;
"bit&amp;nbsp;flags."&amp;nbsp;Even&amp;nbsp;bulk&amp;nbsp;operations&amp;nbsp;(such&amp;nbsp;as&amp;nbsp;containsAll&amp;nbsp;and&amp;nbsp;retainAll)&amp;nbsp;should&amp;nbsp;run&amp;nbsp;very&amp;nbsp;quickly&amp;nbsp;if&amp;nbsp;their&lt;br&gt;
argument&amp;nbsp;is&amp;nbsp;also&amp;nbsp;an&amp;nbsp;enum&amp;nbsp;set.&lt;br&gt;
====================================================&lt;br&gt;
&amp;nbsp;List&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;next&amp;nbsp;child&amp;nbsp;interface&amp;nbsp;of&amp;nbsp;Collection&amp;nbsp;is&amp;nbsp;List.&amp;nbsp;The&amp;nbsp;List&amp;nbsp;is&amp;nbsp;an&amp;nbsp;ordered&amp;nbsp;collection,&lt;br&gt;
similar&amp;nbsp;to&amp;nbsp;an&amp;nbsp;array&amp;nbsp;but&amp;nbsp;with&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;manipulating&amp;nbsp;the&amp;nbsp;position&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;the&amp;nbsp;list:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;add(&amp;nbsp;E&amp;nbsp;element&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(&amp;nbsp;int&amp;nbsp;index&amp;nbsp;,&amp;nbsp;E&amp;nbsp;element&amp;nbsp;)&amp;nbsp;&amp;nbsp;This&amp;nbsp;method&amp;nbsp;inserts&amp;nbsp;the&amp;nbsp;given&amp;nbsp;object&amp;nbsp;at&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;supplied&amp;nbsp;position&amp;nbsp;in&amp;nbsp;the&amp;nbsp;list.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;position&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;is&amp;nbsp;less&amp;nbsp;than&amp;nbsp;zero&amp;nbsp;or&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;the&amp;nbsp;list&amp;nbsp;length,&amp;nbsp;an&amp;nbsp;IndexOutOfBoundsExcep&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;tion&amp;nbsp;will&amp;nbsp;be&amp;nbsp;thrown.&amp;nbsp;The&amp;nbsp;element&amp;nbsp;that&amp;nbsp;was&amp;nbsp;previously&amp;nbsp;at&amp;nbsp;the&amp;nbsp;supplied&amp;nbsp;position,&amp;nbsp;and&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;all&amp;nbsp;elements&amp;nbsp;after&amp;nbsp;it,&amp;nbsp;are&amp;nbsp;___moved&amp;nbsp;up&amp;nbsp;one&amp;nbsp;index&amp;nbsp;position.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;void&amp;nbsp;remove(&amp;nbsp;int&amp;nbsp;index&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;E&amp;nbsp;get(&amp;nbsp;int&amp;nbsp;index&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;set(&amp;nbsp;int&amp;nbsp;index&amp;nbsp;,&amp;nbsp;E&amp;nbsp;element&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;main&amp;nbsp;classes&amp;nbsp;implementing&amp;nbsp;List&amp;nbsp;interface&amp;nbsp;are:&amp;nbsp;Stack,&amp;nbsp;Vector,&amp;nbsp;ArrayList&amp;nbsp;and&amp;nbsp;LinkedList.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Lets&amp;nbsp;describe&amp;nbsp;&amp;nbsp;useful&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;ArrayList&amp;nbsp;&lt;br&gt;
-&amp;nbsp;add(E&amp;nbsp;e)&lt;br&gt;
Appends&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element&amp;nbsp;to&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;list.&lt;br&gt;
-&amp;nbsp;add(int&amp;nbsp;index,&amp;nbsp;E&amp;nbsp;element)&lt;br&gt;
Inserts&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element&amp;nbsp;at&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;position&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list.&lt;br&gt;
-&amp;nbsp;addAll(Collection&lt;?&amp;nbsp;extends&amp;nbsp;E&gt;&amp;nbsp;c)&lt;br&gt;
Appends&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;collection&amp;nbsp;to&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;list,&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;order&amp;nbsp;that&amp;nbsp;they&amp;nbsp;are&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;collection's&amp;nbsp;Iterator.&lt;br&gt;
-&amp;nbsp;addAll(int&amp;nbsp;index,&amp;nbsp;Collection&lt;?&amp;nbsp;extends&amp;nbsp;E&gt;&amp;nbsp;c)&lt;br&gt;
Inserts&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;collection&amp;nbsp;into&amp;nbsp;this&amp;nbsp;list,&amp;nbsp;starting&lt;br&gt;
at&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;position.&lt;br&gt;
-&amp;nbsp;clear()&lt;br&gt;
Removes&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;from&amp;nbsp;this&amp;nbsp;list.&lt;br&gt;
-&amp;nbsp;clone()&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;shallow&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;this&amp;nbsp;ArrayList&amp;nbsp;instance.&amp;nbsp;(shallow&amp;nbsp;is&amp;nbsp;NOT&amp;nbsp;deep)&lt;br&gt;
-&amp;nbsp;contains(Object&amp;nbsp;o)&lt;br&gt;
Returns&amp;nbsp;true&amp;nbsp;if&amp;nbsp;this&amp;nbsp;list&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element.&lt;br&gt;
-&amp;nbsp;ensureCapacity(int&amp;nbsp;minCapacity)&lt;br&gt;
Increases&amp;nbsp;the&amp;nbsp;capacity&amp;nbsp;of&amp;nbsp;this&amp;nbsp;ArrayList&amp;nbsp;instance,&amp;nbsp;if&amp;nbsp;necessary,&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;hold&lt;br&gt;
at&amp;nbsp;least&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;specified&amp;nbsp;by&amp;nbsp;the&amp;nbsp;minimum&amp;nbsp;capacity&amp;nbsp;argument.&lt;br&gt;
-&amp;nbsp;indexOf(Object&amp;nbsp;o)&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;index&amp;nbsp;of&amp;nbsp;the&amp;nbsp;first&amp;nbsp;occurrence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list,&lt;br&gt;
or&amp;nbsp;-1&amp;nbsp;if&amp;nbsp;this&amp;nbsp;list&amp;nbsp;does&amp;nbsp;not&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;element.&lt;br&gt;
-&amp;nbsp;isEmpty()&lt;br&gt;
Returns&amp;nbsp;true&amp;nbsp;if&amp;nbsp;this&amp;nbsp;list&amp;nbsp;contains&amp;nbsp;no&amp;nbsp;elements.&lt;br&gt;
-&amp;nbsp;iterator()&lt;br&gt;
Returns&amp;nbsp;an&amp;nbsp;iterator&amp;nbsp;over&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list&amp;nbsp;in&amp;nbsp;proper&amp;nbsp;sequence.&lt;br&gt;
-&amp;nbsp;lastIndexOf(Object&amp;nbsp;o)&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;index&amp;nbsp;of&amp;nbsp;the&amp;nbsp;last&amp;nbsp;occurrence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list,&lt;br&gt;
or&amp;nbsp;-1&amp;nbsp;if&amp;nbsp;this&amp;nbsp;list&amp;nbsp;does&amp;nbsp;not&amp;nbsp;contain&amp;nbsp;the&amp;nbsp;element.&lt;br&gt;
-&amp;nbsp;listIterator()&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;list&amp;nbsp;iterator&amp;nbsp;over&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list&amp;nbsp;(in&amp;nbsp;proper&amp;nbsp;sequence).&lt;br&gt;
-&amp;nbsp;listIterator(int&amp;nbsp;index)&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;list&amp;nbsp;iterator&amp;nbsp;over&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list&amp;nbsp;(in&amp;nbsp;proper&amp;nbsp;sequence),&amp;nbsp;starting&lt;br&gt;
at&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;position&amp;nbsp;in&amp;nbsp;the&amp;nbsp;list.&lt;br&gt;
-&amp;nbsp;E&amp;nbsp;remove(int&amp;nbsp;index)&lt;br&gt;
Removes&amp;nbsp;the&amp;nbsp;element&amp;nbsp;at&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;position&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;remove(Object&amp;nbsp;o)&lt;br&gt;
Removes&amp;nbsp;the&amp;nbsp;first&amp;nbsp;occurrence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;element&amp;nbsp;from&amp;nbsp;this&amp;nbsp;list,&amp;nbsp;if&amp;nbsp;it&amp;nbsp;is&amp;nbsp;present.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;removeAll(Collection&lt;?&gt;&amp;nbsp;c)&lt;br&gt;
Removes&amp;nbsp;from&amp;nbsp;this&amp;nbsp;list&amp;nbsp;all&amp;nbsp;of&amp;nbsp;its&amp;nbsp;elements&amp;nbsp;that&amp;nbsp;are&amp;nbsp;contained&amp;nbsp;in&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;collection.&lt;br&gt;
-&amp;nbsp;removeRange(int&amp;nbsp;fromIndex,&amp;nbsp;int&amp;nbsp;toIndex)&lt;br&gt;
Removes&amp;nbsp;from&amp;nbsp;this&amp;nbsp;list&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;whose&amp;nbsp;index&amp;nbsp;is&amp;nbsp;between&amp;nbsp;fromIndex,&lt;br&gt;
inclusive,&amp;nbsp;and&amp;nbsp;toIndex,&amp;nbsp;exclusive.&lt;br&gt;
-&amp;nbsp;toArray(T[]&amp;nbsp;a)&lt;br&gt;
Returns&amp;nbsp;an&amp;nbsp;array&amp;nbsp;containing&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list&amp;nbsp;in&amp;nbsp;proper&amp;nbsp;sequence&amp;nbsp;(from&amp;nbsp;first&amp;nbsp;to&amp;nbsp;&lt;br&gt;
last&amp;nbsp;element);&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;returned&amp;nbsp;array&amp;nbsp;is&amp;nbsp;that&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;array.&lt;br&gt;
-&amp;nbsp;subList(int&amp;nbsp;fromIndex,&amp;nbsp;int&amp;nbsp;toIndex)&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;view&amp;nbsp;of&amp;nbsp;the&amp;nbsp;portion&amp;nbsp;of&amp;nbsp;this&amp;nbsp;list&amp;nbsp;between&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;fromIndex,&amp;nbsp;inclusive,&amp;nbsp;and&amp;nbsp;toIndex,&amp;nbsp;exclusive.&lt;br&gt;
-&amp;nbsp;retainAll(Collection&lt;?&gt;&amp;nbsp;c)&lt;br&gt;
Retains&amp;nbsp;only&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;this&amp;nbsp;list&amp;nbsp;that&amp;nbsp;are&amp;nbsp;contained&amp;nbsp;in&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;collection.&amp;nbsp;(ratain&amp;nbsp;=&amp;nbsp;save)&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList&lt;String&gt;&amp;nbsp;cities&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.add("Lviv");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.add("Kyiv");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;retain&amp;nbsp;=&amp;nbsp;save&amp;nbsp;,&amp;nbsp;save&amp;nbsp;in&amp;nbsp;collection&amp;nbsp;only&amp;nbsp;"Lviv"&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.retainAll(Arrays.asList(&amp;nbsp;new&amp;nbsp;String[]{"Lviv"}&amp;nbsp;));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(String&amp;nbsp;item&amp;nbsp;:&amp;nbsp;cities&amp;nbsp;){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=================================</questionanswer>
  </question>
  <question id="1_0_0_1_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Map&amp;nbsp;interface&amp;nbsp;(and&amp;nbsp;its&amp;nbsp;implementations),&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;also&amp;nbsp;includes&amp;nbsp;the&amp;nbsp;java.util.Map,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
collection&amp;nbsp;of&amp;nbsp;key/value&amp;nbsp;pairs.&amp;nbsp;Other&amp;nbsp;names&amp;nbsp;for&amp;nbsp;map&amp;nbsp;are&amp;nbsp;"dictionary"&amp;nbsp;or&lt;br&gt;
“associative&amp;nbsp;array.”&amp;nbsp;Maps&amp;nbsp;store&amp;nbsp;and&amp;nbsp;retrieve&amp;nbsp;elements&amp;nbsp;with&amp;nbsp;key&lt;br&gt;
values;&amp;nbsp;they&amp;nbsp;are&amp;nbsp;very&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;things&amp;nbsp;like&amp;nbsp;caches&amp;nbsp;or&lt;br&gt;
minimalist&amp;nbsp;databases.&amp;nbsp;When&amp;nbsp;you&amp;nbsp;store&amp;nbsp;a&amp;nbsp;value&amp;nbsp;in&amp;nbsp;a&amp;nbsp;map,&amp;nbsp;you&amp;nbsp;associate&lt;br&gt;
a&amp;nbsp;key&amp;nbsp;object&amp;nbsp;with&amp;nbsp;a&amp;nbsp;value.&amp;nbsp;When&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;look&amp;nbsp;up&amp;nbsp;the&amp;nbsp;value,&amp;nbsp;the&amp;nbsp;map&lt;br&gt;
retrieves&amp;nbsp;it&amp;nbsp;using&amp;nbsp;the&amp;nbsp;key.&lt;br&gt;
&lt;br&gt;
With&amp;nbsp;generics,&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;type&amp;nbsp;is&amp;nbsp;parameterized&amp;nbsp;with&amp;nbsp;two&amp;nbsp;types:&amp;nbsp;one&amp;nbsp;for&amp;nbsp;the&lt;br&gt;
keys&amp;nbsp;and&amp;nbsp;one&amp;nbsp;for&amp;nbsp;the&amp;nbsp;values.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;snippet&amp;nbsp;uses&amp;nbsp;a&amp;nbsp;HashMap,&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;an&amp;nbsp;efficient&amp;nbsp;type&amp;nbsp;of&amp;nbsp;map&amp;nbsp;implementation&amp;nbsp;that&amp;nbsp;we’ll&amp;nbsp;discuss&amp;nbsp;later:&lt;br&gt;
&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Date&gt;&amp;nbsp;dateMap&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;Date&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;dateMap.put(&amp;nbsp;"today",&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;Date&amp;nbsp;today&amp;nbsp;=&amp;nbsp;dateMap.get(&amp;nbsp;"today"&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;basic&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;Map&amp;nbsp;are&amp;nbsp;straightforward.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;put(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;,&amp;nbsp;V&amp;nbsp;value&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;get(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;remove(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;int&amp;nbsp;size()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Set&amp;nbsp;keySet()&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;Collection&amp;nbsp;values()&lt;br&gt;
&lt;br&gt;
Main&amp;nbsp;classes&amp;nbsp;implementing&amp;nbsp;Map&amp;nbsp;interface&amp;nbsp;are:&amp;nbsp;HashMap,&amp;nbsp;Hashtable,&amp;nbsp;EnumMap,&lt;br&gt;
IdentityHashMap,&amp;nbsp;LinkedHashMap&amp;nbsp;and&amp;nbsp;Properties.&lt;br&gt;
&lt;br&gt;
Map&amp;nbsp;has&amp;nbsp;one&amp;nbsp;child&amp;nbsp;interface,&amp;nbsp;SortedMap.&amp;nbsp;A&amp;nbsp;SortedMap&amp;nbsp;maintains&amp;nbsp;its&lt;br&gt;
key/value&amp;nbsp;pairs&amp;nbsp;sorted&amp;nbsp;in&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;order&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;key&amp;nbsp;values.&lt;br&gt;
It&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;subMap(),&amp;nbsp;headMap(),&amp;nbsp;and&amp;nbsp;tailMap()&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;retrieving&lt;br&gt;
sorted&amp;nbsp;map&amp;nbsp;subsets.&amp;nbsp;Like&amp;nbsp;SortedSet,&amp;nbsp;it&amp;nbsp;also&amp;nbsp;provides&lt;br&gt;
a&amp;nbsp;comparator()&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;returns&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;determines&amp;nbsp;how&amp;nbsp;the&amp;nbsp;map&lt;br&gt;
keys&amp;nbsp;are&amp;nbsp;sorted.&amp;nbsp;We’ll&amp;nbsp;talk&amp;nbsp;more&amp;nbsp;about&amp;nbsp;that&amp;nbsp;later.&amp;nbsp;Java&amp;nbsp;7&amp;nbsp;adds&lt;br&gt;
a&amp;nbsp;NavigableMap&amp;nbsp;with&amp;nbsp;functionality&amp;nbsp;parallel&amp;nbsp;to&amp;nbsp;that&amp;nbsp;of&amp;nbsp;NavigableSet;&amp;nbsp;namely,&amp;nbsp;it&lt;br&gt;
adds&amp;nbsp;methods&amp;nbsp;to&amp;nbsp;search&amp;nbsp;the&amp;nbsp;sorted&amp;nbsp;elements&amp;nbsp;for&amp;nbsp;an&amp;nbsp;element&amp;nbsp;greater&amp;nbsp;or&amp;nbsp;lesser&lt;br&gt;
than&amp;nbsp;a&amp;nbsp;target&amp;nbsp;value.&lt;br&gt;
&lt;br&gt;
Finally,&amp;nbsp;we&amp;nbsp;should&amp;nbsp;make&amp;nbsp;it&amp;nbsp;clear&amp;nbsp;that&amp;nbsp;although&amp;nbsp;related,&amp;nbsp;Map&amp;nbsp;is&amp;nbsp;not&amp;nbsp;literally&amp;nbsp;a&amp;nbsp;type&amp;nbsp;of&lt;br&gt;
Collection&amp;nbsp;(Map&amp;nbsp;does&amp;nbsp;not&amp;nbsp;extend&amp;nbsp;the&amp;nbsp;Collection&amp;nbsp;interface).&amp;nbsp;You&amp;nbsp;might&amp;nbsp;wonder&amp;nbsp;why.&lt;br&gt;
All&amp;nbsp;of&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Collection&amp;nbsp;interface&amp;nbsp;would&amp;nbsp;appear&amp;nbsp;to&amp;nbsp;make&amp;nbsp;sense&amp;nbsp;for&amp;nbsp;Map,&lt;br&gt;
except&amp;nbsp;for&amp;nbsp;iterator().&amp;nbsp;A&amp;nbsp;Map,&amp;nbsp;again,&amp;nbsp;has&amp;nbsp;two&amp;nbsp;sets&amp;nbsp;of&amp;nbsp;objects:&amp;nbsp;keys&amp;nbsp;and&amp;nbsp;values,&amp;nbsp;and&amp;nbsp;separate&lt;br&gt;
iterators&amp;nbsp;for&amp;nbsp;each.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;why&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;does&amp;nbsp;not&amp;nbsp;implement&amp;nbsp;Collection.&lt;br&gt;
&lt;br&gt;
!!&lt;br&gt;
One&amp;nbsp;more&amp;nbsp;note&amp;nbsp;about&amp;nbsp;maps:&amp;nbsp;some&amp;nbsp;map&amp;nbsp;implementations&amp;nbsp;(including&amp;nbsp;Java’s&amp;nbsp;standard&lt;br&gt;
HashMap)&amp;nbsp;allow&amp;nbsp;null&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;as&amp;nbsp;a&amp;nbsp;key&amp;nbsp;or&amp;nbsp;value,&amp;nbsp;but&amp;nbsp;others&amp;nbsp;may&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
ConcurrentMap&lt;br&gt;
The&amp;nbsp;ConcurrentMap&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;java.util.concurrent&amp;nbsp;package.&lt;br&gt;
It&amp;nbsp;extends&amp;nbsp;the&amp;nbsp;base&amp;nbsp;Map&amp;nbsp;interface&amp;nbsp;and&amp;nbsp;adds&amp;nbsp;atomic&amp;nbsp;put,&amp;nbsp;remove,&amp;nbsp;and&amp;nbsp;replace&lt;br&gt;
functionality&amp;nbsp;that&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;concurrent&amp;nbsp;programming&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;V&amp;nbsp;putIfAbsent(&amp;nbsp;K&amp;nbsp;key,&amp;nbsp;V&amp;nbsp;value&amp;nbsp;)&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;associates&amp;nbsp;the&amp;nbsp;value&amp;nbsp;with&amp;nbsp;the&amp;nbsp;key&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&amp;nbsp;key&amp;nbsp;was&amp;nbsp;not&amp;nbsp;already&amp;nbsp;in&amp;nbsp;use.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;key&amp;nbsp;exists,&amp;nbsp;no&amp;nbsp;action&amp;nbsp;is&amp;nbsp;taken.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;key&amp;nbsp;does&amp;nbsp;not&amp;nbsp;exist,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;created.&amp;nbsp;The&lt;br&gt;
resulting&amp;nbsp;value&amp;nbsp;(existing&amp;nbsp;or&amp;nbsp;new)&amp;nbsp;is&amp;nbsp;returned.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;remove(&amp;nbsp;Object&amp;nbsp;key,&amp;nbsp;Object&amp;nbsp;value&amp;nbsp;)&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;removes&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;(key&amp;nbsp;and&amp;nbsp;value)&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&amp;nbsp;current&amp;nbsp;value&amp;nbsp;associated&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;key&amp;nbsp;equals&amp;nbsp;the&amp;nbsp;supplied&amp;nbsp;value.&amp;nbsp;It&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;if&amp;nbsp;the&amp;nbsp;value&amp;nbsp;was&amp;nbsp;removed,&lt;br&gt;
false&amp;nbsp;if&amp;nbsp;not.&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;replace(&amp;nbsp;K&amp;nbsp;key,&amp;nbsp;V&amp;nbsp;existingValue,&amp;nbsp;V&amp;nbsp;newValue)&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;replaces&amp;nbsp;the&amp;nbsp;value&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;key&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&amp;nbsp;existing&amp;nbsp;value&lt;br&gt;
equals&amp;nbsp;the&amp;nbsp;existingValue&amp;nbsp;argument.&amp;nbsp;It&amp;nbsp;returns&amp;nbsp;true&amp;nbsp;if&amp;nbsp;the&amp;nbsp;value&amp;nbsp;was&amp;nbsp;replaced.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Using&amp;nbsp;maps&amp;nbsp;ExAMPLE:&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;HashMapExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;nbsp;vehicles&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Add&amp;nbsp;some&amp;nbsp;vehicles.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vehicles.put("BMW",&amp;nbsp;5);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vehicles.put("Mercedes",&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vehicles.put("Audi",&amp;nbsp;4);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vehicles.put("Ford",&amp;nbsp;10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Total&amp;nbsp;vehicles:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;vehicles.size());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Iterate&amp;nbsp;over&amp;nbsp;all&amp;nbsp;vehicles,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;keySet&amp;nbsp;method.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(String&amp;nbsp;key:&amp;nbsp;vehicles.keySet())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(key&amp;nbsp;+&amp;nbsp;"&amp;nbsp;-&amp;nbsp;"&amp;nbsp;+&amp;nbsp;vehicles.get(key));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;searchKey&amp;nbsp;=&amp;nbsp;"Audi";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(vehicles.containsKey(searchKey))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Found&amp;nbsp;total&amp;nbsp;"&amp;nbsp;+&amp;nbsp;vehicles.get(searchKey)&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;searchKey&amp;nbsp;+&amp;nbsp;"&amp;nbsp;cars!\n");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Clear&amp;nbsp;all&amp;nbsp;values.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vehicles.clear();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Equals&amp;nbsp;to&amp;nbsp;zero.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("After&amp;nbsp;clear&amp;nbsp;operation,&amp;nbsp;size:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;vehicles.size());&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Total&amp;nbsp;vehicles:&amp;nbsp;4&lt;br&gt;
Audi&amp;nbsp;-&amp;nbsp;4&lt;br&gt;
Ford&amp;nbsp;-&amp;nbsp;10&lt;br&gt;
BMW&amp;nbsp;-&amp;nbsp;5&lt;br&gt;
Mercedes&amp;nbsp;-&amp;nbsp;3&lt;br&gt;
&lt;br&gt;
Found&amp;nbsp;total&amp;nbsp;4&amp;nbsp;Audi&amp;nbsp;cars!&lt;br&gt;
&lt;br&gt;
After&amp;nbsp;clear&amp;nbsp;operation,&amp;nbsp;size:&amp;nbsp;0&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;:&lt;br&gt;
1&amp;nbsp;ArrayList&amp;nbsp;and&amp;nbsp;LinkedList,&lt;br&gt;
2&amp;nbsp;Vector&amp;nbsp;and&amp;nbsp;ArrayList,&lt;br&gt;
3&amp;nbsp;HashMap&amp;nbsp;and&amp;nbsp;HashTable,&lt;br&gt;
4&amp;nbsp;TreeSet&amp;nbsp;and&amp;nbsp;SortedSet,&lt;br&gt;
5&amp;nbsp;TreeSet,&amp;nbsp;LinkedHashSet&amp;nbsp;and&amp;nbsp;HashSet.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&amp;nbsp;Difference&amp;nbsp;between&amp;nbsp;ArrayList&amp;nbsp;and&amp;nbsp;LinkedList?&lt;br&gt;
&lt;br&gt;
LinkedList&amp;nbsp;store&amp;nbsp;elements&amp;nbsp;within&amp;nbsp;a&amp;nbsp;doubly-linked&amp;nbsp;list&amp;nbsp;data&amp;nbsp;structure.&lt;br&gt;
ArrayList&amp;nbsp;store&amp;nbsp;elements&amp;nbsp;within&amp;nbsp;a&amp;nbsp;dynamically&amp;nbsp;resizing&amp;nbsp;array.&lt;br&gt;
LinkedList&amp;nbsp;allows&amp;nbsp;for&amp;nbsp;constant-time&amp;nbsp;insertions&amp;nbsp;or&amp;nbsp;removals,&amp;nbsp;but&amp;nbsp;only&lt;br&gt;
sequential&amp;nbsp;access&amp;nbsp;of&amp;nbsp;elements.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;walk&amp;nbsp;the&amp;nbsp;list&lt;br&gt;
forwards&amp;nbsp;or&amp;nbsp;backwards,&amp;nbsp;but&amp;nbsp;grabbing&amp;nbsp;an&amp;nbsp;element&amp;nbsp;in&amp;nbsp;the&amp;nbsp;middle&amp;nbsp;takes&amp;nbsp;time&lt;br&gt;
proportional&amp;nbsp;to&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;list.&amp;nbsp;ArrayLists,&amp;nbsp;on&amp;nbsp;the&amp;nbsp;other&amp;nbsp;hand,&amp;nbsp;allow&lt;br&gt;
random&amp;nbsp;access,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;can&amp;nbsp;grab&amp;nbsp;any&amp;nbsp;element&amp;nbsp;in&amp;nbsp;constant&amp;nbsp;time.&amp;nbsp;But&amp;nbsp;adding&lt;br&gt;
or&amp;nbsp;removing&amp;nbsp;from&amp;nbsp;anywhere&amp;nbsp;but&amp;nbsp;the&amp;nbsp;end&amp;nbsp;requires&amp;nbsp;shifting&amp;nbsp;all&amp;nbsp;the&amp;nbsp;latter&amp;nbsp;elements&lt;br&gt;
over,&amp;nbsp;either&amp;nbsp;to&amp;nbsp;make&amp;nbsp;an&amp;nbsp;opening&amp;nbsp;or&amp;nbsp;fill&amp;nbsp;the&amp;nbsp;gap.&lt;br&gt;
LinkedList&amp;nbsp;has&amp;nbsp;more&amp;nbsp;memory&amp;nbsp;overhead&amp;nbsp;than&amp;nbsp;ArrayList&amp;nbsp;because&amp;nbsp;in&amp;nbsp;ArrayList&lt;br&gt;
each&amp;nbsp;index&amp;nbsp;only&amp;nbsp;holds&amp;nbsp;actual&amp;nbsp;object&amp;nbsp;(data)&amp;nbsp;but&amp;nbsp;in&amp;nbsp;case&amp;nbsp;of&amp;nbsp;LinkedList&amp;nbsp;each&amp;nbsp;node&lt;br&gt;
holds&amp;nbsp;both&amp;nbsp;data&amp;nbsp;and&amp;nbsp;address&amp;nbsp;of&amp;nbsp;next&amp;nbsp;and&amp;nbsp;previous&amp;nbsp;node.&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;
2&lt;br&gt;
&amp;nbsp;Difference&amp;nbsp;between&amp;nbsp;Vector&amp;nbsp;and&amp;nbsp;ArrayList?&lt;br&gt;
&lt;br&gt;
Lets&amp;nbsp;note&amp;nbsp;down&amp;nbsp;the&amp;nbsp;differences:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;All&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;Vector&amp;nbsp;is&amp;nbsp;synchronized.&amp;nbsp;But,&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;ArrayList&amp;nbsp;is&amp;nbsp;not&amp;nbsp;synchronized.&lt;br&gt;
-&amp;nbsp;Vector&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Legacy&amp;nbsp;class&amp;nbsp;added&amp;nbsp;in&amp;nbsp;first&amp;nbsp;release&amp;nbsp;of&amp;nbsp;JDK.&amp;nbsp;ArrayList&amp;nbsp;was&amp;nbsp;part&amp;nbsp;of&amp;nbsp;JDK&amp;nbsp;1.2,&lt;br&gt;
when&amp;nbsp;collection&amp;nbsp;framework&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;in&amp;nbsp;java.&lt;br&gt;
-&amp;nbsp;By&amp;nbsp;default,&amp;nbsp;Vector&amp;nbsp;doubles&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;its&amp;nbsp;array&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;re-sized&amp;nbsp;internally.&lt;br&gt;
But,&amp;nbsp;ArrayList&amp;nbsp;increases&amp;nbsp;by&amp;nbsp;half&amp;nbsp;of&amp;nbsp;its&amp;nbsp;size&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;re-sized.&lt;br&gt;
&lt;br&gt;
=================================&lt;br&gt;
3&lt;br&gt;
Difference&amp;nbsp;between&amp;nbsp;HashMap&amp;nbsp;and&amp;nbsp;HashTable?&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;several&amp;nbsp;differences&amp;nbsp;between&amp;nbsp;HashMap&amp;nbsp;and&amp;nbsp;Hashtable&amp;nbsp;in&amp;nbsp;Java:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Hashtable&amp;nbsp;is&amp;nbsp;synchronized,&amp;nbsp;whereas&amp;nbsp;HashMap&amp;nbsp;is&amp;nbsp;not.&lt;br&gt;
-&amp;nbsp;Hashtable&amp;nbsp;does&amp;nbsp;not&amp;nbsp;allow&amp;nbsp;null&amp;nbsp;keys&amp;nbsp;or&amp;nbsp;values.&amp;nbsp;HashMap&amp;nbsp;allows&lt;br&gt;
one&amp;nbsp;null&amp;nbsp;key&amp;nbsp;and&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;null&amp;nbsp;values.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;third&amp;nbsp;significant&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;HashMap&amp;nbsp;vs&amp;nbsp;Hashtable&amp;nbsp;is&amp;nbsp;that&lt;br&gt;
Iterator&amp;nbsp;in&amp;nbsp;the&amp;nbsp;HashMap&amp;nbsp;is&amp;nbsp;a&amp;nbsp;fail-fast&amp;nbsp;iterator&amp;nbsp;while&amp;nbsp;the&amp;nbsp;enumerator&lt;br&gt;
for&amp;nbsp;the&amp;nbsp;Hashtable&amp;nbsp;is&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;iterator&amp;nbsp;is&amp;nbsp;considered&amp;nbsp;__&amp;nbsp;fail-fast&amp;nbsp;if&amp;nbsp;__&amp;nbsp;it&amp;nbsp;throws&amp;nbsp;a&amp;nbsp;ConcurrentModificationException&amp;nbsp;under&lt;br&gt;
either&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;two&amp;nbsp;conditions:&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;multithreaded&amp;nbsp;processing:&amp;nbsp;if&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;modify&amp;nbsp;a&amp;nbsp;Collection&amp;nbsp;while&lt;br&gt;
another&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;iterating&amp;nbsp;over&amp;nbsp;it.&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;single-threaded&amp;nbsp;or&amp;nbsp;in&amp;nbsp;multithreaded&amp;nbsp;processing:&amp;nbsp;if&amp;nbsp;after&amp;nbsp;the&amp;nbsp;creation&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
Iterator,&amp;nbsp;the&amp;nbsp;container&amp;nbsp;is&amp;nbsp;modified&amp;nbsp;at&amp;nbsp;any&amp;nbsp;time&amp;nbsp;by&amp;nbsp;any&amp;nbsp;method&amp;nbsp;other&amp;nbsp;than&amp;nbsp;the&lt;br&gt;
Iterator's&amp;nbsp;own&amp;nbsp;remove&amp;nbsp;or&amp;nbsp;add&amp;nbsp;methods.&lt;br&gt;
&lt;br&gt;
==================================================&lt;br&gt;
4&lt;br&gt;
SortedSet&amp;nbsp;is&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;which&amp;nbsp;TreeSet&amp;nbsp;implements.&amp;nbsp;That’&amp;nbsp;it&amp;nbsp;!!&lt;br&gt;
===============================&lt;br&gt;
5&amp;nbsp;&lt;br&gt;
TreeSet,&amp;nbsp;LinkedHashSet&amp;nbsp;and&amp;nbsp;HashSet&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;three&amp;nbsp;Set&amp;nbsp;implementation&amp;nbsp;in&amp;nbsp;collection&lt;br&gt;
framework&amp;nbsp;and&amp;nbsp;like&amp;nbsp;many&amp;nbsp;others&amp;nbsp;they&amp;nbsp;are&amp;nbsp;also&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;objects.&amp;nbsp;Main&lt;br&gt;
feature&amp;nbsp;of&amp;nbsp;TreeSet&amp;nbsp;is&amp;nbsp;sorting,&amp;nbsp;&amp;nbsp;LinkedHashSet&amp;nbsp;is&amp;nbsp;insertion&amp;nbsp;order&amp;nbsp;and&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;just&lt;br&gt;
general&amp;nbsp;purpose&amp;nbsp;collection&amp;nbsp;for&amp;nbsp;storing&amp;nbsp;object.&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;using&lt;br&gt;
HashMap&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;while&amp;nbsp;TreeSet&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;TreeMap.&lt;br&gt;
TreeSet&amp;nbsp;is&amp;nbsp;a&amp;nbsp;SortedSet&amp;nbsp;implementation&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;it&amp;nbsp;to&amp;nbsp;keep&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
sorted&amp;nbsp;order&amp;nbsp;defined&amp;nbsp;by&amp;nbsp;either&amp;nbsp;Comparable&amp;nbsp;or&amp;nbsp;Comparator&amp;nbsp;interface.&amp;nbsp;Comparable&lt;br&gt;
is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;natural&amp;nbsp;order&amp;nbsp;sorting&amp;nbsp;and&amp;nbsp;Comparator&amp;nbsp;for&amp;nbsp;custom&amp;nbsp;order&amp;nbsp;sorting&amp;nbsp;of&amp;nbsp;objects,&lt;br&gt;
which&amp;nbsp;can&amp;nbsp;be&amp;nbsp;provided&amp;nbsp;while&amp;nbsp;creating&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;TreeSet.&lt;br&gt;
&lt;br&gt;
similarities&amp;nbsp;between&amp;nbsp;them:&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;Duplicates&amp;nbsp;:&amp;nbsp;All&amp;nbsp;three&amp;nbsp;implements&amp;nbsp;Set&amp;nbsp;interface&amp;nbsp;means&amp;nbsp;they&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;store&amp;nbsp;duplicates.&lt;br&gt;
&lt;br&gt;
2)&amp;nbsp;Thread&amp;nbsp;safety&amp;nbsp;:&amp;nbsp;HashSet,&amp;nbsp;TreeSet&amp;nbsp;and&amp;nbsp;LinkedHashSet&amp;nbsp;are&amp;nbsp;not&amp;nbsp;thread-safe,&amp;nbsp;if&amp;nbsp;you&lt;br&gt;
use&amp;nbsp;them&amp;nbsp;in&amp;nbsp;multi-threading&amp;nbsp;environment&amp;nbsp;where&amp;nbsp;at&amp;nbsp;least&amp;nbsp;one&amp;nbsp;Thread&amp;nbsp;&amp;nbsp;modifies&amp;nbsp;Set&lt;br&gt;
you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;externally&amp;nbsp;synchronize&amp;nbsp;them.&lt;br&gt;
&lt;br&gt;
3)&amp;nbsp;Fail-Fast&amp;nbsp;Iterator&amp;nbsp;:&amp;nbsp;Iterator&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;TreeSet,&amp;nbsp;LinkedHashSet&amp;nbsp;and&amp;nbsp;HashSet&amp;nbsp;are&lt;br&gt;
fail-fast&amp;nbsp;Iterator.&amp;nbsp;i.e.&amp;nbsp;If&amp;nbsp;Iterator&amp;nbsp;is&amp;nbsp;modified&amp;nbsp;after&amp;nbsp;its&amp;nbsp;creation&amp;nbsp;by&amp;nbsp;any&amp;nbsp;way&amp;nbsp;other&amp;nbsp;than&lt;br&gt;
Iterators&amp;nbsp;remove()&amp;nbsp;method,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;throw&amp;nbsp;ConcurrentModificationException&amp;nbsp;with&amp;nbsp;best&amp;nbsp;of&lt;br&gt;
effort.&amp;nbsp;read&amp;nbsp;more&amp;nbsp;about&amp;nbsp;fail-fast&amp;nbsp;vs&amp;nbsp;fail-safe&amp;nbsp;Iterator&amp;nbsp;here&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
difference&amp;nbsp;between&amp;nbsp;HashSet,&amp;nbsp;LinkedHashSet&amp;nbsp;and&amp;nbsp;TreeSet&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
Performance&amp;nbsp;and&amp;nbsp;Speed&amp;nbsp;:&amp;nbsp;First&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;them&amp;nbsp;comes&amp;nbsp;in&amp;nbsp;terms&lt;br&gt;
of&amp;nbsp;&amp;nbsp;speed.&amp;nbsp;&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;fastest,&amp;nbsp;LinkedHashSet&amp;nbsp;is&amp;nbsp;second&amp;nbsp;on&amp;nbsp;performance&amp;nbsp;or&amp;nbsp;almost&lt;br&gt;
similar&amp;nbsp;to&amp;nbsp;HashSet&amp;nbsp;but&amp;nbsp;TreeSet&amp;nbsp;is&amp;nbsp;bit&amp;nbsp;slower&amp;nbsp;because&amp;nbsp;of&amp;nbsp;sorting&amp;nbsp;operation&amp;nbsp;it&amp;nbsp;needs&lt;br&gt;
to&amp;nbsp;perform&amp;nbsp;on&amp;nbsp;each&amp;nbsp;insertion.&amp;nbsp;TreeSet&amp;nbsp;provides&amp;nbsp;guaranteed&amp;nbsp;O(log(n))&amp;nbsp;time&amp;nbsp;for&lt;br&gt;
common&amp;nbsp;operations&amp;nbsp;like&amp;nbsp;add,&amp;nbsp;remove&amp;nbsp;and&amp;nbsp;contains,&amp;nbsp;while&amp;nbsp;HashSet&amp;nbsp;and&amp;nbsp;LinkedHashSet&lt;br&gt;
offer&amp;nbsp;constant&amp;nbsp;time&amp;nbsp;performance&amp;nbsp;e.g.&amp;nbsp;O(1)&amp;nbsp;for&amp;nbsp;add,&amp;nbsp;contains&amp;nbsp;and&amp;nbsp;remove&amp;nbsp;given&lt;br&gt;
hash&amp;nbsp;function&amp;nbsp;uniformly&amp;nbsp;distribute&amp;nbsp;elements&amp;nbsp;in&amp;nbsp;bucket.&lt;br&gt;
&lt;br&gt;
Ordering&amp;nbsp;:&amp;nbsp;HashSet&amp;nbsp;does&amp;nbsp;not&amp;nbsp;maintain&amp;nbsp;any&amp;nbsp;order&amp;nbsp;while&amp;nbsp;LinkedHashSet&amp;nbsp;maintains&lt;br&gt;
insertion&amp;nbsp;order&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;much&amp;nbsp;like&amp;nbsp;List&amp;nbsp;interface&amp;nbsp;and&amp;nbsp;TreeSet&amp;nbsp;maintains&amp;nbsp;sorting&amp;nbsp;order&amp;nbsp;or&amp;nbsp;elements.&lt;br&gt;
&lt;br&gt;
Internal&amp;nbsp;Implementation&amp;nbsp;:&amp;nbsp;HashSet&amp;nbsp;is&amp;nbsp;backed&amp;nbsp;by&amp;nbsp;an&amp;nbsp;HashMap&amp;nbsp;instance,&amp;nbsp;LinkedHashSet&lt;br&gt;
is&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;HashSet&amp;nbsp;and&amp;nbsp;LinkedList&amp;nbsp;while&amp;nbsp;TreeSet&amp;nbsp;is&amp;nbsp;backed&amp;nbsp;up&amp;nbsp;by&amp;nbsp;NavigableMap&lt;br&gt;
in&amp;nbsp;Java&amp;nbsp;and&amp;nbsp;by&amp;nbsp;default&amp;nbsp;it&amp;nbsp;uses&amp;nbsp;TreeMap.&lt;br&gt;
&lt;br&gt;
null&amp;nbsp;:&amp;nbsp;Both&amp;nbsp;HashSet&amp;nbsp;and&amp;nbsp;LinkedHashSet&amp;nbsp;allows&amp;nbsp;null&amp;nbsp;but&amp;nbsp;TreeSet&amp;nbsp;doesn't&amp;nbsp;allow&amp;nbsp;null&amp;nbsp;but&amp;nbsp;TreeSet&amp;nbsp;doesn't&amp;nbsp;allow&amp;nbsp;null&amp;nbsp;and&amp;nbsp;throw&amp;nbsp;java.lang.NullPointerException&lt;br&gt;
====================</questionanswer>
  </question>
  <question id="1_0_0_1_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;Iterator&amp;nbsp;and&amp;nbsp;Listiterator?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>We&amp;nbsp;can&amp;nbsp;use&amp;nbsp;Iterator&amp;nbsp;to&amp;nbsp;traverse&amp;nbsp;a&amp;nbsp;Set&amp;nbsp;or&amp;nbsp;a&amp;nbsp;List&amp;nbsp;or&amp;nbsp;a&amp;nbsp;Map.&amp;nbsp;But&amp;nbsp;ListIterator&amp;nbsp;can&lt;br&gt;
only&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;traverse&amp;nbsp;a&amp;nbsp;List,&amp;nbsp;it&amp;nbsp;can't&amp;nbsp;traverse&amp;nbsp;a&amp;nbsp;Set.&amp;nbsp;Why?&lt;br&gt;
&lt;br&gt;
Answer&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;iterate&amp;nbsp;backwards&lt;br&gt;
-&amp;nbsp;obtain&amp;nbsp;the&amp;nbsp;index&amp;nbsp;at&amp;nbsp;any&amp;nbsp;point.&lt;br&gt;
-&amp;nbsp;add&amp;nbsp;a&amp;nbsp;new&amp;nbsp;value&amp;nbsp;at&amp;nbsp;any&amp;nbsp;point.&lt;br&gt;
-&amp;nbsp;set&amp;nbsp;a&amp;nbsp;new&amp;nbsp;value&amp;nbsp;at&amp;nbsp;that&amp;nbsp;point.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Methods&amp;nbsp;in&amp;nbsp;ListIterator&lt;br&gt;
-&amp;nbsp;hasNext()&lt;br&gt;
-&amp;nbsp;next()&lt;br&gt;
-&amp;nbsp;previous()&amp;nbsp;&lt;br&gt;
-&amp;nbsp;hasPrevious()&lt;br&gt;
-&amp;nbsp;remove()&lt;br&gt;
-&amp;nbsp;nextIndex()&lt;br&gt;
-&amp;nbsp;previousIndex()</questionanswer>
  </question>
  <question id="1_0_0_1_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Collections&amp;nbsp;:&amp;nbsp;what&amp;nbsp;is&amp;nbsp;fail&amp;nbsp;last&amp;nbsp;Iterator&amp;nbsp;?&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;HashMap&amp;nbsp;and&amp;nbsp;HashTable&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;third&amp;nbsp;significant&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;HashMap&amp;nbsp;vs&amp;nbsp;Hashtable&amp;nbsp;is&amp;nbsp;that&amp;nbsp;Iterator&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;HashMap&amp;nbsp;is&amp;nbsp;a&amp;nbsp;fail-fast&amp;nbsp;&amp;nbsp;_iterator&amp;nbsp;_&amp;nbsp;while&amp;nbsp;the&amp;nbsp;_&amp;nbsp;enumerator&amp;nbsp;_&amp;nbsp;for&amp;nbsp;the&amp;nbsp;Hashtable&amp;nbsp;is&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
DEF&amp;nbsp;::::::::::::::::::::::::::::::&lt;br&gt;
Fail-fast&amp;nbsp;Iterator.&amp;nbsp;:&amp;nbsp;If&amp;nbsp;Iterator&amp;nbsp;is&amp;nbsp;modified&amp;nbsp;after&amp;nbsp;its&amp;nbsp;creation&amp;nbsp;by&amp;nbsp;any&amp;nbsp;way&amp;nbsp;other&lt;br&gt;
than&amp;nbsp;Iterators&amp;nbsp;remove()&amp;nbsp;method,&amp;nbsp;it&amp;nbsp;will&amp;nbsp;throw&amp;nbsp;ConcurrentModificationException&lt;br&gt;
with&amp;nbsp;best&amp;nbsp;of&amp;nbsp;effort.&lt;br&gt;
&lt;br&gt;
Iterator&amp;nbsp;that&amp;nbsp;are&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;both&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;fail-safe.&amp;nbsp;Enumeration&amp;nbsp;returned&amp;nbsp;by&amp;nbsp;HashTable&amp;nbsp;are&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Set&amp;nbsp;keys&amp;nbsp;=&amp;nbsp;hashMap.keySet();&lt;br&gt;
for&amp;nbsp;(Object&amp;nbsp;key&amp;nbsp;:&amp;nbsp;key)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hashMap.put(someObject,&amp;nbsp;someValue);&amp;nbsp;//it&amp;nbsp;will&amp;nbsp;throw&amp;nbsp;the&amp;nbsp;ConcurrentModificationException&amp;nbsp;here&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Enumeration&amp;nbsp;keys&amp;nbsp;=&amp;nbsp;hashTable.keys();&lt;br&gt;
&amp;nbsp;for&amp;nbsp;(Enumeration&amp;nbsp;e&amp;nbsp;=&amp;nbsp;hashTable.keys()&amp;nbsp;;&amp;nbsp;e.hasMoreElements()&amp;nbsp;;&amp;nbsp;e.nextElement())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hashTable.put(someKey,&amp;nbsp;someValue);&amp;nbsp;//this&amp;nbsp;is&amp;nbsp;ok&amp;nbsp;,&amp;nbsp;no&amp;nbsp;exception&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;have&amp;nbsp;understood&amp;nbsp;fail-fast&amp;nbsp;in&amp;nbsp;previous&amp;nbsp;question.&amp;nbsp;Fail-safe&amp;nbsp;iterators&amp;nbsp;are&amp;nbsp;just&lt;br&gt;
opposite&amp;nbsp;to&amp;nbsp;fail-fast.&amp;nbsp;They&amp;nbsp;never&amp;nbsp;fail&amp;nbsp;if&amp;nbsp;you&amp;nbsp;modify&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;collection&amp;nbsp;on&amp;nbsp;which&amp;nbsp;they&lt;br&gt;
are&amp;nbsp;iterating,&amp;nbsp;because&amp;nbsp;they&amp;nbsp;work&amp;nbsp;on&amp;nbsp;clone&amp;nbsp;of&amp;nbsp;Collection&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;original&amp;nbsp;collection&amp;nbsp;and&lt;br&gt;
that’s&amp;nbsp;why&amp;nbsp;they&amp;nbsp;are&amp;nbsp;called&amp;nbsp;as&amp;nbsp;fail-safe&amp;nbsp;iterator.&lt;br&gt;
&lt;br&gt;
Iterator&amp;nbsp;of&amp;nbsp;_&amp;nbsp;CopyOnWriteArrayList&amp;nbsp;_&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;of&amp;nbsp;fail-safe&amp;nbsp;Iterator&amp;nbsp;also&amp;nbsp;iterator&lt;br&gt;
written&amp;nbsp;by&amp;nbsp;ConcurrentHashMap&amp;nbsp;keySet&amp;nbsp;is&amp;nbsp;also&amp;nbsp;fail-safe&amp;nbsp;iterator&amp;nbsp;and&amp;nbsp;never&lt;br&gt;
throw&amp;nbsp;ConcurrentModificationException.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Hash&amp;nbsp;Codes&amp;nbsp;and&amp;nbsp;Key&amp;nbsp;Values,&amp;nbsp;why&amp;nbsp;it&amp;nbsp;is&amp;nbsp;&lt;br&gt;
important&amp;nbsp;to&amp;nbsp;override&amp;nbsp;hashCode()&amp;nbsp;method&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;term&amp;nbsp;hash&amp;nbsp;in&amp;nbsp;Hashtable&amp;nbsp;and&amp;nbsp;HashMap&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;key&amp;nbsp;hash&lt;br&gt;
value&amp;nbsp;that&amp;nbsp;these&amp;nbsp;collections&amp;nbsp;use&amp;nbsp;to&amp;nbsp;make&amp;nbsp;their&amp;nbsp;associations.&amp;nbsp;Specifically,&lt;br&gt;
an&amp;nbsp;element&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Hashtable&amp;nbsp;or&amp;nbsp;Hash&amp;nbsp;Map&amp;nbsp;is&amp;nbsp;not&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;key&amp;nbsp;strictly&lt;br&gt;
by&amp;nbsp;the&amp;nbsp;key&amp;nbsp;object’s&amp;nbsp;identity&amp;nbsp;but&amp;nbsp;rather&amp;nbsp;by&amp;nbsp;a&amp;nbsp;function&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;key’s&amp;nbsp;contents.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;keys&amp;nbsp;that&amp;nbsp;are&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;object.&amp;nbsp;By&amp;nbsp;“equivalent,”&amp;nbsp;we&amp;nbsp;mean&amp;nbsp;those&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;compare&amp;nbsp;true&amp;nbsp;with&amp;nbsp;equals().&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;store&amp;nbsp;an&amp;nbsp;object&amp;nbsp;in&amp;nbsp;a&amp;nbsp;Hashtable&amp;nbsp;using&amp;nbsp;one&amp;nbsp;object&amp;nbsp;as&amp;nbsp;a&amp;nbsp;key,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;any&lt;br&gt;
other&amp;nbsp;object&amp;nbsp;that&amp;nbsp;equals()&amp;nbsp;tells&amp;nbsp;you&amp;nbsp;is&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;retrieve&amp;nbsp;the&amp;nbsp;stored&amp;nbsp;object.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Hashcode&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;bucketing&amp;nbsp;in&amp;nbsp;Hash&amp;nbsp;implementations&amp;nbsp;like&amp;nbsp;HashMap,&amp;nbsp;HashTable,&lt;br&gt;
HashSet&amp;nbsp;etc.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;received&amp;nbsp;from&amp;nbsp;hashcode()&amp;nbsp;is&amp;nbsp;used&amp;nbsp;as&amp;nbsp;bucket&amp;nbsp;number&amp;nbsp;for&lt;br&gt;
storing&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;the&amp;nbsp;set/map.&amp;nbsp;this&amp;nbsp;bucket&amp;nbsp;number&amp;nbsp;is&amp;nbsp;the&amp;nbsp;address&amp;nbsp;of&amp;nbsp;the&amp;nbsp;element&lt;br&gt;
inside&amp;nbsp;the&amp;nbsp;set/map.&amp;nbsp;when&amp;nbsp;you&amp;nbsp;do&amp;nbsp;contains()&amp;nbsp;then&amp;nbsp;it&amp;nbsp;will&amp;nbsp;take&amp;nbsp;the&amp;nbsp;hashcode&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
element,&amp;nbsp;then&amp;nbsp;look&amp;nbsp;for&amp;nbsp;the&amp;nbsp;bucket&amp;nbsp;where&amp;nbsp;hashcode&amp;nbsp;points&amp;nbsp;to...&amp;nbsp;if&amp;nbsp;more&amp;nbsp;than&amp;nbsp;1&amp;nbsp;element&lt;br&gt;
is&amp;nbsp;found&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;bucket&amp;nbsp;(multiple&amp;nbsp;objects&amp;nbsp;can&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;hashcode)&amp;nbsp;then&lt;br&gt;
it&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;equals()&amp;nbsp;method&amp;nbsp;to&amp;nbsp;evaluate&amp;nbsp;if&amp;nbsp;object&amp;nbsp;are&amp;nbsp;equal,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;decide&amp;nbsp;if&lt;br&gt;
contain()&amp;nbsp;is&amp;nbsp;true&amp;nbsp;or&amp;nbsp;false,&amp;nbsp;or&amp;nbsp;decide&amp;nbsp;if&amp;nbsp;element&amp;nbsp;could&amp;nbsp;be&amp;nbsp;added&amp;nbsp;in&amp;nbsp;the&amp;nbsp;set&amp;nbsp;or&amp;nbsp;not.</questionanswer>
  </question>
  <question id="1_0_0_1_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Collections&amp;nbsp;:&amp;nbsp;Synchronized&amp;nbsp;and&amp;nbsp;Unsynchronized&amp;nbsp;Collections,&amp;nbsp;describe.&lt;br&gt;
WeakHashMap,&amp;nbsp;describe.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;Synchronized&amp;nbsp;arraylist&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.util.Collections&amp;nbsp;class&amp;nbsp;contains&amp;nbsp;important&amp;nbsp;static&amp;nbsp;utility&amp;nbsp;methods&lt;br&gt;
for&amp;nbsp;working&amp;nbsp;with&amp;nbsp;Sets&amp;nbsp;and&amp;nbsp;Maps.&amp;nbsp;All&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;Collections&amp;nbsp;operate&lt;br&gt;
on&amp;nbsp;interfaces,&amp;nbsp;so&amp;nbsp;they&amp;nbsp;work&amp;nbsp;regardless&amp;nbsp;of&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;implementation&lt;br&gt;
classes&amp;nbsp;you’re&amp;nbsp;using.&amp;nbsp;The&amp;nbsp;first&amp;nbsp;methods&amp;nbsp;we’ll&amp;nbsp;look&amp;nbsp;at&amp;nbsp;involve&amp;nbsp;creating&lt;br&gt;
synchronized&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;our&amp;nbsp;collections.&lt;br&gt;
&lt;br&gt;
Most&amp;nbsp;of&amp;nbsp;the&amp;nbsp;default&amp;nbsp;collection&amp;nbsp;implementations&amp;nbsp;are&amp;nbsp;not&amp;nbsp;synchronized;&lt;br&gt;
that&amp;nbsp;is,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;not&amp;nbsp;safe&amp;nbsp;for&amp;nbsp;concurrent&amp;nbsp;access&amp;nbsp;by&amp;nbsp;multiple&amp;nbsp;threads.&amp;nbsp;The&lt;br&gt;
reason&amp;nbsp;for&amp;nbsp;this&amp;nbsp;is&amp;nbsp;performance.&amp;nbsp;In&amp;nbsp;many&amp;nbsp;applications,&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&lt;br&gt;
for&amp;nbsp;synchronization,&amp;nbsp;so&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;API&amp;nbsp;does&lt;br&gt;
not&amp;nbsp;provide&amp;nbsp;it&amp;nbsp;by&amp;nbsp;default.&amp;nbsp;Instead,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;create&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;version&lt;br&gt;
of&amp;nbsp;any&amp;nbsp;collection&amp;nbsp;using&amp;nbsp;the&amp;nbsp;following&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;class:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Collection&amp;nbsp;synchronizedCollection(Collection&amp;nbsp;c)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Set&amp;nbsp;synchronizedSet(Set&amp;nbsp;s)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;List&amp;nbsp;synchronizedList(List&amp;nbsp;list)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Map&amp;nbsp;synchronizedMap(Map&amp;nbsp;m)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;SortedSet&amp;nbsp;synchronizedSortedSet(SortedSet&amp;nbsp;s)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;SortedMap&amp;nbsp;synchronizedSortedMap(SortedMap&amp;nbsp;m)&lt;br&gt;
&lt;br&gt;
These&amp;nbsp;methods&amp;nbsp;return&amp;nbsp;synchronized,&amp;nbsp;threadsafe&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;the&amp;nbsp;supplied&lt;br&gt;
collection,&amp;nbsp;by&amp;nbsp;wrapping&amp;nbsp;them&amp;nbsp;(in&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
interface&amp;nbsp;and&amp;nbsp;delegates&amp;nbsp;the&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;collection).&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;shows&amp;nbsp;how&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;threadsafe&amp;nbsp;List:&lt;br&gt;
&amp;nbsp;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
&amp;nbsp;List&amp;nbsp;syncList&amp;nbsp;=&amp;nbsp;Collections.synchronizedList(list);&lt;br&gt;
&lt;br&gt;
Multiple&amp;nbsp;threads&amp;nbsp;can&amp;nbsp;call&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;this&amp;nbsp;list&amp;nbsp;safely&amp;nbsp;and&amp;nbsp;they&amp;nbsp;will&amp;nbsp;block&amp;nbsp;as&lt;br&gt;
necessary&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;the&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;complete.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;contrast&amp;nbsp;to&amp;nbsp;the&amp;nbsp;norm,&amp;nbsp;the&amp;nbsp;older&amp;nbsp;Hashtable&amp;nbsp;and&amp;nbsp;Vector&amp;nbsp;collections&lt;br&gt;
are&amp;nbsp;synchronized&amp;nbsp;by&amp;nbsp;default&amp;nbsp;(and,&amp;nbsp;therefore,&amp;nbsp;may&amp;nbsp;be&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;slower&amp;nbsp;when&lt;br&gt;
that’s&amp;nbsp;not&amp;nbsp;needed).&amp;nbsp;The&amp;nbsp;“copy&amp;nbsp;on&amp;nbsp;write”&amp;nbsp;collection&amp;nbsp;implementations&amp;nbsp;that&lt;br&gt;
we’ll&amp;nbsp;talk&amp;nbsp;about&amp;nbsp;later&amp;nbsp;also&amp;nbsp;do&amp;nbsp;not&amp;nbsp;require&amp;nbsp;synchronization&lt;br&gt;
for&amp;nbsp;their&amp;nbsp;special&amp;nbsp;applications.&amp;nbsp;Finally,&amp;nbsp;the&amp;nbsp;ConcurrentHashMap&amp;nbsp;and&amp;nbsp;ConcurrentLinkedQueue&lt;br&gt;
implementations&amp;nbsp;that&amp;nbsp;we’ll&amp;nbsp;cover&amp;nbsp;later&amp;nbsp;are&amp;nbsp;threadsafe&amp;nbsp;and&amp;nbsp;designed&lt;br&gt;
specifically&amp;nbsp;to&amp;nbsp;support&amp;nbsp;a&amp;nbsp;high&amp;nbsp;degree&amp;nbsp;of&amp;nbsp;concurrent&amp;nbsp;access&amp;nbsp;without&lt;br&gt;
incurring&amp;nbsp;a&amp;nbsp;significant&amp;nbsp;penalty&amp;nbsp;for&amp;nbsp;their&amp;nbsp;internal&amp;nbsp;synchronization.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=======&lt;br&gt;
Synchronizing&amp;nbsp;iterators&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;important,&amp;nbsp;so&amp;nbsp;remember&amp;nbsp;this!&amp;nbsp;Although&amp;nbsp;synchronized&amp;nbsp;collections&lt;br&gt;
are&amp;nbsp;threadsafe,&amp;nbsp;the&amp;nbsp;Iterators&amp;nbsp;returned&amp;nbsp;from&amp;nbsp;them&amp;nbsp;are&amp;nbsp;not.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;obtain&lt;br&gt;
an&amp;nbsp;Iterator&amp;nbsp;from&amp;nbsp;a&amp;nbsp;collection,&amp;nbsp;you&amp;nbsp;should&amp;nbsp;do&amp;nbsp;your&amp;nbsp;own&amp;nbsp;synchronization&lt;br&gt;
to&amp;nbsp;ensure&amp;nbsp;that&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;does&amp;nbsp;not&amp;nbsp;change&amp;nbsp;as&amp;nbsp;you’re&amp;nbsp;iterating&amp;nbsp;through&lt;br&gt;
its&amp;nbsp;elements.&amp;nbsp;A&amp;nbsp;convention&amp;nbsp;does&amp;nbsp;this&amp;nbsp;by&amp;nbsp;synchronizing&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;collection&amp;nbsp;itself&amp;nbsp;with&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;block:&lt;br&gt;
&lt;br&gt;
synchronized(syncList)&amp;nbsp;{&lt;br&gt;
Iterator&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;syncList.iterator();&lt;br&gt;
//&amp;nbsp;do&amp;nbsp;stuff&amp;nbsp;with&amp;nbsp;the&amp;nbsp;iterator&amp;nbsp;here&lt;br&gt;
}&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;do&amp;nbsp;not&amp;nbsp;synchronize&amp;nbsp;on&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;while&amp;nbsp;iterating&amp;nbsp;and&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;changes,&lt;br&gt;
Java&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;throw&amp;nbsp;a&amp;nbsp;ConcurrentModificationException.&amp;nbsp;However,&amp;nbsp;this&amp;nbsp;is&amp;nbsp;not&lt;br&gt;
guaranteed.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===============&lt;br&gt;
&lt;br&gt;
ConcurrentHashMap&amp;nbsp;and&amp;nbsp;ConcurrentLinkedQueue&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;java.util.concurrent.ConcurrentHashMap&amp;nbsp;class&amp;nbsp;is&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
concurrency&amp;nbsp;utilities&amp;nbsp;package&amp;nbsp;and&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;that&amp;nbsp;performs&amp;nbsp;well&lt;br&gt;
under&amp;nbsp;multithreaded&amp;nbsp;access.&amp;nbsp;A&amp;nbsp;ConcurrentHashMap&amp;nbsp;is&amp;nbsp;safe&amp;nbsp;for&amp;nbsp;access&lt;br&gt;
from&amp;nbsp;multiple&amp;nbsp;threads,&amp;nbsp;!!!&amp;nbsp;but&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;necessarily&amp;nbsp;block&amp;nbsp;threads&amp;nbsp;during&amp;nbsp;operations.&lt;br&gt;
&lt;br&gt;
Instead,&amp;nbsp;some&amp;nbsp;degree&amp;nbsp;of&amp;nbsp;overlapping&amp;nbsp;operations,&amp;nbsp;such&lt;br&gt;
as&amp;nbsp;concurrent&amp;nbsp;reads,&amp;nbsp;are&amp;nbsp;permitted&amp;nbsp;safely.&amp;nbsp;The&amp;nbsp;ConcurrentHashMap&amp;nbsp;can&amp;nbsp;even&lt;br&gt;
allow&amp;nbsp;a&amp;nbsp;limited&amp;nbsp;number&amp;nbsp;of&amp;nbsp;concurrent&amp;nbsp;writes&amp;nbsp;to&amp;nbsp;happen&amp;nbsp;while&amp;nbsp;reads&amp;nbsp;are&amp;nbsp;being&lt;br&gt;
performed.&amp;nbsp;These&amp;nbsp;operations&amp;nbsp;and&amp;nbsp;iterators&amp;nbsp;over&amp;nbsp;the&amp;nbsp;map&amp;nbsp;do&amp;nbsp;not&amp;nbsp;throw&amp;nbsp;a&lt;br&gt;
ConcurrentModificationException,&amp;nbsp;but&amp;nbsp;no&amp;nbsp;guarantees&amp;nbsp;are&amp;nbsp;made&amp;nbsp;as&amp;nbsp;to&lt;br&gt;
exactly&amp;nbsp;when&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;will&amp;nbsp;see&amp;nbsp;another&amp;nbsp;thread’s&lt;br&gt;
work.&amp;nbsp;All&amp;nbsp;views&amp;nbsp;of&amp;nbsp;the&amp;nbsp;map&amp;nbsp;are&amp;nbsp;based&amp;nbsp;upon&amp;nbsp;the&amp;nbsp;most&amp;nbsp;recently&amp;nbsp;committed&amp;nbsp;writes.&lt;br&gt;
&lt;br&gt;
==============================&lt;br&gt;
Read-Only&amp;nbsp;and&amp;nbsp;Read-Mostly&amp;nbsp;Collections&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;class&amp;nbsp;to&amp;nbsp;create&amp;nbsp;read-only&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;any&amp;nbsp;collection:&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Collection&amp;nbsp;unmodifiableCollection(Collection&amp;nbsp;c)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Set&amp;nbsp;unmodifiableSet(Set&amp;nbsp;s)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;List&amp;nbsp;unmodifiableList(List&amp;nbsp;list)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Map&amp;nbsp;unmodifiableMap(Map&amp;nbsp;m)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;SortedSet&amp;nbsp;unmodifiableSortedSet(SortedSet&amp;nbsp;s)&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;SortedMap&amp;nbsp;unmodifiableSortedMap(SortedMap&amp;nbsp;m)&lt;br&gt;
Making&amp;nbsp;unmodifiable&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;collections&amp;nbsp;is&amp;nbsp;a&amp;nbsp;useful&amp;nbsp;way&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;that&amp;nbsp;a&amp;nbsp;collection&lt;br&gt;
handed&amp;nbsp;off&amp;nbsp;to&amp;nbsp;another&amp;nbsp;part&amp;nbsp;of&amp;nbsp;your&amp;nbsp;code&amp;nbsp;is&amp;nbsp;not&amp;nbsp;modified&amp;nbsp;intentionally&amp;nbsp;or&amp;nbsp;inadvertently.&lt;br&gt;
Attempting&amp;nbsp;to&amp;nbsp;modify&amp;nbsp;a&amp;nbsp;read-only&amp;nbsp;collection&amp;nbsp;results&amp;nbsp;in&amp;nbsp;an&amp;nbsp;UnsupportedOperationEx&lt;br&gt;
ception.&lt;br&gt;
Copy-on-write&amp;nbsp;(“read-mostly”)&amp;nbsp;collections&lt;br&gt;
The&amp;nbsp;java.util.concurrent&amp;nbsp;package&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;CopyOnWriteArrayList&amp;nbsp;and&amp;nbsp;CopyOn&lt;br&gt;
WriteArraySet&amp;nbsp;List&amp;nbsp;and&amp;nbsp;Set&amp;nbsp;implementations.&amp;nbsp;These&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;threadsafe&amp;nbsp;and&amp;nbsp;do&amp;nbsp;not&lt;br&gt;
require&amp;nbsp;explicit&amp;nbsp;synchronization,&amp;nbsp;but&amp;nbsp;are&amp;nbsp;heavily&amp;nbsp;optimized&amp;nbsp;for&amp;nbsp;read&amp;nbsp;operations.&amp;nbsp;Any&lt;br&gt;
write&amp;nbsp;operation&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;entire&amp;nbsp;data&amp;nbsp;structure&amp;nbsp;to&amp;nbsp;be&amp;nbsp;copied&amp;nbsp;internally&amp;nbsp;in&amp;nbsp;a&amp;nbsp;blocking&lt;br&gt;
operation.&amp;nbsp;The&amp;nbsp;advantage&amp;nbsp;is&amp;nbsp;that&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;almost&amp;nbsp;always&amp;nbsp;reading,&amp;nbsp;these&amp;nbsp;implementations&lt;br&gt;
are&amp;nbsp;extremely&amp;nbsp;fast&amp;nbsp;and&amp;nbsp;no&amp;nbsp;synchronization&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
&lt;br&gt;
==============&lt;br&gt;
WeakHashMap&lt;br&gt;
In&amp;nbsp;Chapter&amp;nbsp;5,&amp;nbsp;we&amp;nbsp;introduced&amp;nbsp;the&amp;nbsp;idea&amp;nbsp;of&amp;nbsp;weak&amp;nbsp;references—object&amp;nbsp;references&lt;br&gt;
that&amp;nbsp;don’t&amp;nbsp;prevent&amp;nbsp;their&amp;nbsp;objects&amp;nbsp;from&amp;nbsp;being&amp;nbsp;removed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;garbage&amp;nbsp;collector.&lt;br&gt;
WeakHashMap&amp;nbsp;is&amp;nbsp;an&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;Map&amp;nbsp;that&amp;nbsp;makes&amp;nbsp;use&amp;nbsp;of&lt;br&gt;
weak&amp;nbsp;references&amp;nbsp;in&amp;nbsp;its&amp;nbsp;keys&amp;nbsp;and&amp;nbsp;values.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;you&amp;nbsp;don’t&amp;nbsp;have&amp;nbsp;to&lt;br&gt;
remove&amp;nbsp;key/value&amp;nbsp;pairs&amp;nbsp;from&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;when&amp;nbsp;you’re&amp;nbsp;finished&amp;nbsp;with&amp;nbsp;them.&amp;nbsp;Normally,&lt;br&gt;
if&amp;nbsp;you&amp;nbsp;removed&amp;nbsp;all&amp;nbsp;references&amp;nbsp;to&amp;nbsp;a&amp;nbsp;key&amp;nbsp;object&amp;nbsp;from&amp;nbsp;the&amp;nbsp;rest&amp;nbsp;of&amp;nbsp;your&lt;br&gt;
application,&amp;nbsp;the&amp;nbsp;Map&amp;nbsp;would&amp;nbsp;still&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;and&amp;nbsp;keep&amp;nbsp;the&amp;nbsp;object&lt;br&gt;
“alive,”&amp;nbsp;preventing&amp;nbsp;garbage&amp;nbsp;collection.&amp;nbsp;!!!!!&amp;nbsp;WeakHashMap&amp;nbsp;changes&amp;nbsp;this;&amp;nbsp;once&lt;br&gt;
you&amp;nbsp;remove&amp;nbsp;all&amp;nbsp;references&amp;nbsp;to&amp;nbsp;a&amp;nbsp;key&amp;nbsp;object&amp;nbsp;from&amp;nbsp;the&amp;nbsp;rest&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application,&lt;br&gt;
the&amp;nbsp;WeakHashMap&amp;nbsp;lets&amp;nbsp;go&amp;nbsp;of&amp;nbsp;it,&amp;nbsp;too&amp;nbsp;and&amp;nbsp;both&amp;nbsp;the&amp;nbsp;key&amp;nbsp;and&amp;nbsp;its&amp;nbsp;corresponding&lt;br&gt;
value&amp;nbsp;(if&amp;nbsp;it&amp;nbsp;is&amp;nbsp;similarly&amp;nbsp;unreferenced)&amp;nbsp;are&amp;nbsp;eligible&amp;nbsp;for&amp;nbsp;garbage&amp;nbsp;collection.&lt;br&gt;
&lt;br&gt;
=============================&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;Synchronized&amp;nbsp;arraylist&amp;nbsp;?&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;javadoc&amp;nbsp;for&amp;nbsp;the&amp;nbsp;Collections.synchronizedList()&amp;nbsp;explains&amp;nbsp;how&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;the&amp;nbsp;iterator.&amp;nbsp;Basically&amp;nbsp;you&amp;nbsp;do&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;Collections.synchronizedList(new&amp;nbsp;ArrayList());&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
synchronized&amp;nbsp;(list)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;i&amp;nbsp;=&amp;nbsp;list.iterator();&amp;nbsp;//&amp;nbsp;Must&amp;nbsp;be&amp;nbsp;in&amp;nbsp;synchronized&amp;nbsp;block&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(i.hasNext())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;foo(i.next());&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
Another&amp;nbsp;approach&amp;nbsp;is&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;CopyOnWriteArrayList&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;Collections.synchronizedList().&lt;br&gt;
It&amp;nbsp;implements&amp;nbsp;a&amp;nbsp;copy-on-write&amp;nbsp;semantic&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;doesn't&amp;nbsp;require&amp;nbsp;synchronization.&lt;br&gt;
&lt;br&gt;
Consider&amp;nbsp;using&amp;nbsp;a&amp;nbsp;CopyOnWriteArrayList&amp;nbsp;which&amp;nbsp;is&amp;nbsp;thread-safe.&amp;nbsp;Every&amp;nbsp;time&amp;nbsp;you&amp;nbsp;add&amp;nbsp;an&lt;br&gt;
item,&amp;nbsp;a&amp;nbsp;fresh&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;array&amp;nbsp;is&amp;nbsp;created.&amp;nbsp;However,&amp;nbsp;the&amp;nbsp;iterator&amp;nbsp;will&amp;nbsp;not&amp;nbsp;reflect&lt;br&gt;
additions&amp;nbsp;to&amp;nbsp;the&amp;nbsp;list&amp;nbsp;since&amp;nbsp;the&amp;nbsp;iterator&amp;nbsp;was&amp;nbsp;created,&amp;nbsp;but&amp;nbsp;is&amp;nbsp;guaranteed&amp;nbsp;not&amp;nbsp;to&amp;nbsp;throw&amp;nbsp;ConcurrentModificationException.&lt;br&gt;
&lt;br&gt;
arrayList=new&amp;nbsp;CopyOnWriteArrayList();&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Sorting&amp;nbsp;Collections,&amp;nbsp;describe.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;sort&amp;nbsp;TreeMap&amp;nbsp;by&amp;nbsp;values&amp;nbsp;(what&amp;nbsp;is&amp;nbsp;sorted&amp;nbsp;in&amp;nbsp;TreeMap&amp;nbsp;by&amp;nbsp;default&amp;nbsp;:&amp;nbsp;keys&amp;nbsp;or&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values&amp;nbsp;?),&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;Collections&amp;nbsp;utilities&amp;nbsp;include&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;performing&amp;nbsp;common&amp;nbsp;operations&amp;nbsp;like&amp;nbsp;sorting.&lt;br&gt;
Sorting&amp;nbsp;comes&amp;nbsp;in&amp;nbsp;two&amp;nbsp;varieties:&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;sort(List&amp;nbsp;list&amp;nbsp;)&lt;br&gt;
-&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;sort(List&amp;nbsp;list,&amp;nbsp;Comparatorc)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;sorted&amp;nbsp;collections&amp;nbsp;we&amp;nbsp;discussed&amp;nbsp;earlier,&amp;nbsp;SortedSet&amp;nbsp;and&amp;nbsp;SortedMap,&lt;br&gt;
maintain&amp;nbsp;their&amp;nbsp;collections&amp;nbsp;in&amp;nbsp;a&amp;nbsp;specified&amp;nbsp;order&amp;nbsp;using&amp;nbsp;the&amp;nbsp;Comparable&lt;br&gt;
interface&amp;nbsp;of&amp;nbsp;their&amp;nbsp;elements.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;do&amp;nbsp;not&amp;nbsp;implement&amp;nbsp;Comparable,&lt;br&gt;
you&amp;nbsp;must&amp;nbsp;supply&amp;nbsp;a&amp;nbsp;Comparator&amp;nbsp;object&amp;nbsp;yourself&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;implementation.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
Comparator&amp;nbsp;myComparator&amp;nbsp;=&amp;nbsp;...&lt;br&gt;
SortedSet&amp;nbsp;mySet&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeSet(&amp;nbsp;myComparator&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
Collections&amp;nbsp;give&amp;nbsp;you&amp;nbsp;some&amp;nbsp;other&amp;nbsp;interesting&amp;nbsp;capabilities,&amp;nbsp;too.&amp;nbsp;If&amp;nbsp;you’re&amp;nbsp;interested&amp;nbsp;in&lt;br&gt;
learning&amp;nbsp;more,&amp;nbsp;check&amp;nbsp;out&amp;nbsp;the&amp;nbsp;min(),&amp;nbsp;max(),&amp;nbsp;binarySearch(),&amp;nbsp;and&amp;nbsp;reverse()&amp;nbsp;methods.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;sortcollections;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.Comparator;&lt;br&gt;
import&amp;nbsp;java.util.Date;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
import&amp;nbsp;java.util.Set;&lt;br&gt;
import&amp;nbsp;java.util.TreeMap;&lt;br&gt;
import&amp;nbsp;java.util.Vector;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TreeMapExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("TreeMap&amp;nbsp;is&amp;nbsp;sorted&amp;nbsp;collection");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*TreeMap&lt;Integer,Integer&gt;&amp;nbsp;numb3rs&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeMap&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numb3rs.put(0,&amp;nbsp;10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numb3rs.put(-1,&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numb3rs.put(3,&amp;nbsp;-1);&amp;nbsp;//&amp;nbsp;TreeMap&amp;nbsp;-&amp;nbsp;sort&amp;nbsp;keys&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;keys&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;(numb3rs.keySet());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(Integer&amp;nbsp;item&amp;nbsp;:&amp;nbsp;keys){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(numb3rs.get(item));&amp;nbsp;//&amp;nbsp;OUTPUT&amp;nbsp;3&amp;nbsp;10&amp;nbsp;-1&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//====================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;custom&amp;nbsp;comparator&amp;nbsp;,&amp;nbsp;sort&amp;nbsp;by&amp;nbsp;keys&lt;br&gt;
/*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TreeMap&lt;City,&amp;nbsp;String&gt;&amp;nbsp;cities&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeMap&lt;&gt;(new&amp;nbsp;SortByCity());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.put(new&amp;nbsp;City(700),&amp;nbsp;"Lviv");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.put(new&amp;nbsp;City(2300),&amp;nbsp;"Kyiv");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.put(new&amp;nbsp;City(1100),&amp;nbsp;"Odesa");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Set&lt;City&gt;&amp;nbsp;cityKeys&amp;nbsp;=&amp;nbsp;cities.keySet();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(City&amp;nbsp;item&amp;nbsp;:&amp;nbsp;cityKeys){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(cities.get(item));&amp;nbsp;//&amp;nbsp;OUTPUT&amp;nbsp;:&amp;nbsp;Lviv&amp;nbsp;Odesa&amp;nbsp;Kyiv&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//==================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*//&amp;nbsp;custom&amp;nbsp;comparator&amp;nbsp;,&amp;nbsp;sort&amp;nbsp;by&amp;nbsp;values&amp;nbsp;,&amp;nbsp;THIS&amp;nbsp;IS&amp;nbsp;REALLY&amp;nbsp;BAD&amp;nbsp;SOLUTION&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TreeMap&lt;String,&amp;nbsp;City&gt;&amp;nbsp;towns&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeMap&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;towns.put("Strui",&amp;nbsp;new&amp;nbsp;City(45));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;towns.put("Rivne",new&amp;nbsp;City(400));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;towns.put("Ternopil",&amp;nbsp;new&amp;nbsp;City(340));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TreeMap&lt;String,&amp;nbsp;City&gt;&amp;nbsp;sortedTowns&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeMap&lt;&gt;(new&amp;nbsp;SortByCityValues(towns));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sortedTowns.putAll(towns);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(sortedTowns);&amp;nbsp;//&amp;nbsp;Strui&amp;nbsp;Ternopil&amp;nbsp;Rivne&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(sortedTowns.get("Strui"));&amp;nbsp;//&amp;nbsp;RETURN&amp;nbsp;NULL&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;=======================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sort&amp;nbsp;map&amp;nbsp;By&amp;nbsp;values&amp;nbsp;,&amp;nbsp;good&amp;nbsp;solution&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;City&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;population;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;City(int&amp;nbsp;population)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.population&amp;nbsp;=&amp;nbsp;population;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;SortByCity&amp;nbsp;implements&amp;nbsp;Comparator&lt;City&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;compare(City&amp;nbsp;o1,&amp;nbsp;City&amp;nbsp;o2)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;o1.population&amp;nbsp;-&amp;nbsp;o2.population;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;ReALLY&amp;nbsp;bad&amp;nbsp;SOLUTION&lt;br&gt;
class&amp;nbsp;SortByCityValues&amp;nbsp;implements&amp;nbsp;Comparator&lt;String&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&lt;String,&amp;nbsp;City&gt;&amp;nbsp;base;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;SortByCityValues(Map&lt;String,&amp;nbsp;City&gt;&amp;nbsp;base)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.base&amp;nbsp;=&amp;nbsp;base;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;compare(String&amp;nbsp;o1,&amp;nbsp;String&amp;nbsp;o2)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(base.get(o1).population&amp;nbsp;&gt;=&amp;nbsp;base.get(o2).population){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;-1;&amp;nbsp;//&amp;nbsp;like&amp;nbsp;method&amp;nbsp;compareTo&amp;nbsp;works&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=========================================&lt;br&gt;
Sorting&amp;nbsp;Map&amp;nbsp;by&amp;nbsp;values&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;overall&amp;nbsp;idea&amp;nbsp;is,&amp;nbsp;convert&amp;nbsp;the&amp;nbsp;Map&amp;nbsp;into&amp;nbsp;a&amp;nbsp;List,&amp;nbsp;sort&amp;nbsp;the&amp;nbsp;List&amp;nbsp;by&amp;nbsp;Comparator&lt;br&gt;
and&amp;nbsp;put&amp;nbsp;the&amp;nbsp;sorted&amp;nbsp;list&amp;nbsp;back&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Map.&lt;br&gt;
&lt;br&gt;
Map&amp;nbsp;---&gt;&amp;nbsp;List&amp;nbsp;---&gt;&amp;nbsp;Sort&amp;nbsp;---&gt;&amp;nbsp;Map&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.mkyong;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
import&amp;nbsp;java.util.Collections;&lt;br&gt;
import&amp;nbsp;java.util.Comparator;&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
import&amp;nbsp;java.util.Iterator;&lt;br&gt;
import&amp;nbsp;java.util.LinkedHashMap;&lt;br&gt;
import&amp;nbsp;java.util.LinkedList;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SortMapOnValueExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;unsortMap&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;String&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("2",&amp;nbsp;"B");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("1",&amp;nbsp;"A");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("4",&amp;nbsp;"D");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("3",&amp;nbsp;"B");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("7",&amp;nbsp;"C");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("5",&amp;nbsp;"z");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("6",&amp;nbsp;"b");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unsortMap.put("8",&amp;nbsp;"a");&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Unsort&amp;nbsp;Map......");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printMap(unsortMap);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Sorted&amp;nbsp;Map......");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;sortedMap&amp;nbsp;=&amp;nbsp;sortByComparator(unsortMap);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printMap(sortedMap);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;Map&amp;nbsp;sortByComparator(Map&amp;nbsp;unsortMap)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedList(unsortMap.entrySet());&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sort&amp;nbsp;list&amp;nbsp;based&amp;nbsp;on&amp;nbsp;comparator&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.sort(list,&amp;nbsp;new&amp;nbsp;Comparator()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;compare(Object&amp;nbsp;o1,&amp;nbsp;Object&amp;nbsp;o2)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;((Comparable)&amp;nbsp;((Map.Entry)&amp;nbsp;(o1)).getValue())&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.compareTo(((Map.Entry)&amp;nbsp;(o2)).getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;put&amp;nbsp;sorted&amp;nbsp;list&amp;nbsp;into&amp;nbsp;map&amp;nbsp;again&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//LinkedHashMap&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;order&amp;nbsp;in&amp;nbsp;which&amp;nbsp;keys&amp;nbsp;were&amp;nbsp;inserted&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;nbsp;sortedMap&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedHashMap();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Iterator&amp;nbsp;it&amp;nbsp;=&amp;nbsp;list.iterator();&amp;nbsp;it.hasNext();)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map.Entry&amp;nbsp;entry&amp;nbsp;=&amp;nbsp;(Map.Entry)&amp;nbsp;it.next();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sortedMap.put(entry.getKey(),&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;sortedMap;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;printMap(Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;map){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Map.Entry&amp;nbsp;entry&amp;nbsp;:&amp;nbsp;map.entrySet())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Key&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;entry.getKey()&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"&amp;nbsp;Value&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
=========</questionanswer>
  </question>
  <question id="1_0_0_1_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;collections&amp;nbsp;:&amp;nbsp;Properties&amp;nbsp;class,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;information&amp;nbsp;is&amp;nbsp;saved&amp;nbsp;in&amp;nbsp;java.lang.System&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;java.util.Properties&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;specialized&amp;nbsp;hash&amp;nbsp;table&amp;nbsp;for&amp;nbsp;strings.&lt;br&gt;
Properties&amp;nbsp;are&amp;nbsp;generally&amp;nbsp;used&amp;nbsp;to&amp;nbsp;hold&amp;nbsp;textual&amp;nbsp;configuration&amp;nbsp;data.&amp;nbsp;Examples&lt;br&gt;
of&amp;nbsp;this&amp;nbsp;are&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;__System&amp;nbsp;__&amp;nbsp;properties,&amp;nbsp;which&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Java&lt;br&gt;
application&amp;nbsp;on&amp;nbsp;the&amp;nbsp;command&amp;nbsp;line.&amp;nbsp;We’ll&amp;nbsp;cover&amp;nbsp;those&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;section.&lt;br&gt;
More&amp;nbsp;generally,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;a&amp;nbsp;Properties&amp;nbsp;table&amp;nbsp;to&amp;nbsp;hold&amp;nbsp;arbitrary&lt;br&gt;
configuration&amp;nbsp;information&amp;nbsp;for&amp;nbsp;an&amp;nbsp;application&amp;nbsp;in&amp;nbsp;an&amp;nbsp;easily&amp;nbsp;accessible&lt;br&gt;
format.&amp;nbsp;The&amp;nbsp;neat&amp;nbsp;thing&amp;nbsp;about&amp;nbsp;a&amp;nbsp;Properties&amp;nbsp;object&amp;nbsp;is&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;load&lt;br&gt;
and&amp;nbsp;store&amp;nbsp;its&amp;nbsp;information&amp;nbsp;in&amp;nbsp;a&amp;nbsp;plain&amp;nbsp;text&amp;nbsp;or&amp;nbsp;XML&amp;nbsp;text&amp;nbsp;format&amp;nbsp;using&amp;nbsp;streams&lt;br&gt;
&lt;br&gt;
Properties&amp;nbsp;props&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Properties();&lt;br&gt;
props.setProperty("myApp.xsize",&amp;nbsp;"52");&lt;br&gt;
props.setProperty("myApp.ysize",&amp;nbsp;"79");&lt;br&gt;
&lt;br&gt;
===============&lt;br&gt;
!!&amp;nbsp;Write&amp;nbsp;to&amp;nbsp;properties&amp;nbsp;file&lt;br&gt;
&lt;br&gt;
try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Properties&amp;nbsp;prop&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Properties();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OutputStream&amp;nbsp;output&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileOutputStream("config.properties");&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;set&amp;nbsp;the&amp;nbsp;properties&amp;nbsp;value&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prop.setProperty("database",&amp;nbsp;"localhost");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prop.setProperty("dbuser",&amp;nbsp;"mkyong");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prop.setProperty("dbpassword",&amp;nbsp;"password");&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;save&amp;nbsp;properties&amp;nbsp;to&amp;nbsp;project&amp;nbsp;root&amp;nbsp;folder&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prop.store(output,&amp;nbsp;null);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;io)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;io.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(output&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;output.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;&lt;br&gt;
config.properties&lt;br&gt;
#Fri&amp;nbsp;Jan&amp;nbsp;17&amp;nbsp;22:37:45&amp;nbsp;MYT&amp;nbsp;2014&lt;br&gt;
dbpassword=password&lt;br&gt;
database=localhost&lt;br&gt;
dbuser=mkyong&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Load&amp;nbsp;a&amp;nbsp;properties&amp;nbsp;file&lt;br&gt;
&lt;br&gt;
try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Properties&amp;nbsp;prop&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Properties();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStream&amp;nbsp;input&amp;nbsp;=&amp;nbsp;null;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;input&amp;nbsp;=&amp;nbsp;new&amp;nbsp;FileInputStream("config.properties");&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;load&amp;nbsp;a&amp;nbsp;properties&amp;nbsp;file&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prop.load(input);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;get&amp;nbsp;the&amp;nbsp;property&amp;nbsp;value&amp;nbsp;and&amp;nbsp;print&amp;nbsp;it&amp;nbsp;out&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(prop.getProperty("database"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(prop.getProperty("dbuser"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(prop.getProperty("dbpassword"));&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;ex)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ex.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;finally&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(input&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;input.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
=============================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;java.lang.System&amp;nbsp;class&amp;nbsp;provides&amp;nbsp;access&amp;nbsp;to&amp;nbsp;basic&amp;nbsp;system&amp;nbsp;environment&lt;br&gt;
information&amp;nbsp;through&amp;nbsp;the&amp;nbsp;static&amp;nbsp;System.getProperties()&amp;nbsp;method.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;Proper&lt;br&gt;
ties&amp;nbsp;table&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;system&amp;nbsp;properties.&amp;nbsp;System&amp;nbsp;properties&amp;nbsp;take&amp;nbsp;the&amp;nbsp;place&amp;nbsp;of&amp;nbsp;environment&lt;br&gt;
variables&amp;nbsp;in&amp;nbsp;some&amp;nbsp;programming&amp;nbsp;environments.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
main&amp;nbsp;elements&amp;nbsp;:&lt;br&gt;
java.vendor,&amp;nbsp;java.home,&amp;nbsp;os.name,&amp;nbsp;line.separator,&amp;nbsp;user.name&lt;br&gt;
&lt;br&gt;
System.out.println(System.getProperty("user.name"));&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
To&amp;nbsp;get&amp;nbsp;all&amp;nbsp;data&amp;nbsp;from&amp;nbsp;java.lang.System&lt;br&gt;
&amp;nbsp;&amp;nbsp;java.lang.System.getProperties().store(System.out,&amp;nbsp;"System&amp;nbsp;properties");&amp;nbsp;//&amp;nbsp;log&amp;nbsp;to&amp;nbsp;console&amp;nbsp;all&amp;nbsp;data&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Your&amp;nbsp;application&amp;nbsp;can&amp;nbsp;set&amp;nbsp;system&amp;nbsp;properties&amp;nbsp;with&amp;nbsp;the&amp;nbsp;static&amp;nbsp;method&amp;nbsp;System.setProper&lt;br&gt;
ty()&amp;nbsp;.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;also&amp;nbsp;set&amp;nbsp;your&amp;nbsp;own&amp;nbsp;system&amp;nbsp;properties&amp;nbsp;when&amp;nbsp;you&amp;nbsp;run&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;interpreter,&lt;br&gt;
using&amp;nbsp;the&amp;nbsp;-D&amp;nbsp;option:&lt;br&gt;
%&amp;nbsp;java&amp;nbsp;-Dfoo=bar&amp;nbsp;-Dcat=Boojum&amp;nbsp;MyApp&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:12" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;you&amp;nbsp;have&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;products&amp;nbsp;for&amp;nbsp;sale&amp;nbsp;in&amp;nbsp;a&amp;nbsp;database&amp;nbsp;and&lt;br&gt;
you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;display&amp;nbsp;those&amp;nbsp;products&amp;nbsp;on&amp;nbsp;a&amp;nbsp;web&amp;nbsp;page.&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;code&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;server&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;sort&amp;nbsp;the&amp;nbsp;products&amp;nbsp;by&amp;nbsp;price&amp;nbsp;and&amp;nbsp;category.&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;collections&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.util&lt;br&gt;
package&amp;nbsp;best&amp;nbsp;suit&amp;nbsp;your&amp;nbsp;needs&amp;nbsp;for&amp;nbsp;this&amp;nbsp;scenario?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;HashSet&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HashMap&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;PriorityQueue&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;ArrayList&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;HashSet&amp;nbsp;and&amp;nbsp;HashMap&amp;nbsp;classes&amp;nbsp;do&amp;nbsp;not&amp;nbsp;provide&amp;nbsp;ordering&amp;nbsp;or&amp;nbsp;sorting&amp;nbsp;of&lt;br&gt;
items,&amp;nbsp;so&amp;nbsp;they&amp;nbsp;are&amp;nbsp;not&amp;nbsp;good&amp;nbsp;choices&amp;nbsp;in&amp;nbsp;this&amp;nbsp;scenario.&lt;br&gt;
&lt;br&gt;
PriorityQueue&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;processing&amp;nbsp;items&amp;nbsp;based&lt;br&gt;
on&amp;nbsp;a&amp;nbsp;priority,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;not&amp;nbsp;relevant&amp;nbsp;to&amp;nbsp;our&amp;nbsp;needs.&lt;br&gt;
&lt;br&gt;
!!&amp;nbsp;An&amp;nbsp;ArrayList&amp;nbsp;can&amp;nbsp;be&amp;nbsp;ordered&amp;nbsp;and&amp;nbsp;sorted&amp;nbsp;easily&lt;br&gt;
using&amp;nbsp;the&amp;nbsp;Collections&amp;nbsp;class,&amp;nbsp;which&amp;nbsp;makes&amp;nbsp;it&amp;nbsp;a&amp;nbsp;good&amp;nbsp;choice&amp;nbsp;for&amp;nbsp;this&amp;nbsp;scenario</questionanswer>
  </question>
  <question id="1_0_0_1_0:13" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&lt;br&gt;
be&amp;nbsp;sorted&amp;nbsp;in&amp;nbsp;their&amp;nbsp;natural&amp;nbsp;ordering,&amp;nbsp;iterated&amp;nbsp;in&amp;nbsp;descending&amp;nbsp;order,&amp;nbsp;and&lt;br&gt;
each&amp;nbsp;element&amp;nbsp;has&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;string&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;its&amp;nbsp;value.&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;collections&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.util&amp;nbsp;package&amp;nbsp;best&lt;br&gt;
suit&amp;nbsp;your&amp;nbsp;needs&amp;nbsp;for&amp;nbsp;this&amp;nbsp;scenario?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;HashMap&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;TreeMap&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;HashSet&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vector&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
Because&amp;nbsp;each&amp;nbsp;element&amp;nbsp;has&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;string&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;its&amp;nbsp;value,&amp;nbsp;a&amp;nbsp;map&amp;nbsp;is&amp;nbsp;the&amp;nbsp;best&lt;br&gt;
choice&lt;br&gt;
HashMap&amp;nbsp;does&amp;nbsp;not&amp;nbsp;provide&amp;nbsp;specifi&amp;nbsp;c&amp;nbsp;ordering.&amp;nbsp;A&amp;nbsp;TreeMap&amp;nbsp;is&amp;nbsp;always&amp;nbsp;sorted&amp;nbsp;in&amp;nbsp;natural&amp;nbsp;order,&lt;br&gt;
and&amp;nbsp;because&amp;nbsp;it&amp;nbsp;implements&amp;nbsp;NavigableMap&amp;nbsp;,&amp;nbsp;it&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;descending&amp;nbsp;iterator.</questionanswer>
  </question>
  <question id="1_0_0_1_0:14" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
6.&amp;nbsp;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
7.&amp;nbsp;list.add(&amp;#8220;one&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;list.add(&amp;#8220;two&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;list.add(7);&lt;br&gt;
10.&amp;nbsp;for(String&amp;nbsp;s&amp;nbsp;:&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.print(s);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;onetwo&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;onetwo7&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on&amp;nbsp;line&amp;nbsp;9&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;10&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&lt;br&gt;
line&amp;nbsp;9&amp;nbsp;compiles&amp;nbsp;fi&amp;nbsp;ne&amp;nbsp;because&amp;nbsp;the&amp;nbsp;code&amp;nbsp;is&amp;nbsp;not&amp;nbsp;using&amp;nbsp;generics&amp;nbsp;and&amp;nbsp;any&amp;nbsp;Object&amp;nbsp;can&lt;br&gt;
be&amp;nbsp;added&amp;nbsp;to&amp;nbsp;list&lt;br&gt;
Line&amp;nbsp;10&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile&amp;nbsp;because&amp;nbsp;list&amp;nbsp;contains&amp;nbsp;Object&amp;nbsp;references&amp;nbsp;and&lt;br&gt;
the&amp;nbsp;for&amp;nbsp;-&amp;nbsp;each&amp;nbsp;loop&amp;nbsp;is&amp;nbsp;attempting&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;them&amp;nbsp;to&amp;nbsp;String</questionanswer>
  </question>
  <question id="1_0_0_1_0:15" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
6.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
7.&amp;nbsp;list.add(&amp;#8220;one&amp;#8221;);&lt;br&gt;
8.&amp;nbsp;list.add(&amp;#8220;two&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;list.add(7);&lt;br&gt;
10.&amp;nbsp;for(String&amp;nbsp;s&amp;nbsp;:&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
11.&amp;nbsp;System.out.print(s);&lt;br&gt;
12.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;onetwo&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;9&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;10&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_1_0:16" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
3.&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;values&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
4.&amp;nbsp;values.add(4);&lt;br&gt;
5.&amp;nbsp;values.add(5);&lt;br&gt;
6.&amp;nbsp;values.set(1,&amp;nbsp;6);&lt;br&gt;
7.&amp;nbsp;values.remove(0);&lt;br&gt;
8.&amp;nbsp;for(Integer&amp;nbsp;v&amp;nbsp;:&amp;nbsp;values)&amp;nbsp;{&lt;br&gt;
9.&amp;nbsp;System.out.print(v);&lt;br&gt;
10.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;4&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;5&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;6&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;46&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;the&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;events:&lt;br&gt;
1.&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;adds&amp;nbsp;4&amp;nbsp;to&amp;nbsp;values&amp;nbsp;at&amp;nbsp;index&amp;nbsp;0.&lt;br&gt;
2.&amp;nbsp;Line&amp;nbsp;5&amp;nbsp;adds&amp;nbsp;5&amp;nbsp;to&amp;nbsp;values&amp;nbsp;at&amp;nbsp;index&amp;nbsp;1.&lt;br&gt;
3.&amp;nbsp;Line&amp;nbsp;6&amp;nbsp;replaces&amp;nbsp;5&amp;nbsp;with&amp;nbsp;6&amp;nbsp;at&amp;nbsp;index&amp;nbsp;1.&lt;br&gt;
4.&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;removes&amp;nbsp;4&amp;nbsp;from&amp;nbsp;index&amp;nbsp;0,&amp;nbsp;leaving&amp;nbsp;only&amp;nbsp;the&amp;nbsp;6&amp;nbsp;in&amp;nbsp;values.</questionanswer>
  </question>
  <question id="1_0_0_1_0:17" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;valid?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;HashSet&amp;nbsp;&lt;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Number&amp;nbsp;&gt;&amp;nbsp;hs&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashSet&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Map&amp;nbsp;&lt;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String,&amp;nbsp;?&amp;nbsp;extends&amp;nbsp;Number&amp;nbsp;&gt;&amp;nbsp;hm&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&amp;nbsp;&lt;&amp;nbsp;String,&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;();&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;Object&amp;nbsp;&gt;&amp;nbsp;values&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedHashSet&amp;nbsp;&lt;&amp;nbsp;Object&amp;nbsp;&gt;&amp;nbsp;();&amp;nbsp;$v2end$&lt;br&gt;
$v3$$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
  <question id="1_0_0_1_0:18" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
10.&amp;nbsp;Stack&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;greetings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Stack&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
11.&amp;nbsp;greetings.push(&amp;#8220;hello&amp;#8221;);&lt;br&gt;
12.&amp;nbsp;greetings.push(&amp;#8220;hi&amp;#8221;);&lt;br&gt;
13.&amp;nbsp;greetings.push(&amp;#8220;ola&amp;#8221;);&lt;br&gt;
14.&amp;nbsp;greetings.pop();&lt;br&gt;
15.&amp;nbsp;greetings.peek();&lt;br&gt;
16.&amp;nbsp;Iterator&amp;nbsp;iter&amp;nbsp;=&amp;nbsp;greetings.iterator();&lt;br&gt;
17.&amp;nbsp;while(iter.hasNext())&amp;nbsp;{&lt;br&gt;
18.&amp;nbsp;System.out.print(iter.next());&lt;br&gt;
19.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;hello&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;hellohi&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;hellohiola&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;hihello&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
The&amp;nbsp;strings&amp;nbsp;“&amp;nbsp;hello&amp;nbsp;“&amp;nbsp;,&amp;nbsp;“&amp;nbsp;hi&amp;nbsp;“&amp;nbsp;,&amp;nbsp;and&amp;nbsp;“&amp;nbsp;ola&amp;nbsp;”&amp;nbsp;are&lt;br&gt;
pushed&amp;nbsp;onto&amp;nbsp;the&amp;nbsp;stack.&lt;br&gt;
The&amp;nbsp;call&amp;nbsp;to&amp;nbsp;peek&amp;nbsp;on&amp;nbsp;line&amp;nbsp;15&amp;nbsp;returns&amp;nbsp;“hi”&amp;nbsp;but&amp;nbsp;does&amp;nbsp;not&amp;nbsp;remove&amp;nbsp;it&amp;nbsp;from&amp;nbsp;the&amp;nbsp;stack.&lt;br&gt;
That&amp;nbsp;leaves&amp;nbsp;“hello”&amp;nbsp;and&amp;nbsp;“hi”&amp;nbsp;on&amp;nbsp;the&amp;nbsp;stack,&amp;nbsp;and&amp;nbsp;they&amp;nbsp;are&amp;nbsp;iterated&amp;nbsp;in&amp;nbsp;that&amp;nbsp;order.</questionanswer>
  </question>
  <question id="1_0_0_1_0:19" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements:&lt;br&gt;
6.&amp;nbsp;Set&amp;nbsp;&lt;&amp;nbsp;Number&amp;nbsp;&gt;&amp;nbsp;numbers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashSet&amp;nbsp;&lt;&amp;nbsp;Number&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
7.&amp;nbsp;numbers.add(new&amp;nbsp;Integer(86));&lt;br&gt;
8.&amp;nbsp;numbers.add(75);&lt;br&gt;
9.&amp;nbsp;numbers.add(new&amp;nbsp;Integer(86));&lt;br&gt;
10.&amp;nbsp;numbers.add(null);&lt;br&gt;
11.&amp;nbsp;numbers.add(309L);&lt;br&gt;
12.&amp;nbsp;Iterator&amp;nbsp;iter&amp;nbsp;=&amp;nbsp;numbers.iterator();&lt;br&gt;
13.&amp;nbsp;while(iter.hasNext())&amp;nbsp;{&lt;br&gt;
14.&amp;nbsp;System.out.print(iter.next());&lt;br&gt;
15.&amp;nbsp;}&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;true?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;The&amp;nbsp;output&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8675null309&amp;nbsp;.&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;The&amp;nbsp;output&amp;nbsp;is&amp;nbsp;indeterminate.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Line&amp;nbsp;6&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;12&amp;nbsp;generates&amp;nbsp;a&amp;nbsp;compiler&amp;nbsp;error.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
Set&amp;nbsp;does&amp;nbsp;not&amp;nbsp;guarantee&amp;nbsp;any&amp;nbsp;specific&amp;nbsp;iteration&amp;nbsp;order,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;iteration&amp;nbsp;order&amp;nbsp;can&lt;br&gt;
change&amp;nbsp;over&amp;nbsp;time</questionanswer>
  </question>
  <question id="1_0_0_1_0:20" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
7.&amp;nbsp;TreeSet&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;tree&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeSet&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
8.&amp;nbsp;tree.add(&amp;#8220;one&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;tree.add(&amp;#8220;One&amp;#8221;);&lt;br&gt;
10.&amp;nbsp;tree.add(&amp;#8220;ONE&amp;#8221;);&lt;br&gt;
11.&amp;nbsp;System.out.println(tree.ceiling(&amp;#8220;On&amp;#8221;));&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;one&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;One&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;ONE&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;On&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
To&amp;nbsp;find&amp;nbsp;the&amp;nbsp;ceiling&amp;nbsp;of&amp;nbsp;“&amp;nbsp;On&amp;nbsp;“&amp;nbsp;,&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;know&amp;nbsp;the&amp;nbsp;natural&amp;nbsp;ordering&amp;nbsp;of&amp;nbsp;the&amp;nbsp;four&amp;nbsp;String&lt;br&gt;
objects,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;“&amp;nbsp;ONE&amp;nbsp;“&amp;nbsp;,&amp;nbsp;“&amp;nbsp;On&amp;nbsp;“&amp;nbsp;,&amp;nbsp;“&amp;nbsp;One&amp;nbsp;“&amp;nbsp;,and&amp;nbsp;then&amp;nbsp;“&amp;nbsp;one&amp;nbsp;“&amp;nbsp;.&amp;nbsp;The&amp;nbsp;ceiling&amp;nbsp;method&amp;nbsp;returns&amp;nbsp;the&lt;br&gt;
least&amp;nbsp;String&amp;nbsp;in&amp;nbsp;tree&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;“&amp;nbsp;On&amp;nbsp;“&amp;nbsp;,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;“&amp;nbsp;One&amp;nbsp;“</questionanswer>
  </question>
  <question id="1_0_0_1_0:21" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Given&amp;nbsp;the&amp;nbsp;following&amp;nbsp;declaration:&lt;br&gt;
Map&amp;nbsp;&lt;&amp;nbsp;String,&amp;nbsp;Double&amp;nbsp;&gt;&amp;nbsp;map&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&amp;nbsp;&lt;&amp;nbsp;String,&amp;nbsp;Double&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
which&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements&amp;nbsp;is&amp;nbsp;valid?&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;map.add(&amp;nbsp;&amp;quot;pi&amp;quot;&amp;nbsp;,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3.14159);&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;map.add(&amp;nbsp;&amp;quot;e&amp;quot;&amp;nbsp;,&amp;nbsp;2.71828D);&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.add('x',&amp;nbsp;new&amp;nbsp;Double(123.4));&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;None&amp;nbsp;of&amp;nbsp;the&amp;nbsp;above&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;trick&amp;nbsp;question!&amp;nbsp;Each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;answers&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;"add"&amp;nbsp;a&amp;nbsp;key&amp;nbsp;-&amp;nbsp;value&amp;nbsp;pair&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
map,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;Map&amp;nbsp;interface&amp;nbsp;does&amp;nbsp;not&amp;nbsp;declare&amp;nbsp;an&amp;nbsp;add&amp;nbsp;method.&amp;nbsp;Instead,&amp;nbsp;you&amp;nbsp;"put"&amp;nbsp;elements&amp;nbsp;in&lt;br&gt;
a&amp;nbsp;map&amp;nbsp;using&amp;nbsp;the&amp;nbsp;put&amp;nbsp;method</questionanswer>
  </question>
  <question id="1_0_0_1_0:22" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;program?&lt;br&gt;
import&amp;nbsp;java.util.*;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;MyComparator&amp;nbsp;implements&amp;nbsp;Comparator&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;compare(String&amp;nbsp;a,&amp;nbsp;String&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;a.toLowerCase().compareTo(b.toLowerCase());&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
String&amp;nbsp;[]&amp;nbsp;values&amp;nbsp;=&amp;nbsp;{&amp;#8220;abc&amp;#8221;,&amp;nbsp;&amp;#8220;Abb&amp;#8221;,&amp;nbsp;&amp;#8220;aab&amp;#8221;};&lt;br&gt;
Arrays.sort(values,&amp;nbsp;new&amp;nbsp;MyComparator());&lt;br&gt;
for(String&amp;nbsp;s&amp;nbsp;:&amp;nbsp;values)&amp;nbsp;{&lt;br&gt;
System.out.print(s&amp;nbsp;+&amp;nbsp;&amp;#8220;&amp;nbsp;&amp;#8220;);&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;aab&amp;nbsp;Abb&amp;nbsp;abc&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Abb&amp;nbsp;aab&amp;nbsp;abc&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;abc&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Abb&amp;nbsp;aab&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;aab&amp;nbsp;abc&amp;nbsp;Abb&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>0&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_1_0:23" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
3.&amp;nbsp;Map&amp;nbsp;&lt;&amp;nbsp;Integer,&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;map&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&amp;nbsp;&lt;&amp;nbsp;Integer,&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;(10);&lt;br&gt;
4.&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;=&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
5.&amp;nbsp;map.put(i,&amp;nbsp;i&amp;nbsp;*&amp;nbsp;i);&lt;br&gt;
6.&amp;nbsp;}&lt;br&gt;
7.&amp;nbsp;System.out.println(map.get(4));&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;16&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;25&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2</questionanswer>
  </question>
  <question id="1_0_0_1_0:24" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
10.&amp;nbsp;int&amp;nbsp;[]&amp;nbsp;random&amp;nbsp;=&amp;nbsp;{6,&amp;nbsp;-4,&amp;nbsp;12,&amp;nbsp;0,&amp;nbsp;-10};&lt;br&gt;
11.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;12;&lt;br&gt;
12.&amp;nbsp;int&amp;nbsp;y&amp;nbsp;=&amp;nbsp;Arrays.binarySearch(random,&amp;nbsp;x);&lt;br&gt;
13.&amp;nbsp;System.out.println(y);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;2&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;4&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;result&amp;nbsp;is&amp;nbsp;undefined.&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Line&amp;nbsp;12&amp;nbsp;throws&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;at&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runtime.&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
Java&amp;nbsp;documentation:&lt;br&gt;
The&amp;nbsp;array&amp;nbsp;must&amp;nbsp;be&amp;nbsp;sorted&amp;nbsp;(as&amp;nbsp;by&amp;nbsp;the&amp;nbsp;sort&amp;nbsp;method,&amp;nbsp;above)&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;making&amp;nbsp;this&amp;nbsp;call.&lt;br&gt;
If&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;sorted,&amp;nbsp;the&amp;nbsp;results&amp;nbsp;are&amp;nbsp;undefined.</questionanswer>
  </question>
  <question id="1_0_0_1_0:25" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
3.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;list&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;asList(10,&amp;nbsp;4,&amp;nbsp;-1,&amp;nbsp;5);&lt;br&gt;
4.&amp;nbsp;Collections.sort(list);&lt;br&gt;
5.&amp;nbsp;Integer&amp;nbsp;[]&amp;nbsp;array&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;list.&amp;nbsp;&lt;&amp;nbsp;Integer&amp;nbsp;&gt;&amp;nbsp;toArray(new&amp;nbsp;Integer[4]);&lt;br&gt;
6.&amp;nbsp;System.out.println(array[0]);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;3&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Line&amp;nbsp;4&amp;nbsp;throws&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;at&amp;nbsp;runtime.&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;5&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;-1&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
The&amp;nbsp;asList&amp;nbsp;method&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;fixed&amp;nbsp;-&amp;nbsp;size&amp;nbsp;list&amp;nbsp;with&amp;nbsp;four&amp;nbsp;Integer&amp;nbsp;objects.&lt;br&gt;
Line&amp;nbsp;5&amp;nbsp;converts&amp;nbsp;the&amp;nbsp;list&amp;nbsp;to&amp;nbsp;an&amp;nbsp;array&amp;nbsp;using&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;toArray&amp;nbsp;method&amp;nbsp;of&amp;nbsp;List</questionanswer>
  </question>
  <question id="1_0_0_1_0:26" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
6.&amp;nbsp;String&amp;nbsp;[]&amp;nbsp;names&amp;nbsp;=&amp;nbsp;{&amp;#8220;Tom&amp;#8221;,&amp;nbsp;&amp;#8220;Dick&amp;#8221;,&amp;nbsp;&amp;#8220;Harry&amp;#8221;};&lt;br&gt;
7.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;names.asList();&lt;br&gt;
8.&amp;nbsp;list.set(0,&amp;nbsp;&amp;#8220;Sue&amp;#8221;);&lt;br&gt;
9.&amp;nbsp;System.out.println(names[0]);&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;Sue&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;Tom&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;7&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;on&amp;nbsp;line&amp;nbsp;8&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>2&lt;br&gt;
The&amp;nbsp;code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile.&amp;nbsp;An&amp;nbsp;array&amp;nbsp;is&amp;nbsp;converted&amp;nbsp;to&amp;nbsp;a&amp;nbsp;list&amp;nbsp;using&amp;nbsp;the&amp;nbsp;static&amp;nbsp;Arrays.&lt;br&gt;
asList&amp;nbsp;method.&amp;nbsp;Line&amp;nbsp;7&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;invoke&amp;nbsp;asList&amp;nbsp;as&amp;nbsp;if&amp;nbsp;it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;method&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array&amp;nbsp;object</questionanswer>
  </question>
  <question id="1_0_0_1_0:27" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code?&lt;br&gt;
4.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;names&amp;nbsp;=&amp;nbsp;Arrays.asList(&amp;quot;Tom&amp;quot;,&amp;nbsp;&amp;quot;Dick&amp;quot;,&lt;br&gt;
&amp;quot;Harry&amp;quot;,&amp;nbsp;&amp;quot;Sue&amp;quot;);&lt;br&gt;
5.&amp;nbsp;Collections.sort(names);&lt;br&gt;
6.&amp;nbsp;int&amp;nbsp;x&amp;nbsp;=&amp;nbsp;Collections.binarySearch(names,&amp;nbsp;&amp;quot;Tom&amp;quot;);&lt;br&gt;
7.&amp;nbsp;System.out.println(x);&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;0&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;1&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;2&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;3&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>3&lt;br&gt;
Binary&amp;nbsp;search&amp;nbsp;return&amp;nbsp;index&amp;nbsp;&gt;=&amp;nbsp;0&amp;nbsp;,&amp;nbsp;or&amp;nbsp;-1&amp;nbsp;if&amp;nbsp;doesnt&amp;nbsp;find&amp;nbsp;value.</questionanswer>
  </question>
  <question id="1_0_0_1_0:28" type="0">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;statements?&lt;br&gt;
10.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;one&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
11.&amp;nbsp;one.add(&amp;#8220;abc&amp;#8221;);&lt;br&gt;
12.&amp;nbsp;List&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;two&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;nbsp;&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;();&lt;br&gt;
13.&amp;nbsp;two.add(&amp;#8220;abc&amp;#8221;);&lt;br&gt;
14.&amp;nbsp;if(one&amp;nbsp;==&amp;nbsp;two)&amp;nbsp;{&lt;br&gt;
15.&amp;nbsp;System.out.println(&amp;#8220;A&amp;#8221;);&lt;br&gt;
16.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;if(one.equals(two))&amp;nbsp;{&lt;br&gt;
17.&amp;nbsp;System.out.println(&amp;#8220;B&amp;#8221;);&lt;br&gt;
18.&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&lt;br&gt;
19.&amp;nbsp;System.out.println(&amp;#8220;C&amp;#8221;);&lt;br&gt;
20.&amp;nbsp;}&lt;br&gt;
$v$&lt;br&gt;
$v0$&amp;nbsp;A&amp;nbsp;$v0end$&lt;br&gt;
$v1$&amp;nbsp;B&amp;nbsp;$v1end$&lt;br&gt;
$v2$&amp;nbsp;C&amp;nbsp;$v2end$&lt;br&gt;
$v3$&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compiler&amp;nbsp;error&amp;nbsp;$v3end$&lt;br&gt;
$vend$&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
Java&amp;nbsp;is&amp;nbsp;cool&amp;nbsp;=)</questionanswer>
  </question>
</questions>
