<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_11_0_3" name="chap4.StringIOandBitsAndPieces" nofquestions="5" nofsubcategories="0" filename="chap4.stringioandbitsandpieces1_0_0_11_0_3.xml">
  <question id="1_0_0_11_0_3:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;read&amp;nbsp;files&amp;nbsp;with&amp;nbsp;BufferReader.lines()&amp;nbsp;method,&lt;br&gt;
and&amp;nbsp;listing&amp;nbsp;files&amp;nbsp;in&amp;nbsp;Directory&amp;nbsp;using&amp;nbsp;Files.list()&amp;nbsp;method,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;1&amp;nbsp;&lt;br&gt;
package&amp;nbsp;part4StringsBitsAndOther;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.BufferedReader;&lt;br&gt;
import&amp;nbsp;java.io.FileNotFoundException;&lt;br&gt;
import&amp;nbsp;java.io.FileReader;&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.time.Duration;&lt;br&gt;
import&amp;nbsp;java.time.Instant;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ReadingFilesWithJava8&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Reading&amp;nbsp;file&amp;nbsp;in&amp;nbsp;java&amp;nbsp;8&amp;nbsp;");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;begin&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(BufferedReader&amp;nbsp;buf&amp;nbsp;=&amp;nbsp;new&amp;nbsp;BufferedReader(new&amp;nbsp;FileReader("/home/andrew/log.txt")))&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Lines&amp;nbsp;in&amp;nbsp;file&amp;nbsp;which&amp;nbsp;contains&amp;nbsp;'error'&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buf.lines().filter(e-&gt;e.toLowerCase().contains("error")).forEach(System.out::println);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;end&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Operation&amp;nbsp;takes&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Duration.between(begin,&amp;nbsp;end).toMillis()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;miliseconds");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;&amp;nbsp;:&lt;br&gt;
Reading&amp;nbsp;file&amp;nbsp;in&amp;nbsp;java&amp;nbsp;8&amp;nbsp;&lt;br&gt;
Lines&amp;nbsp;in&amp;nbsp;file&amp;nbsp;which&amp;nbsp;contains&amp;nbsp;'error'&amp;nbsp;&lt;br&gt;
second&amp;nbsp;line&amp;nbsp;error&lt;br&gt;
error&amp;nbsp;in&amp;nbsp;50&lt;br&gt;
Operation&amp;nbsp;takes&amp;nbsp;305&amp;nbsp;miliseconds&lt;br&gt;
===========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;2&lt;br&gt;
package&amp;nbsp;part4StringsBitsAndOther;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.io.IOException;&lt;br&gt;
import&amp;nbsp;java.nio.file.Files;&lt;br&gt;
import&amp;nbsp;java.nio.file.Path;&lt;br&gt;
import&amp;nbsp;java.nio.file.Paths;&lt;br&gt;
import&amp;nbsp;java.util.stream.Stream;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ListingDirWithJava8&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Listing&amp;nbsp;directories&amp;nbsp;with&amp;nbsp;java&amp;nbsp;8");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;to&amp;nbsp;visit&amp;nbsp;whole&amp;nbsp;subtree&amp;nbsp;use&amp;nbsp;Files.walk&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;to&amp;nbsp;list&amp;nbsp;only&amp;nbsp;one&amp;nbsp;level&amp;nbsp;in&amp;nbsp;directory&amp;nbsp;use&amp;nbsp;Files.list&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;(Stream&lt;Path&gt;&amp;nbsp;dirList&amp;nbsp;=&amp;nbsp;Files.list(Paths.get("/home/andrew/git")))&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dirList.filter(path&amp;nbsp;-&gt;&amp;nbsp;path.toFile().isDirectory()).forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(IOException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT:&lt;br&gt;
Listing&amp;nbsp;directories&amp;nbsp;with&amp;nbsp;java&amp;nbsp;8&lt;br&gt;
/home/andrew/git/selfcare-boost&lt;br&gt;
/home/andrew/git/xframework&lt;br&gt;
/home/andrew/git/vamt-demo&lt;br&gt;
.........</questionanswer>
  </question>
  <question id="1_0_0_11_0_3:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;New&amp;nbsp;Methods&amp;nbsp;In&amp;nbsp;List&amp;nbsp;Iterator&amp;nbsp;and&amp;nbsp;Collection,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;1&lt;br&gt;
package&amp;nbsp;part4StringsBitsAndOther;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.*;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;NewMethodsInListIterationCollection&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("New&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;List&amp;nbsp;Iterator&amp;nbsp;Collection");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Of&amp;nbsp;course&amp;nbsp;most&amp;nbsp;important&amp;nbsp;are&amp;nbsp;stream()&amp;nbsp;and&amp;nbsp;parallelStream()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;also&amp;nbsp;important&amp;nbsp;is&amp;nbsp;spliterator()&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;method&amp;nbsp;on&amp;nbsp;Iterable&amp;nbsp;'forEach()'&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;mthod&amp;nbsp;on&amp;nbsp;Collection&amp;nbsp;'removeIf()'&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;example&amp;nbsp;list.removeIf(e-&gt;e.length()&gt;3)&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;method&amp;nbsp;on&amp;nbsp;List&amp;nbsp;'replaceAll()'&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;stringList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.add("one");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.add("two");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.add("three");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.add("four");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.replaceAll(s&amp;nbsp;-&gt;&amp;nbsp;s.replace("o",&amp;nbsp;"0"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("After&amp;nbsp;replacing&amp;nbsp;'o'&amp;nbsp;to&amp;nbsp;'0'&amp;nbsp;in&amp;nbsp;all&amp;nbsp;elements");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nAfter&amp;nbsp;removing&amp;nbsp;elements&amp;nbsp;with&amp;nbsp;'r'");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.removeIf(e&amp;nbsp;-&gt;&amp;nbsp;e.contains("r"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringList.forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;&amp;nbsp;:</questionanswer>
  </question>
  <question id="1_0_0_11_0_3:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;nbsp;enhancements&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&lt;br&gt;
//&amp;nbsp;interesting&amp;nbsp;method&amp;nbsp;merge,&amp;nbsp;look&amp;nbsp;on&amp;nbsp;this&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;part4StringsBitsAndOther;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.*;&lt;br&gt;
import&amp;nbsp;java.util.stream.Stream;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;MapEnhancements&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Java&amp;nbsp;8&amp;nbsp;map&amp;nbsp;enhancements");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;method&amp;nbsp;'forEach()'&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;method&amp;nbsp;'getOrDefault'&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;mthod&amp;nbsp;'putIfAbsent()'&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;signature&amp;nbsp;of&amp;nbsp;remove(key,&amp;nbsp;value)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;methods&amp;nbsp;compute&amp;nbsp;computeIfPresent&amp;nbsp;computeIfAbsent&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;mothod&amp;nbsp;merge&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;==============================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Integer&gt;&amp;nbsp;map&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.put("Lviv",&amp;nbsp;800000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.put("Kyiv",&amp;nbsp;2600000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.put("Kharkiv",&amp;nbsp;1001000);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Get&amp;nbsp;or&amp;nbsp;default");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(map.getOrDefault("Odesa",&amp;nbsp;0));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nReplace&amp;nbsp;values&amp;nbsp;in&amp;nbsp;map");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.replaceAll((s,&amp;nbsp;integer)&amp;nbsp;-&gt;&amp;nbsp;integer&amp;nbsp;&gt;&amp;nbsp;1000000&amp;nbsp;?&amp;nbsp;integer&amp;nbsp;+&amp;nbsp;2&amp;nbsp;:&amp;nbsp;integer);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().forEach(entry&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(entry.getKey()&amp;nbsp;+&amp;nbsp;":"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nRemove&amp;nbsp;some&amp;nbsp;elements&amp;nbsp;from&amp;nbsp;map");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Old&amp;nbsp;way&amp;nbsp;or&amp;nbsp;removing&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*Iterator&lt;Map.Entry&lt;String,&amp;nbsp;Integer&gt;&gt;&amp;nbsp;iterator&amp;nbsp;=&amp;nbsp;map.entrySet().iterator();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(iterator.hasNext()){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map.Entry&lt;String,&amp;nbsp;Integer&gt;&amp;nbsp;elem&amp;nbsp;=&amp;nbsp;iterator.next();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(elem.getValue()&amp;nbsp;&gt;&amp;nbsp;1000000){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iterator.remove();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}*/&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;New&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;way&amp;nbsp;of&amp;nbsp;removing&amp;nbsp;from&amp;nbsp;map&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().removeIf(e&amp;nbsp;-&gt;&amp;nbsp;e.getValue()&amp;nbsp;&gt;&amp;nbsp;1000000);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().forEach(entry&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(entry.getKey()&amp;nbsp;+&amp;nbsp;":"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;If&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;key&amp;nbsp;is&amp;nbsp;not&amp;nbsp;already&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;value&amp;nbsp;or&amp;nbsp;is&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;null,&amp;nbsp;associates&amp;nbsp;it&amp;nbsp;with&amp;nbsp;the&amp;nbsp;given&amp;nbsp;non-null&amp;nbsp;value.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Otherwise,&amp;nbsp;replaces&amp;nbsp;the&amp;nbsp;associated&amp;nbsp;value&amp;nbsp;with&amp;nbsp;the&amp;nbsp;results&amp;nbsp;of&amp;nbsp;the&amp;nbsp;given&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;remapping&amp;nbsp;function,&amp;nbsp;or&amp;nbsp;removes&amp;nbsp;if&amp;nbsp;the&amp;nbsp;result&amp;nbsp;is&amp;nbsp;{@code&amp;nbsp;null}.&amp;nbsp;This&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;method&amp;nbsp;may&amp;nbsp;be&amp;nbsp;of&amp;nbsp;use&amp;nbsp;when&amp;nbsp;combining&amp;nbsp;multiple&amp;nbsp;mapped&amp;nbsp;values&amp;nbsp;for&amp;nbsp;a&amp;nbsp;key.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;to&amp;nbsp;either&amp;nbsp;create&amp;nbsp;or&amp;nbsp;append&amp;nbsp;a&amp;nbsp;{@code&amp;nbsp;String&amp;nbsp;msg}&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;value&amp;nbsp;mapping:*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nMap&amp;nbsp;'merge()'&amp;nbsp;method&amp;nbsp;example");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.merge("Aby-Dabi",&amp;nbsp;1000000,&amp;nbsp;(e,&amp;nbsp;v)&amp;nbsp;-&gt;&amp;nbsp;e&amp;nbsp;+&amp;nbsp;v);&amp;nbsp;//&amp;nbsp;e&amp;nbsp;is&amp;nbsp;old&amp;nbsp;value&amp;nbsp;and&amp;nbsp;v&amp;nbsp;is&amp;nbsp;new&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().forEach(entry&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(entry.getKey()&amp;nbsp;+&amp;nbsp;":"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sorting&amp;nbsp;map&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nSorting&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Integer&gt;&amp;nbsp;sortedCities&amp;nbsp;=&amp;nbsp;sortByValue(map);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().forEach(entry&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(entry.getKey()&amp;nbsp;+&amp;nbsp;":"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;java&amp;nbsp;8&amp;nbsp;sorting&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;&lt;K,&amp;nbsp;V&amp;nbsp;extends&amp;nbsp;Comparable&lt;?&amp;nbsp;super&amp;nbsp;V&gt;&gt;&amp;nbsp;Map&lt;K,&amp;nbsp;V&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sortByValue(Map&lt;K,&amp;nbsp;V&gt;&amp;nbsp;map)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;K,&amp;nbsp;V&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Stream&lt;Map.Entry&lt;K,&amp;nbsp;V&gt;&gt;&amp;nbsp;st&amp;nbsp;=&amp;nbsp;map.entrySet().stream();&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;st.sorted(Comparator.comparing(e&amp;nbsp;-&gt;&amp;nbsp;e.getValue()))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.forEach(e&amp;nbsp;-&gt;&amp;nbsp;result.put(e.getKey(),&amp;nbsp;e.getValue()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;result;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Java&amp;nbsp;8&amp;nbsp;map&amp;nbsp;enhancements&lt;br&gt;
Get&amp;nbsp;or&amp;nbsp;default&lt;br&gt;
0&lt;br&gt;
&lt;br&gt;
Replace&amp;nbsp;values&amp;nbsp;in&amp;nbsp;map&lt;br&gt;
Lviv:800000&lt;br&gt;
Kyiv:2600002&lt;br&gt;
Kharkiv:1001002&lt;br&gt;
&lt;br&gt;
Remove&amp;nbsp;some&amp;nbsp;elements&amp;nbsp;from&amp;nbsp;map&lt;br&gt;
Lviv:800000&lt;br&gt;
&lt;br&gt;
Map&amp;nbsp;'merge()'&amp;nbsp;method&amp;nbsp;example&lt;br&gt;
Lviv:800000&lt;br&gt;
Aby-Dabi:1000000&lt;br&gt;
&lt;br&gt;
Sorting&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value&lt;br&gt;
Lviv:800000&lt;br&gt;
Aby-Dabi:1000000&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_11_0_3:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Comparators&amp;nbsp;enhancements,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;part4StringsBitsAndOther;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.*;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ComparatorsInJava8&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Comparator&amp;nbsp;API&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sorting&amp;nbsp;list,&amp;nbsp;also&amp;nbsp;we&amp;nbsp;assume&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;nulls&amp;nbsp;inside&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;comparing&amp;nbsp;length&amp;nbsp;of&amp;nbsp;string&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;and&amp;nbsp;if&amp;nbsp;length&amp;nbsp;if&amp;nbsp;equal&amp;nbsp;compare&amp;nbsp;count&amp;nbsp;of&amp;nbsp;letter&amp;nbsp;'x'&amp;nbsp;inside&amp;nbsp;strings&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Comparator&lt;String&gt;&amp;nbsp;comp&amp;nbsp;=&amp;nbsp;Comparator.nullsFirst(Comparator.comparing(String::length).thenComparing((e1,e2)-&gt;{&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;xCount1&amp;nbsp;=&amp;nbsp;e1.chars().filter(e-&gt;&amp;nbsp;e==&amp;nbsp;'x').count();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;xCount2&amp;nbsp;=&amp;nbsp;e2.chars().filter(e-&gt;&amp;nbsp;e==&amp;nbsp;'x').count();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;(int)(xCount1&amp;nbsp;-&amp;nbsp;xCount2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;strings&amp;nbsp;=&amp;nbsp;Arrays.asList("xxx",&amp;nbsp;"one",&amp;nbsp;"twelve",&amp;nbsp;"three",&amp;nbsp;"six",&amp;nbsp;null);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strings.sort(comp);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strings.forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sorting&amp;nbsp;map&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Integer&gt;&amp;nbsp;cities&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;&amp;nbsp;:&lt;br&gt;
null&lt;br&gt;
one&lt;br&gt;
six&lt;br&gt;
xxx&lt;br&gt;
three&lt;br&gt;
twelve&lt;br&gt;
==================================&lt;br&gt;
&lt;br&gt;
P.S&amp;nbsp;Method&amp;nbsp;to&amp;nbsp;sort&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;java&amp;nbsp;8&amp;nbsp;sorting&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;&lt;K,&amp;nbsp;V&amp;nbsp;extends&amp;nbsp;Comparable&lt;?&amp;nbsp;super&amp;nbsp;V&gt;&gt;&amp;nbsp;Map&lt;K,&amp;nbsp;V&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sortByValue(Map&lt;K,&amp;nbsp;V&gt;&amp;nbsp;map)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;K,&amp;nbsp;V&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Stream&lt;Map.Entry&lt;K,&amp;nbsp;V&gt;&gt;&amp;nbsp;st&amp;nbsp;=&amp;nbsp;map.entrySet().stream();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;st.sorted&amp;nbsp;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&amp;nbsp;it&amp;nbsp;is&amp;nbsp;cool&amp;nbsp;feature&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;st.sorted(Comparator.comparing(e&amp;nbsp;-&gt;&amp;nbsp;e.getValue()))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.forEach(e&amp;nbsp;-&gt;&amp;nbsp;result.put(e.getKey(),&amp;nbsp;e.getValue()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;result;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
and&amp;nbsp;usage&amp;nbsp;&amp;nbsp;:&lt;br&gt;
//&amp;nbsp;LOOK&amp;nbsp;at&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;sorting&amp;nbsp;map&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("\nSorting&amp;nbsp;map&amp;nbsp;by&amp;nbsp;value");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;String,&amp;nbsp;Integer&gt;&amp;nbsp;sortedCities&amp;nbsp;=&amp;nbsp;sortByValue(map);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.entrySet().forEach(entry&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(entry.getKey()&amp;nbsp;+&amp;nbsp;":"&amp;nbsp;+&amp;nbsp;entry.getValue());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;</questionanswer>
  </question>
</questions>
