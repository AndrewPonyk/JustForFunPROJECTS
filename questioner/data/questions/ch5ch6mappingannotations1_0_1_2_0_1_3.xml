<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_1_2_0_1_3" name="ch5ch6MappingAnnotations" nofquestions="8" nofsubcategories="0" filename="ch5ch6mappingannotations1_0_1_2_0_1_3.xml">
  <question id="1_0_1_2_0_1_3:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;Unidirectional&amp;nbsp;and&amp;nbsp;Bidirectional&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;associations?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;main&amp;nbsp;differenece&amp;nbsp;is&amp;nbsp;that&amp;nbsp;bidirectional&amp;nbsp;relationship&amp;nbsp;provides&amp;nbsp;navigational&amp;nbsp;access&amp;nbsp;in&amp;nbsp;both&amp;nbsp;directions,&lt;br&gt;
so&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;access&amp;nbsp;the&amp;nbsp;other&amp;nbsp;side&amp;nbsp;without&amp;nbsp;explicit&amp;nbsp;queries.&amp;nbsp;Also&amp;nbsp;it&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;apply&amp;nbsp;cascading&amp;nbsp;options&amp;nbsp;to&amp;nbsp;both&amp;nbsp;directions.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
So,&amp;nbsp;I&amp;nbsp;can't&amp;nbsp;agree&amp;nbsp;with&amp;nbsp;the&amp;nbsp;recommendation&amp;nbsp;from&amp;nbsp;the&amp;nbsp;Best&amp;nbsp;Practices.&amp;nbsp;You&amp;nbsp;need&amp;nbsp;to&amp;nbsp;design&amp;nbsp;bidirectional&lt;br&gt;
relationships&amp;nbsp;carefully,&amp;nbsp;considering&amp;nbsp;use&amp;nbsp;cases&amp;nbsp;(do&amp;nbsp;you&amp;nbsp;need&amp;nbsp;navigational&amp;nbsp;access&amp;nbsp;in&amp;nbsp;both&amp;nbsp;directions?)&lt;br&gt;
and&amp;nbsp;possible&amp;nbsp;performance&amp;nbsp;implications.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;SO&amp;nbsp;only&amp;nbsp;one&amp;nbsp;entity&amp;nbsp;has&amp;nbsp;@OneToOne&amp;nbsp;annotation&amp;nbsp;in&amp;nbsp;UNIDIRECTIONAL&amp;nbsp;one&amp;nbsp;to&amp;nbsp;one&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;org.hibernate.Session;&lt;br&gt;
import&amp;nbsp;org.hibernate.Transaction;&lt;br&gt;
import&amp;nbsp;util.SessionUtil;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.*;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ch5UnidirectionalOneToOneProgram&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("&amp;nbsp;Unidirectional&amp;nbsp;one&amp;nbsp;to&amp;nbsp;one.&amp;nbsp;(Entities&amp;nbsp;are&amp;nbsp;Inner&amp;nbsp;Classes)&amp;nbsp;");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;SessionUtil.getSession();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Transaction&amp;nbsp;transaction&amp;nbsp;=&amp;nbsp;session.beginTransaction();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;SAVE&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Author&amp;nbsp;jackLondon&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Author();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jackLondon.setName("Jack&amp;nbsp;London");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Biography&amp;nbsp;jackBio&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Biography();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jackBio.setInformation("Jack&amp;nbsp;London&amp;nbsp;was&amp;nbsp;a&amp;nbsp;19th&amp;nbsp;century&amp;nbsp;American&amp;nbsp;author&amp;nbsp;and&amp;nbsp;journalist,&amp;nbsp;best&amp;nbsp;known&amp;nbsp;for&amp;nbsp;the&amp;nbsp;adventure&amp;nbsp;novels&amp;nbsp;White&amp;nbsp;Fang&amp;nbsp;and&amp;nbsp;The&amp;nbsp;Call&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Wild.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jackLondon.setBiography(jackBio);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(jackLondon);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;READING&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Author&amp;nbsp;jack&amp;nbsp;=&amp;nbsp;(Author)&amp;nbsp;session.createQuery("from&amp;nbsp;Author&amp;nbsp;a").uniqueResult();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("BIO---&gt;&gt;"&amp;nbsp;+&amp;nbsp;&amp;nbsp;jack.getBiography().getInformation());&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.commit();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SessionUtil.closeFactory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Entity(name&amp;nbsp;=&amp;nbsp;"Biography")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Biography&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@GeneratedValue(strategy&amp;nbsp;=&amp;nbsp;GenerationType.AUTO)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Integer&amp;nbsp;authorId;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;information;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Integer&amp;nbsp;getAuthorId()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;authorId;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setAuthorId(Integer&amp;nbsp;authorId)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.authorId&amp;nbsp;=&amp;nbsp;authorId;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getInformation()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;information;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setInformation(String&amp;nbsp;information)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.information&amp;nbsp;=&amp;nbsp;information;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Entity(name&amp;nbsp;=&amp;nbsp;"Author")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Author&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@GeneratedValue(strategy&amp;nbsp;=&amp;nbsp;GenerationType.AUTO)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Integer&amp;nbsp;id;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@OneToOne(cascade=CascadeType.ALL)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@PrimaryKeyJoinColumn&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Biography&amp;nbsp;biography;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Biography&amp;nbsp;getBiography()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;biography;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setBiography(Biography&amp;nbsp;biography)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.biography&amp;nbsp;=&amp;nbsp;biography;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Integer&amp;nbsp;getId()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setId(Integer&amp;nbsp;id)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.id&amp;nbsp;=&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
BIO---&gt;&gt;Jack&amp;nbsp;London&amp;nbsp;was&amp;nbsp;a&amp;nbsp;19th&amp;nbsp;century&amp;nbsp;American&amp;nbsp;author&amp;nbsp;and&amp;nbsp;journalist,&amp;nbsp;best&amp;nbsp;known&amp;nbsp;for&amp;nbsp;the&amp;nbsp;adventure&amp;nbsp;novels&amp;nbsp;White&amp;nbsp;Fang&amp;nbsp;and&amp;nbsp;The&amp;nbsp;Call&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Wild.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;are&amp;nbsp;useful&amp;nbsp;annotations&amp;nbsp;in&amp;nbsp;Hibernate,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Main&amp;nbsp;hibernate&amp;nbsp;annotations&amp;nbsp;are&amp;nbsp;in&amp;nbsp;javax.persistance&amp;nbsp;package&lt;br&gt;
&lt;br&gt;
Annotation&amp;nbsp;Types&amp;nbsp;Summary&lt;br&gt;
Annotation&amp;nbsp;Type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Description&lt;br&gt;
&lt;br&gt;
Access&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;an&amp;nbsp;access&amp;nbsp;type&amp;nbsp;to&amp;nbsp;be&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;class,&amp;nbsp;mapped&amp;nbsp;superclass,&amp;nbsp;or&amp;nbsp;embeddable&amp;nbsp;class,&amp;nbsp;or&amp;nbsp;to&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;attribute&amp;nbsp;of&amp;nbsp;such&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
AssociationOverride&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;override&amp;nbsp;a&amp;nbsp;mapping&amp;nbsp;for&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;relationship.&lt;br&gt;
AssociationOverrides&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;override&amp;nbsp;mappings&amp;nbsp;of&amp;nbsp;multiple&amp;nbsp;relationship&amp;nbsp;properties&amp;nbsp;or&amp;nbsp;fields.&lt;br&gt;
AttributeOverride&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;override&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Basic&amp;nbsp;(whether&amp;nbsp;explicit&amp;nbsp;or&amp;nbsp;default)&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field&amp;nbsp;or&amp;nbsp;Id&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field.&lt;br&gt;
AttributeOverrides&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;override&amp;nbsp;mappings&amp;nbsp;of&amp;nbsp;multiple&amp;nbsp;properties&amp;nbsp;or&amp;nbsp;fields.&lt;br&gt;
Basic&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
The&amp;nbsp;simplest&amp;nbsp;type&amp;nbsp;of&amp;nbsp;mapping&amp;nbsp;to&amp;nbsp;a&amp;nbsp;database&amp;nbsp;column.&lt;br&gt;
Cacheable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;whether&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;should&amp;nbsp;be&amp;nbsp;cached&amp;nbsp;if&amp;nbsp;caching&amp;nbsp;is&amp;nbsp;enabled&amp;nbsp;when&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;persistence.xml&amp;nbsp;caching&amp;nbsp;element&amp;nbsp;is&amp;nbsp;ENABLE_SELECTIVE&amp;nbsp;or&amp;nbsp;DISABLE_SELECTIVE.&lt;br&gt;
CollectionTable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;table&amp;nbsp;that&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;of&amp;nbsp;collections&amp;nbsp;of&amp;nbsp;basic&amp;nbsp;or&amp;nbsp;embeddable&amp;nbsp;types.&lt;br&gt;
Column&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;mapped&amp;nbsp;column&amp;nbsp;for&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field.&lt;br&gt;
ColumnResult&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;the&amp;nbsp;SqlResultSetMapping&amp;nbsp;annotation&amp;nbsp;or&amp;nbsp;ConstructorResult&amp;nbsp;annotation&amp;nbsp;to&amp;nbsp;map&amp;nbsp;a&amp;nbsp;column&amp;nbsp;of&amp;nbsp;the&amp;nbsp;SELECT&amp;nbsp;list&amp;nbsp;of&amp;nbsp;a&amp;nbsp;SQL&amp;nbsp;query.&lt;br&gt;
ConstructorResult&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;the&amp;nbsp;SqlResultSetMapping&amp;nbsp;annotation&amp;nbsp;to&amp;nbsp;map&amp;nbsp;the&amp;nbsp;SELECT&amp;nbsp;clause&amp;nbsp;of&amp;nbsp;a&amp;nbsp;SQL&amp;nbsp;query&amp;nbsp;to&amp;nbsp;a&amp;nbsp;constructor.&lt;br&gt;
Convert&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;conversion&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Basic&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property.&lt;br&gt;
Converter&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;class&amp;nbsp;is&amp;nbsp;a&amp;nbsp;converter&amp;nbsp;and&amp;nbsp;defines&amp;nbsp;its&amp;nbsp;scope.&lt;br&gt;
Converts&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;group&amp;nbsp;Convert&amp;nbsp;annotations.&lt;br&gt;
DiscriminatorColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;discriminator&amp;nbsp;column&amp;nbsp;for&amp;nbsp;the&amp;nbsp;SINGLE_TABLE&amp;nbsp;and&amp;nbsp;JOINED&amp;nbsp;Inheritance&amp;nbsp;mapping&amp;nbsp;strategies.&lt;br&gt;
DiscriminatorValue&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;discriminator&amp;nbsp;column&amp;nbsp;for&amp;nbsp;entities&amp;nbsp;of&amp;nbsp;the&amp;nbsp;given&amp;nbsp;type.&lt;br&gt;
ElementCollection&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;a&amp;nbsp;basic&amp;nbsp;type&amp;nbsp;or&amp;nbsp;embeddable&amp;nbsp;class.&lt;br&gt;
Embeddable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;class&amp;nbsp;whose&amp;nbsp;instances&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;as&amp;nbsp;an&amp;nbsp;intrinsic&amp;nbsp;part&amp;nbsp;of&amp;nbsp;an&amp;nbsp;owning&amp;nbsp;entity&amp;nbsp;and&amp;nbsp;share&amp;nbsp;the&amp;nbsp;identity&amp;nbsp;of&amp;nbsp;the&amp;nbsp;entity.&lt;br&gt;
Embedded&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;whose&amp;nbsp;value&amp;nbsp;is&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;an&amp;nbsp;embeddable&amp;nbsp;class.&lt;br&gt;
EmbeddedId&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Applied&amp;nbsp;to&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;or&amp;nbsp;mapped&amp;nbsp;superclass&amp;nbsp;to&amp;nbsp;denote&amp;nbsp;a&amp;nbsp;composite&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;that&amp;nbsp;is&amp;nbsp;an&amp;nbsp;embeddable&amp;nbsp;class.&lt;br&gt;
Entity&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;an&amp;nbsp;entity.&lt;br&gt;
EntityListeners&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;callback&amp;nbsp;listener&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;or&amp;nbsp;mapped&amp;nbsp;superclass.&lt;br&gt;
EntityResult&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;the&amp;nbsp;SqlResultSetMapping&amp;nbsp;annotation&amp;nbsp;to&amp;nbsp;map&amp;nbsp;the&amp;nbsp;SELECT&amp;nbsp;clause&amp;nbsp;of&amp;nbsp;a&amp;nbsp;SQL&amp;nbsp;query&amp;nbsp;to&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;result.&lt;br&gt;
Enumerated&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field&amp;nbsp;should&amp;nbsp;be&amp;nbsp;persisted&amp;nbsp;as&amp;nbsp;a&amp;nbsp;enumerated&amp;nbsp;type.&lt;br&gt;
ExcludeDefaultListeners&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;the&amp;nbsp;invocation&amp;nbsp;of&amp;nbsp;default&amp;nbsp;listeners&amp;nbsp;is&amp;nbsp;to&amp;nbsp;be&amp;nbsp;excluded&amp;nbsp;for&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;(or&amp;nbsp;mapped&amp;nbsp;superclass)&amp;nbsp;and&amp;nbsp;its&amp;nbsp;subclasses.&lt;br&gt;
ExcludeSuperclassListeners&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;the&amp;nbsp;invocation&amp;nbsp;of&amp;nbsp;superclass&amp;nbsp;listeners&amp;nbsp;is&amp;nbsp;to&amp;nbsp;be&amp;nbsp;excluded&amp;nbsp;for&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;(or&amp;nbsp;mapped&amp;nbsp;superclass)&amp;nbsp;and&amp;nbsp;its&amp;nbsp;subclasses.&lt;br&gt;
FieldResult&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;the&amp;nbsp;EntityResult&amp;nbsp;annotation&amp;nbsp;to&amp;nbsp;map&amp;nbsp;columns&amp;nbsp;specified&amp;nbsp;in&amp;nbsp;the&amp;nbsp;SELECT&amp;nbsp;list&amp;nbsp;of&amp;nbsp;a&amp;nbsp;SQL&amp;nbsp;query&amp;nbsp;to&amp;nbsp;the&amp;nbsp;properties&amp;nbsp;or&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;class.&lt;br&gt;
ForeignKey&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;handling&amp;nbsp;of&amp;nbsp;foreign&amp;nbsp;key&amp;nbsp;constraints&amp;nbsp;when&amp;nbsp;schema&amp;nbsp;generation&amp;nbsp;is&amp;nbsp;in&amp;nbsp;effect.&lt;br&gt;
GeneratedValue&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Provides&amp;nbsp;for&amp;nbsp;the&amp;nbsp;specification&amp;nbsp;of&amp;nbsp;generation&amp;nbsp;strategies&amp;nbsp;for&amp;nbsp;the&amp;nbsp;values&amp;nbsp;of&amp;nbsp;primary&amp;nbsp;keys.&lt;br&gt;
Id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;of&amp;nbsp;an&amp;nbsp;entity.&lt;br&gt;
IdClass&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;composite&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;class&amp;nbsp;that&amp;nbsp;is&amp;nbsp;mapped&amp;nbsp;to&amp;nbsp;multiple&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;properties&amp;nbsp;of&amp;nbsp;the&amp;nbsp;entity.&lt;br&gt;
Index&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;in&amp;nbsp;schema&amp;nbsp;generation&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;creation&amp;nbsp;of&amp;nbsp;an&amp;nbsp;index.&lt;br&gt;
Inheritance&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;inheritance&amp;nbsp;strategy&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;hierarchy.&lt;br&gt;
JoinColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;column&amp;nbsp;for&amp;nbsp;joining&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;association&amp;nbsp;or&amp;nbsp;element&amp;nbsp;collection.&lt;br&gt;
JoinColumns&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;for&amp;nbsp;composite&amp;nbsp;foreign&amp;nbsp;keys.&lt;br&gt;
JoinTable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;of&amp;nbsp;associations.&lt;br&gt;
Lob&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field&amp;nbsp;should&amp;nbsp;be&amp;nbsp;persisted&amp;nbsp;as&amp;nbsp;a&amp;nbsp;large&amp;nbsp;object&amp;nbsp;to&amp;nbsp;a&amp;nbsp;database-supported&amp;nbsp;large&amp;nbsp;object&amp;nbsp;type.&lt;br&gt;
ManyToMany&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;many-valued&amp;nbsp;association&amp;nbsp;with&amp;nbsp;many-to-many&amp;nbsp;multiplicity.&lt;br&gt;
ManyToOne&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;single-valued&amp;nbsp;association&amp;nbsp;to&amp;nbsp;another&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;that&amp;nbsp;has&amp;nbsp;many-to-one&amp;nbsp;multiplicity.&lt;br&gt;
MapKey&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;map&amp;nbsp;key&amp;nbsp;for&amp;nbsp;associations&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Map&amp;nbsp;when&amp;nbsp;the&amp;nbsp;map&amp;nbsp;key&amp;nbsp;is&amp;nbsp;itself&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;or&amp;nbsp;a&amp;nbsp;persistent&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;that&amp;nbsp;is&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;the&amp;nbsp;map.&lt;br&gt;
MapKeyClass&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;map&amp;nbsp;key&amp;nbsp;for&amp;nbsp;associations&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Map.&lt;br&gt;
MapKeyColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;for&amp;nbsp;the&amp;nbsp;key&amp;nbsp;column&amp;nbsp;of&amp;nbsp;a&amp;nbsp;map&amp;nbsp;whose&amp;nbsp;map&amp;nbsp;key&amp;nbsp;is&amp;nbsp;a&amp;nbsp;basic&amp;nbsp;type.&lt;br&gt;
MapKeyEnumerated&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;for&amp;nbsp;a&amp;nbsp;map&amp;nbsp;key&amp;nbsp;whose&amp;nbsp;basic&amp;nbsp;type&amp;nbsp;is&amp;nbsp;an&amp;nbsp;enumerated&amp;nbsp;type.&lt;br&gt;
MapKeyJoinColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;mapping&amp;nbsp;to&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;that&amp;nbsp;is&amp;nbsp;a&amp;nbsp;map&amp;nbsp;key.&lt;br&gt;
MapKeyJoinColumns&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Supports&amp;nbsp;composite&amp;nbsp;map&amp;nbsp;keys&amp;nbsp;that&amp;nbsp;reference&amp;nbsp;entities.&lt;br&gt;
MapKeyTemporal&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
This&amp;nbsp;annotation&amp;nbsp;must&amp;nbsp;be&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;persistent&amp;nbsp;map&amp;nbsp;keys&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;Calendar.&lt;br&gt;
MappedSuperclass&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Designates&amp;nbsp;a&amp;nbsp;class&amp;nbsp;whose&amp;nbsp;mapping&amp;nbsp;information&amp;nbsp;is&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;the&amp;nbsp;entities&amp;nbsp;that&amp;nbsp;inherit&amp;nbsp;from&amp;nbsp;it.&lt;br&gt;
MapsId&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Designates&amp;nbsp;a&amp;nbsp;ManyToOne&amp;nbsp;or&amp;nbsp;OneToOne&amp;nbsp;relationship&amp;nbsp;attribute&amp;nbsp;that&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;for&amp;nbsp;an&amp;nbsp;EmbeddedId&amp;nbsp;primary&amp;nbsp;key,&amp;nbsp;an&amp;nbsp;attribute&amp;nbsp;within&amp;nbsp;an&amp;nbsp;EmbeddedId&amp;nbsp;primary&amp;nbsp;key,&amp;nbsp;or&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;entity.&lt;br&gt;
NamedAttributeNode&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
A&amp;nbsp;NamedAttributeNode&amp;nbsp;is&amp;nbsp;a&amp;nbsp;member&amp;nbsp;element&amp;nbsp;of&amp;nbsp;a&amp;nbsp;NamedEntityGraph.&lt;br&gt;
NamedEntityGraph&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;path&amp;nbsp;and&amp;nbsp;boundaries&amp;nbsp;for&amp;nbsp;a&amp;nbsp;find&amp;nbsp;operation&amp;nbsp;or&amp;nbsp;query.&lt;br&gt;
NamedEntityGraphs&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;group&amp;nbsp;NamedEntityGraph&amp;nbsp;annotations.&lt;br&gt;
NamedNativeQueries&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;multiple&amp;nbsp;native&amp;nbsp;SQL&amp;nbsp;named&amp;nbsp;queries.&lt;br&gt;
NamedNativeQuery&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;named&amp;nbsp;native&amp;nbsp;SQL&amp;nbsp;query.&lt;br&gt;
NamedQueries&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;multiple&amp;nbsp;named&amp;nbsp;Java&amp;nbsp;Persistence&amp;nbsp;query&amp;nbsp;language&amp;nbsp;queries.&lt;br&gt;
NamedQuery&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;static,&amp;nbsp;named&amp;nbsp;query&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Persistence&amp;nbsp;query&amp;nbsp;language.&lt;br&gt;
NamedStoredProcedureQueries&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;multiple&amp;nbsp;named&amp;nbsp;stored&amp;nbsp;procedure&amp;nbsp;queries.&lt;br&gt;
NamedStoredProcedureQuery&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;and&amp;nbsp;names&amp;nbsp;a&amp;nbsp;stored&amp;nbsp;procedure,&amp;nbsp;its&amp;nbsp;parameters,&amp;nbsp;and&amp;nbsp;its&amp;nbsp;result&amp;nbsp;type.&lt;br&gt;
NamedSubgraph&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
A&amp;nbsp;NamedSubgraph&amp;nbsp;is&amp;nbsp;a&amp;nbsp;member&amp;nbsp;element&amp;nbsp;of&amp;nbsp;a&amp;nbsp;NamedEntityGraph.&lt;br&gt;
OneToMany&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;many-valued&amp;nbsp;association&amp;nbsp;with&amp;nbsp;one-to-many&amp;nbsp;multiplicity.&lt;br&gt;
OneToOne&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;single-valued&amp;nbsp;association&amp;nbsp;to&amp;nbsp;another&amp;nbsp;entity&amp;nbsp;that&amp;nbsp;has&amp;nbsp;one-to-one&amp;nbsp;multiplicity.&lt;br&gt;
OrderBy&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;ordering&amp;nbsp;of&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;valued&amp;nbsp;association&amp;nbsp;or&amp;nbsp;element&amp;nbsp;collection&amp;nbsp;at&amp;nbsp;the&amp;nbsp;point&amp;nbsp;when&amp;nbsp;the&amp;nbsp;association&amp;nbsp;or&amp;nbsp;collection&amp;nbsp;is&amp;nbsp;retrieved.&lt;br&gt;
OrderColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;column&amp;nbsp;that&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;maintain&amp;nbsp;the&amp;nbsp;persistent&amp;nbsp;order&amp;nbsp;of&amp;nbsp;a&amp;nbsp;list.&lt;br&gt;
PersistenceContext&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Expresses&amp;nbsp;a&amp;nbsp;dependency&amp;nbsp;on&amp;nbsp;a&amp;nbsp;container-managed&amp;nbsp;EntityManager&amp;nbsp;and&amp;nbsp;its&amp;nbsp;associated&amp;nbsp;persistence&amp;nbsp;context.&lt;br&gt;
PersistenceContexts&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Declares&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;PersistenceContext&amp;nbsp;annotations.&lt;br&gt;
PersistenceProperty&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Describes&amp;nbsp;a&amp;nbsp;single&amp;nbsp;container&amp;nbsp;or&amp;nbsp;persistence&amp;nbsp;provider&amp;nbsp;property.&lt;br&gt;
PersistenceUnit&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Expresses&amp;nbsp;a&amp;nbsp;dependency&amp;nbsp;on&amp;nbsp;an&amp;nbsp;EntityManagerFactory&amp;nbsp;and&amp;nbsp;its&amp;nbsp;associated&amp;nbsp;persistence&amp;nbsp;unit.&lt;br&gt;
PersistenceUnits&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Declares&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;PersistenceUnit&amp;nbsp;annotations.&lt;br&gt;
PostLoad&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PostPersist&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PostRemove&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PostUpdate&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PrePersist&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PreRemove&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PreUpdate&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;callback&amp;nbsp;method&amp;nbsp;for&amp;nbsp;the&amp;nbsp;corresponding&amp;nbsp;lifecycle&amp;nbsp;event.&lt;br&gt;
PrimaryKeyJoinColumn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;column&amp;nbsp;that&amp;nbsp;is&amp;nbsp;used&amp;nbsp;as&amp;nbsp;a&amp;nbsp;foreign&amp;nbsp;key&amp;nbsp;to&amp;nbsp;join&amp;nbsp;to&amp;nbsp;another&amp;nbsp;table.&lt;br&gt;
PrimaryKeyJoinColumns&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Groups&amp;nbsp;PrimaryKeyJoinColumn&amp;nbsp;annotations.&lt;br&gt;
QueryHint&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Used&amp;nbsp;to&amp;nbsp;supply&amp;nbsp;a&amp;nbsp;query&amp;nbsp;property&amp;nbsp;or&amp;nbsp;hint&amp;nbsp;to&amp;nbsp;the&amp;nbsp;NamedQuery&amp;nbsp;or&amp;nbsp;NamedNativeQuery&amp;nbsp;annotation.&lt;br&gt;
SecondaryTable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;secondary&amp;nbsp;table&amp;nbsp;for&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;entity&amp;nbsp;class.&lt;br&gt;
SecondaryTables&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;multiple&amp;nbsp;secondary&amp;nbsp;tables&amp;nbsp;for&amp;nbsp;an&amp;nbsp;entity.&lt;br&gt;
SequenceGenerator&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Defines&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;generator&amp;nbsp;that&amp;nbsp;may&amp;nbsp;be&amp;nbsp;referenced&amp;nbsp;by&amp;nbsp;name&amp;nbsp;when&amp;nbsp;a&amp;nbsp;generator&amp;nbsp;element&amp;nbsp;is&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;the&amp;nbsp;GeneratedValue&amp;nbsp;annotation.&lt;br&gt;
SqlResultSetMapping&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;mapping&amp;nbsp;of&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;a&amp;nbsp;native&amp;nbsp;SQL&amp;nbsp;query&amp;nbsp;or&amp;nbsp;stored&amp;nbsp;procedure.&lt;br&gt;
SqlResultSetMappings&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;define&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;SqlResultSetMapping&amp;nbsp;annotations.&lt;br&gt;
StoredProcedureParameter&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;a&amp;nbsp;parameter&amp;nbsp;of&amp;nbsp;a&amp;nbsp;named&amp;nbsp;stored&amp;nbsp;procedure&amp;nbsp;query.&lt;br&gt;
Table&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;table&amp;nbsp;for&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;entity.&lt;br&gt;
TableGenerator&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Defines&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;generator&amp;nbsp;that&amp;nbsp;may&amp;nbsp;be&amp;nbsp;referenced&amp;nbsp;by&amp;nbsp;name&amp;nbsp;when&amp;nbsp;a&amp;nbsp;generator&amp;nbsp;element&amp;nbsp;is&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;the&amp;nbsp;GeneratedValue&amp;nbsp;annotation.&lt;br&gt;
Temporal&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
This&amp;nbsp;annotation&amp;nbsp;must&amp;nbsp;be&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;persistent&amp;nbsp;fields&amp;nbsp;or&amp;nbsp;properties&amp;nbsp;of&amp;nbsp;type&amp;nbsp;java.util.Date&amp;nbsp;and&amp;nbsp;java.util.Calendar.&lt;br&gt;
Transient&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;the&amp;nbsp;property&amp;nbsp;or&amp;nbsp;field&amp;nbsp;is&amp;nbsp;not&amp;nbsp;persistent.&lt;br&gt;
UniqueConstraint&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;that&amp;nbsp;a&amp;nbsp;unique&amp;nbsp;constraint&amp;nbsp;is&amp;nbsp;to&amp;nbsp;be&amp;nbsp;included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;generated&amp;nbsp;DDL&amp;nbsp;for&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;or&amp;nbsp;secondary&amp;nbsp;table.&lt;br&gt;
Version&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
Specifies&amp;nbsp;the&amp;nbsp;version&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;that&amp;nbsp;serves&amp;nbsp;as&amp;nbsp;its&amp;nbsp;optimistic&amp;nbsp;lock&amp;nbsp;value.</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How&amp;nbsp;to&amp;nbsp;choose&amp;nbsp;the&amp;nbsp;id&amp;nbsp;generation&amp;nbsp;strategy&amp;nbsp;when&amp;nbsp;using&amp;nbsp;Hibernate&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://vladmihalcea.com/2014/07/08/hibernate-identity-sequence-and-table-sequence-generator/&lt;br&gt;
=========================================================&lt;br&gt;
Example&amp;nbsp;of&amp;nbsp;using&amp;nbsp;&amp;nbsp;&lt;br&gt;
....&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@GeneratedValue(strategy&amp;nbsp;=&amp;nbsp;GenerationType.IDENTITY)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Long&amp;nbsp;id;&lt;br&gt;
....&lt;br&gt;
&lt;br&gt;
Introduction&amp;nbsp;In&amp;nbsp;my&amp;nbsp;previous&amp;nbsp;post&amp;nbsp;I&amp;nbsp;talked&amp;nbsp;about&amp;nbsp;different&amp;nbsp;database&amp;nbsp;identifier&amp;nbsp;strategies.&amp;nbsp;This&amp;nbsp;post&amp;nbsp;will&amp;nbsp;compare&amp;nbsp;the&lt;br&gt;
most&amp;nbsp;common&amp;nbsp;surrogate&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;strategies:&amp;nbsp;IDENTITY&amp;nbsp;SEQUENCE&amp;nbsp;TABLE&amp;nbsp;(SEQUENCE)&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IDENTITY&lt;br&gt;
The&amp;nbsp;IDENTITY&amp;nbsp;type&amp;nbsp;(included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;SQL:2003&amp;nbsp;standard)&amp;nbsp;is&amp;nbsp;supported&amp;nbsp;by:&lt;br&gt;
&lt;br&gt;
Oracle&amp;nbsp;12c&lt;br&gt;
SQL&amp;nbsp;Server&lt;br&gt;
MySQL&amp;nbsp;(AUTO_INCREMENT)&lt;br&gt;
DB2&lt;br&gt;
HSQLDB&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;increment&amp;nbsp;process&amp;nbsp;is&amp;nbsp;very&amp;nbsp;efficient&amp;nbsp;since&amp;nbsp;it&amp;nbsp;uses&amp;nbsp;a&amp;nbsp;database&amp;nbsp;internal&amp;nbsp;lightweight&amp;nbsp;locking&amp;nbsp;mechanism&lt;br&gt;
as&amp;nbsp;opposed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;more&amp;nbsp;heavyweight&amp;nbsp;transactional&amp;nbsp;course-grain&amp;nbsp;locks.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;only&amp;nbsp;drawback&amp;nbsp;is&amp;nbsp;that&amp;nbsp;we&amp;nbsp;can’t&amp;nbsp;know&amp;nbsp;the&amp;nbsp;newly&amp;nbsp;assigned&amp;nbsp;value&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;executing&amp;nbsp;the&amp;nbsp;INSERT&amp;nbsp;statement.&lt;br&gt;
This&amp;nbsp;restriction&amp;nbsp;is&amp;nbsp;hinderingthe&amp;nbsp;“transactional&amp;nbsp;write&amp;nbsp;behind”&amp;nbsp;flushing&amp;nbsp;strategy&amp;nbsp;adopted&amp;nbsp;by&amp;nbsp;Hibernate.&lt;br&gt;
For&amp;nbsp;this&amp;nbsp;reason&amp;nbsp;Hibernates&amp;nbsp;disables&amp;nbsp;the&amp;nbsp;JDBC&amp;nbsp;batch&amp;nbsp;support&amp;nbsp;for&amp;nbsp;entities&amp;nbsp;using&amp;nbsp;the&amp;nbsp;IDENTITY&amp;nbsp;generator.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
2)SEQUENCE&lt;br&gt;
The&amp;nbsp;SEQUENCE&amp;nbsp;generator&amp;nbsp;(defined&amp;nbsp;in&amp;nbsp;the&amp;nbsp;SQL:2003&amp;nbsp;standard)&amp;nbsp;is&amp;nbsp;supported&amp;nbsp;by:&lt;br&gt;
&lt;br&gt;
Oracle&lt;br&gt;
SQL&amp;nbsp;Server&amp;nbsp;2012&lt;br&gt;
PostgreSQL&lt;br&gt;
DB2&lt;br&gt;
HSQLDB&lt;br&gt;
&lt;br&gt;
SEQUENCES&amp;nbsp;are&amp;nbsp;much&amp;nbsp;more&amp;nbsp;flexible&amp;nbsp;than&amp;nbsp;IDENTIFIER&amp;nbsp;columns&amp;nbsp;because:&lt;br&gt;
A&amp;nbsp;SEQUENCE&amp;nbsp;is&amp;nbsp;table&amp;nbsp;free&amp;nbsp;and&amp;nbsp;the&amp;nbsp;same&amp;nbsp;sequence&amp;nbsp;can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;multiple&amp;nbsp;columns&amp;nbsp;or&amp;nbsp;tables&lt;br&gt;
A&amp;nbsp;SEQUENCE&amp;nbsp;may&amp;nbsp;preallocate&amp;nbsp;values&amp;nbsp;to&amp;nbsp;improve&amp;nbsp;performance&lt;br&gt;
A&amp;nbsp;SEQUENCE&amp;nbsp;may&amp;nbsp;define&amp;nbsp;an&amp;nbsp;incremental&amp;nbsp;step,&amp;nbsp;allowing&amp;nbsp;us&amp;nbsp;to&amp;nbsp;benefit&amp;nbsp;from&amp;nbsp;a&amp;nbsp;“pooled”&amp;nbsp;Hilo&amp;nbsp;algorithm&lt;br&gt;
A&amp;nbsp;SEQUENCE&amp;nbsp;doesn’t&amp;nbsp;restrict&amp;nbsp;Hibernate&amp;nbsp;JDBC&amp;nbsp;batching&lt;br&gt;
A&amp;nbsp;SEQUENCE&amp;nbsp;doesn’t&amp;nbsp;restrict&amp;nbsp;Hibernate&amp;nbsp;inheritance&amp;nbsp;models&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
3)&amp;nbsp;TABLE&amp;nbsp;(SEQUENCE)&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;another&amp;nbsp;database&amp;nbsp;independent&amp;nbsp;alternative&amp;nbsp;to&amp;nbsp;generating&amp;nbsp;sequences.&amp;nbsp;One&amp;nbsp;or&amp;nbsp;multiple&amp;nbsp;tables&lt;br&gt;
can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;hold&amp;nbsp;the&amp;nbsp;identifier&amp;nbsp;sequence&amp;nbsp;counter.&amp;nbsp;But&amp;nbsp;it&amp;nbsp;means&amp;nbsp;trading&amp;nbsp;write&amp;nbsp;performance&amp;nbsp;for&amp;nbsp;database&amp;nbsp;portability.&lt;br&gt;
&lt;br&gt;
While&amp;nbsp;IDENTITY&amp;nbsp;and&amp;nbsp;SEQUENCES&amp;nbsp;are&amp;nbsp;transaction-less,&amp;nbsp;using&amp;nbsp;a&amp;nbsp;database&amp;nbsp;table&amp;nbsp;mandate&amp;nbsp;ACID,&lt;br&gt;
for&amp;nbsp;synchronizing&amp;nbsp;multiple&amp;nbsp;concurrent&amp;nbsp;id&amp;nbsp;generation&amp;nbsp;requests.&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;made&amp;nbsp;possible&amp;nbsp;by&amp;nbsp;using&amp;nbsp;row-level&amp;nbsp;locking&amp;nbsp;which&amp;nbsp;comes&amp;nbsp;at&amp;nbsp;a&amp;nbsp;higher&amp;nbsp;cost&amp;nbsp;than&amp;nbsp;IDENTITY&amp;nbsp;or&amp;nbsp;SEQUENCE&amp;nbsp;generators.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;sequence&amp;nbsp;must&amp;nbsp;be&amp;nbsp;calculated&amp;nbsp;in&amp;nbsp;a&amp;nbsp;separate&amp;nbsp;database&amp;nbsp;transaction&amp;nbsp;and&amp;nbsp;this&amp;nbsp;requires&amp;nbsp;the&amp;nbsp;IsolationDelegate&lt;br&gt;
mechanism,&amp;nbsp;which&amp;nbsp;has&amp;nbsp;support&amp;nbsp;for&amp;nbsp;both&amp;nbsp;local&amp;nbsp;(JDBC)&amp;nbsp;and&amp;nbsp;global(JTA)&amp;nbsp;transactions.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;local&amp;nbsp;transactions,&amp;nbsp;it&amp;nbsp;must&amp;nbsp;open&amp;nbsp;a&amp;nbsp;new&amp;nbsp;JDBC&amp;nbsp;connection,&amp;nbsp;therefore&amp;nbsp;putting&amp;nbsp;more&amp;nbsp;pressure&amp;nbsp;on&amp;nbsp;the&amp;nbsp;current&amp;nbsp;connection&amp;nbsp;pooling&amp;nbsp;mechanism.&lt;br&gt;
For&amp;nbsp;global&amp;nbsp;transactions,&amp;nbsp;it&amp;nbsp;requires&amp;nbsp;suspending&amp;nbsp;the&amp;nbsp;current&amp;nbsp;running&amp;nbsp;transaction.&amp;nbsp;After&amp;nbsp;the&amp;nbsp;sequence&amp;nbsp;value&lt;br&gt;
is&amp;nbsp;generated,&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;transaction&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;resumed.&amp;nbsp;This&amp;nbsp;process&amp;nbsp;has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;cost,&lt;br&gt;
so&amp;nbsp;the&amp;nbsp;overall&amp;nbsp;application&amp;nbsp;performance&amp;nbsp;might&amp;nbsp;be&amp;nbsp;affected.&lt;br&gt;
============================================================&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Answer&amp;nbsp;from&amp;nbsp;stackoverflow&lt;br&gt;
The&amp;nbsp;API&amp;nbsp;Doc&amp;nbsp;are&amp;nbsp;very&amp;nbsp;clear&amp;nbsp;on&amp;nbsp;this.&lt;br&gt;
&lt;br&gt;
All&amp;nbsp;generators&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;org.hibernate.id.IdentifierGenerator.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;very&amp;nbsp;simple&amp;nbsp;interface.&lt;br&gt;
Some&amp;nbsp;applications&amp;nbsp;can&amp;nbsp;choose&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;their&amp;nbsp;own&amp;nbsp;specialized&amp;nbsp;implementations,&amp;nbsp;however,&amp;nbsp;Hibernate&amp;nbsp;provides&amp;nbsp;a&lt;br&gt;
range&amp;nbsp;of&amp;nbsp;built-in&amp;nbsp;implementations.&amp;nbsp;The&amp;nbsp;shortcut&amp;nbsp;names&amp;nbsp;for&amp;nbsp;the&amp;nbsp;built-in&amp;nbsp;generators&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
&lt;br&gt;
increment&lt;br&gt;
&lt;br&gt;
generates&amp;nbsp;identifiers&amp;nbsp;of&amp;nbsp;type&amp;nbsp;long,&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int&amp;nbsp;that&amp;nbsp;are&amp;nbsp;unique&amp;nbsp;only&amp;nbsp;when&amp;nbsp;no&amp;nbsp;other&amp;nbsp;process&amp;nbsp;is&amp;nbsp;inserting&amp;nbsp;data&amp;nbsp;into&amp;nbsp;the&amp;nbsp;same&amp;nbsp;table.&amp;nbsp;Do&amp;nbsp;not&amp;nbsp;use&amp;nbsp;in&amp;nbsp;a&amp;nbsp;cluster.&lt;br&gt;
&lt;br&gt;
identity&lt;br&gt;
&lt;br&gt;
supports&amp;nbsp;identity&amp;nbsp;columns&amp;nbsp;in&amp;nbsp;DB2,&amp;nbsp;MySQL,&amp;nbsp;MS&amp;nbsp;SQL&amp;nbsp;Server,&amp;nbsp;Sybase&amp;nbsp;and&amp;nbsp;HypersonicSQL.&amp;nbsp;The&amp;nbsp;returned&amp;nbsp;identifier&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;long,&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int.&lt;br&gt;
&lt;br&gt;
sequence&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;a&amp;nbsp;sequence&amp;nbsp;in&amp;nbsp;DB2,&amp;nbsp;PostgreSQL,&amp;nbsp;Oracle,&amp;nbsp;SAP&amp;nbsp;DB,&amp;nbsp;McKoi&amp;nbsp;or&amp;nbsp;a&amp;nbsp;generator&amp;nbsp;in&amp;nbsp;Interbase.&amp;nbsp;The&amp;nbsp;returned&amp;nbsp;identifier&amp;nbsp;is&amp;nbsp;of&amp;nbsp;type&amp;nbsp;long,&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int&lt;br&gt;
&lt;br&gt;
hilo&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;a&amp;nbsp;hi/lo&amp;nbsp;algorithm&amp;nbsp;to&amp;nbsp;efficiently&amp;nbsp;generate&amp;nbsp;identifiers&amp;nbsp;of&amp;nbsp;type&amp;nbsp;long,&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int,&amp;nbsp;given&amp;nbsp;a&amp;nbsp;table&amp;nbsp;and&lt;br&gt;
column&amp;nbsp;(by&amp;nbsp;default&amp;nbsp;hibernate_unique_key&amp;nbsp;and&amp;nbsp;next_hi&amp;nbsp;respectively)&amp;nbsp;as&amp;nbsp;a&amp;nbsp;source&amp;nbsp;of&amp;nbsp;hi&amp;nbsp;values.&lt;br&gt;
The&amp;nbsp;hi/lo&amp;nbsp;algorithm&amp;nbsp;generates&amp;nbsp;identifiers&amp;nbsp;that&amp;nbsp;are&amp;nbsp;unique&amp;nbsp;only&amp;nbsp;for&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;database.&lt;br&gt;
&lt;br&gt;
seqhilo&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;a&amp;nbsp;hi/lo&amp;nbsp;algorithm&amp;nbsp;to&amp;nbsp;efficiently&amp;nbsp;generate&amp;nbsp;identifiers&amp;nbsp;of&amp;nbsp;type&amp;nbsp;long,&amp;nbsp;short&amp;nbsp;or&amp;nbsp;int,&amp;nbsp;given&amp;nbsp;a&amp;nbsp;named&amp;nbsp;database&amp;nbsp;sequence.&lt;br&gt;
&lt;br&gt;
uuid&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;a&amp;nbsp;128-bit&amp;nbsp;UUID&amp;nbsp;algorithm&amp;nbsp;to&amp;nbsp;generate&amp;nbsp;identifiers&amp;nbsp;of&amp;nbsp;type&amp;nbsp;string&amp;nbsp;that&amp;nbsp;are&amp;nbsp;unique&amp;nbsp;within&amp;nbsp;a&amp;nbsp;network&amp;nbsp;(the&amp;nbsp;IP&amp;nbsp;address&amp;nbsp;is&amp;nbsp;used).&lt;br&gt;
The&amp;nbsp;UUID&amp;nbsp;is&amp;nbsp;encoded&amp;nbsp;as&amp;nbsp;a&amp;nbsp;string&amp;nbsp;of&amp;nbsp;32&amp;nbsp;hexadecimal&amp;nbsp;digits&amp;nbsp;in&amp;nbsp;length.&lt;br&gt;
&lt;br&gt;
guid&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;a&amp;nbsp;database-generated&amp;nbsp;GUID&amp;nbsp;string&amp;nbsp;on&amp;nbsp;MS&amp;nbsp;SQL&amp;nbsp;Server&amp;nbsp;and&amp;nbsp;MySQL.&lt;br&gt;
&lt;br&gt;
native&lt;br&gt;
&lt;br&gt;
selects&amp;nbsp;identity,&amp;nbsp;sequence&amp;nbsp;or&amp;nbsp;hilo&amp;nbsp;depending&amp;nbsp;upon&amp;nbsp;the&amp;nbsp;capabilities&amp;nbsp;of&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;database.&lt;br&gt;
&lt;br&gt;
assigned&lt;br&gt;
&lt;br&gt;
lets&amp;nbsp;the&amp;nbsp;application&amp;nbsp;assign&amp;nbsp;an&amp;nbsp;identifier&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object&amp;nbsp;before&amp;nbsp;save()&amp;nbsp;is&amp;nbsp;called.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;the&amp;nbsp;default&amp;nbsp;strategy&amp;nbsp;if&amp;nbsp;no&amp;nbsp;element&amp;nbsp;is&amp;nbsp;specified.&lt;br&gt;
&lt;br&gt;
select&lt;br&gt;
&lt;br&gt;
retrieves&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key,&amp;nbsp;assigned&amp;nbsp;by&amp;nbsp;a&amp;nbsp;database&amp;nbsp;trigger,&amp;nbsp;by&amp;nbsp;selecting&amp;nbsp;the&amp;nbsp;row&amp;nbsp;by&amp;nbsp;some&amp;nbsp;unique&amp;nbsp;key&amp;nbsp;and&amp;nbsp;retrieving&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;value.&lt;br&gt;
&lt;br&gt;
foreign&lt;br&gt;
&lt;br&gt;
uses&amp;nbsp;the&amp;nbsp;identifier&amp;nbsp;of&amp;nbsp;another&amp;nbsp;associated&amp;nbsp;object.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;usually&amp;nbsp;used&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;association.&lt;br&gt;
&lt;br&gt;
sequence-identity&lt;br&gt;
&lt;br&gt;
a&amp;nbsp;specialized&amp;nbsp;sequence&amp;nbsp;generation&amp;nbsp;strategy&amp;nbsp;that&amp;nbsp;utilizes&amp;nbsp;a&amp;nbsp;database&amp;nbsp;sequence&amp;nbsp;for&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;value&amp;nbsp;generation,&amp;nbsp;but&amp;nbsp;combines&amp;nbsp;this&amp;nbsp;with&amp;nbsp;JDBC3&amp;nbsp;getGeneratedKeys&amp;nbsp;to&amp;nbsp;return&amp;nbsp;the&amp;nbsp;generated&amp;nbsp;identifier&amp;nbsp;value&amp;nbsp;as&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;insert&amp;nbsp;statement&amp;nbsp;execution.&amp;nbsp;This&amp;nbsp;strategy&amp;nbsp;is&amp;nbsp;only&amp;nbsp;supported&amp;nbsp;on&amp;nbsp;Oracle&amp;nbsp;10g&amp;nbsp;drivers&amp;nbsp;targeted&amp;nbsp;for&amp;nbsp;JDK&amp;nbsp;1.4.&amp;nbsp;Comments&amp;nbsp;on&amp;nbsp;these&amp;nbsp;insert&amp;nbsp;statements&amp;nbsp;are&amp;nbsp;disabled&amp;nbsp;due&amp;nbsp;to&amp;nbsp;a&amp;nbsp;bug&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Oracle&amp;nbsp;drivers.&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;are&amp;nbsp;building&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;application&amp;nbsp;with&amp;nbsp;not&amp;nbsp;much&amp;nbsp;concurrent&amp;nbsp;users,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;go&amp;nbsp;for&amp;nbsp;increment,&amp;nbsp;identity,&amp;nbsp;hilo&amp;nbsp;etc..&amp;nbsp;These&amp;nbsp;are&amp;nbsp;simple&amp;nbsp;to&amp;nbsp;configure&amp;nbsp;and&amp;nbsp;did&amp;nbsp;not&amp;nbsp;need&amp;nbsp;much&amp;nbsp;coding&amp;nbsp;inside&amp;nbsp;the&amp;nbsp;db.&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;should&amp;nbsp;choose&amp;nbsp;sequence&amp;nbsp;or&amp;nbsp;guid&amp;nbsp;depending&amp;nbsp;on&amp;nbsp;your&amp;nbsp;database.&amp;nbsp;These&amp;nbsp;are&amp;nbsp;safe&amp;nbsp;and&amp;nbsp;better&amp;nbsp;because&amp;nbsp;the&amp;nbsp;id&amp;nbsp;generation&amp;nbsp;will&amp;nbsp;happen&amp;nbsp;inside&amp;nbsp;the&amp;nbsp;database.&lt;br&gt;
&lt;br&gt;
Update:&amp;nbsp;Recently&amp;nbsp;we&amp;nbsp;had&amp;nbsp;an&amp;nbsp;an&amp;nbsp;issue&amp;nbsp;with&amp;nbsp;idendity&amp;nbsp;where&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;(int)&amp;nbsp;this&amp;nbsp;was&amp;nbsp;fixed&amp;nbsp;by&amp;nbsp;using&amp;nbsp;warapper&amp;nbsp;type&amp;nbsp;(Integer)&amp;nbsp;instead.</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Composed&amp;nbsp;@Id&amp;nbsp;in&amp;nbsp;Hibernate,&amp;nbsp;describe.&amp;nbsp;(there&amp;nbsp;are&amp;nbsp;3&amp;nbsp;ways&amp;nbsp;of&lt;br&gt;
doing&amp;nbsp;it&amp;nbsp;in&amp;nbsp;Hibernate)&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>COMPOSED&amp;nbsp;KEY&amp;nbsp;are&amp;nbsp;&amp;nbsp;lead&amp;nbsp;to&amp;nbsp;bugs:&amp;nbsp;developers&amp;nbsp;inevitably&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;class&lt;br&gt;
incorrectly.&amp;nbsp;Or&amp;nbsp;they&amp;nbsp;make&amp;nbsp;it&amp;nbsp;mutable,&amp;nbsp;and&amp;nbsp;modify&amp;nbsp;their&amp;nbsp;value&amp;nbsp;once&amp;nbsp;stored&amp;nbsp;i&amp;nbsp;a&amp;nbsp;HashSet&amp;nbsp;or&amp;nbsp;HashMap&lt;br&gt;
http://stackoverflow.com/questions/14112839/why-are-composite-keys-discouraged-in-hibernate&lt;br&gt;
===================================&lt;br&gt;
Your&amp;nbsp;three&amp;nbsp;strategies&amp;nbsp;for&amp;nbsp;using&amp;nbsp;this&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;class&amp;nbsp;once&amp;nbsp;it&amp;nbsp;has&amp;nbsp;been&amp;nbsp;created&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
1.&amp;nbsp;Mark&amp;nbsp;it&amp;nbsp;as&amp;nbsp;@Embeddable&amp;nbsp;and&amp;nbsp;add&amp;nbsp;to&amp;nbsp;your&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;a&amp;nbsp;normal&amp;nbsp;property&amp;nbsp;for&amp;nbsp;it,&lt;br&gt;
marked&amp;nbsp;with&amp;nbsp;@Id.&lt;br&gt;
2.&amp;nbsp;Add&amp;nbsp;to&amp;nbsp;your&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;a&amp;nbsp;normal&amp;nbsp;property&amp;nbsp;for&amp;nbsp;it,&amp;nbsp;marked&amp;nbsp;with&amp;nbsp;@EmbeddableId.&lt;br&gt;
3.&amp;nbsp;Add&amp;nbsp;properties&amp;nbsp;to&amp;nbsp;your&amp;nbsp;entity&amp;nbsp;class&amp;nbsp;for&amp;nbsp;all&amp;nbsp;of&amp;nbsp;its&amp;nbsp;fields,&amp;nbsp;mark&amp;nbsp;them&amp;nbsp;with&amp;nbsp;@Id,&amp;nbsp;and&amp;nbsp;mark&amp;nbsp;your&lt;br&gt;
entity&amp;nbsp;class&amp;nbsp;with&amp;nbsp;@IdClass,&amp;nbsp;supplying&amp;nbsp;the&amp;nbsp;class&amp;nbsp;of&amp;nbsp;your&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
1)@Embeddable&lt;br&gt;
Example&amp;nbsp;of&amp;nbsp;Using&amp;nbsp;@Embeddable&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;org.hibernate.Session;&lt;br&gt;
import&amp;nbsp;org.hibernate.Transaction;&lt;br&gt;
import&amp;nbsp;util.SessionUtil;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.*;&lt;br&gt;
import&amp;nbsp;java.io.Serializable;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ch5EmbeddableComposeIdProgram&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Id&amp;nbsp;in&amp;nbsp;Hibernate&amp;nbsp;can&amp;nbsp;be&amp;nbsp;composed");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;saveEntityWithComposedId();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getEntitiesWithComposedId();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SessionUtil.closeFactory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;saveEntityWithComposedId(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;SessionUtil.getSession();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Transaction&amp;nbsp;transaction&amp;nbsp;=&amp;nbsp;session.beginTransaction();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ISBN&amp;nbsp;isbn1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ISBN();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn1.setGroup(10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn1.setCheckdigit(1234);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn1.setPublisher(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn1.setTitle(2014);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CPKBook&amp;nbsp;book1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CPKBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book1.setId(isbn1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book1.setName("Name&amp;nbsp;1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(book1);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ISBN&amp;nbsp;isbn2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ISBN();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn2.setGroup(20);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn2.setCheckdigit(278);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn2.setPublisher(2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn2.setTitle(2015);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CPKBook&amp;nbsp;book2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CPKBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book2.setId(isbn2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book2.setName("Name&amp;nbsp;2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(book2);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ISBN&amp;nbsp;isbn3&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ISBN();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn3.setGroup(30);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn3.setCheckdigit(278);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn3.setPublisher(2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isbn3.setTitle(2015);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CPKBook&amp;nbsp;book3&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CPKBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book3.setId(isbn3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;book3.setName("Name&amp;nbsp;3");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(book3);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.commit();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;getEntitiesWithComposedId(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;SessionUtil.getSession();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Transaction&amp;nbsp;transaction&amp;nbsp;=&amp;nbsp;session.beginTransaction();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;session.createQuery("select&amp;nbsp;c.id.publisher&amp;nbsp;from&amp;nbsp;CPKBook&amp;nbsp;c").list();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Ids&amp;nbsp;of&amp;nbsp;Publishers&amp;nbsp;Of&amp;nbsp;books");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Integer&amp;nbsp;item&amp;nbsp;:&amp;nbsp;list){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("============================");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.commit();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Entity(name&amp;nbsp;=&amp;nbsp;"CPKBook")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Table(name&amp;nbsp;=&amp;nbsp;"CPKBook")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;CPKBook{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ISBN&amp;nbsp;id;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ISBN&amp;nbsp;getId()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setId(ISBN&amp;nbsp;id)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.id&amp;nbsp;=&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Embeddable&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;ISBN&amp;nbsp;implements&amp;nbsp;Serializable{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Column(name="group_number")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;//&amp;nbsp;because&amp;nbsp;"group"&amp;nbsp;is&amp;nbsp;an&amp;nbsp;invalid&amp;nbsp;column&amp;nbsp;name&amp;nbsp;for&amp;nbsp;SQL&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;group;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;publisher;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;title;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;checkdigit;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getGroup()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;group;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setGroup(int&amp;nbsp;group)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.group&amp;nbsp;=&amp;nbsp;group;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getPublisher()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;publisher;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setPublisher(int&amp;nbsp;publisher)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.publisher&amp;nbsp;=&amp;nbsp;publisher;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getTitle()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;title;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setTitle(int&amp;nbsp;title)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.title&amp;nbsp;=&amp;nbsp;title;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getCheckdigit()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;checkdigit;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setCheckdigit(int&amp;nbsp;checkdigit)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.checkdigit&amp;nbsp;=&amp;nbsp;checkdigit;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Ids&amp;nbsp;of&amp;nbsp;Publishers&amp;nbsp;Of&amp;nbsp;books&lt;br&gt;
2&lt;br&gt;
2&lt;br&gt;
1&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
2)&lt;br&gt;
Using&amp;nbsp;the&amp;nbsp;@EmbeddedId&amp;nbsp;Annotation&amp;nbsp;to&amp;nbsp;Map&amp;nbsp;a&amp;nbsp;Compound&amp;nbsp;Primary&amp;nbsp;Key&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;chapter06.compoundpk;&lt;br&gt;
import&amp;nbsp;javax.persistence.Column;&lt;br&gt;
import&amp;nbsp;javax.persistence.EmbeddedId;&lt;br&gt;
import&amp;nbsp;javax.persistence.Entity;&lt;br&gt;
import&amp;nbsp;java.io.Serializable;&lt;br&gt;
@Entity&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EmbeddedPKBook&amp;nbsp;{&lt;br&gt;
@EmbeddedId&lt;br&gt;
EmbeddedISBN&amp;nbsp;id;&lt;br&gt;
@Column&lt;br&gt;
String&amp;nbsp;name;&lt;br&gt;
static&amp;nbsp;class&amp;nbsp;EmbeddedISBN&amp;nbsp;implements&amp;nbsp;Serializable&amp;nbsp;{&lt;br&gt;
//&amp;nbsp;looks&amp;nbsp;fundamentally&amp;nbsp;the&amp;nbsp;same&amp;nbsp;as&amp;nbsp;the&amp;nbsp;ISBN&amp;nbsp;class&amp;nbsp;from&amp;nbsp;Listing&amp;nbsp;6-7&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
---------&lt;br&gt;
3)&amp;nbsp;Using&amp;nbsp;the&amp;nbsp;@IdClass&amp;nbsp;and&amp;nbsp;@Id&amp;nbsp;Annotations&amp;nbsp;to&amp;nbsp;Map&amp;nbsp;a&amp;nbsp;Compound&amp;nbsp;Primary&amp;nbsp;Key&lt;br&gt;
package&amp;nbsp;chapter06.compoundpk;&lt;br&gt;
import&amp;nbsp;javax.persistence.Entity;&lt;br&gt;
import&amp;nbsp;javax.persistence.Id;&lt;br&gt;
import&amp;nbsp;javax.persistence.IdClass;&lt;br&gt;
import&amp;nbsp;java.io.Serializable;&lt;br&gt;
@Entity&lt;br&gt;
@IdClass(IdClassBook.EmbeddedISBN.class)&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;IdClassBook&amp;nbsp;{&lt;br&gt;
@Id&lt;br&gt;
int&amp;nbsp;group;&lt;br&gt;
@Id&lt;br&gt;
int&amp;nbsp;publisher;&lt;br&gt;
@Id&lt;br&gt;
int&amp;nbsp;title;&lt;br&gt;
@Id&lt;br&gt;
int&amp;nbsp;checkdigit;&lt;br&gt;
String&amp;nbsp;name;&lt;br&gt;
public&amp;nbsp;IdClassBook()&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;getGroup()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;group;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;setGroup(int&amp;nbsp;group)&amp;nbsp;{&lt;br&gt;
this.group&amp;nbsp;=&amp;nbsp;group;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;getPublisher()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;publisher;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;setPublisher(int&amp;nbsp;publisher)&amp;nbsp;{&lt;br&gt;
this.publisher&amp;nbsp;=&amp;nbsp;publisher;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;getTitle()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;title;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;setTitle(int&amp;nbsp;title)&amp;nbsp;{&lt;br&gt;
this.title&amp;nbsp;=&amp;nbsp;title;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;getCheckdigit()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;checkdigit;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;setCheckdigit(int&amp;nbsp;checkdigit)&amp;nbsp;{&lt;br&gt;
this.checkdigit&amp;nbsp;=&amp;nbsp;checkdigit;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;name;&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
}&lt;br&gt;
static&amp;nbsp;class&amp;nbsp;Emb&amp;nbsp;eddedISBN&amp;nbsp;implements&amp;nbsp;Serializable&amp;nbsp;{&lt;br&gt;
//&amp;nbsp;identical&amp;nbsp;to&amp;nbsp;EmbeddedISBN&amp;nbsp;from&amp;nbsp;Listing&amp;nbsp;6-8&lt;br&gt;
}&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Describe&amp;nbsp;@Table&amp;nbsp;and&amp;nbsp;@SecondaryTable&amp;nbsp;annotations.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;@Basic&amp;nbsp;annotation.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;@Transient&amp;nbsp;annotation?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>By&amp;nbsp;default,&amp;nbsp;table&amp;nbsp;names&amp;nbsp;are&amp;nbsp;derived&amp;nbsp;from&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;names.&amp;nbsp;Therefore,&amp;nbsp;given&amp;nbsp;a&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;with&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;@Entity&lt;br&gt;
annotation,&amp;nbsp;the&amp;nbsp;table&amp;nbsp;name&amp;nbsp;would&amp;nbsp;be&amp;nbsp;“book,”&amp;nbsp;adjusted&amp;nbsp;for&amp;nbsp;the&amp;nbsp;database’s&amp;nbsp;configuration.&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;name&amp;nbsp;is&amp;nbsp;changed&amp;nbsp;(by&amp;nbsp;providing&amp;nbsp;a&amp;nbsp;different&amp;nbsp;name&amp;nbsp;in&amp;nbsp;the&amp;nbsp;@Entity&amp;nbsp;annotation,&amp;nbsp;such&amp;nbsp;as&lt;br&gt;
@Entity("BookThing")),&amp;nbsp;the&amp;nbsp;new&amp;nbsp;name&amp;nbsp;will&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;the&amp;nbsp;table&amp;nbsp;name.&amp;nbsp;(Queries&amp;nbsp;would&amp;nbsp;need&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;name;&lt;br&gt;
from&amp;nbsp;the&amp;nbsp;user’s&amp;nbsp;perspective,&amp;nbsp;the&amp;nbsp;table&amp;nbsp;name&amp;nbsp;would&amp;nbsp;be&amp;nbsp;irrelevant.)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;table&amp;nbsp;name&amp;nbsp;can&amp;nbsp;be&amp;nbsp;customized&amp;nbsp;further,&amp;nbsp;and&amp;nbsp;other&amp;nbsp;database-related&amp;nbsp;attributes&amp;nbsp;can&amp;nbsp;be&amp;nbsp;configured&amp;nbsp;via&amp;nbsp;the&lt;br&gt;
@Table&amp;nbsp;annotation.&amp;nbsp;This&amp;nbsp;annotation&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;many&amp;nbsp;of&amp;nbsp;the&amp;nbsp;details&amp;nbsp;of&amp;nbsp;the&amp;nbsp;table&amp;nbsp;that&amp;nbsp;will&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;persist&lt;br&gt;
the&amp;nbsp;entity&amp;nbsp;in&amp;nbsp;the&amp;nbsp;database.&amp;nbsp;As&amp;nbsp;already&amp;nbsp;pointed&amp;nbsp;out,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;omit&amp;nbsp;the&amp;nbsp;annotation,&amp;nbsp;Hibernate&amp;nbsp;will&amp;nbsp;default&amp;nbsp;to&amp;nbsp;using&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
name&amp;nbsp;for&amp;nbsp;the&amp;nbsp;table&amp;nbsp;name,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;need&amp;nbsp;only&amp;nbsp;provide&amp;nbsp;this&amp;nbsp;annotation&amp;nbsp;if&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;override&amp;nbsp;that&amp;nbsp;behavior.&lt;br&gt;
The&amp;nbsp;@Table&amp;nbsp;annotation&amp;nbsp;provides&amp;nbsp;four&amp;nbsp;attributes,&amp;nbsp;allowing&amp;nbsp;you&amp;nbsp;to&amp;nbsp;override&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;table,&amp;nbsp;its&amp;nbsp;catalog,&amp;nbsp;and&lt;br&gt;
its&amp;nbsp;schema,&amp;nbsp;and&amp;nbsp;to&amp;nbsp;enforce&amp;nbsp;unique&amp;nbsp;constraints&amp;nbsp;on&amp;nbsp;columns&amp;nbsp;in&amp;nbsp;the&amp;nbsp;table.&amp;nbsp;Typically,&amp;nbsp;you&amp;nbsp;would&amp;nbsp;only&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;substitute&lt;br&gt;
table&amp;nbsp;name&amp;nbsp;thus:&amp;nbsp;@Table(name="ORDER_HISTORY").&amp;nbsp;The&amp;nbsp;unique&amp;nbsp;constraints&amp;nbsp;will&amp;nbsp;be&amp;nbsp;applied&amp;nbsp;if&amp;nbsp;the&amp;nbsp;database&amp;nbsp;schema&amp;nbsp;is&lt;br&gt;
generated&amp;nbsp;from&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;classes,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;supplement&amp;nbsp;any&amp;nbsp;column-specific&amp;nbsp;constraints&amp;nbsp;(see&amp;nbsp;discussions&amp;nbsp;of&lt;br&gt;
@Column&amp;nbsp;and&amp;nbsp;@JoinColumn&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter).&amp;nbsp;They&amp;nbsp;are&amp;nbsp;not&amp;nbsp;otherwise&amp;nbsp;enforced.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;@SecondaryTable&amp;nbsp;annotation&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;model&amp;nbsp;an&amp;nbsp;entity&amp;nbsp;bean&amp;nbsp;that&amp;nbsp;is&amp;nbsp;persisted&amp;nbsp;across&amp;nbsp;several&amp;nbsp;different&lt;br&gt;
database&amp;nbsp;tables.&amp;nbsp;Here,&amp;nbsp;in&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;providing&amp;nbsp;an&amp;nbsp;@Table&amp;nbsp;annotation&amp;nbsp;for&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;database&amp;nbsp;table,&amp;nbsp;your&amp;nbsp;entity&amp;nbsp;bean&lt;br&gt;
can&amp;nbsp;have&amp;nbsp;an&amp;nbsp;@SecondaryTable&amp;nbsp;annotation,&amp;nbsp;or&amp;nbsp;an&amp;nbsp;@SecondaryTables&amp;nbsp;annotation&amp;nbsp;in&amp;nbsp;turn&amp;nbsp;containing&amp;nbsp;zero&amp;nbsp;or&amp;nbsp;more&lt;br&gt;
@SecondaryTable&amp;nbsp;annotations.&amp;nbsp;The&amp;nbsp;@SecondaryTable&amp;nbsp;annotation&amp;nbsp;takes&amp;nbsp;the&amp;nbsp;same&amp;nbsp;basic&amp;nbsp;attributes&amp;nbsp;as&amp;nbsp;the&lt;br&gt;
@Table&amp;nbsp;annotation,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;addition&amp;nbsp;of&amp;nbsp;the&amp;nbsp;join&amp;nbsp;attribute.&amp;nbsp;The&amp;nbsp;join&amp;nbsp;attribute&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;join&amp;nbsp;column&amp;nbsp;for&amp;nbsp;the&amp;nbsp;primary&lt;br&gt;
database&amp;nbsp;table.&amp;nbsp;It&amp;nbsp;accepts&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;javax.persistence.PrimaryKeyJoinColumn&amp;nbsp;objects.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;omit&amp;nbsp;the&amp;nbsp;join&lt;br&gt;
attribute,&amp;nbsp;then&amp;nbsp;it&amp;nbsp;will&amp;nbsp;be&amp;nbsp;assumed&amp;nbsp;that&amp;nbsp;the&amp;nbsp;tables&amp;nbsp;are&amp;nbsp;joined&amp;nbsp;on&amp;nbsp;identically&amp;nbsp;named&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;columns.&lt;br&gt;
&lt;br&gt;
P.S&amp;nbsp;@ENTITY&amp;nbsp;-&amp;nbsp;is&amp;nbsp;using&amp;nbsp;in&amp;nbsp;HQL&amp;nbsp;for&amp;nbsp;example&amp;nbsp;(from&amp;nbsp;r&amp;nbsp;Freeroam)&amp;nbsp;&amp;nbsp;Freeroam&amp;nbsp;-&amp;nbsp;is&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;entity&lt;br&gt;
&lt;br&gt;
P.S&amp;nbsp;@Table&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;change&amp;nbsp;table&amp;nbsp;name&amp;nbsp;and&amp;nbsp;set&amp;nbsp;some&amp;nbsp;other&amp;nbsp;properties.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;An&amp;nbsp;Example&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Field&amp;nbsp;Access&amp;nbsp;Entity&amp;nbsp;Mapped&amp;nbsp;Across&amp;nbsp;Two&amp;nbsp;Tables&lt;br&gt;
package&amp;nbsp;chapter06.twotables;&lt;br&gt;
import&amp;nbsp;javax.persistence.*;&lt;br&gt;
@Entity&lt;br&gt;
@Table(name&amp;nbsp;=&amp;nbsp;"customer")&lt;br&gt;
@SecondaryTable(name&amp;nbsp;=&amp;nbsp;"customer_details")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Customer&amp;nbsp;{&lt;br&gt;
@Id&lt;br&gt;
public&amp;nbsp;int&amp;nbsp;id;&lt;br&gt;
public&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
@Column(table&amp;nbsp;=&amp;nbsp;"customer_details")&lt;br&gt;
public&amp;nbsp;String&amp;nbsp;address;&lt;br&gt;
public&amp;nbsp;Customer()&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;of&amp;nbsp;using&amp;nbsp;@Table&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@Table(&lt;br&gt;
name="customer",&lt;br&gt;
uniqueConstraints={@UniqueConstraint(columnNames="name")}&lt;br&gt;
)&lt;br&gt;
@SecondaryTable(name="customer_details")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Customer&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=================================================================&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Basic&lt;br&gt;
By&amp;nbsp;default,&amp;nbsp;properties&amp;nbsp;and&amp;nbsp;instance&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;your&amp;nbsp;POJO&amp;nbsp;are&amp;nbsp;persistent;&amp;nbsp;Hibernate&amp;nbsp;will&amp;nbsp;store&amp;nbsp;their&amp;nbsp;values&amp;nbsp;for&amp;nbsp;you.&lt;br&gt;
The&amp;nbsp;simplest&amp;nbsp;mappings&amp;nbsp;are&amp;nbsp;therefore&amp;nbsp;for&amp;nbsp;the&amp;nbsp;“basic”&amp;nbsp;types.&amp;nbsp;These&amp;nbsp;include&amp;nbsp;primitives,&amp;nbsp;primitive&amp;nbsp;wrappers,&amp;nbsp;arrays&amp;nbsp;of&lt;br&gt;
primitives&amp;nbsp;or&amp;nbsp;wrappers,&amp;nbsp;enumerations,&amp;nbsp;and&amp;nbsp;any&amp;nbsp;types&amp;nbsp;that&amp;nbsp;implement&amp;nbsp;Serializable&amp;nbsp;but&amp;nbsp;are&amp;nbsp;not&amp;nbsp;themselves&amp;nbsp;mapped&lt;br&gt;
entities.&amp;nbsp;These&amp;nbsp;are&amp;nbsp;all&amp;nbsp;mapped&amp;nbsp;implicitly—no&amp;nbsp;annotation&amp;nbsp;is&amp;nbsp;needed.&amp;nbsp;By&amp;nbsp;default,&amp;nbsp;such&amp;nbsp;fields&amp;nbsp;are&amp;nbsp;mapped&amp;nbsp;to&amp;nbsp;a&amp;nbsp;single&lt;br&gt;
column,&amp;nbsp;and&amp;nbsp;eager&amp;nbsp;fetching&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;retrieve&amp;nbsp;them&amp;nbsp;(i.e.,&amp;nbsp;when&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;is&amp;nbsp;retrieved&amp;nbsp;from&amp;nbsp;the&amp;nbsp;database,&amp;nbsp;all&amp;nbsp;the&amp;nbsp;basic&lt;br&gt;
fields&amp;nbsp;and&amp;nbsp;properties&amp;nbsp;are&amp;nbsp;retrieved7).&amp;nbsp;Also,&amp;nbsp;when&amp;nbsp;the&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;primitive,&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;and&amp;nbsp;retrieved&lt;br&gt;
as&amp;nbsp;a&amp;nbsp;null&amp;nbsp;value.&lt;br&gt;
This&amp;nbsp;default&amp;nbsp;behavior&amp;nbsp;can&amp;nbsp;be&amp;nbsp;overridden&amp;nbsp;by&amp;nbsp;applying&amp;nbsp;the&amp;nbsp;@Basic&amp;nbsp;annotation&amp;nbsp;to&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;class&amp;nbsp;member.&lt;br&gt;
The&amp;nbsp;annotation&amp;nbsp;takes&amp;nbsp;two&amp;nbsp;optional&amp;nbsp;attributes,&amp;nbsp;and&amp;nbsp;is&amp;nbsp;itself&amp;nbsp;entirely&amp;nbsp;optional.&amp;nbsp;The&amp;nbsp;first&amp;nbsp;attribute&amp;nbsp;is&amp;nbsp;named&amp;nbsp;optional&amp;nbsp;and&lt;br&gt;
takes&amp;nbsp;a&amp;nbsp;boolean.&amp;nbsp;Defaulting&amp;nbsp;to&amp;nbsp;true,&amp;nbsp;this&amp;nbsp;can&amp;nbsp;be&amp;nbsp;set&amp;nbsp;to&amp;nbsp;false&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;hint&amp;nbsp;to&amp;nbsp;schema&amp;nbsp;generation&amp;nbsp;that&amp;nbsp;the&amp;nbsp;associated&lt;br&gt;
column&amp;nbsp;should&amp;nbsp;be&amp;nbsp;created&amp;nbsp;NOT&amp;nbsp;NULL.&amp;nbsp;The&amp;nbsp;second&amp;nbsp;is&amp;nbsp;named&amp;nbsp;fetch&amp;nbsp;and&amp;nbsp;takes&amp;nbsp;a&amp;nbsp;member&amp;nbsp;of&amp;nbsp;the&amp;nbsp;enumeration&amp;nbsp;FetchType.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;EAGER&amp;nbsp;by&amp;nbsp;default,&amp;nbsp;but&amp;nbsp;can&amp;nbsp;be&amp;nbsp;set&amp;nbsp;to&amp;nbsp;LAZY&amp;nbsp;to&amp;nbsp;permit&amp;nbsp;loading&amp;nbsp;on&amp;nbsp;access&amp;nbsp;of&amp;nbsp;the&amp;nbsp;value.&lt;br&gt;
The&amp;nbsp;use&amp;nbsp;of&amp;nbsp;lazy&amp;nbsp;loading&amp;nbsp;is&amp;nbsp;unlikely&amp;nbsp;to&amp;nbsp;be&amp;nbsp;valuable,&amp;nbsp;except&amp;nbsp;when&amp;nbsp;large&amp;nbsp;serializable&amp;nbsp;objects&amp;nbsp;have&amp;nbsp;been&amp;nbsp;mapped&lt;br&gt;
as&amp;nbsp;basic&amp;nbsp;types&amp;nbsp;(rather&amp;nbsp;than&amp;nbsp;given&amp;nbsp;entity&amp;nbsp;mappings&amp;nbsp;of&amp;nbsp;their&amp;nbsp;own)&amp;nbsp;and&amp;nbsp;retrieval&amp;nbsp;time&amp;nbsp;may&amp;nbsp;become&amp;nbsp;significant.&amp;nbsp;While&lt;br&gt;
the&amp;nbsp;(default)&amp;nbsp;EAGER&amp;nbsp;value&amp;nbsp;must&amp;nbsp;be&amp;nbsp;honored,&amp;nbsp;the&amp;nbsp;LAZY&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;considered&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;hint,&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&amp;nbsp;ignored&amp;nbsp;by&amp;nbsp;the&lt;br&gt;
persistence&amp;nbsp;engine.&lt;br&gt;
The&amp;nbsp;@Basic&amp;nbsp;attribute&amp;nbsp;is&amp;nbsp;usually&amp;nbsp;omitted,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;@Column&amp;nbsp;attribute&amp;nbsp;being&amp;nbsp;used&amp;nbsp;where&amp;nbsp;the&amp;nbsp;@Basic&amp;nbsp;annotation’s&lt;br&gt;
optional&amp;nbsp;attribute&amp;nbsp;might&amp;nbsp;otherwise&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;NOT&amp;nbsp;NULL&amp;nbsp;behavior.&lt;br&gt;
&lt;br&gt;
=============================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Transient&lt;br&gt;
Omitting&amp;nbsp;Persistence&amp;nbsp;with&amp;nbsp;@Transient&lt;br&gt;
Some&amp;nbsp;fields,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;calculated&amp;nbsp;values,&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;at&amp;nbsp;run&amp;nbsp;time&amp;nbsp;only,&amp;nbsp;and&amp;nbsp;they&amp;nbsp;should&amp;nbsp;be&amp;nbsp;discarded&amp;nbsp;from&amp;nbsp;objects&amp;nbsp;as&lt;br&gt;
they&amp;nbsp;are&amp;nbsp;persisted&amp;nbsp;into&amp;nbsp;the&amp;nbsp;database.&amp;nbsp;The&amp;nbsp;JPA&amp;nbsp;specification&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;@Transient&amp;nbsp;annotation&amp;nbsp;for&amp;nbsp;these&amp;nbsp;transient&lt;br&gt;
fields.&amp;nbsp;The&amp;nbsp;@Transient&amp;nbsp;annotation&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;any&amp;nbsp;attributes—you&amp;nbsp;just&amp;nbsp;add&amp;nbsp;it&amp;nbsp;to&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;variable&amp;nbsp;or&amp;nbsp;the&amp;nbsp;getter&lt;br&gt;
method&amp;nbsp;as&amp;nbsp;appropriate&amp;nbsp;for&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;bean’s&amp;nbsp;property&amp;nbsp;access&amp;nbsp;strategy.&lt;br&gt;
The&amp;nbsp;@Transient&amp;nbsp;annotation&amp;nbsp;highlights&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;more&amp;nbsp;important&amp;nbsp;differences&amp;nbsp;between&amp;nbsp;using&amp;nbsp;annotations&amp;nbsp;with&lt;br&gt;
Hibernate&amp;nbsp;and&amp;nbsp;using&amp;nbsp;XML&amp;nbsp;mapping&amp;nbsp;documents.&amp;nbsp;With&amp;nbsp;annotations,&amp;nbsp;Hibernate&amp;nbsp;will&amp;nbsp;default&amp;nbsp;to&amp;nbsp;persisting&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;fields&lt;br&gt;
on&amp;nbsp;a&amp;nbsp;mapped&amp;nbsp;object.&amp;nbsp;When&amp;nbsp;using&amp;nbsp;XML&amp;nbsp;mapping&amp;nbsp;documents,&amp;nbsp;Hibernate&amp;nbsp;requires&amp;nbsp;you&amp;nbsp;to&amp;nbsp;tell&amp;nbsp;it&amp;nbsp;explicitly&amp;nbsp;which&amp;nbsp;fields&lt;br&gt;
will&amp;nbsp;be&amp;nbsp;persisted.8&lt;br&gt;
For&amp;nbsp;our&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;we&amp;nbsp;wanted&amp;nbsp;to&amp;nbsp;add&amp;nbsp;a&amp;nbsp;Date&amp;nbsp;field&amp;nbsp;named&amp;nbsp;publicationDate,&amp;nbsp;not&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;database&amp;nbsp;to&amp;nbsp;our&lt;br&gt;
Book&amp;nbsp;class,&amp;nbsp;we&amp;nbsp;could&amp;nbsp;mark&amp;nbsp;this&amp;nbsp;field&amp;nbsp;transient&amp;nbsp;thus:&lt;br&gt;
@Transient&lt;br&gt;
Date&amp;nbsp;publicationDate;&lt;br&gt;
If&amp;nbsp;we&amp;nbsp;are&amp;nbsp;using&amp;nbsp;a&amp;nbsp;property&amp;nbsp;access&amp;nbsp;strategy&amp;nbsp;for&amp;nbsp;our&amp;nbsp;Book&amp;nbsp;class,&amp;nbsp;we&amp;nbsp;would&amp;nbsp;need&amp;nbsp;to&amp;nbsp;put&amp;nbsp;the&amp;nbsp;@Transient&amp;nbsp;annotation&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;accessor&amp;nbsp;instead.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hibernate&amp;nbsp;@Column&amp;nbsp;annotation,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;@Column&amp;nbsp;annotation&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;details&amp;nbsp;of&amp;nbsp;the&amp;nbsp;column&amp;nbsp;to&amp;nbsp;which&amp;nbsp;a&amp;nbsp;field&lt;br&gt;
or&amp;nbsp;property&amp;nbsp;will&amp;nbsp;be&amp;nbsp;mapped.&amp;nbsp;Some&amp;nbsp;of&amp;nbsp;the&amp;nbsp;details&amp;nbsp;are&amp;nbsp;schema&amp;nbsp;related,&amp;nbsp;and&amp;nbsp;therefore&amp;nbsp;apply&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&lt;br&gt;
schema&amp;nbsp;is&amp;nbsp;generated&amp;nbsp;from&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;files.&amp;nbsp;Others&amp;nbsp;apply&amp;nbsp;and&amp;nbsp;are&amp;nbsp;enforced&amp;nbsp;at&amp;nbsp;run&amp;nbsp;time&amp;nbsp;by&amp;nbsp;Hibernate&lt;br&gt;
(or&amp;nbsp;the&amp;nbsp;JPA&amp;nbsp;2&amp;nbsp;persistence&amp;nbsp;engine).&amp;nbsp;It&amp;nbsp;is&amp;nbsp;optional,&amp;nbsp;with&amp;nbsp;an&amp;nbsp;appropriate&lt;br&gt;
set&amp;nbsp;of&amp;nbsp;default&amp;nbsp;behaviors,&amp;nbsp;but&amp;nbsp;is&amp;nbsp;often&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;overriding&amp;nbsp;default&amp;nbsp;behavior,&amp;nbsp;or&amp;nbsp;when&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;fit&amp;nbsp;your&amp;nbsp;object&lt;br&gt;
model&amp;nbsp;into&amp;nbsp;a&amp;nbsp;preexisting&amp;nbsp;schema.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;more&amp;nbsp;commonly&amp;nbsp;used&amp;nbsp;than&amp;nbsp;the&amp;nbsp;similar&amp;nbsp;@Basic&amp;nbsp;annotation,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
attributes&amp;nbsp;commonly&amp;nbsp;being&amp;nbsp;overridden:&lt;br&gt;
&lt;br&gt;
•&amp;nbsp;name&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;column&amp;nbsp;to&amp;nbsp;be&amp;nbsp;explicitly&amp;nbsp;specified—by&amp;nbsp;default,&amp;nbsp;this&amp;nbsp;would&amp;nbsp;be&amp;nbsp;the&lt;br&gt;
name&amp;nbsp;of&amp;nbsp;the&amp;nbsp;property.&amp;nbsp;However,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;often&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;override&amp;nbsp;the&amp;nbsp;default&amp;nbsp;behavior&amp;nbsp;when&amp;nbsp;it&lt;br&gt;
would&amp;nbsp;otherwise&amp;nbsp;result&amp;nbsp;in&amp;nbsp;an&amp;nbsp;SQL&amp;nbsp;keyword&amp;nbsp;being&amp;nbsp;used&amp;nbsp;as&amp;nbsp;the&amp;nbsp;column&amp;nbsp;name&amp;nbsp;(e.g.,&amp;nbsp;user).&lt;br&gt;
•&amp;nbsp;length&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;size&amp;nbsp;of&amp;nbsp;the&amp;nbsp;column&amp;nbsp;used&amp;nbsp;to&amp;nbsp;map&amp;nbsp;a&amp;nbsp;value&amp;nbsp;(particularly&amp;nbsp;a&amp;nbsp;String&amp;nbsp;value)&amp;nbsp;to&amp;nbsp;be&lt;br&gt;
explicitly&amp;nbsp;defined.&amp;nbsp;The&amp;nbsp;column&amp;nbsp;size&amp;nbsp;defaults&amp;nbsp;to&amp;nbsp;255,&amp;nbsp;which&amp;nbsp;might&amp;nbsp;otherwise&amp;nbsp;result&amp;nbsp;in&amp;nbsp;truncated&lt;br&gt;
String&amp;nbsp;data,&amp;nbsp;for&amp;nbsp;example.&lt;br&gt;
•&amp;nbsp;nullable&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;column&amp;nbsp;to&amp;nbsp;be&amp;nbsp;marked&amp;nbsp;NOT&amp;nbsp;NULL&amp;nbsp;when&amp;nbsp;the&amp;nbsp;schema&amp;nbsp;is&amp;nbsp;generated.&amp;nbsp;The&lt;br&gt;
default&amp;nbsp;is&amp;nbsp;that&amp;nbsp;fields&amp;nbsp;should&amp;nbsp;be&amp;nbsp;permitted&amp;nbsp;to&amp;nbsp;be&amp;nbsp;null;&amp;nbsp;however,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;common&amp;nbsp;to&amp;nbsp;override&amp;nbsp;this&lt;br&gt;
when&amp;nbsp;a&amp;nbsp;field&amp;nbsp;is,&amp;nbsp;or&amp;nbsp;ought&amp;nbsp;to&amp;nbsp;be,&amp;nbsp;mandatory.&lt;br&gt;
•&amp;nbsp;unique&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;column&amp;nbsp;to&amp;nbsp;be&amp;nbsp;marked&amp;nbsp;as&amp;nbsp;containing&amp;nbsp;only&amp;nbsp;unique&amp;nbsp;values.&amp;nbsp;This&amp;nbsp;defaults&amp;nbsp;to&lt;br&gt;
false,&amp;nbsp;but&amp;nbsp;commonly&amp;nbsp;would&amp;nbsp;be&amp;nbsp;set&amp;nbsp;for&amp;nbsp;a&amp;nbsp;value&amp;nbsp;that&amp;nbsp;might&amp;nbsp;not&amp;nbsp;be&amp;nbsp;a&amp;nbsp;primary&amp;nbsp;key&amp;nbsp;but&amp;nbsp;would&amp;nbsp;still&lt;br&gt;
cause&amp;nbsp;problems&amp;nbsp;if&amp;nbsp;duplicated&amp;nbsp;(such&amp;nbsp;as&amp;nbsp;username).&lt;br&gt;
&lt;br&gt;
@Column(name="working_title",length=200,nullable=false)&lt;br&gt;
String&amp;nbsp;title;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;remaining&amp;nbsp;attributes,&amp;nbsp;less&amp;nbsp;commonly&amp;nbsp;used,&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
•&amp;nbsp;table&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;the&amp;nbsp;owning&amp;nbsp;entity&amp;nbsp;has&amp;nbsp;been&amp;nbsp;mapped&amp;nbsp;across&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;secondary&amp;nbsp;tables.&lt;br&gt;
By&amp;nbsp;default,&amp;nbsp;the&amp;nbsp;value&amp;nbsp;is&amp;nbsp;assumed&amp;nbsp;to&amp;nbsp;be&amp;nbsp;drawn&amp;nbsp;from&amp;nbsp;the&amp;nbsp;primary&amp;nbsp;table,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;one&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;secondary&amp;nbsp;tables&amp;nbsp;can&amp;nbsp;be&amp;nbsp;substituted&amp;nbsp;here&amp;nbsp;(see&amp;nbsp;the&amp;nbsp;@SecondaryTable&amp;nbsp;annotation&amp;nbsp;example&lt;br&gt;
earlier&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter).&lt;br&gt;
•&amp;nbsp;insertable&amp;nbsp;defaults&amp;nbsp;to&amp;nbsp;true,&amp;nbsp;but&amp;nbsp;if&amp;nbsp;set&amp;nbsp;to&amp;nbsp;false,&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;field&amp;nbsp;will&amp;nbsp;be&amp;nbsp;omitted&amp;nbsp;from&amp;nbsp;insert&lt;br&gt;
statements&amp;nbsp;generated&amp;nbsp;by&amp;nbsp;Hibernate&amp;nbsp;(i.e.,&amp;nbsp;it&amp;nbsp;won’t&amp;nbsp;be&amp;nbsp;persisted).&lt;br&gt;
•&amp;nbsp;updatable&amp;nbsp;defaults&amp;nbsp;to&amp;nbsp;true,&amp;nbsp;but&amp;nbsp;if&amp;nbsp;set&amp;nbsp;to&amp;nbsp;false,&amp;nbsp;the&amp;nbsp;annotated&amp;nbsp;field&amp;nbsp;will&amp;nbsp;be&amp;nbsp;omitted&amp;nbsp;from&amp;nbsp;update&lt;br&gt;
statements&amp;nbsp;generated&amp;nbsp;by&amp;nbsp;Hibernate&amp;nbsp;(i.e.,&amp;nbsp;it&amp;nbsp;won’t&amp;nbsp;be&amp;nbsp;altered&amp;nbsp;once&amp;nbsp;it&amp;nbsp;has&amp;nbsp;been&amp;nbsp;persisted).&lt;br&gt;
•&amp;nbsp;columnDefinition&amp;nbsp;can&amp;nbsp;be&amp;nbsp;set&amp;nbsp;to&amp;nbsp;an&amp;nbsp;appropriate&amp;nbsp;DDL&amp;nbsp;fragment&amp;nbsp;to&amp;nbsp;be&amp;nbsp;used&amp;nbsp;when&amp;nbsp;generating&amp;nbsp;the&lt;br&gt;
column&amp;nbsp;in&amp;nbsp;the&amp;nbsp;database.&amp;nbsp;This&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;used&amp;nbsp;during&amp;nbsp;schema&amp;nbsp;generation&amp;nbsp;from&amp;nbsp;the&amp;nbsp;annotated&lt;br&gt;
entity,&amp;nbsp;and&amp;nbsp;should&amp;nbsp;be&amp;nbsp;avoided&amp;nbsp;if&amp;nbsp;possible,&amp;nbsp;since&amp;nbsp;it&amp;nbsp;is&amp;nbsp;likely&amp;nbsp;to&amp;nbsp;reduce&amp;nbsp;the&amp;nbsp;portability&amp;nbsp;of&amp;nbsp;your&lt;br&gt;
application&amp;nbsp;between&amp;nbsp;database&amp;nbsp;dialects.&lt;br&gt;
•&amp;nbsp;precision&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;precision&amp;nbsp;of&amp;nbsp;decimal&amp;nbsp;numeric&amp;nbsp;columns&amp;nbsp;to&amp;nbsp;be&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;schema&amp;nbsp;generation,&lt;br&gt;
and&amp;nbsp;will&amp;nbsp;be&amp;nbsp;ignored&amp;nbsp;when&amp;nbsp;a&amp;nbsp;nondecimal&amp;nbsp;value&amp;nbsp;is&amp;nbsp;persisted.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;given&amp;nbsp;represents&amp;nbsp;the&amp;nbsp;number&lt;br&gt;
of&amp;nbsp;digits&amp;nbsp;in&amp;nbsp;the&amp;nbsp;number&amp;nbsp;(usually&amp;nbsp;requiring&amp;nbsp;a&amp;nbsp;minimum&amp;nbsp;length&amp;nbsp;of&amp;nbsp;n+1,&amp;nbsp;where&amp;nbsp;n&amp;nbsp;is&amp;nbsp;the&amp;nbsp;scale).&lt;br&gt;
•&amp;nbsp;scale&amp;nbsp;permits&amp;nbsp;the&amp;nbsp;scale&amp;nbsp;of&amp;nbsp;decimal&amp;nbsp;numeric&amp;nbsp;columns&amp;nbsp;to&amp;nbsp;be&amp;nbsp;specified&amp;nbsp;for&amp;nbsp;schema&amp;nbsp;generation&lt;br&gt;
and&amp;nbsp;will&amp;nbsp;be&amp;nbsp;ignored&amp;nbsp;where&amp;nbsp;a&amp;nbsp;nondecimal&amp;nbsp;value&amp;nbsp;is&amp;nbsp;persisted.&amp;nbsp;The&amp;nbsp;value&amp;nbsp;given&amp;nbsp;represents&amp;nbsp;the&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;places&amp;nbsp;after&amp;nbsp;the&amp;nbsp;decimal&amp;nbsp;point.</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hibernate&amp;nbsp;@NamedQuery&amp;nbsp;and&amp;nbsp;@NamedNativeQuery,&amp;nbsp;describe.&lt;br&gt;
Can&amp;nbsp;we&amp;nbsp;use&amp;nbsp;Join&amp;nbsp;in&amp;nbsp;NamedQuery&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Hibernate&amp;nbsp;Named&amp;nbsp;Query&amp;nbsp;-&amp;nbsp;join&amp;nbsp;3&amp;nbsp;tables&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Yes.&lt;br&gt;
Example&amp;nbsp;here&lt;br&gt;
http://stackoverflow.com/questions/8399379/hibernate-named-query-join-3-tables&lt;br&gt;
===========================&lt;br&gt;
===========================================&lt;br&gt;
http://www.journaldev.com/3451/hibernate-named-query-example-tutorial-namedquery-annotation-join-hql-native-sql&lt;br&gt;
==================================================================&lt;br&gt;
&lt;br&gt;
@NamedQuery&amp;nbsp;and&amp;nbsp;@NamedQueries&amp;nbsp;allow&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;Hibernate&amp;nbsp;Query&amp;nbsp;Language&amp;nbsp;or&amp;nbsp;Java&amp;nbsp;Persistence&amp;nbsp;Query&amp;nbsp;Language&lt;br&gt;
(JPQL)&amp;nbsp;queries&amp;nbsp;to&amp;nbsp;be&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;an&amp;nbsp;entity.&amp;nbsp;The&amp;nbsp;required&amp;nbsp;attributes&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
-&amp;nbsp;name&amp;nbsp;is&amp;nbsp;the&amp;nbsp;name&amp;nbsp;by&amp;nbsp;which&amp;nbsp;the&amp;nbsp;query&amp;nbsp;is&amp;nbsp;retrieved.&lt;br&gt;
-&amp;nbsp;query&amp;nbsp;is&amp;nbsp;the&amp;nbsp;JPQL&amp;nbsp;(or&amp;nbsp;HQL)&amp;nbsp;query&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;name.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Entity&amp;nbsp;Person&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;ch3;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.*;&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@NamedQueries({@NamedQuery(name&amp;nbsp;=&amp;nbsp;"selectAuthorByName",&amp;nbsp;query&amp;nbsp;=&amp;nbsp;"from&amp;nbsp;Person&amp;nbsp;p&amp;nbsp;where&amp;nbsp;name=:name"),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@NamedQuery(name&amp;nbsp;=&amp;nbsp;"selectAuthorByNameAndId",&amp;nbsp;query&amp;nbsp;=&amp;nbsp;"from&amp;nbsp;Person&amp;nbsp;p&amp;nbsp;where&amp;nbsp;name=:name&amp;nbsp;and&amp;nbsp;id=:id")})&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Person&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@GeneratedValue(strategy&amp;nbsp;=&amp;nbsp;GenerationType.IDENTITY)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Long&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Column&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Long&amp;nbsp;getId()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setId(Long&amp;nbsp;id)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.id&amp;nbsp;=&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;ch3.Person;&lt;br&gt;
import&amp;nbsp;org.hibernate.Query;&lt;br&gt;
import&amp;nbsp;org.hibernate.Session;&lt;br&gt;
import&amp;nbsp;org.hibernate.Transaction;&lt;br&gt;
import&amp;nbsp;util.SessionUtil;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;NamedQueriesExampleProgram&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Named&amp;nbsp;query&amp;nbsp;example");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;savePersons();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;useNamedQueries();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SessionUtil.closeFactory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;savePersons(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;SessionUtil.getSession();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Transaction&amp;nbsp;transaction&amp;nbsp;=&amp;nbsp;session.beginTransaction();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;p1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Person();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p1.setName("Andrii");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;p2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Person();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p2.setName("Ivan");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(p1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save(p2);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.commit();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.close();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;useNamedQueries(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session&amp;nbsp;session&amp;nbsp;=&amp;nbsp;SessionUtil.getSession();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Entity&amp;nbsp;Person&amp;nbsp;has&amp;nbsp;two&amp;nbsp;named&amp;nbsp;queries&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Using&amp;nbsp;first&amp;nbsp;named&amp;nbsp;query&amp;nbsp;from&amp;nbsp;person&amp;nbsp;entity&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Query&amp;nbsp;selectAuthorByName&amp;nbsp;=&amp;nbsp;session.getNamedQuery("selectAuthorByName");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;selectAuthorByName.setParameter("name",&amp;nbsp;"Andrii");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;person&amp;nbsp;=&amp;nbsp;(Person)&amp;nbsp;selectAuthorByName.uniqueResult();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(person.getId()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;person.getName());&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;second&amp;nbsp;named&amp;nbsp;query&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Query&amp;nbsp;selectAuthorByNameAndId&amp;nbsp;=&amp;nbsp;session.getNamedQuery("selectAuthorByNameAndId");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;selectAuthorByNameAndId.setParameter("id",&amp;nbsp;2L);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;selectAuthorByNameAndId.setParameter("name",&amp;nbsp;"Ivan");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;p2&amp;nbsp;=&amp;nbsp;(Person)&amp;nbsp;selectAuthorByNameAndId.uniqueResult();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(p2.getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.close();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
======================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Named&amp;nbsp;Native&amp;nbsp;Queries&amp;nbsp;(SQL)&lt;br&gt;
&lt;br&gt;
@NamedNativeQuery(&lt;br&gt;
name="nativeFindAuthorNames",&lt;br&gt;
query="select&amp;nbsp;name&amp;nbsp;from&amp;nbsp;author"&lt;br&gt;
)</questionanswer>
  </question>
  <question id="1_0_1_2_0_1_3:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inheritance&amp;nbsp;mapping&amp;nbsp;in&amp;nbsp;Hibernate,&amp;nbsp;describe&amp;nbsp;different&amp;nbsp;strategies.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Inheritance&lt;br&gt;
The&amp;nbsp;JPA&amp;nbsp;2&amp;nbsp;standard&amp;nbsp;and&amp;nbsp;Hibernate&amp;nbsp;both&amp;nbsp;support&amp;nbsp;three&amp;nbsp;approaches&amp;nbsp;to&amp;nbsp;mapping&amp;nbsp;inheritance&amp;nbsp;hierarchies&amp;nbsp;into&amp;nbsp;the&lt;br&gt;
database.&amp;nbsp;These&amp;nbsp;are&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
1.&amp;nbsp;Single&amp;nbsp;table&amp;nbsp;(SINGLE_TABLE):&amp;nbsp;One&amp;nbsp;table&amp;nbsp;for&amp;nbsp;each&amp;nbsp;class&amp;nbsp;hierarchy&lt;br&gt;
2.&amp;nbsp;Joined&amp;nbsp;(JOINED):&amp;nbsp;One&amp;nbsp;table&amp;nbsp;for&amp;nbsp;each&amp;nbsp;subclass&amp;nbsp;(including&amp;nbsp;interfaces&amp;nbsp;and&amp;nbsp;abstract&amp;nbsp;classes)&lt;br&gt;
3.&amp;nbsp;Table-per-class&amp;nbsp;(TABLE_PER_CLASS):&amp;nbsp;One&amp;nbsp;table&amp;nbsp;for&amp;nbsp;each&amp;nbsp;concrete&amp;nbsp;class&amp;nbsp;implementation&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
1)The&amp;nbsp;single-table&amp;nbsp;approach&amp;nbsp;manages&amp;nbsp;one&amp;nbsp;class&amp;nbsp;for&amp;nbsp;the&amp;nbsp;superclass&amp;nbsp;and&amp;nbsp;all&amp;nbsp;its&amp;nbsp;subtypes.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;columns&amp;nbsp;for&amp;nbsp;each&lt;br&gt;
mapped&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;the&amp;nbsp;superclass,&amp;nbsp;and&amp;nbsp;for&amp;nbsp;each&amp;nbsp;distinct&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;of&amp;nbsp;the&amp;nbsp;derived&amp;nbsp;types.&amp;nbsp;When&amp;nbsp;following&lt;br&gt;
this&amp;nbsp;strategy,&amp;nbsp;you&amp;nbsp;will&amp;nbsp;need&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;that&amp;nbsp;columns&amp;nbsp;are&amp;nbsp;appropriately&amp;nbsp;renamed&amp;nbsp;when&amp;nbsp;any&amp;nbsp;field&amp;nbsp;or&amp;nbsp;property&amp;nbsp;names&lt;br&gt;
collide&amp;nbsp;in&amp;nbsp;the&amp;nbsp;hierarchy.&lt;br&gt;
To&amp;nbsp;determine&amp;nbsp;the&amp;nbsp;appropriate&amp;nbsp;type&amp;nbsp;to&amp;nbsp;instantiate&amp;nbsp;when&amp;nbsp;retrieving&amp;nbsp;entities&amp;nbsp;from&amp;nbsp;the&amp;nbsp;database,&amp;nbsp;a&lt;br&gt;
@DiscriminatorColumn&amp;nbsp;annotation&amp;nbsp;should&amp;nbsp;be&amp;nbsp;provided&amp;nbsp;in&amp;nbsp;the&amp;nbsp;root&amp;nbsp;(and&amp;nbsp;only&amp;nbsp;in&amp;nbsp;the&amp;nbsp;root)&amp;nbsp;of&amp;nbsp;the&amp;nbsp;persistent&amp;nbsp;hierarchy.12&lt;br&gt;
This&amp;nbsp;defines&amp;nbsp;a&amp;nbsp;column&amp;nbsp;containing&amp;nbsp;a&amp;nbsp;value&amp;nbsp;that&amp;nbsp;distinguishes&amp;nbsp;between&amp;nbsp;the&amp;nbsp;types&amp;nbsp;used.&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@Inheritance(strategy&amp;nbsp;=&amp;nbsp;SINGLE_TABLE)&lt;br&gt;
@DiscriminatorColumn(&lt;br&gt;
name="DISCRIMINATOR",&lt;br&gt;
discriminatorType=INTEGER&lt;br&gt;
)&lt;br&gt;
@DiscriminatorValue("1")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@DiscriminatorValue("2")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ComputerBook&amp;nbsp;extends&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
2)&amp;nbsp;An&amp;nbsp;alternative&amp;nbsp;to&amp;nbsp;the&amp;nbsp;monolithic&amp;nbsp;single-table&amp;nbsp;approach&amp;nbsp;is&amp;nbsp;the&amp;nbsp;otherwise&amp;nbsp;similar&amp;nbsp;joined-table&amp;nbsp;approach.&amp;nbsp;Here&amp;nbsp;a&lt;br&gt;
discriminator&amp;nbsp;column&amp;nbsp;is&amp;nbsp;used,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;the&amp;nbsp;various&amp;nbsp;derived&amp;nbsp;types&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;distinct&amp;nbsp;tables.&amp;nbsp;Other&amp;nbsp;than&amp;nbsp;the&lt;br&gt;
differing&amp;nbsp;strategy,&amp;nbsp;this&amp;nbsp;inheritance&amp;nbsp;type&amp;nbsp;is&amp;nbsp;specified&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;way&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@Inheritance(strategy&amp;nbsp;=&amp;nbsp;JOINED)&lt;br&gt;
@DiscriminatorColumn(&lt;br&gt;
name="DISCRIMINATOR"&lt;br&gt;
)&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
3)&lt;br&gt;
Finally,&amp;nbsp;there&amp;nbsp;is&amp;nbsp;the&amp;nbsp;table-per-class&amp;nbsp;approach,&amp;nbsp;in&amp;nbsp;which&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;each&amp;nbsp;type&amp;nbsp;in&amp;nbsp;the&amp;nbsp;inheritance&amp;nbsp;hierarchy&amp;nbsp;are&lt;br&gt;
stored&amp;nbsp;in&amp;nbsp;distinct&amp;nbsp;tables.&amp;nbsp;Because&amp;nbsp;of&amp;nbsp;the&amp;nbsp;close&amp;nbsp;correspondence&amp;nbsp;between&amp;nbsp;the&amp;nbsp;entity&amp;nbsp;and&amp;nbsp;its&amp;nbsp;table,&amp;nbsp;the&lt;br&gt;
@DiscriminatorColumn&amp;nbsp;annotation&amp;nbsp;is&amp;nbsp;not&amp;nbsp;applicable&amp;nbsp;to&amp;nbsp;this&amp;nbsp;inheritance&amp;nbsp;strategy.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@Inheritance(strategy&amp;nbsp;=&amp;nbsp;TABLE_PER_CLASS)&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
================================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;&lt;br&gt;
-&amp;nbsp;I&amp;nbsp;used&amp;nbsp;JOINED&amp;nbsp;(table&amp;nbsp;by&amp;nbsp;subclass)&amp;nbsp;&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;Entitities&lt;br&gt;
package&amp;nbsp;ch5.inheritanceExamples;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.*;&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@Inheritance(strategy&amp;nbsp;=&amp;nbsp;InheritanceType.JOINED)&lt;br&gt;
@DiscriminatorColumn(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="book_type"&lt;br&gt;
)&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ch7Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Id&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@GeneratedValue(strategy&amp;nbsp;=&amp;nbsp;GenerationType.AUTO)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Long&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;author;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Double&amp;nbsp;price;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getAuthor()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;author;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setAuthor(String&amp;nbsp;author)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.author&amp;nbsp;=&amp;nbsp;author;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Double&amp;nbsp;getPrice()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;price;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setPrice(Double&amp;nbsp;price)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.price&amp;nbsp;=&amp;nbsp;price;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Long&amp;nbsp;getId()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setId(Long&amp;nbsp;id)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.id&amp;nbsp;=&amp;nbsp;id;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5.inheritanceExamples;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.DiscriminatorValue;&lt;br&gt;
import&amp;nbsp;javax.persistence.Entity;&lt;br&gt;
import&amp;nbsp;javax.persistence.PrimaryKeyJoinColumn;&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@PrimaryKeyJoinColumn(name="book_id")&lt;br&gt;
@DiscriminatorValue("1")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EBook&amp;nbsp;extends&amp;nbsp;ch7Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;format;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFormat()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;format;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setFormat(String&amp;nbsp;format)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.format&amp;nbsp;=&amp;nbsp;format;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5.inheritanceExamples;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;javax.persistence.DiscriminatorValue;&lt;br&gt;
import&amp;nbsp;javax.persistence.Entity;&lt;br&gt;
import&amp;nbsp;javax.persistence.PrimaryKeyJoinColumn;&lt;br&gt;
&lt;br&gt;
@Entity&lt;br&gt;
@PrimaryKeyJoinColumn(name="book_id")&lt;br&gt;
@DiscriminatorValue("2")&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;PaperBook&amp;nbsp;extends&amp;nbsp;ch7Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Double&amp;nbsp;weight;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Double&amp;nbsp;getWeight()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;weight;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setWeight(Double&amp;nbsp;weight)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.weight&amp;nbsp;=&amp;nbsp;weight;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
2)&amp;nbsp;Program&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;ch5.inheritanceExamples;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;ch7.JPASessionUtil;&lt;br&gt;
import&amp;nbsp;javax.persistence.EntityManager;&lt;br&gt;
import&amp;nbsp;javax.persistence.EntityTransaction;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ch5HibernateInheritanceProgram&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hibernate&amp;nbsp;Inheritance&amp;nbsp;example&amp;nbsp;:&amp;nbsp;");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;saveDifferentBooks();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JPASessionUtil.closeAllEntityManagerFactories();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;void&amp;nbsp;saveDifferentBooks()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Create&amp;nbsp;and&amp;nbsp;save&amp;nbsp;books");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EntityManager&amp;nbsp;em&amp;nbsp;=&amp;nbsp;JPASessionUtil.getEntityManager("utiljpa");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EntityTransaction&amp;nbsp;transaction&amp;nbsp;=&amp;nbsp;em.getTransaction();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.begin();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PaperBook&amp;nbsp;p1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;PaperBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p1.setName("Paper&amp;nbsp;1&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p1.setAuthor("AUthor&amp;nbsp;1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p1.setWeight(2.01);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p1.setPrice(100.0);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;EBook&amp;nbsp;e1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;EBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e1.setName("e1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e1.setFormat("pdf");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e1.setAuthor("e1&amp;nbsp;author");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e1.setPrice(100.0);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;em.persist(p1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;em.persist(e1);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction.commit();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;em.close();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
3)&amp;nbsp;Output&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Hibernate:&amp;nbsp;insert&amp;nbsp;into&amp;nbsp;ch7Book&amp;nbsp;(author,&amp;nbsp;name,&amp;nbsp;price,&amp;nbsp;book_type)&amp;nbsp;values&amp;nbsp;(?,&amp;nbsp;?,&amp;nbsp;?,&amp;nbsp;'2')&lt;br&gt;
Hibernate:&amp;nbsp;insert&amp;nbsp;into&amp;nbsp;PaperBook&amp;nbsp;(weight,&amp;nbsp;book_id)&amp;nbsp;values&amp;nbsp;(?,&amp;nbsp;?)&lt;br&gt;
Hibernate:&amp;nbsp;insert&amp;nbsp;into&amp;nbsp;ch7Book&amp;nbsp;(author,&amp;nbsp;name,&amp;nbsp;price,&amp;nbsp;book_type)&amp;nbsp;values&amp;nbsp;(?,&amp;nbsp;?,&amp;nbsp;?,&amp;nbsp;'1')&lt;br&gt;
Hibernate:&amp;nbsp;insert&amp;nbsp;into&amp;nbsp;EBook&amp;nbsp;(format,&amp;nbsp;book_id)&amp;nbsp;values&amp;nbsp;(?,&amp;nbsp;?)&lt;br&gt;
&lt;br&gt;
...&amp;nbsp;&lt;br&gt;
We'll&amp;nbsp;have&amp;nbsp;3&amp;nbsp;tables&amp;nbsp;with&amp;nbsp;data&amp;nbsp;ch7Book,&amp;nbsp;EBook,&amp;nbsp;PaperBook&amp;nbsp;(common&amp;nbsp;data&amp;nbsp;in&amp;nbsp;ch7Book,&amp;nbsp;specific&amp;nbsp;data&amp;nbsp;in&amp;nbsp;Ebook&amp;nbsp;and&amp;nbsp;PaperBook).</questionanswer>
  </question>
</questions>
