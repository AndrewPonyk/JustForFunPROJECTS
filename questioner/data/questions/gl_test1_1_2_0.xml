<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_1_2_0" name="Gl_test" nofquestions="4" nofsubcategories="0" filename="gl_test1_1_2_0.xml">
  <question id="1_1_2_0:0" type="0">
    <questiontext>1)You need to write a code segment that transfers the contents of a byte 
    array named dataToSend by using a NetworkStream object named netStream. 
    You need to use a cache of size 8,192 bytes. Which code segment should you 
    use?&lt;br&gt;
$v$&lt;br&gt;
$v0$ MemoryStream memStream = new MemoryStream(8192); 
netStream.Write(dataToSend, 0, (int) memStream.Length); $v0end$&lt;br&gt;
$v1$ 
    MemoryStream memStream = new MemoryStream(8192);
 memStream.Write(dataToSend, 0, (int) netStream.Length); $v1end$&lt;br&gt;
$v2$ 
    BufferedStream bufStream = new BufferedStream(netStream);
 bufStream.Write(dataToSend, 0, 8192); $v2end$&lt;br&gt;
$v3$ BufferedStream 
    bufStream = new BufferedStream(netStream, 8192);
 bufStream.Write(dataToSend, 0, dataToSend.Length); $v3end$&lt;br&gt;
$vend$</questiontext>
    <questionanswer>3&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_1_2_0:1" type="0">
    <questiontext>You are using the Microsoft Visual Studio 2005 IDE to examine the output 
    of a method that returns a string. 
You assign the output of the method to a string variable named fName. 
You need to write a code segment that prints the following on a single line.
The message: &amp;quot;Test Failed: &amp;quot;. The value of fName if the value of fName does 
    not equal &amp;quot;Company&amp;quot;. 
You also need to ensure that the code segment simultaneously facilitates 
    uninterrupted execution of the application. 

Which code segment should you use?&lt;br&gt;
$v$&lt;br&gt;
$v0$ Debug.Assert(fName == 
    &amp;#8220;Company&amp;#8221;, &amp;#8220;Test Failed: &amp;#8221;, fName); $v0end$&lt;br&gt;
$v1$ 
    
if (fName != &amp;quot;Company&amp;quot;) {
Debug.Print(&amp;#8220;Test Failed: &amp;#8221;);
Debug.Print(fName);
} 
$v1end$&lt;br&gt;
$v2$
if (fName != &amp;quot;Company&amp;quot;) {
Debug.WriteLine(&amp;#8220;Test Failed: &amp;#8221;);
Debug.WriteLine(fName);
}
$v2end$&lt;br&gt;
$v3$
Debug.WriteLineIf(fName != &amp;#8220;Company&amp;#8221;, fName, &amp;#8220;Test Failed&amp;#8221;);
$v3end$&lt;br&gt;
$vend$</questiontext>
    <questionanswer>3</questionanswer>
  </question>
  <question id="1_1_2_0:2" type="0">
    <questiontext>&lt;br&gt;
    Your application uses two threads, named threadOne and threadTwo. You need &lt;br&gt;
    to modify the code to prevent the execution of threadOne until threadTwo &lt;br&gt;
    completes execution. What should you do?&lt;br&gt;
$v$&lt;br&gt;
$v0$ Use a WaitCallback &lt;br&gt;
    delegate to synchronize the threads. $v0end$&lt;br&gt;
$v1$Call the SpinLock &lt;br&gt;
    method of threadOne.$v1end$&lt;br&gt;
$v2$Configure threadOne to run at a lower &lt;br&gt;
    priority.$v2end$&lt;br&gt;
$v3$Call the Sleep method of threadOne.$v3end$&lt;br&gt;
$vend$&lt;br&gt;</questiontext>
    <questionanswer>0</questionanswer>
  </question>
  <question id="1_1_2_0:3" type="0">
    <questiontext>&lt;br&gt;
    You are writing code for user authentication and authorization. &lt;br&gt;
The username, password, and roles are stored in your application data store.&lt;br&gt;
You need to establish a user security context that will be used for &lt;br&gt;
    authorization checks such as IsInRole. &lt;br&gt;
&lt;br&gt;
You write the following code segment to authorize the user.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
if (!TestPassword(userName, password))&lt;br&gt;
throw new Exception(&amp;#8220;could not authenticate user&amp;#8221;);&lt;br&gt;
String[] userRolesArray = LookupUserRoles(userName);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
You need to complete this code so that it establishes the&lt;br&gt;
user security context. &lt;br&gt;
&lt;br&gt;
Which code segment should you use?&lt;br&gt;
&lt;br&gt;
$v$&lt;br&gt;
$v0$ &lt;br&gt;
NTAccount userNTName = new NTAccount(userName);&lt;br&gt;
GenericIdentity ident = new GenericIdentity(userNTName.Value);&lt;br&gt;
GenericPrincipal currentUser= new GenericPrincipal(ident, userRolesArray);&lt;br&gt;
Thread.CurrentPrincipal = currentUser; &lt;br&gt;
$v0end$&lt;br&gt;
$v1$&lt;br&gt;
GenericIdentity ident = new GenericIdentity(userName);&lt;br&gt;
GenericPrincipal currentUser = new GenericPrincipal(ident, userRolesArray);&lt;br&gt;
Thread.CurrentPrincipal = currentUser;&lt;br&gt;
$v1end$&lt;br&gt;
$v2$&lt;br&gt;
IntPtr token = IntPtr.Zero;&lt;br&gt;
token = LogonUserUsingInterop(username,encryptedPassword);&lt;br&gt;
WindowsImpersonationContext ctx =WindowsIdentity.Impersonate(token);&lt;br&gt;
$v2end$&lt;br&gt;
$vend$&lt;br&gt;</questiontext>
    <questionanswer>1</questionanswer>
  </question>
</questions>
