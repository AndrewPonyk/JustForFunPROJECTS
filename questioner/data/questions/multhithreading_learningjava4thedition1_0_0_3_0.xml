<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_3_0" name="Multhithreading_LearningJava4thEdition" nofquestions="15" nofsubcategories="0" filename="multhithreading_learningjava4thedition1_0_0_3_0.xml">
  <question id="1_0_0_3_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Threads&amp;nbsp;:&amp;nbsp;what&amp;nbsp;is&amp;nbsp;thread&amp;nbsp;in&amp;nbsp;Java?&amp;nbsp;Provide&amp;nbsp;Hello&amp;nbsp;World&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>To&amp;nbsp;the&amp;nbsp;OS,&amp;nbsp;a&amp;nbsp;process&amp;nbsp;was&amp;nbsp;more&amp;nbsp;or&amp;nbsp;less&amp;nbsp;a&amp;nbsp;black&amp;nbsp;box&amp;nbsp;that&lt;br&gt;
decided&amp;nbsp;what&amp;nbsp;to&amp;nbsp;do&amp;nbsp;on&amp;nbsp;its&amp;nbsp;own.&amp;nbsp;If&amp;nbsp;an&amp;nbsp;application&amp;nbsp;required&lt;br&gt;
greater&amp;nbsp;concurrency,&amp;nbsp;it&amp;nbsp;could&amp;nbsp;get&amp;nbsp;it&amp;nbsp;only&amp;nbsp;by&amp;nbsp;running&lt;br&gt;
multiple&amp;nbsp;processes&amp;nbsp;and&amp;nbsp;communicating&amp;nbsp;between&amp;nbsp;them,&amp;nbsp;but&lt;br&gt;
this&amp;nbsp;was&amp;nbsp;a&amp;nbsp;heavyweight&amp;nbsp;approach&amp;nbsp;and&amp;nbsp;not&amp;nbsp;very&amp;nbsp;elegant.&lt;br&gt;
Later,&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;was&amp;nbsp;introduced.&amp;nbsp;Threads&amp;nbsp;provide&lt;br&gt;
fine-grained&amp;nbsp;concurrency&amp;nbsp;within&amp;nbsp;a&amp;nbsp;process&amp;nbsp;under&amp;nbsp;the&amp;nbsp;application’s&amp;nbsp;own&lt;br&gt;
control.&amp;nbsp;Threads&amp;nbsp;have&amp;nbsp;existed&amp;nbsp;for&amp;nbsp;a&amp;nbsp;long&amp;nbsp;time,&amp;nbsp;but&amp;nbsp;have&amp;nbsp;historically&lt;br&gt;
been&amp;nbsp;tricky&amp;nbsp;to&amp;nbsp;use.&amp;nbsp;In&amp;nbsp;Java,&amp;nbsp;support&amp;nbsp;for&amp;nbsp;threading&amp;nbsp;is&amp;nbsp;__&amp;nbsp;built&amp;nbsp;into&lt;br&gt;
the&amp;nbsp;language,&amp;nbsp;making&amp;nbsp;it&amp;nbsp;easier&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;threads.&lt;br&gt;
The&amp;nbsp;Java&amp;nbsp;concurrency&amp;nbsp;utilities&amp;nbsp;address&amp;nbsp;common&amp;nbsp;patterns&amp;nbsp;and&amp;nbsp;practices&amp;nbsp;in&amp;nbsp;multithreaded&lt;br&gt;
applications&amp;nbsp;and&amp;nbsp;raise&amp;nbsp;them&amp;nbsp;to&amp;nbsp;the&amp;nbsp;level&amp;nbsp;of&amp;nbsp;tangible&amp;nbsp;Java&amp;nbsp;APIs.&lt;br&gt;
&lt;br&gt;
DEF:&amp;nbsp;&lt;br&gt;
Conceptually,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;a&amp;nbsp;flow&amp;nbsp;of&amp;nbsp;control&amp;nbsp;within&amp;nbsp;a&amp;nbsp;program.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;the&amp;nbsp;more&amp;nbsp;familiar&amp;nbsp;notion&amp;nbsp;of&amp;nbsp;a&amp;nbsp;process,&amp;nbsp;except&lt;br&gt;
that&amp;nbsp;threads&amp;nbsp;within&amp;nbsp;the&amp;nbsp;same&amp;nbsp;application&amp;nbsp;are&amp;nbsp;much&amp;nbsp;more&amp;nbsp;closely&lt;br&gt;
related&amp;nbsp;and&amp;nbsp;share&amp;nbsp;much&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;state&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;threads&amp;nbsp;cooperate&amp;nbsp;to&amp;nbsp;share&amp;nbsp;a&amp;nbsp;working&amp;nbsp;area.&lt;br&gt;
Multiple&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;an&amp;nbsp;application&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;problems&amp;nbsp;as&amp;nbsp;the&amp;nbsp;golfers—in&amp;nbsp;a&amp;nbsp;word,&lt;br&gt;
___&amp;nbsp;synchronization.&lt;br&gt;
&lt;br&gt;
Just&amp;nbsp;as&amp;nbsp;you&amp;nbsp;can’t&amp;nbsp;have&amp;nbsp;two&amp;nbsp;sets&amp;nbsp;of&amp;nbsp;players&amp;nbsp;blindly&amp;nbsp;playing&amp;nbsp;the&amp;nbsp;same&amp;nbsp;green&lt;br&gt;
at&amp;nbsp;the&amp;nbsp;same&amp;nbsp;time,&amp;nbsp;you&amp;nbsp;can’t&amp;nbsp;have&amp;nbsp;several&amp;nbsp;threads&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;variables&amp;nbsp;without&amp;nbsp;some&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;coordination.&amp;nbsp;Someone&amp;nbsp;is&amp;nbsp;bound&amp;nbsp;to&amp;nbsp;get&lt;br&gt;
hurt.&amp;nbsp;A&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;reserve&amp;nbsp;the&amp;nbsp;right&amp;nbsp;to&amp;nbsp;use&amp;nbsp;an&amp;nbsp;object&amp;nbsp;until&amp;nbsp;it’s&amp;nbsp;finished&amp;nbsp;with&amp;nbsp;its&lt;br&gt;
task,&amp;nbsp;just&amp;nbsp;as&amp;nbsp;a&amp;nbsp;golf&amp;nbsp;party&amp;nbsp;gets&amp;nbsp;exclusive&amp;nbsp;rights&amp;nbsp;to&amp;nbsp;the&amp;nbsp;green&amp;nbsp;until&amp;nbsp;it’s&amp;nbsp;done.&lt;br&gt;
And&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;is&amp;nbsp;more&amp;nbsp;important&amp;nbsp;can&amp;nbsp;raise&amp;nbsp;its&amp;nbsp;priority,&amp;nbsp;asserting&amp;nbsp;its&lt;br&gt;
right&amp;nbsp;to&amp;nbsp;play&amp;nbsp;through.&lt;br&gt;
&lt;br&gt;
__&amp;nbsp;The&amp;nbsp;devil&amp;nbsp;is&amp;nbsp;in&amp;nbsp;the&amp;nbsp;details,&amp;nbsp;of&amp;nbsp;course,&amp;nbsp;and&amp;nbsp;those&amp;nbsp;details&amp;nbsp;have&amp;nbsp;historically&amp;nbsp;made&amp;nbsp;threads&lt;br&gt;
difficult&amp;nbsp;to&amp;nbsp;use.&amp;nbsp;Fortunately,&amp;nbsp;Java&amp;nbsp;makes&amp;nbsp;creating,&amp;nbsp;controlling,&amp;nbsp;and&amp;nbsp;coordinating&amp;nbsp;threads&lt;br&gt;
simpler&amp;nbsp;by&amp;nbsp;integrating&amp;nbsp;some&amp;nbsp;of&amp;nbsp;these&amp;nbsp;concepts&amp;nbsp;directly&amp;nbsp;into&amp;nbsp;the&amp;nbsp;language.&lt;br&gt;
&lt;br&gt;
=======================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;Thread&amp;nbsp;Class&amp;nbsp;and&amp;nbsp;the&amp;nbsp;Runnable&amp;nbsp;Interface&lt;br&gt;
All&amp;nbsp;execution&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Thread&amp;nbsp;object,&amp;nbsp;beginning&amp;nbsp;with&amp;nbsp;a&lt;br&gt;
“main”&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;is&amp;nbsp;started&amp;nbsp;by&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;VM&amp;nbsp;to&amp;nbsp;launch&amp;nbsp;your&amp;nbsp;application.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;new&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;born&amp;nbsp;when&lt;br&gt;
we&amp;nbsp;create&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;__&amp;nbsp;java.lang.Thread&amp;nbsp;__&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;Thread&amp;nbsp;object&lt;br&gt;
represents&amp;nbsp;a&amp;nbsp;real&amp;nbsp;thread&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;interpreter&amp;nbsp;and&amp;nbsp;serves&amp;nbsp;as&amp;nbsp;a&lt;br&gt;
handle&amp;nbsp;for&amp;nbsp;controlling&amp;nbsp;and&amp;nbsp;coordinating&amp;nbsp;its&amp;nbsp;execution.&amp;nbsp;With&amp;nbsp;it,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;start&lt;br&gt;
the&amp;nbsp;thread,&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;it&amp;nbsp;to&amp;nbsp;complete,&amp;nbsp;cause&amp;nbsp;it&amp;nbsp;to&amp;nbsp;sleep&amp;nbsp;for&amp;nbsp;a&amp;nbsp;time,&amp;nbsp;or&lt;br&gt;
interrupt&amp;nbsp;its&amp;nbsp;activity.&amp;nbsp;The&amp;nbsp;constructor&amp;nbsp;for&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;class&amp;nbsp;accepts&lt;br&gt;
information&amp;nbsp;about&amp;nbsp;where&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;should&amp;nbsp;begin&amp;nbsp;its&amp;nbsp;execution.&lt;br&gt;
Conceptually,&amp;nbsp;we&amp;nbsp;would&amp;nbsp;like&amp;nbsp;to&amp;nbsp;simply&amp;nbsp;tell&amp;nbsp;it&amp;nbsp;what&amp;nbsp;method&amp;nbsp;to&amp;nbsp;run,&amp;nbsp;but&lt;br&gt;
because&amp;nbsp;there&amp;nbsp;are&amp;nbsp;no&amp;nbsp;pointers&amp;nbsp;to&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;(not&amp;nbsp;in&amp;nbsp;this&amp;nbsp;sense&lt;br&gt;
anyway),&amp;nbsp;we&amp;nbsp;can’t&amp;nbsp;specify&amp;nbsp;one&amp;nbsp;directly.&amp;nbsp;Instead,&amp;nbsp;we&amp;nbsp;have&amp;nbsp;to&lt;br&gt;
take&amp;nbsp;a&amp;nbsp;short&amp;nbsp;detour&amp;nbsp;and&amp;nbsp;use&amp;nbsp;the&amp;nbsp;java.lang.Runnable&amp;nbsp;interface&amp;nbsp;to&lt;br&gt;
create&amp;nbsp;or&amp;nbsp;mark&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;contains&amp;nbsp;a&amp;nbsp;“runnable”&amp;nbsp;method.&lt;br&gt;
Runnable&amp;nbsp;defines&amp;nbsp;a&amp;nbsp;single,&amp;nbsp;general-purpose&amp;nbsp;run()&amp;nbsp;method:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;abstract&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Every&amp;nbsp;thread&amp;nbsp;begins&amp;nbsp;its&amp;nbsp;life&amp;nbsp;by&amp;nbsp;executing&amp;nbsp;the&amp;nbsp;__&amp;nbsp;run()&amp;nbsp;__&amp;nbsp;method&amp;nbsp;in&amp;nbsp;a&lt;br&gt;
Runnable&amp;nbsp;object,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;the&amp;nbsp;“target&amp;nbsp;object”&amp;nbsp;that&amp;nbsp;was&amp;nbsp;passed&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;thread’s&amp;nbsp;constructor.&amp;nbsp;The&amp;nbsp;run()&amp;nbsp;method&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;any&amp;nbsp;code,&lt;br&gt;
but&amp;nbsp;it&amp;nbsp;must&amp;nbsp;be&amp;nbsp;public,&amp;nbsp;take&amp;nbsp;no&amp;nbsp;arguments,&amp;nbsp;have&amp;nbsp;no&amp;nbsp;return&amp;nbsp;value,&amp;nbsp;and&lt;br&gt;
throw&amp;nbsp;no&amp;nbsp;checked&amp;nbsp;exceptions.&lt;br&gt;
&lt;br&gt;
=============&lt;br&gt;
Hello&amp;nbsp;World&amp;nbsp;Example&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;simplymultithreadexamples;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;HelloThreads&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;threads");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;animation1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Animation());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;animation2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Animation());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;animation1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;animation2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Animation&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("animation&amp;nbsp;"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(200);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;catch&amp;nbsp;block&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=================================&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;natural-born&amp;nbsp;thread&lt;br&gt;
The&amp;nbsp;Runnable&amp;nbsp;interface&amp;nbsp;lets&amp;nbsp;us&amp;nbsp;make&amp;nbsp;an&amp;nbsp;arbitrary&amp;nbsp;object&amp;nbsp;the&amp;nbsp;target&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;thread,&amp;nbsp;as&amp;nbsp;we&amp;nbsp;did&amp;nbsp;in&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;example.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
most&amp;nbsp;important&amp;nbsp;general&amp;nbsp;usage&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;class.&amp;nbsp;In&amp;nbsp;most&amp;nbsp;situations&lt;br&gt;
in&amp;nbsp;which&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;use&amp;nbsp;threads,&amp;nbsp;you’ll&amp;nbsp;create&amp;nbsp;a&amp;nbsp;class&amp;nbsp;(possibly&amp;nbsp;a&lt;br&gt;
simple&amp;nbsp;adapter&amp;nbsp;class)&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;Runnable&amp;nbsp;interface.&lt;br&gt;
However,&amp;nbsp;we’d&amp;nbsp;be&amp;nbsp;remiss&amp;nbsp;not&amp;nbsp;to&amp;nbsp;show&amp;nbsp;you&amp;nbsp;the&amp;nbsp;other&amp;nbsp;technique&amp;nbsp;for&lt;br&gt;
creating&amp;nbsp;a&amp;nbsp;thread.&amp;nbsp;Another&amp;nbsp;design&amp;nbsp;option&amp;nbsp;is&amp;nbsp;to&amp;nbsp;make&amp;nbsp;our&amp;nbsp;target&lt;br&gt;
class&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;that&amp;nbsp;is&amp;nbsp;already&amp;nbsp;runnable.&amp;nbsp;As&amp;nbsp;it&amp;nbsp;turns&lt;br&gt;
out,&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;class&amp;nbsp;itself&amp;nbsp;conveniently&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;Runna&lt;br&gt;
ble&amp;nbsp;interface;&amp;nbsp;it&amp;nbsp;has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;run()&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;we&amp;nbsp;can&amp;nbsp;override&lt;br&gt;
directly&amp;nbsp;to&amp;nbsp;do&amp;nbsp;our&amp;nbsp;bidding:&lt;br&gt;
class&amp;nbsp;Animation&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
boolean&amp;nbsp;animate&amp;nbsp;=&amp;nbsp;true;&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
while&amp;nbsp;(&amp;nbsp;animate&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
//&amp;nbsp;draw&amp;nbsp;Frames&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;skeleton&amp;nbsp;of&amp;nbsp;our&amp;nbsp;Animation&amp;nbsp;class&amp;nbsp;looks&amp;nbsp;much&amp;nbsp;the&amp;nbsp;same&amp;nbsp;as&amp;nbsp;before,&lt;br&gt;
except&amp;nbsp;that&amp;nbsp;our&amp;nbsp;class&amp;nbsp;is&amp;nbsp;now&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;Thread.&amp;nbsp;To&amp;nbsp;go&amp;nbsp;along&lt;br&gt;
with&amp;nbsp;this&amp;nbsp;scheme,&amp;nbsp;the&amp;nbsp;default&amp;nbsp;constructor&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;class&amp;nbsp;makes&lt;br&gt;
itself&amp;nbsp;the&amp;nbsp;default&amp;nbsp;target—that&amp;nbsp;is,&amp;nbsp;by&amp;nbsp;default,&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;executes&lt;br&gt;
its&amp;nbsp;own&amp;nbsp;run()&amp;nbsp;method&amp;nbsp;when&amp;nbsp;we&amp;nbsp;call&amp;nbsp;the&amp;nbsp;start()&amp;nbsp;method,&amp;nbsp;as&amp;nbsp;shown&amp;nbsp;in&lt;br&gt;
Figure&amp;nbsp;9-2.&amp;nbsp;Now&amp;nbsp;our&amp;nbsp;subclass&amp;nbsp;can&amp;nbsp;just&amp;nbsp;override&amp;nbsp;the&amp;nbsp;run()&amp;nbsp;method&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
Thread&amp;nbsp;class.&amp;nbsp;(Thread&amp;nbsp;itself&amp;nbsp;defines&amp;nbsp;an&amp;nbsp;empty&amp;nbsp;run()&amp;nbsp;method.)&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Controlling&amp;nbsp;Threads&amp;nbsp;(start(),&amp;nbsp;sleep,&amp;nbsp;join,&amp;nbsp;wait&amp;nbsp;,&amp;nbsp;some&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;deprecated&amp;nbsp;methods,&lt;br&gt;
describe).&amp;nbsp;How&amp;nbsp;to&amp;nbsp;properly&amp;nbsp;stop&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;?&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;Daemon&amp;nbsp;Thread&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>We&amp;nbsp;have&amp;nbsp;seen&amp;nbsp;the&amp;nbsp;start()&amp;nbsp;method&amp;nbsp;used&amp;nbsp;to&amp;nbsp;begin&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;a&amp;nbsp;new&amp;nbsp;thread.&amp;nbsp;Several&lt;br&gt;
other&amp;nbsp;instance&amp;nbsp;methods&amp;nbsp;let&amp;nbsp;us&amp;nbsp;explicitly&amp;nbsp;control&amp;nbsp;a&amp;nbsp;thread’s&amp;nbsp;execution:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;static&amp;nbsp;Thread.sleep()&amp;nbsp;method&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;wait&lt;br&gt;
for&amp;nbsp;a&amp;nbsp;designated&amp;nbsp;period&amp;nbsp;of&amp;nbsp;time,&amp;nbsp;without&amp;nbsp;consuming&amp;nbsp;much&amp;nbsp;(or&amp;nbsp;possibly&amp;nbsp;any)&amp;nbsp;CPU&lt;br&gt;
time.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;methods&amp;nbsp;wait()&amp;nbsp;and&amp;nbsp;join()&amp;nbsp;coordinate&amp;nbsp;the&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;two&amp;nbsp;or&amp;nbsp;more&lt;br&gt;
threads.&amp;nbsp;We’ll&amp;nbsp;discuss&amp;nbsp;them&amp;nbsp;in&amp;nbsp;detail&amp;nbsp;when&amp;nbsp;we&amp;nbsp;talk&amp;nbsp;about&amp;nbsp;thread&lt;br&gt;
synchronization&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;interrupt()&amp;nbsp;method&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;is&amp;nbsp;sleeping&amp;nbsp;in&amp;nbsp;a&amp;nbsp;sleep()&lt;br&gt;
or&amp;nbsp;wait()&amp;nbsp;operation&amp;nbsp;or&amp;nbsp;is&amp;nbsp;otherwise&amp;nbsp;blocked&amp;nbsp;on&amp;nbsp;a&amp;nbsp;long&amp;nbsp;I/O&amp;nbsp;operation.1&lt;br&gt;
&lt;br&gt;
====================================&lt;br&gt;
&lt;br&gt;
Deprecated&amp;nbsp;methods&lt;br&gt;
We&amp;nbsp;should&amp;nbsp;also&amp;nbsp;mention&amp;nbsp;three&amp;nbsp;deprecated&amp;nbsp;thread&amp;nbsp;control&amp;nbsp;methods:&amp;nbsp;stop(),&lt;br&gt;
suspend(),&amp;nbsp;and&amp;nbsp;resume().&amp;nbsp;The&amp;nbsp;stop()&amp;nbsp;method&amp;nbsp;complements&amp;nbsp;start();&amp;nbsp;it&lt;br&gt;
destroys&amp;nbsp;the&amp;nbsp;thread.&amp;nbsp;start()&amp;nbsp;and&amp;nbsp;the&amp;nbsp;deprecated&amp;nbsp;stop()&amp;nbsp;method&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
called&amp;nbsp;only&amp;nbsp;once&amp;nbsp;in&amp;nbsp;the&amp;nbsp;thread’s&amp;nbsp;lifecycle.&amp;nbsp;By&amp;nbsp;contrast,&amp;nbsp;the&amp;nbsp;deprecated&lt;br&gt;
suspend()&amp;nbsp;and&amp;nbsp;resume()&amp;nbsp;methods&amp;nbsp;were&amp;nbsp;used&amp;nbsp;to&amp;nbsp;arbitrarily&amp;nbsp;pause&lt;br&gt;
and&amp;nbsp;then&amp;nbsp;restart&amp;nbsp;the&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;a&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;problem&lt;br&gt;
with&amp;nbsp;both&amp;nbsp;stop()&amp;nbsp;and&amp;nbsp;suspend()&amp;nbsp;is&amp;nbsp;that&amp;nbsp;they&amp;nbsp;seize&amp;nbsp;control&amp;nbsp;of&amp;nbsp;a&amp;nbsp;thread’s&lt;br&gt;
execution&amp;nbsp;in&amp;nbsp;an&amp;nbsp;uncoordinated,&amp;nbsp;harsh&amp;nbsp;way.&amp;nbsp;This&amp;nbsp;makes&amp;nbsp;programming&lt;br&gt;
difficult;&amp;nbsp;it’s&amp;nbsp;not&amp;nbsp;always&amp;nbsp;easy&amp;nbsp;for&amp;nbsp;an&amp;nbsp;application&amp;nbsp;to&amp;nbsp;anticipate&amp;nbsp;and&amp;nbsp;properly&lt;br&gt;
recover&amp;nbsp;from&amp;nbsp;being&amp;nbsp;interrupted&amp;nbsp;at&amp;nbsp;an&amp;nbsp;arbitrary&amp;nbsp;point&amp;nbsp;in&amp;nbsp;its&amp;nbsp;execution.&lt;br&gt;
Moreover,&amp;nbsp;when&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;seized&amp;nbsp;using&amp;nbsp;one&amp;nbsp;of&amp;nbsp;these&amp;nbsp;methods,&amp;nbsp;the&lt;br&gt;
Java&amp;nbsp;runtime&amp;nbsp;system&amp;nbsp;must&amp;nbsp;release&amp;nbsp;all&amp;nbsp;its&amp;nbsp;internal&amp;nbsp;locks&amp;nbsp;used&amp;nbsp;for&amp;nbsp;thread&lt;br&gt;
synchronization.&amp;nbsp;This&amp;nbsp;can&amp;nbsp;cause&amp;nbsp;unexpected&amp;nbsp;behavior&amp;nbsp;and,&amp;nbsp;in&amp;nbsp;the&amp;nbsp;case&amp;nbsp;of&lt;br&gt;
suspend(),&amp;nbsp;can&amp;nbsp;easily&amp;nbsp;lead&amp;nbsp;to&amp;nbsp;deadlock.&amp;nbsp;A&amp;nbsp;better&amp;nbsp;way&amp;nbsp;to&amp;nbsp;affect&amp;nbsp;the&amp;nbsp;execution&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;thread—which&amp;nbsp;requires&amp;nbsp;just&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;more&amp;nbsp;work&amp;nbsp;on&amp;nbsp;your&amp;nbsp;part—is&amp;nbsp;by&lt;br&gt;
creating&amp;nbsp;some&amp;nbsp;simple&amp;nbsp;logic&amp;nbsp;in&amp;nbsp;your&amp;nbsp;thread’s&amp;nbsp;code&amp;nbsp;to&amp;nbsp;use&amp;nbsp;monitor&lt;br&gt;
variables&amp;nbsp;(flags),&amp;nbsp;possibly&amp;nbsp;in&amp;nbsp;conjunction&amp;nbsp;with&amp;nbsp;the&amp;nbsp;interrupt()&amp;nbsp;method,&lt;br&gt;
which&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;wake&amp;nbsp;up&amp;nbsp;a&amp;nbsp;sleeping&amp;nbsp;thread.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;you&amp;nbsp;should&lt;br&gt;
cause&amp;nbsp;your&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;stop&amp;nbsp;or&amp;nbsp;resume&amp;nbsp;what&amp;nbsp;it&amp;nbsp;is&amp;nbsp;doing&amp;nbsp;by&amp;nbsp;asking&amp;nbsp;it&amp;nbsp;nicely&lt;br&gt;
rather&amp;nbsp;than&amp;nbsp;by&amp;nbsp;pulling&amp;nbsp;the&amp;nbsp;rug&amp;nbsp;out&amp;nbsp;from&amp;nbsp;under&amp;nbsp;it&amp;nbsp;unexpectedly.&amp;nbsp;The&amp;nbsp;thread&amp;nbsp;examples&lt;br&gt;
in&amp;nbsp;this&amp;nbsp;book&amp;nbsp;use&amp;nbsp;this&amp;nbsp;technique&amp;nbsp;in&amp;nbsp;one&amp;nbsp;way&amp;nbsp;or&amp;nbsp;another.&lt;br&gt;
&lt;br&gt;
===========================================&lt;br&gt;
The&amp;nbsp;sleep()&amp;nbsp;method&lt;br&gt;
We&amp;nbsp;often&amp;nbsp;need&amp;nbsp;to&amp;nbsp;tell&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;sit&amp;nbsp;idle,&amp;nbsp;or&amp;nbsp;“sleep,”&amp;nbsp;for&amp;nbsp;a&amp;nbsp;fixed&amp;nbsp;period&amp;nbsp;of&lt;br&gt;
time.&amp;nbsp;While&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;asleep,&amp;nbsp;or&amp;nbsp;otherwise&amp;nbsp;blocked&amp;nbsp;from&amp;nbsp;input&amp;nbsp;of&amp;nbsp;some&amp;nbsp;kind,&lt;br&gt;
it&amp;nbsp;doesn’t&amp;nbsp;consume&amp;nbsp;CPU&amp;nbsp;time&amp;nbsp;or&amp;nbsp;compete&amp;nbsp;with&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;for&amp;nbsp;processing.&lt;br&gt;
For&amp;nbsp;this,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;call&amp;nbsp;the&amp;nbsp;static&amp;nbsp;method&amp;nbsp;Thread.sleep(),&amp;nbsp;which&amp;nbsp;affects&amp;nbsp;the&amp;nbsp;currently&lt;br&gt;
executing&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;sleep()&amp;nbsp;method&amp;nbsp;may&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;InterruptedException&amp;nbsp;if&amp;nbsp;it&amp;nbsp;is&amp;nbsp;interrupted&lt;br&gt;
by&amp;nbsp;&amp;nbsp;___&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;via&amp;nbsp;the&amp;nbsp;interrupt()&amp;nbsp;method.&amp;nbsp;As&amp;nbsp;you&amp;nbsp;see&amp;nbsp;in&amp;nbsp;the&amp;nbsp;previous&lt;br&gt;
code,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;catch&amp;nbsp;this&amp;nbsp;exception&amp;nbsp;and&amp;nbsp;take&amp;nbsp;the&amp;nbsp;opportunity&amp;nbsp;to&lt;br&gt;
perform&amp;nbsp;some&amp;nbsp;action—such&amp;nbsp;as&amp;nbsp;checking&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;determine&amp;nbsp;whether&amp;nbsp;or&amp;nbsp;not&amp;nbsp;it&lt;br&gt;
should&amp;nbsp;exit—or&amp;nbsp;perhaps&amp;nbsp;just&amp;nbsp;perform&amp;nbsp;some&amp;nbsp;housekeeping&amp;nbsp;and&amp;nbsp;then&amp;nbsp;go&amp;nbsp;back&amp;nbsp;to&amp;nbsp;sleep.&lt;br&gt;
&lt;br&gt;
===================================================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;join()&amp;nbsp;method&lt;br&gt;
&lt;br&gt;
Finally,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;coordinate&amp;nbsp;your&amp;nbsp;activities&amp;nbsp;with&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;by&lt;br&gt;
waiting&amp;nbsp;for&amp;nbsp;it&amp;nbsp;to&amp;nbsp;complete&amp;nbsp;its&amp;nbsp;task,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;join()&amp;nbsp;method.&amp;nbsp;Calling&amp;nbsp;a&lt;br&gt;
thread’s&amp;nbsp;join()&amp;nbsp;method&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;caller&amp;nbsp;to&amp;nbsp;block&amp;nbsp;until&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&lt;br&gt;
completes.&amp;nbsp;Alternatively,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;poll&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;join()&amp;nbsp;with&amp;nbsp;a&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;milliseconds&amp;nbsp;to&amp;nbsp;wait.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;very&amp;nbsp;coarse&amp;nbsp;form&amp;nbsp;of&amp;nbsp;thread&amp;nbsp;synchronization.&lt;br&gt;
Later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter,&amp;nbsp;we’ll&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;much&amp;nbsp;more&amp;nbsp;general&amp;nbsp;and&amp;nbsp;powerful&lt;br&gt;
mechanism&amp;nbsp;for&amp;nbsp;coordinating&amp;nbsp;thread&amp;nbsp;activity:&amp;nbsp;wait(),&amp;nbsp;notify(),&amp;nbsp;and&amp;nbsp;even&lt;br&gt;
higher-level&amp;nbsp;APIs&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.util.concurrent&amp;nbsp;package.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;simplymultithreadexamples;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ControllingThreadsJoin&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyRunnable());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyRunnable());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;main&amp;nbsp;method(Thread)&amp;nbsp;&amp;nbsp;&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;t1&amp;nbsp;finish&amp;nbsp;it's&amp;nbsp;work&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("End&amp;nbsp;of&amp;nbsp;main");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;MyRunnable&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Thread&amp;nbsp;started:::"&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(4000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.println("Thread&amp;nbsp;ended:::"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Thread&amp;nbsp;started:::Thread-0&lt;br&gt;
Thread&amp;nbsp;ended:::Thread-0&lt;br&gt;
Thread&amp;nbsp;started:::Thread-1&lt;br&gt;
Thread&amp;nbsp;ended:::Thread-1&lt;br&gt;
End&amp;nbsp;of&amp;nbsp;main&lt;br&gt;
&lt;br&gt;
====================================&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;interrupt()&amp;nbsp;method&lt;br&gt;
Earlier,&amp;nbsp;we&amp;nbsp;described&amp;nbsp;the&amp;nbsp;interrupt()&amp;nbsp;method&amp;nbsp;as&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;wake&amp;nbsp;up&amp;nbsp;a&amp;nbsp;thread&lt;br&gt;
that&amp;nbsp;is&amp;nbsp;idle&amp;nbsp;in&amp;nbsp;a&amp;nbsp;sleep(),&amp;nbsp;wait(),&amp;nbsp;or&amp;nbsp;lengthy&amp;nbsp;I/O&amp;nbsp;operation.&amp;nbsp;Any&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;is&lt;br&gt;
not&amp;nbsp;running&amp;nbsp;continuously&amp;nbsp;(not&amp;nbsp;a&amp;nbsp;&amp;nbsp;____&amp;nbsp;“hard&amp;nbsp;loop”)&amp;nbsp;must&amp;nbsp;enter&amp;nbsp;one&amp;nbsp;of&amp;nbsp;these&amp;nbsp;states&lt;br&gt;
periodically&amp;nbsp;and&amp;nbsp;so&amp;nbsp;this&amp;nbsp;is&amp;nbsp;intended&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;point&amp;nbsp;where&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;be&amp;nbsp;flagged&lt;br&gt;
to&amp;nbsp;stop.&amp;nbsp;When&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;interrupted,&amp;nbsp;its&amp;nbsp;interrupt&amp;nbsp;status&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;set.&amp;nbsp;This&amp;nbsp;can&lt;br&gt;
happen&amp;nbsp;at&amp;nbsp;any&amp;nbsp;time,&amp;nbsp;whether&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;idle&amp;nbsp;or&amp;nbsp;not.&amp;nbsp;The&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;test&amp;nbsp;this&lt;br&gt;
status&amp;nbsp;with&amp;nbsp;the&amp;nbsp;isInterrupted()&amp;nbsp;method.&amp;nbsp;is&amp;nbsp;Interrupted(boolean),&amp;nbsp;another&amp;nbsp;form,&lt;br&gt;
accepts&amp;nbsp;a&amp;nbsp;Boolean&amp;nbsp;value&amp;nbsp;indicating&amp;nbsp;whether&amp;nbsp;or&amp;nbsp;not&amp;nbsp;to&amp;nbsp;clear&amp;nbsp;the&amp;nbsp;interrupt&amp;nbsp;status.&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;way,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;interrupt&amp;nbsp;status&amp;nbsp;as&amp;nbsp;a&amp;nbsp;flag&amp;nbsp;and&amp;nbsp;a&amp;nbsp;signal.&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;indeed&amp;nbsp;the&amp;nbsp;prescribed&amp;nbsp;functionality&amp;nbsp;of&amp;nbsp;the&amp;nbsp;method.&amp;nbsp;However,&amp;nbsp;historically,&lt;br&gt;
this&amp;nbsp;has&amp;nbsp;been&amp;nbsp;a&amp;nbsp;weak&amp;nbsp;spot,&amp;nbsp;and&amp;nbsp;Java&amp;nbsp;implementations&amp;nbsp;have&amp;nbsp;had&amp;nbsp;trouble&amp;nbsp;getting&lt;br&gt;
it&amp;nbsp;to&amp;nbsp;work&amp;nbsp;correctly&amp;nbsp;in&amp;nbsp;all&amp;nbsp;cases.&amp;nbsp;In&amp;nbsp;early&amp;nbsp;Java&amp;nbsp;VMs&amp;nbsp;(prior&amp;nbsp;to&amp;nbsp;version&amp;nbsp;1.1),&amp;nbsp;interrupt&amp;nbsp;did&lt;br&gt;
not&amp;nbsp;work&amp;nbsp;at&amp;nbsp;all.&amp;nbsp;More&amp;nbsp;recent&amp;nbsp;versions&amp;nbsp;still&amp;nbsp;have&amp;nbsp;problems&amp;nbsp;with&amp;nbsp;interrupting&amp;nbsp;I/O&amp;nbsp;calls.&lt;br&gt;
By&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;call,&amp;nbsp;we&amp;nbsp;mean&amp;nbsp;when&amp;nbsp;an&amp;nbsp;application&amp;nbsp;is&amp;nbsp;blocked&amp;nbsp;in&amp;nbsp;a&amp;nbsp;read()&amp;nbsp;or&amp;nbsp;write()&lt;br&gt;
method,&amp;nbsp;moving&amp;nbsp;bytes&amp;nbsp;to&amp;nbsp;or&amp;nbsp;from&amp;nbsp;a&amp;nbsp;source&amp;nbsp;such&amp;nbsp;as&amp;nbsp;a&amp;nbsp;file&amp;nbsp;or&amp;nbsp;the&amp;nbsp;network.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;case,&lt;br&gt;
Java&amp;nbsp;is&amp;nbsp;supposed&amp;nbsp;to&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;InterruptedIOException&amp;nbsp;when&amp;nbsp;the&amp;nbsp;interrupt()&amp;nbsp;is&amp;nbsp;performed.&lt;br&gt;
However,&amp;nbsp;this&amp;nbsp;has&amp;nbsp;never&amp;nbsp;been&amp;nbsp;reliable&amp;nbsp;across&amp;nbsp;all&amp;nbsp;Java&amp;nbsp;implementations.&amp;nbsp;To&amp;nbsp;address&amp;nbsp;this&lt;br&gt;
in&amp;nbsp;Java&amp;nbsp;1.4,&amp;nbsp;a&amp;nbsp;new&amp;nbsp;I/O&amp;nbsp;framework&amp;nbsp;(java.nio)&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;with&amp;nbsp;one&amp;nbsp;of&amp;nbsp;its&amp;nbsp;goals&amp;nbsp;being&lt;br&gt;
to&amp;nbsp;specifically&amp;nbsp;address&amp;nbsp;these&amp;nbsp;problems.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;an&amp;nbsp;NIO&amp;nbsp;operation&lt;br&gt;
is&amp;nbsp;interrupted,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;and&amp;nbsp;the&amp;nbsp;I/O&amp;nbsp;stream&amp;nbsp;(called&amp;nbsp;a&amp;nbsp;“channel”)&lt;br&gt;
is&amp;nbsp;automatically&amp;nbsp;closed.&amp;nbsp;(See&amp;nbsp;Chapter&amp;nbsp;12&amp;nbsp;for&amp;nbsp;more&amp;nbsp;about&amp;nbsp;the&amp;nbsp;NIO&amp;nbsp;package.)&lt;br&gt;
&lt;br&gt;
FROM&amp;nbsp;IBM&amp;nbsp;SITE:&lt;br&gt;
Each&amp;nbsp;THREAD&amp;nbsp;has&amp;nbsp;an&amp;nbsp;associated&amp;nbsp;Boolean&amp;nbsp;property&amp;nbsp;that&amp;nbsp;displays&amp;nbsp;the&amp;nbsp;status&amp;nbsp;of&amp;nbsp;the&amp;nbsp;interrupt.&lt;br&gt;
Interrupt&amp;nbsp;status&amp;nbsp;initially&amp;nbsp;has&amp;nbsp;the&amp;nbsp;value&amp;nbsp;false;&amp;nbsp;when&amp;nbsp;the&amp;nbsp;flow&amp;nbsp;is&amp;nbsp;interrupted&amp;nbsp;by&amp;nbsp;any&amp;nbsp;other&amp;nbsp;thread&lt;br&gt;
by&amp;nbsp;calling&amp;nbsp;Thread.interrupt&amp;nbsp;(),&amp;nbsp;then&amp;nbsp;one&amp;nbsp;of&amp;nbsp;two&amp;nbsp;things&amp;nbsp;happens&amp;nbsp;.&amp;nbsp;If&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;is&lt;br&gt;
interrupted&amp;nbsp;by&amp;nbsp;blocking&amp;nbsp;method&amp;nbsp;performs&amp;nbsp;low&amp;nbsp;level&amp;nbsp;,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;Thread.sleep&amp;nbsp;(),&amp;nbsp;Thread.join&amp;nbsp;()&lt;br&gt;
or&amp;nbsp;Object.wait&amp;nbsp;(),&amp;nbsp;it&amp;nbsp;is&amp;nbsp;unlocked&amp;nbsp;and&amp;nbsp;gives&amp;nbsp;InterruptedException.&amp;nbsp;Otherwise&amp;nbsp;,&amp;nbsp;interrupt&amp;nbsp;()&lt;br&gt;
simply&amp;nbsp;establishes&amp;nbsp;the&amp;nbsp;status&amp;nbsp;of&amp;nbsp;flow&amp;nbsp;interruption&amp;nbsp;.&amp;nbsp;Code,&amp;nbsp;used&amp;nbsp;in&amp;nbsp;the&amp;nbsp;interrupted&amp;nbsp;thread&lt;br&gt;
may&amp;nbsp;later&amp;nbsp;turn&amp;nbsp;to&amp;nbsp;interrupt&amp;nbsp;status&amp;nbsp;to&amp;nbsp;see&amp;nbsp;if&amp;nbsp;there&amp;nbsp;was&amp;nbsp;a&amp;nbsp;request&amp;nbsp;to&amp;nbsp;abort&amp;nbsp;the&amp;nbsp;action;&amp;nbsp;interrupt&lt;br&gt;
status&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;by&amp;nbsp;Thread.isInterrupted&amp;nbsp;(),&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&amp;nbsp;read&amp;nbsp;and&amp;nbsp;cleared&amp;nbsp;in&amp;nbsp;one&lt;br&gt;
operation&amp;nbsp;using&amp;nbsp;the&amp;nbsp;failed&amp;nbsp;title&amp;nbsp;Thread.interrupted&amp;nbsp;().&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;simplymultithreadexamples;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ControllingMethodsInterrupt&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;thrd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyThread(),&amp;nbsp;"MyThread&amp;nbsp;#1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;thrd2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyThread(),&amp;nbsp;"MyThread&amp;nbsp;#2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thrd.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thrd.interrupt();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;MyThread&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;starting.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(Thread.interrupted())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("interrupted&amp;nbsp;without&amp;nbsp;exception,&amp;nbsp;because&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;didnt&amp;nbsp;sleep&amp;nbsp;in&amp;nbsp;MOMENT&amp;nbsp;WHEN&amp;nbsp;IT&amp;nbsp;WAS&amp;nbsp;'intterrupted&amp;nbsp;'");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(".");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(long&amp;nbsp;x&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;x&amp;nbsp;&lt;&amp;nbsp;1000;&amp;nbsp;x++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Thread.sleep(70);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("/");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;exc)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"&amp;nbsp;interrupted.&amp;nbsp;Exception");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;exiting.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
MyThread&amp;nbsp;#1&amp;nbsp;starting.&lt;br&gt;
./&lt;br&gt;
/&lt;br&gt;
/&lt;br&gt;
/&lt;br&gt;
/&lt;br&gt;
/&lt;br&gt;
....&lt;br&gt;
interrupted&amp;nbsp;without&amp;nbsp;exception,&amp;nbsp;because&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;didnt&amp;nbsp;sleep&amp;nbsp;in&amp;nbsp;'intterrupted&amp;nbsp;moment'&lt;br&gt;
MyThread&amp;nbsp;#1&amp;nbsp;exiting.&lt;br&gt;
==========================================&lt;br&gt;
==========================================&lt;br&gt;
&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;properly&amp;nbsp;stop&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;in&amp;nbsp;Java&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;IndexProcessor&amp;nbsp;class&amp;nbsp;you&amp;nbsp;need&amp;nbsp;a&amp;nbsp;way&amp;nbsp;of&amp;nbsp;setting&amp;nbsp;a&amp;nbsp;flag&amp;nbsp;which&amp;nbsp;informs&amp;nbsp;the&amp;nbsp;thread&lt;br&gt;
that&amp;nbsp;it&amp;nbsp;will&amp;nbsp;need&amp;nbsp;to&amp;nbsp;terminate,&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;run&amp;nbsp;that&amp;nbsp;you&amp;nbsp;have&amp;nbsp;used&amp;nbsp;just&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;class&amp;nbsp;scope.&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;you&amp;nbsp;wish&amp;nbsp;to&amp;nbsp;stop&amp;nbsp;the&amp;nbsp;thread,&amp;nbsp;you&amp;nbsp;set&amp;nbsp;this&amp;nbsp;flag&amp;nbsp;and&amp;nbsp;call&amp;nbsp;join()&amp;nbsp;on&amp;nbsp;the&amp;nbsp;thread&lt;br&gt;
and&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;it&amp;nbsp;to&amp;nbsp;finish.&lt;br&gt;
&lt;br&gt;
Make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;the&amp;nbsp;flag&amp;nbsp;is&amp;nbsp;thread&amp;nbsp;safe&amp;nbsp;by&amp;nbsp;using&amp;nbsp;a&amp;nbsp;volatile&amp;nbsp;variable&amp;nbsp;or&amp;nbsp;by&amp;nbsp;using&amp;nbsp;getter&lt;br&gt;
and&amp;nbsp;setter&amp;nbsp;methods&amp;nbsp;which&amp;nbsp;are&amp;nbsp;synchronised&amp;nbsp;with&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;being&amp;nbsp;used&amp;nbsp;as&amp;nbsp;the&amp;nbsp;flag.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;IndexProcessor&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;LOGGER&amp;nbsp;=&amp;nbsp;LoggerFactory.getLogger(IndexProcessor.class);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;volatile&amp;nbsp;boolean&amp;nbsp;running&amp;nbsp;=&amp;nbsp;true;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;terminate()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;running&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(running)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Sleeping...");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep((long)&amp;nbsp;15000);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Processing");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.error("Exception",&amp;nbsp;e);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;running&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SearchEngineContextListener&amp;nbsp;implements&amp;nbsp;ServletContextListener&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;LOGGER&amp;nbsp;=&amp;nbsp;LoggerFactory.getLogger(SearchEngineContextListener.class);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Thread&amp;nbsp;thread&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;IndexProcessor&amp;nbsp;runnable&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;contextInitialized(ServletContextEvent&amp;nbsp;event)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runnable&amp;nbsp;=&amp;nbsp;new&amp;nbsp;IndexProcessor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(runnable);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Starting&amp;nbsp;thread:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;thread);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Background&amp;nbsp;process&amp;nbsp;successfully&amp;nbsp;started.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;contextDestroyed(ServletContextEvent&amp;nbsp;event)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Stopping&amp;nbsp;thread:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;thread);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(thread&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;runnable.terminate();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.debug("Thread&amp;nbsp;successfully&amp;nbsp;stopped.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
=====================================&lt;br&gt;
Death&amp;nbsp;of&amp;nbsp;a&amp;nbsp;Thread&lt;br&gt;
A&amp;nbsp;thread&amp;nbsp;continues&amp;nbsp;to&amp;nbsp;execute&amp;nbsp;until&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;happens:&lt;br&gt;
-&amp;nbsp;It&amp;nbsp;explicitly&amp;nbsp;returns&amp;nbsp;from&amp;nbsp;its&amp;nbsp;target&amp;nbsp;run()&amp;nbsp;method.&lt;br&gt;
-&amp;nbsp;It&amp;nbsp;encounters&amp;nbsp;an&amp;nbsp;uncaught&amp;nbsp;runtime&amp;nbsp;exception.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;evil&amp;nbsp;and&amp;nbsp;nasty&amp;nbsp;deprecated&amp;nbsp;stop()&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called.&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;happens&amp;nbsp;if&amp;nbsp;none&amp;nbsp;of&amp;nbsp;these&amp;nbsp;things&amp;nbsp;occurs,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;run()&amp;nbsp;method&lt;br&gt;
for&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;never&amp;nbsp;terminates?&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;that&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;live&amp;nbsp;on,&amp;nbsp;even&lt;br&gt;
after&amp;nbsp;what&amp;nbsp;is&amp;nbsp;ostensibly&amp;nbsp;the&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&amp;nbsp;that&amp;nbsp;created&amp;nbsp;it&amp;nbsp;has&amp;nbsp;finished.&lt;br&gt;
This&amp;nbsp;means&amp;nbsp;we&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;aware&amp;nbsp;of&amp;nbsp;how&amp;nbsp;our&amp;nbsp;threads&amp;nbsp;eventually&amp;nbsp;terminate,&amp;nbsp;or&amp;nbsp;an&lt;br&gt;
application&amp;nbsp;can&amp;nbsp;end&amp;nbsp;up&amp;nbsp;leaving&amp;nbsp;orphaned&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;unnecessarily&amp;nbsp;consume&amp;nbsp;resources&lt;br&gt;
or&amp;nbsp;keep&amp;nbsp;the&amp;nbsp;application&amp;nbsp;alive&amp;nbsp;when&amp;nbsp;it&amp;nbsp;would&amp;nbsp;otherwise&amp;nbsp;quit.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;many&amp;nbsp;cases,&amp;nbsp;we&amp;nbsp;really&amp;nbsp;want&amp;nbsp;to&amp;nbsp;create&amp;nbsp;background&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;do&amp;nbsp;simple,&lt;br&gt;
periodic&amp;nbsp;tasks&amp;nbsp;in&amp;nbsp;an&amp;nbsp;application.&amp;nbsp;The&amp;nbsp;setDaemon()&amp;nbsp;method&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;mark&lt;br&gt;
a&amp;nbsp;thread&amp;nbsp;as&amp;nbsp;a&amp;nbsp;___&amp;nbsp;daemon&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;should&amp;nbsp;be&amp;nbsp;killed&amp;nbsp;and&amp;nbsp;discarded&amp;nbsp;when&amp;nbsp;no&amp;nbsp;other&amp;nbsp;__&lt;br&gt;
nondaemon&amp;nbsp;application&amp;nbsp;threads&amp;nbsp;remain.&amp;nbsp;Normally,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;interpreter&amp;nbsp;continues&lt;br&gt;
to&amp;nbsp;run&amp;nbsp;until&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;have&amp;nbsp;completed.&amp;nbsp;But&amp;nbsp;when&amp;nbsp;daemon&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;the&lt;br&gt;
only&amp;nbsp;threads&amp;nbsp;still&amp;nbsp;alive,&amp;nbsp;the&amp;nbsp;interpreter&amp;nbsp;will&amp;nbsp;exit.&lt;br&gt;
Here’s&amp;nbsp;a&amp;nbsp;devilish&amp;nbsp;example&amp;nbsp;using&amp;nbsp;daemon&amp;nbsp;threads:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Devil&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;Devil()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;setDaemon(&amp;nbsp;true&amp;nbsp;);&lt;br&gt;
&amp;nbsp;start();&lt;br&gt;
}&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;//&amp;nbsp;perform&amp;nbsp;evil&amp;nbsp;tasks&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;Devil&amp;nbsp;thread&amp;nbsp;sets&amp;nbsp;its&amp;nbsp;daemon&amp;nbsp;status&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;created.&lt;br&gt;
If&amp;nbsp;any&amp;nbsp;Devil&amp;nbsp;threads&amp;nbsp;remain&amp;nbsp;when&amp;nbsp;our&amp;nbsp;application&amp;nbsp;is&amp;nbsp;otherwise&amp;nbsp;complete,&amp;nbsp;the&lt;br&gt;
runtime&amp;nbsp;system&amp;nbsp;kills&amp;nbsp;them&amp;nbsp;for&amp;nbsp;us.&amp;nbsp;We&amp;nbsp;don’t&amp;nbsp;have&amp;nbsp;to&amp;nbsp;worry&amp;nbsp;about&amp;nbsp;cleaning&amp;nbsp;them&amp;nbsp;up.&lt;br&gt;
&lt;br&gt;
Daemon&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;primarily&amp;nbsp;useful&amp;nbsp;in&amp;nbsp;standalone&amp;nbsp;Java&amp;nbsp;applications&amp;nbsp;and&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
implementation&amp;nbsp;of&amp;nbsp;server&amp;nbsp;frameworks,&amp;nbsp;but&amp;nbsp;not&amp;nbsp;in&amp;nbsp;component&amp;nbsp;applications&amp;nbsp;such&lt;br&gt;
as&amp;nbsp;applets.&amp;nbsp;Since&amp;nbsp;an&amp;nbsp;applet&amp;nbsp;runs&amp;nbsp;inside&amp;nbsp;another&amp;nbsp;Java&amp;nbsp;application,&amp;nbsp;any&amp;nbsp;daemon&lt;br&gt;
threads&amp;nbsp;it&amp;nbsp;creates&amp;nbsp;can&amp;nbsp;continue&amp;nbsp;to&amp;nbsp;live&amp;nbsp;until&amp;nbsp;the&amp;nbsp;controlling&amp;nbsp;application&amp;nbsp;exits—probably&lt;br&gt;
not&amp;nbsp;the&amp;nbsp;desired&amp;nbsp;effect.&lt;br&gt;
A&amp;nbsp;browser&amp;nbsp;or&amp;nbsp;any&amp;nbsp;other&amp;nbsp;application&amp;nbsp;can&amp;nbsp;use&amp;nbsp;ThreadGroups&amp;nbsp;to&amp;nbsp;contain&amp;nbsp;all&amp;nbsp;the&amp;nbsp;threads&lt;br&gt;
created&amp;nbsp;by&amp;nbsp;subsystems&amp;nbsp;of&amp;nbsp;an&amp;nbsp;application&amp;nbsp;and&amp;nbsp;then&amp;nbsp;clean&amp;nbsp;them&amp;nbsp;up&amp;nbsp;if&amp;nbsp;necessary&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;list&amp;nbsp;useful&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;java.lang.Thread&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Constructor&amp;nbsp;Summary&lt;br&gt;
&lt;br&gt;
Constructor&amp;nbsp;and&amp;nbsp;Description&lt;br&gt;
-&amp;nbsp;Thread()&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread(Runnable&amp;nbsp;target)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread(Runnable&amp;nbsp;target,&amp;nbsp;String&amp;nbsp;name)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread(String&amp;nbsp;name)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread(ThreadGroup&amp;nbsp;group,&amp;nbsp;Runnable&amp;nbsp;target)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread(ThreadGroup&amp;nbsp;group,&amp;nbsp;Runnable&amp;nbsp;target,&amp;nbsp;String&amp;nbsp;name)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object&amp;nbsp;so&amp;nbsp;that&amp;nbsp;it&amp;nbsp;has&amp;nbsp;target&amp;nbsp;as&amp;nbsp;its&amp;nbsp;run&amp;nbsp;object,&amp;nbsp;has&lt;br&gt;
the&amp;nbsp;specified&amp;nbsp;name&amp;nbsp;as&amp;nbsp;its&amp;nbsp;name,&amp;nbsp;and&amp;nbsp;belongs&amp;nbsp;to&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;by&amp;nbsp;group.&lt;br&gt;
-&amp;nbsp;Thread(ThreadGroup&amp;nbsp;group,&amp;nbsp;Runnable&amp;nbsp;target,&amp;nbsp;String&amp;nbsp;name,&amp;nbsp;long&amp;nbsp;stackSize)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object&amp;nbsp;so&amp;nbsp;that&amp;nbsp;it&amp;nbsp;has&amp;nbsp;target&amp;nbsp;as&amp;nbsp;its&amp;nbsp;run&amp;nbsp;object,&amp;nbsp;has&amp;nbsp;the&lt;br&gt;
specified&amp;nbsp;name&amp;nbsp;as&amp;nbsp;its&amp;nbsp;name,&amp;nbsp;and&amp;nbsp;belongs&amp;nbsp;to&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;referred&amp;nbsp;to&amp;nbsp;by&amp;nbsp;group,&amp;nbsp;and&lt;br&gt;
has&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;stack&amp;nbsp;size.&lt;br&gt;
-&amp;nbsp;Thread(ThreadGroup&amp;nbsp;group,&amp;nbsp;String&amp;nbsp;name)&lt;br&gt;
Allocates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Thread&amp;nbsp;object.&lt;br&gt;
&lt;br&gt;
================================&lt;br&gt;
================================&lt;br&gt;
Method&amp;nbsp;Summary&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Modifier&amp;nbsp;and&amp;nbsp;Type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Method&amp;nbsp;and&amp;nbsp;Description&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;int&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;activeCount()&lt;br&gt;
Returns&amp;nbsp;an&amp;nbsp;estimate&amp;nbsp;of&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;active&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;and&amp;nbsp;its&amp;nbsp;subgroups.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;checkAccess()&lt;br&gt;
Determines&amp;nbsp;if&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;running&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;permission&amp;nbsp;to&amp;nbsp;modify&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;protected&amp;nbsp;Object&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;clone()&lt;br&gt;
Throws&amp;nbsp;CloneNotSupportedException&amp;nbsp;as&amp;nbsp;a&amp;nbsp;Thread&amp;nbsp;can&amp;nbsp;not&amp;nbsp;be&amp;nbsp;meaningfully&amp;nbsp;cloned.&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countStackFrames()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;definition&amp;nbsp;of&amp;nbsp;this&amp;nbsp;call&amp;nbsp;depends&amp;nbsp;on&amp;nbsp;suspend(),&amp;nbsp;which&amp;nbsp;is&amp;nbsp;deprecated.&amp;nbsp;Further,&amp;nbsp;the&amp;nbsp;results&amp;nbsp;of&amp;nbsp;this&amp;nbsp;call&amp;nbsp;were&amp;nbsp;never&amp;nbsp;well-defined.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;Thread&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentThread()&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;destroy()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;was&amp;nbsp;originally&amp;nbsp;designed&amp;nbsp;to&amp;nbsp;destroy&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;without&amp;nbsp;any&amp;nbsp;cleanup.&amp;nbsp;Any&lt;br&gt;
monitors&amp;nbsp;it&amp;nbsp;held&amp;nbsp;would&amp;nbsp;have&amp;nbsp;remained&amp;nbsp;locked.&amp;nbsp;However,&amp;nbsp;the&amp;nbsp;method&amp;nbsp;was&amp;nbsp;never&lt;br&gt;
implemented.&amp;nbsp;If&amp;nbsp;if&amp;nbsp;were&amp;nbsp;to&amp;nbsp;be&amp;nbsp;implemented,&amp;nbsp;it&amp;nbsp;would&amp;nbsp;be&amp;nbsp;deadlock-prone&amp;nbsp;in&amp;nbsp;much&amp;nbsp;the&lt;br&gt;
manner&amp;nbsp;of&amp;nbsp;suspend().&amp;nbsp;If&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;held&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;protecting&amp;nbsp;a&amp;nbsp;critical&amp;nbsp;system&lt;br&gt;
resource&amp;nbsp;when&amp;nbsp;it&amp;nbsp;was&amp;nbsp;destroyed,&amp;nbsp;no&amp;nbsp;thread&amp;nbsp;could&amp;nbsp;ever&amp;nbsp;access&amp;nbsp;this&amp;nbsp;resource&amp;nbsp;again.&lt;br&gt;
If&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;ever&amp;nbsp;attempted&amp;nbsp;to&amp;nbsp;lock&amp;nbsp;this&amp;nbsp;resource,&amp;nbsp;deadlock&amp;nbsp;would&amp;nbsp;result.&amp;nbsp;Such&lt;br&gt;
deadlocks&amp;nbsp;typically&amp;nbsp;manifest&amp;nbsp;themselves&amp;nbsp;as&amp;nbsp;"frozen"&amp;nbsp;processes.&amp;nbsp;For&amp;nbsp;more&amp;nbsp;information,&lt;br&gt;
see&amp;nbsp;Why&amp;nbsp;are&amp;nbsp;Thread.stop,&amp;nbsp;Thread.suspend&amp;nbsp;and&amp;nbsp;Thread.resume&amp;nbsp;Deprecated?.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dumpStack()&lt;br&gt;
Prints&amp;nbsp;a&amp;nbsp;stack&amp;nbsp;trace&amp;nbsp;of&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;error&amp;nbsp;stream.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;int&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enumerate(Thread[]&amp;nbsp;tarray)&lt;br&gt;
Copies&amp;nbsp;into&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;array&amp;nbsp;every&amp;nbsp;active&amp;nbsp;thread&amp;nbsp;in&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;and&amp;nbsp;its&amp;nbsp;subgroups.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;Map&lt;Thread,StackTraceElement[]&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getAllStackTraces()&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;map&amp;nbsp;of&amp;nbsp;stack&amp;nbsp;traces&amp;nbsp;for&amp;nbsp;all&amp;nbsp;live&amp;nbsp;threads.&lt;br&gt;
-&amp;nbsp;ClassLoader&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getContextClassLoader()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;context&amp;nbsp;ClassLoader&amp;nbsp;for&amp;nbsp;this&amp;nbsp;Thread.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;Thread.UncaughtExceptionHandler&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getDefaultUncaughtExceptionHandler()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;default&amp;nbsp;handler&amp;nbsp;invoked&amp;nbsp;when&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;abruptly&amp;nbsp;terminates&amp;nbsp;due&amp;nbsp;to&amp;nbsp;an&amp;nbsp;uncaught&amp;nbsp;exception.&lt;br&gt;
-&amp;nbsp;long&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getId()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;identifier&amp;nbsp;of&amp;nbsp;this&amp;nbsp;Thread.&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getName()&lt;br&gt;
Returns&amp;nbsp;this&amp;nbsp;thread's&amp;nbsp;name.&lt;br&gt;
-&amp;nbsp;int&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getPriority()&lt;br&gt;
Returns&amp;nbsp;this&amp;nbsp;thread's&amp;nbsp;priority.&lt;br&gt;
-&amp;nbsp;StackTraceElement[]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getStackTrace()&lt;br&gt;
Returns&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;stack&amp;nbsp;trace&amp;nbsp;elements&amp;nbsp;representing&amp;nbsp;the&amp;nbsp;stack&amp;nbsp;dump&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;Thread.State&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getState()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;ThreadGroup&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getThreadGroup()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;to&amp;nbsp;which&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;belongs.&lt;br&gt;
-&amp;nbsp;Thread.UncaughtExceptionHandler&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getUncaughtExceptionHandler()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;handler&amp;nbsp;invoked&amp;nbsp;when&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;abruptly&amp;nbsp;terminates&amp;nbsp;due&amp;nbsp;to&amp;nbsp;an&amp;nbsp;uncaught&amp;nbsp;exception.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;holdsLock(Object&amp;nbsp;obj)&lt;br&gt;
Returns&amp;nbsp;true&amp;nbsp;if&amp;nbsp;and&amp;nbsp;only&amp;nbsp;if&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;holds&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interrupt()&lt;br&gt;
Interrupts&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interrupted()&lt;br&gt;
Tests&amp;nbsp;whether&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;been&amp;nbsp;interrupted.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isAlive()&lt;br&gt;
Tests&amp;nbsp;if&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;alive.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isDaemon()&lt;br&gt;
Tests&amp;nbsp;if&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;boolean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isInterrupted()&lt;br&gt;
Tests&amp;nbsp;whether&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;been&amp;nbsp;interrupted.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;join()&lt;br&gt;
Waits&amp;nbsp;for&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;die.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;join(long&amp;nbsp;millis)&lt;br&gt;
Waits&amp;nbsp;at&amp;nbsp;most&amp;nbsp;millis&amp;nbsp;milliseconds&amp;nbsp;for&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;die.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;join(long&amp;nbsp;millis,&amp;nbsp;int&amp;nbsp;nanos)&lt;br&gt;
Waits&amp;nbsp;at&amp;nbsp;most&amp;nbsp;millis&amp;nbsp;milliseconds&amp;nbsp;plus&amp;nbsp;nanos&amp;nbsp;nanoseconds&amp;nbsp;for&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;die.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resume()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;exists&amp;nbsp;solely&amp;nbsp;for&amp;nbsp;use&amp;nbsp;with&amp;nbsp;suspend(),&amp;nbsp;which&amp;nbsp;has&amp;nbsp;been&amp;nbsp;deprecated&amp;nbsp;because&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;deadlock-prone.&amp;nbsp;For&amp;nbsp;more&amp;nbsp;information,&amp;nbsp;see&amp;nbsp;Why&amp;nbsp;are&amp;nbsp;Thread.stop,&amp;nbsp;Thread.suspend&lt;br&gt;
and&amp;nbsp;Thread.resume&amp;nbsp;Deprecated?.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;run()&lt;br&gt;
If&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;was&amp;nbsp;constructed&amp;nbsp;using&amp;nbsp;a&amp;nbsp;separate&amp;nbsp;Runnable&amp;nbsp;run&amp;nbsp;object,&amp;nbsp;then&amp;nbsp;that&amp;nbsp;Runnable&lt;br&gt;
object's&amp;nbsp;run&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called;&amp;nbsp;otherwise,&amp;nbsp;this&amp;nbsp;method&amp;nbsp;does&amp;nbsp;nothing&amp;nbsp;and&amp;nbsp;returns.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setContextClassLoader(ClassLoader&amp;nbsp;cl)&lt;br&gt;
Sets&amp;nbsp;the&amp;nbsp;context&amp;nbsp;ClassLoader&amp;nbsp;for&amp;nbsp;this&amp;nbsp;Thread.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setDaemon(boolean&amp;nbsp;on)&lt;br&gt;
Marks&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;as&amp;nbsp;either&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;thread&amp;nbsp;or&amp;nbsp;a&amp;nbsp;user&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler&amp;nbsp;eh)&lt;br&gt;
Set&amp;nbsp;the&amp;nbsp;default&amp;nbsp;handler&amp;nbsp;invoked&amp;nbsp;when&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;abruptly&amp;nbsp;terminates&amp;nbsp;due&amp;nbsp;to&amp;nbsp;an&amp;nbsp;uncaught&amp;nbsp;exception,&lt;br&gt;
and&amp;nbsp;no&amp;nbsp;other&amp;nbsp;handler&amp;nbsp;has&amp;nbsp;been&amp;nbsp;defined&amp;nbsp;for&amp;nbsp;that&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setName(String&amp;nbsp;name)&lt;br&gt;
Changes&amp;nbsp;the&amp;nbsp;name&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;be&amp;nbsp;equal&amp;nbsp;to&amp;nbsp;the&amp;nbsp;argument&amp;nbsp;name.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setPriority(int&amp;nbsp;newPriority)&lt;br&gt;
Changes&amp;nbsp;the&amp;nbsp;priority&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler&amp;nbsp;eh)&lt;br&gt;
Set&amp;nbsp;the&amp;nbsp;handler&amp;nbsp;invoked&amp;nbsp;when&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;abruptly&amp;nbsp;terminates&amp;nbsp;due&amp;nbsp;to&amp;nbsp;an&amp;nbsp;uncaught&amp;nbsp;exception.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep(long&amp;nbsp;millis)&lt;br&gt;
Causes&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;sleep&amp;nbsp;(temporarily&amp;nbsp;cease&amp;nbsp;execution)&amp;nbsp;for&amp;nbsp;the&amp;nbsp;specified&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;milliseconds,&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;the&amp;nbsp;precision&amp;nbsp;and&amp;nbsp;accuracy&amp;nbsp;of&amp;nbsp;system&amp;nbsp;timers&amp;nbsp;and&amp;nbsp;schedulers.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep(long&amp;nbsp;millis,&amp;nbsp;int&amp;nbsp;nanos)&lt;br&gt;
Causes&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;sleep&amp;nbsp;(temporarily&amp;nbsp;cease&amp;nbsp;execution)&amp;nbsp;for&amp;nbsp;the&amp;nbsp;specified&lt;br&gt;
number&amp;nbsp;of&amp;nbsp;milliseconds&amp;nbsp;plus&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;number&amp;nbsp;of&amp;nbsp;nanoseconds,&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;the&amp;nbsp;precision&amp;nbsp;and&lt;br&gt;
accuracy&amp;nbsp;of&amp;nbsp;system&amp;nbsp;timers&amp;nbsp;and&amp;nbsp;schedulers.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;start()&lt;br&gt;
Causes&amp;nbsp;this&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;begin&amp;nbsp;execution;&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;Machine&amp;nbsp;calls&amp;nbsp;the&amp;nbsp;run&amp;nbsp;method&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stop()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;inherently&amp;nbsp;unsafe.&amp;nbsp;Stopping&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;with&amp;nbsp;Thread.stop&amp;nbsp;causes&amp;nbsp;it&amp;nbsp;to&amp;nbsp;unlock&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
monitors&amp;nbsp;that&amp;nbsp;it&amp;nbsp;has&amp;nbsp;locked&amp;nbsp;(as&amp;nbsp;a&amp;nbsp;natural&amp;nbsp;consequence&amp;nbsp;of&amp;nbsp;the&amp;nbsp;unchecked&amp;nbsp;ThreadDeath&amp;nbsp;exception&lt;br&gt;
propagating&amp;nbsp;up&amp;nbsp;the&amp;nbsp;stack).&amp;nbsp;If&amp;nbsp;any&amp;nbsp;of&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;previously&amp;nbsp;protected&amp;nbsp;by&amp;nbsp;these&amp;nbsp;monitors&lt;br&gt;
were&amp;nbsp;in&amp;nbsp;an&amp;nbsp;inconsistent&amp;nbsp;state,&amp;nbsp;the&amp;nbsp;damaged&amp;nbsp;objects&amp;nbsp;become&amp;nbsp;visible&amp;nbsp;to&amp;nbsp;other&amp;nbsp;threads,&lt;br&gt;
potentially&amp;nbsp;resulting&amp;nbsp;in&amp;nbsp;arbitrary&amp;nbsp;behavior.&amp;nbsp;Many&amp;nbsp;uses&amp;nbsp;of&amp;nbsp;stop&amp;nbsp;should&amp;nbsp;be&amp;nbsp;replaced&amp;nbsp;by&amp;nbsp;code&amp;nbsp;that&lt;br&gt;
simply&amp;nbsp;modifies&amp;nbsp;some&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;indicate&amp;nbsp;that&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;should&amp;nbsp;stop&amp;nbsp;running.&amp;nbsp;The&lt;br&gt;
target&amp;nbsp;thread&amp;nbsp;should&amp;nbsp;check&amp;nbsp;this&amp;nbsp;variable&amp;nbsp;regularly,&amp;nbsp;and&amp;nbsp;return&amp;nbsp;from&amp;nbsp;its&amp;nbsp;run&amp;nbsp;method&amp;nbsp;in&amp;nbsp;an&lt;br&gt;
orderly&amp;nbsp;fashion&amp;nbsp;if&amp;nbsp;the&amp;nbsp;variable&amp;nbsp;indicates&amp;nbsp;that&amp;nbsp;it&amp;nbsp;is&amp;nbsp;to&amp;nbsp;stop&amp;nbsp;running.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;waits&lt;br&gt;
for&amp;nbsp;long&amp;nbsp;periods&amp;nbsp;(on&amp;nbsp;a&amp;nbsp;condition&amp;nbsp;variable,&amp;nbsp;for&amp;nbsp;example),&amp;nbsp;the&amp;nbsp;interrupt&amp;nbsp;method&amp;nbsp;should&amp;nbsp;be&lt;br&gt;
used&amp;nbsp;to&amp;nbsp;interrupt&amp;nbsp;the&amp;nbsp;wait.&amp;nbsp;For&amp;nbsp;more&amp;nbsp;information,&amp;nbsp;see&amp;nbsp;Why&amp;nbsp;are&amp;nbsp;Thread.stop,&lt;br&gt;
Thread.suspend&amp;nbsp;and&amp;nbsp;Thread.resume&amp;nbsp;Deprecated?.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stop(Throwable&amp;nbsp;obj)&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;is&amp;nbsp;inherently&amp;nbsp;unsafe.&amp;nbsp;See&amp;nbsp;stop()&amp;nbsp;for&amp;nbsp;details.&amp;nbsp;An&amp;nbsp;additional&amp;nbsp;danger&amp;nbsp;of&amp;nbsp;this&lt;br&gt;
method&amp;nbsp;is&amp;nbsp;that&amp;nbsp;it&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;generate&amp;nbsp;exceptions&amp;nbsp;that&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&lt;br&gt;
is&amp;nbsp;unprepared&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;(including&amp;nbsp;checked&amp;nbsp;exceptions&amp;nbsp;that&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;could&lt;br&gt;
not&amp;nbsp;possibly&amp;nbsp;throw,&amp;nbsp;were&amp;nbsp;it&amp;nbsp;not&amp;nbsp;for&amp;nbsp;this&amp;nbsp;method).&amp;nbsp;For&amp;nbsp;more&amp;nbsp;information,&amp;nbsp;see&amp;nbsp;Why&lt;br&gt;
are&amp;nbsp;Thread.stop,&amp;nbsp;Thread.suspend&amp;nbsp;and&amp;nbsp;Thread.resume&amp;nbsp;Deprecated?.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;suspend()&lt;br&gt;
Deprecated.&amp;nbsp;&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;has&amp;nbsp;been&amp;nbsp;deprecated,&amp;nbsp;as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;inherently&amp;nbsp;deadlock-prone.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&lt;br&gt;
holds&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;protecting&amp;nbsp;a&amp;nbsp;critical&amp;nbsp;system&amp;nbsp;resource&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;suspended,&lt;br&gt;
no&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;access&amp;nbsp;this&amp;nbsp;resource&amp;nbsp;until&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;resumed.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;that&lt;br&gt;
would&amp;nbsp;resume&amp;nbsp;the&amp;nbsp;target&amp;nbsp;thread&amp;nbsp;attempts&amp;nbsp;to&amp;nbsp;lock&amp;nbsp;this&amp;nbsp;monitor&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;calling&amp;nbsp;resume,&lt;br&gt;
deadlock&amp;nbsp;results.&amp;nbsp;Such&amp;nbsp;deadlocks&amp;nbsp;typically&amp;nbsp;manifest&amp;nbsp;themselves&amp;nbsp;as&amp;nbsp;"frozen"&amp;nbsp;processes.&lt;br&gt;
For&amp;nbsp;more&amp;nbsp;information,&amp;nbsp;see&amp;nbsp;Why&amp;nbsp;are&amp;nbsp;Thread.stop,&amp;nbsp;Thread.suspend&amp;nbsp;and&amp;nbsp;Thread.resume&lt;br&gt;
Deprecated?.&lt;br&gt;
-&amp;nbsp;String&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;toString()&lt;br&gt;
Returns&amp;nbsp;a&amp;nbsp;string&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread,&amp;nbsp;including&amp;nbsp;the&amp;nbsp;thread's&amp;nbsp;name,&lt;br&gt;
priority,&amp;nbsp;and&amp;nbsp;thread&amp;nbsp;group.&lt;br&gt;
-&amp;nbsp;static&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;yield()&lt;br&gt;
A&amp;nbsp;hint&amp;nbsp;to&amp;nbsp;the&amp;nbsp;scheduler&amp;nbsp;that&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;willing&amp;nbsp;to&amp;nbsp;yield&amp;nbsp;its&amp;nbsp;current&amp;nbsp;use&amp;nbsp;of&amp;nbsp;a&amp;nbsp;processor.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Synchronization,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;lock&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Java&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;few&amp;nbsp;simple&amp;nbsp;structures&amp;nbsp;for&amp;nbsp;synchronizing&amp;nbsp;the&amp;nbsp;activities&amp;nbsp;of&amp;nbsp;threads.&lt;br&gt;
They&amp;nbsp;are&amp;nbsp;all&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;__&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;monitors&amp;nbsp;__,&amp;nbsp;a&amp;nbsp;widely&amp;nbsp;used&amp;nbsp;synchronization&lt;br&gt;
scheme.&amp;nbsp;You&amp;nbsp;don’t&amp;nbsp;have&amp;nbsp;to&amp;nbsp;know&amp;nbsp;the&amp;nbsp;details&amp;nbsp;about&amp;nbsp;how&amp;nbsp;monitors&amp;nbsp;work&amp;nbsp;to&amp;nbsp;be&lt;br&gt;
able&amp;nbsp;to&amp;nbsp;use&amp;nbsp;them,&amp;nbsp;but&amp;nbsp;it&amp;nbsp;may&amp;nbsp;help&amp;nbsp;you&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;picture&amp;nbsp;in&amp;nbsp;mind.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;__&amp;nbsp;monitor&amp;nbsp;is&amp;nbsp;essentially&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;__.&amp;nbsp;The&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;attached&amp;nbsp;to&amp;nbsp;a&amp;nbsp;resource&amp;nbsp;that&lt;br&gt;
many&amp;nbsp;threads&amp;nbsp;may&amp;nbsp;need&amp;nbsp;to&amp;nbsp;access,&amp;nbsp;but&amp;nbsp;that&amp;nbsp;should&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;by&amp;nbsp;only&lt;br&gt;
_&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time&amp;nbsp;_.&amp;nbsp;It’s&amp;nbsp;very&amp;nbsp;much&amp;nbsp;like&amp;nbsp;a&amp;nbsp;___&amp;nbsp;restroom&amp;nbsp;___&amp;nbsp;with&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
door;&amp;nbsp;if&amp;nbsp;it’s&amp;nbsp;unlocked,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;enter&amp;nbsp;and&amp;nbsp;lock&amp;nbsp;the&amp;nbsp;door&amp;nbsp;while&amp;nbsp;you&amp;nbsp;are&amp;nbsp;using&lt;br&gt;
it.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;is&amp;nbsp;not&amp;nbsp;being&amp;nbsp;used,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&lt;br&gt;
and&amp;nbsp;access&amp;nbsp;the&amp;nbsp;resource.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;done,&amp;nbsp;it&amp;nbsp;relinquishes&amp;nbsp;the&amp;nbsp;lock,&lt;br&gt;
just&amp;nbsp;as&amp;nbsp;you&amp;nbsp;unlock&amp;nbsp;the&amp;nbsp;restroom&amp;nbsp;door&amp;nbsp;and&amp;nbsp;leave&amp;nbsp;it&amp;nbsp;open&amp;nbsp;for&amp;nbsp;the&amp;nbsp;next&amp;nbsp;person.&lt;br&gt;
However,&amp;nbsp;if&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;already&amp;nbsp;has&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;for&amp;nbsp;the&amp;nbsp;resource,&amp;nbsp;all&amp;nbsp;other&lt;br&gt;
threads&amp;nbsp;must&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;done&amp;nbsp;and&amp;nbsp;has&amp;nbsp;released&amp;nbsp;the&amp;nbsp;lock.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;just&amp;nbsp;like&amp;nbsp;when&amp;nbsp;the&amp;nbsp;restroom&amp;nbsp;is&amp;nbsp;occupied&amp;nbsp;when&amp;nbsp;you&amp;nbsp;arrive:&amp;nbsp;you&amp;nbsp;have&lt;br&gt;
to&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;the&amp;nbsp;current&amp;nbsp;user&amp;nbsp;is&amp;nbsp;done&amp;nbsp;and&amp;nbsp;unlocks&amp;nbsp;the&amp;nbsp;door.&lt;br&gt;
&lt;br&gt;
Fortunately,&amp;nbsp;Java&amp;nbsp;makes&amp;nbsp;the&amp;nbsp;process&amp;nbsp;of&amp;nbsp;synchronizing&amp;nbsp;access&amp;nbsp;to&amp;nbsp;resources&lt;br&gt;
fairly&amp;nbsp;easy.&amp;nbsp;The&amp;nbsp;language&amp;nbsp;handles&amp;nbsp;setting&amp;nbsp;up&amp;nbsp;and&amp;nbsp;acquiring&amp;nbsp;locks;&amp;nbsp;all&amp;nbsp;you&amp;nbsp;need&lt;br&gt;
to&amp;nbsp;do&amp;nbsp;is&amp;nbsp;___&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;resources&amp;nbsp;that&amp;nbsp;require&amp;nbsp;synchronization.&lt;br&gt;
&lt;br&gt;
=============================================&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Serializing&amp;nbsp;Access&amp;nbsp;to&amp;nbsp;Methods&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;most&amp;nbsp;common&amp;nbsp;need&amp;nbsp;for&amp;nbsp;synchronization&amp;nbsp;among&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;to&lt;br&gt;
serialize&amp;nbsp;their&amp;nbsp;access&amp;nbsp;to&amp;nbsp;some&amp;nbsp;resource&amp;nbsp;(an&amp;nbsp;object)—in&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;to&lt;br&gt;
make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;only&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time&amp;nbsp;can&amp;nbsp;manipulate&amp;nbsp;an&amp;nbsp;object&amp;nbsp;or&lt;br&gt;
variable.&amp;nbsp;In&amp;nbsp;Java,&amp;nbsp;every&amp;nbsp;object&amp;nbsp;has&amp;nbsp;an&amp;nbsp;associated&amp;nbsp;lock.&amp;nbsp;To&amp;nbsp;be&amp;nbsp;more&amp;nbsp;specific,&lt;br&gt;
every&amp;nbsp;class&amp;nbsp;and&amp;nbsp;every&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;lock.&amp;nbsp;The&lt;br&gt;
synchronized&amp;nbsp;keyword&amp;nbsp;marks&amp;nbsp;places&amp;nbsp;where&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;acquire&amp;nbsp;the&lt;br&gt;
lock&amp;nbsp;before&amp;nbsp;proceeding.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
FOR&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;we&amp;nbsp;implemented&amp;nbsp;a&amp;nbsp;SpeechSynthesizer&amp;nbsp;class&amp;nbsp;that&amp;nbsp;contains&lt;br&gt;
a&amp;nbsp;say()&amp;nbsp;method.&amp;nbsp;We&amp;nbsp;don’t&amp;nbsp;want&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;calling&amp;nbsp;say()&amp;nbsp;at&amp;nbsp;the&amp;nbsp;same&amp;nbsp;time&lt;br&gt;
because&amp;nbsp;we&amp;nbsp;wouldn’t&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;anything&amp;nbsp;being&amp;nbsp;said.&amp;nbsp;So&amp;nbsp;we&amp;nbsp;mark&amp;nbsp;the&lt;br&gt;
say()&amp;nbsp;method&amp;nbsp;as&amp;nbsp;synchronized,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;that&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&lt;br&gt;
on&amp;nbsp;the&amp;nbsp;SpeechSynthe&amp;nbsp;sizer&amp;nbsp;object&amp;nbsp;before&amp;nbsp;it&amp;nbsp;can&amp;nbsp;speak:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;SpeechSynthesizer&amp;nbsp;{&lt;br&gt;
&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;say(&amp;nbsp;String&amp;nbsp;words&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;//&amp;nbsp;speak&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;Because&amp;nbsp;__&amp;nbsp;say()&amp;nbsp;is&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;__,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
SpeechSynthesizer&amp;nbsp;-&gt;&amp;nbsp;instance&amp;nbsp;&lt;-&amp;nbsp;!!!!___&amp;nbsp;it’s&amp;nbsp;using&amp;nbsp;before&amp;nbsp;it&amp;nbsp;can&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;say()&amp;nbsp;method.&lt;br&gt;
When&amp;nbsp;say()&amp;nbsp;has&amp;nbsp;completed,&amp;nbsp;it&amp;nbsp;gives&amp;nbsp;up&amp;nbsp;the&amp;nbsp;lock,&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;next&amp;nbsp;waiting&lt;br&gt;
thread&amp;nbsp;to&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;run&amp;nbsp;the&amp;nbsp;method.&amp;nbsp;It&amp;nbsp;doesn’t&amp;nbsp;matter&amp;nbsp;whether&amp;nbsp;the&lt;br&gt;
thread&amp;nbsp;is&amp;nbsp;owned&amp;nbsp;by&amp;nbsp;the&amp;nbsp;SpeechSynthesizer&amp;nbsp;itself&amp;nbsp;or&amp;nbsp;some&amp;nbsp;other&amp;nbsp;object;&amp;nbsp;every&lt;br&gt;
thread&amp;nbsp;must&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;same&amp;nbsp;lock,&amp;nbsp;that&amp;nbsp;of&amp;nbsp;the&amp;nbsp;SpeechSynthesizer&amp;nbsp;instance.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If&amp;nbsp;say()&amp;nbsp;were&amp;nbsp;a&amp;nbsp;class&amp;nbsp;(static)&amp;nbsp;method&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;method,&amp;nbsp;we&lt;br&gt;
could&amp;nbsp;still&amp;nbsp;mark&amp;nbsp;it&amp;nbsp;as&amp;nbsp;synchronized.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;because&amp;nbsp;no&amp;nbsp;instance&amp;nbsp;object&lt;br&gt;
is&amp;nbsp;involved,&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;on&amp;nbsp;the&amp;nbsp;class&amp;nbsp;object&amp;nbsp;itself.&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;():&lt;br&gt;
package&amp;nbsp;synchronization;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SynchronizationMethodHelloWorld&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Speaker&amp;nbsp;speaker&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Speaker();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ThreadSpeaker(new&amp;nbsp;Speaker()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ThreadSpeaker(new&amp;nbsp;Speaker()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;//OUTPUT:&amp;nbsp;(No&amp;nbsp;synchronization&amp;nbsp;because&amp;nbsp;Threads&amp;nbsp;has&amp;nbsp;different&amp;nbsp;instances&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ThreadSpeaker(speaker));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;ThreadSpeaker(speaker));&amp;nbsp;//&amp;nbsp;synchronized&amp;nbsp;,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;because&amp;nbsp;threads&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;has&amp;nbsp;one&amp;nbsp;instance&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;of&amp;nbsp;Speaker&amp;nbsp;class&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-0&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2&amp;nbsp;Say:&amp;nbsp;Thread-1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Speaker&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;say(String&amp;nbsp;arg)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;3;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i&amp;nbsp;+&amp;nbsp;"&amp;nbsp;Say:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;arg);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(14);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;ThreadSpeaker&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Speaker&amp;nbsp;speaker;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ThreadSpeaker(Speaker&amp;nbsp;speaker)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.speaker&amp;nbsp;=&amp;nbsp;speaker;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;5;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.speaker.say(Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(14);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==============================================&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;synchronizing&amp;nbsp;entire&amp;nbsp;methods,&amp;nbsp;the&amp;nbsp;synchronized&amp;nbsp;keyword&amp;nbsp;can&amp;nbsp;&lt;br&gt;
be&amp;nbsp;used&amp;nbsp;in&amp;nbsp;a&amp;nbsp;special&amp;nbsp;construct&amp;nbsp;to&amp;nbsp;guard&amp;nbsp;arbitrary&amp;nbsp;&amp;nbsp;__&amp;nbsp;blocks&amp;nbsp;of&amp;nbsp;code&amp;nbsp;__.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;form,&lt;br&gt;
it&amp;nbsp;also&amp;nbsp;takes&amp;nbsp;an&amp;nbsp;explicit&amp;nbsp;argument&amp;nbsp;that&amp;nbsp;specifies&amp;nbsp;the&amp;nbsp;object&amp;nbsp;for&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;to&amp;nbsp;acquire&amp;nbsp;a&amp;nbsp;lock:&lt;br&gt;
&amp;nbsp;synchronized&amp;nbsp;(&amp;nbsp;myObject&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;//&amp;nbsp;Functionality&amp;nbsp;that&amp;nbsp;needs&amp;nbsp;exclusive&amp;nbsp;access&amp;nbsp;to&amp;nbsp;resources&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;code&amp;nbsp;block&amp;nbsp;can&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;any&amp;nbsp;method.&amp;nbsp;When&amp;nbsp;it&amp;nbsp;is&amp;nbsp;reached,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;has&lt;br&gt;
to&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;myObject&amp;nbsp;before&amp;nbsp;proceeding.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;way,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;synchronize&lt;br&gt;
methods&amp;nbsp;(or&amp;nbsp;parts&amp;nbsp;of&amp;nbsp;methods)&amp;nbsp;in&amp;nbsp;different&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;way&amp;nbsp;as&amp;nbsp;methods&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;same&amp;nbsp;class.&amp;nbsp;A&amp;nbsp;synchronized&amp;nbsp;instance&amp;nbsp;method&amp;nbsp;is,&amp;nbsp;therefore,&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
method&amp;nbsp;with&amp;nbsp;its&amp;nbsp;statements&amp;nbsp;synchronized&amp;nbsp;on&amp;nbsp;the&amp;nbsp;current&amp;nbsp;object.&amp;nbsp;Thus:&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;myMethod&amp;nbsp;()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
is&amp;nbsp;equivalent&amp;nbsp;to:&lt;br&gt;
&amp;nbsp;&amp;nbsp;void&amp;nbsp;myMethod&amp;nbsp;()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(&amp;nbsp;this&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
==========================&lt;br&gt;
============================&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;lock&amp;nbsp;?&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;monitor&amp;nbsp;is&amp;nbsp;essentially&amp;nbsp;a&amp;nbsp;lock.&amp;nbsp;The&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;attached&amp;nbsp;to&amp;nbsp;a&amp;nbsp;resource&amp;nbsp;that&lt;br&gt;
many&amp;nbsp;threads&amp;nbsp;may&amp;nbsp;need&amp;nbsp;to&amp;nbsp;access,&amp;nbsp;but&amp;nbsp;that&amp;nbsp;should&amp;nbsp;be&amp;nbsp;accessed&amp;nbsp;by&amp;nbsp;only&lt;br&gt;
one&amp;nbsp;thread&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time.&amp;nbsp;It’s&amp;nbsp;very&amp;nbsp;much&amp;nbsp;like&amp;nbsp;a&amp;nbsp;restroom&amp;nbsp;with&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
door;&amp;nbsp;if&amp;nbsp;it’s&amp;nbsp;unlocked,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;enter&amp;nbsp;and&amp;nbsp;lock&amp;nbsp;the&amp;nbsp;door&amp;nbsp;while&amp;nbsp;you&amp;nbsp;are&amp;nbsp;using&lt;br&gt;
it.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;resource&amp;nbsp;is&amp;nbsp;not&amp;nbsp;being&amp;nbsp;used,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;access&lt;br&gt;
the&amp;nbsp;resource.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;done,&amp;nbsp;it&amp;nbsp;relinquishes&amp;nbsp;the&amp;nbsp;lock,&amp;nbsp;just&amp;nbsp;as&amp;nbsp;you&lt;br&gt;
unlock&amp;nbsp;the&amp;nbsp;restroom&amp;nbsp;door&amp;nbsp;and&amp;nbsp;leave&amp;nbsp;it&amp;nbsp;open&amp;nbsp;for&amp;nbsp;the&amp;nbsp;next&amp;nbsp;person.&amp;nbsp;However,&lt;br&gt;
if&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;already&amp;nbsp;has&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;for&amp;nbsp;the&amp;nbsp;resource,&amp;nbsp;all&amp;nbsp;other&amp;nbsp;threads&lt;br&gt;
must&amp;nbsp;wait&amp;nbsp;until&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;done&amp;nbsp;and&amp;nbsp;has&amp;nbsp;released&amp;nbsp;the&amp;nbsp;lock.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Accessing&amp;nbsp;class&amp;nbsp;and&amp;nbsp;instance&amp;nbsp;Variables&amp;nbsp;from&amp;nbsp;Multiple&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Threads,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;principle&amp;nbsp;of&amp;nbsp;Reenrtant&amp;nbsp;Lock&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;'volatile'&amp;nbsp;variables,&amp;nbsp;provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;SpreadSheet&amp;nbsp;example,&amp;nbsp;we&amp;nbsp;guarded&amp;nbsp;access&amp;nbsp;to&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;instance&lt;br&gt;
variables&amp;nbsp;with&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;avoid&amp;nbsp;changing&amp;nbsp;one&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;variables&amp;nbsp;while&amp;nbsp;someone&amp;nbsp;was&amp;nbsp;reading&amp;nbsp;the&amp;nbsp;others.&amp;nbsp;We&amp;nbsp;wanted&amp;nbsp;to&amp;nbsp;keep&lt;br&gt;
them&amp;nbsp;coordinated.&amp;nbsp;But&amp;nbsp;what&amp;nbsp;about&amp;nbsp;individual&amp;nbsp;variable&amp;nbsp;types?&lt;br&gt;
Do&amp;nbsp;they&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;synchronized?&amp;nbsp;Normally,&amp;nbsp;the&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;no.&amp;nbsp;&lt;br&gt;
!!&amp;nbsp;Almost&amp;nbsp;all&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;_primitives&amp;nbsp;and&amp;nbsp;_object&amp;nbsp;reference&amp;nbsp;types&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;happen&lt;br&gt;
atomically:&amp;nbsp;that&amp;nbsp;is,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;handled&amp;nbsp;by&amp;nbsp;the&amp;nbsp;VM&amp;nbsp;in&amp;nbsp;one&amp;nbsp;step,&amp;nbsp;with&amp;nbsp;no&amp;nbsp;opportunity&lt;br&gt;
for&amp;nbsp;two&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;collide.&amp;nbsp;This&amp;nbsp;prevents&amp;nbsp;threads&amp;nbsp;from&amp;nbsp;looking&amp;nbsp;at&amp;nbsp;references&lt;br&gt;
while&amp;nbsp;they&amp;nbsp;are&amp;nbsp;in&amp;nbsp;the&amp;nbsp;process&amp;nbsp;of&amp;nbsp;being&amp;nbsp;accessed&amp;nbsp;by&amp;nbsp;other&amp;nbsp;threads.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
But&amp;nbsp;watch&amp;nbsp;out—we&amp;nbsp;did&amp;nbsp;say&amp;nbsp;almost.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;read&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;VM&amp;nbsp;specification&lt;br&gt;
carefully,&amp;nbsp;you&amp;nbsp;will&amp;nbsp;see&amp;nbsp;that&amp;nbsp;the&amp;nbsp;double&amp;nbsp;and&amp;nbsp;long&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;are&amp;nbsp;not&lt;br&gt;
guaranteed&amp;nbsp;to&amp;nbsp;be&amp;nbsp;handled&amp;nbsp;atomically.&amp;nbsp;Both&amp;nbsp;of&amp;nbsp;these&amp;nbsp;types&amp;nbsp;represent&amp;nbsp;64-bit&lt;br&gt;
values.&amp;nbsp;The&amp;nbsp;problem&amp;nbsp;has&amp;nbsp;to&amp;nbsp;do&amp;nbsp;with&amp;nbsp;how&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;VM’s&amp;nbsp;stack&amp;nbsp;handles&amp;nbsp;them.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;possible&amp;nbsp;that&amp;nbsp;this&amp;nbsp;specification&amp;nbsp;will&amp;nbsp;be&amp;nbsp;beefed&amp;nbsp;up&amp;nbsp;in&amp;nbsp;the&amp;nbsp;future.&lt;br&gt;
But&amp;nbsp;for&amp;nbsp;now,&amp;nbsp;to&amp;nbsp;be&amp;nbsp;strict,&amp;nbsp;you&amp;nbsp;should&amp;nbsp;synchronize&amp;nbsp;access&amp;nbsp;to&amp;nbsp;your&amp;nbsp;double&lt;br&gt;
and&amp;nbsp;long&amp;nbsp;instance&amp;nbsp;variables&amp;nbsp;through&amp;nbsp;accessor&amp;nbsp;methods,&amp;nbsp;or&amp;nbsp;use&amp;nbsp;the&amp;nbsp;&lt;br&gt;
__volatile&amp;nbsp;keyword&amp;nbsp;or&amp;nbsp;an&amp;nbsp;__&amp;nbsp;atomic&amp;nbsp;wrapper&amp;nbsp;class,&amp;nbsp;which&amp;nbsp;we’ll&amp;nbsp;describe&amp;nbsp;next.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Another&amp;nbsp;issue,&amp;nbsp;independent&amp;nbsp;of&amp;nbsp;the&amp;nbsp;atomicity&amp;nbsp;of&amp;nbsp;the&amp;nbsp;values,&amp;nbsp;is&amp;nbsp;the&amp;nbsp;notion&lt;br&gt;
of&amp;nbsp;different&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;VM&amp;nbsp;__caching&amp;nbsp;values&amp;nbsp;for&amp;nbsp;periods&amp;nbsp;of&amp;nbsp;time—that&amp;nbsp;is,&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;may&amp;nbsp;have&amp;nbsp;changed&amp;nbsp;the&amp;nbsp;value,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;VM&amp;nbsp;may&lt;br&gt;
not&amp;nbsp;be&amp;nbsp;obliged&amp;nbsp;to&amp;nbsp;make&amp;nbsp;that&amp;nbsp;value&amp;nbsp;appear&amp;nbsp;until&amp;nbsp;the&amp;nbsp;VM&amp;nbsp;reaches&amp;nbsp;a&amp;nbsp;certain&lt;br&gt;
state&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;“memory&amp;nbsp;barrier.”&amp;nbsp;While&amp;nbsp;this&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;a&amp;nbsp;problem&lt;br&gt;
in&amp;nbsp;most&amp;nbsp;real-world&amp;nbsp;programming&amp;nbsp;cases,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;address&amp;nbsp;this&amp;nbsp;by&amp;nbsp;declaring&lt;br&gt;
the&amp;nbsp;variable&amp;nbsp;with&amp;nbsp;the&amp;nbsp;volatile&amp;nbsp;keyword.&amp;nbsp;This&amp;nbsp;keyword&amp;nbsp;indicates&amp;nbsp;to&amp;nbsp;the&amp;nbsp;VM&lt;br&gt;
that&amp;nbsp;the&amp;nbsp;value&amp;nbsp;may&amp;nbsp;be&amp;nbsp;changed&amp;nbsp;by&amp;nbsp;external&amp;nbsp;threads&amp;nbsp;and&amp;nbsp;effectively&lt;br&gt;
synchronizes&amp;nbsp;access&amp;nbsp;to&amp;nbsp;it&amp;nbsp;automatically.&lt;br&gt;
&lt;br&gt;
Finally,&amp;nbsp;the&amp;nbsp;java.util.concurrent.atomic&amp;nbsp;package&amp;nbsp;provides&amp;nbsp;__&amp;nbsp;synchronized&lt;br&gt;
wrapper&amp;nbsp;classes&amp;nbsp;for&amp;nbsp;all&amp;nbsp;primitive&amp;nbsp;types&amp;nbsp;and&amp;nbsp;references.&amp;nbsp;These&amp;nbsp;wrappers&lt;br&gt;
provide&amp;nbsp;not&amp;nbsp;only&amp;nbsp;simple&amp;nbsp;set()&amp;nbsp;and&amp;nbsp;get()&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;the&amp;nbsp;values&amp;nbsp;but&amp;nbsp;also&lt;br&gt;
specialized&amp;nbsp;“combo”&amp;nbsp;operations,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;compareAndSet(),&amp;nbsp;that&amp;nbsp;work&lt;br&gt;
atomically&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;build&amp;nbsp;higher-level&amp;nbsp;synchronized&amp;nbsp;application&lt;br&gt;
components.&amp;nbsp;The&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;this&amp;nbsp;package&amp;nbsp;were&amp;nbsp;designed&amp;nbsp;specifically&lt;br&gt;
to&amp;nbsp;map&amp;nbsp;down&amp;nbsp;to&amp;nbsp;hardware-level&amp;nbsp;functionality&amp;nbsp;in&amp;nbsp;many&amp;nbsp;cases&amp;nbsp;and&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
very&amp;nbsp;efficient.&amp;nbsp;We’ll&amp;nbsp;talk&amp;nbsp;more&amp;nbsp;about&amp;nbsp;them&amp;nbsp;later&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=======&lt;br&gt;
Reentrant&amp;nbsp;locking&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;locks&amp;nbsp;acquired&amp;nbsp;by&amp;nbsp;Java&amp;nbsp;upon&amp;nbsp;entering&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;or&amp;nbsp;block&amp;nbsp;of&lt;br&gt;
code&amp;nbsp;are&amp;nbsp;reentrant,&amp;nbsp;meaning&amp;nbsp;that&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;holding&amp;nbsp;onto&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;may&lt;br&gt;
acquire&amp;nbsp;the&amp;nbsp;same&amp;nbsp;lock&amp;nbsp;again&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;times&amp;nbsp;and&amp;nbsp;never&amp;nbsp;blocks&amp;nbsp;waiting&lt;br&gt;
for&amp;nbsp;itself.&amp;nbsp;In&amp;nbsp;most&amp;nbsp;cases,&amp;nbsp;this&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;code&amp;nbsp;behaves&amp;nbsp;as&amp;nbsp;you’d&amp;nbsp;expect;&lt;br&gt;
a&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;call&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;recursively&amp;nbsp;and&amp;nbsp;can&amp;nbsp;itself&amp;nbsp;call&amp;nbsp;upon&lt;br&gt;
other&amp;nbsp;synchronized&amp;nbsp;methods&amp;nbsp;within&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object.&lt;br&gt;
==================================&lt;br&gt;
&amp;nbsp;Volatile&amp;nbsp;varibales&amp;nbsp;&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
volatile&amp;nbsp;is&amp;nbsp;probably&amp;nbsp;the&amp;nbsp;less&amp;nbsp;known/understood/documented&amp;nbsp;keyword&amp;nbsp;in&amp;nbsp;Java.&lt;br&gt;
I&amp;nbsp;have&amp;nbsp;recently&amp;nbsp;read&amp;nbsp;an&amp;nbsp;article&amp;nbsp;on&amp;nbsp;one&amp;nbsp;of&amp;nbsp;my&amp;nbsp;favourite&amp;nbsp;blog&amp;nbsp;about&amp;nbsp;the&amp;nbsp;volatile&lt;br&gt;
keyword.&amp;nbsp;The&amp;nbsp;author&amp;nbsp;shows&amp;nbsp;a&amp;nbsp;piece&amp;nbsp;of&amp;nbsp;code&amp;nbsp;where&amp;nbsp;the&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;seems&lt;br&gt;
to&amp;nbsp;have&amp;nbsp;an&amp;nbsp;influence.&amp;nbsp;This&amp;nbsp;example&amp;nbsp;was&amp;nbsp;not&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;and&amp;nbsp;the&amp;nbsp;role&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;on&amp;nbsp;the&amp;nbsp;behaviour&amp;nbsp;of&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;was&amp;nbsp;not&amp;nbsp;really&amp;nbsp;defined.&lt;br&gt;
So&amp;nbsp;I&amp;nbsp;have&amp;nbsp;decided&amp;nbsp;to&amp;nbsp;browse&amp;nbsp;the&amp;nbsp;web&amp;nbsp;to&amp;nbsp;find&amp;nbsp;a&amp;nbsp;better&amp;nbsp;code&amp;nbsp;example&amp;nbsp;for&amp;nbsp;the&amp;nbsp;volatile&lt;br&gt;
keyword.&amp;nbsp;After&amp;nbsp;one&amp;nbsp;hour,&amp;nbsp;nothing!&amp;nbsp;Only&amp;nbsp;wrong&amp;nbsp;examples,&amp;nbsp;articles&amp;nbsp;comparing&amp;nbsp;volatile&lt;br&gt;
with&amp;nbsp;synchronized&amp;nbsp;and&amp;nbsp;other&amp;nbsp;confused&amp;nbsp;examples&amp;nbsp;where&amp;nbsp;the&amp;nbsp;author&amp;nbsp;seems&amp;nbsp;as&amp;nbsp;lost&lt;br&gt;
as&amp;nbsp;the&amp;nbsp;reader...&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;synchronization;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.logging.Level;&lt;br&gt;
import&amp;nbsp;java.util.logging.Logger;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;VolatileExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Logger&amp;nbsp;LOGGER&amp;nbsp;=&amp;nbsp;Logger.getAnonymousLogger();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;volatile&amp;nbsp;int&amp;nbsp;MY_INT&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;ChangeListener().start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;ChangeMaker().start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;ChangeListener&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;local_value&amp;nbsp;=&amp;nbsp;MY_INT;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(local_value&amp;nbsp;&lt;&amp;nbsp;5)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(local_value&amp;nbsp;!=&amp;nbsp;MY_INT)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOGGER.log(Level.INFO,&amp;nbsp;"Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;{0}",&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MY_INT);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;local_value&amp;nbsp;=&amp;nbsp;MY_INT;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;ChangeMaker&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;local_value&amp;nbsp;=&amp;nbsp;MY_INT;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(MY_INT&amp;nbsp;&lt;&amp;nbsp;5)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VolatileExample.LOGGER.log(Level.INFO,&amp;nbsp;"Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;"&amp;nbsp;+&amp;nbsp;(local_value&amp;nbsp;+&amp;nbsp;1));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MY_INT&amp;nbsp;=&amp;nbsp;++local_value;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(500);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
With&amp;nbsp;the&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;1&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;1&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;2&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;2&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;3&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;3&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;4&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;4&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;5&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;5&amp;nbsp;&lt;br&gt;
Without&amp;nbsp;the&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;the&amp;nbsp;output&amp;nbsp;is&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;1&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;2&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;3&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;4&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;5&lt;br&gt;
.....And&amp;nbsp;the&amp;nbsp;change&amp;nbsp;listener&amp;nbsp;loop&amp;nbsp;infinitely...&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&lt;br&gt;
/*!!!!!!!!!BUTTTTTTTTT&amp;nbsp;I&amp;nbsp;always&amp;nbsp;get&amp;nbsp;OUTPUT&amp;nbsp;(try&amp;nbsp;in&amp;nbsp;java&amp;nbsp;6&amp;nbsp;in&amp;nbsp;Monday,&amp;nbsp;maybe&amp;nbsp;java&amp;nbsp;7&amp;nbsp;have&amp;nbsp;some&amp;nbsp;behavior)&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;1&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;1&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;2&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;2&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;3&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;3&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;4&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;4&lt;br&gt;
Incrementing&amp;nbsp;MY_INT&amp;nbsp;to&amp;nbsp;5&lt;br&gt;
Got&amp;nbsp;Change&amp;nbsp;for&amp;nbsp;MY_INT&amp;nbsp;:&amp;nbsp;5&amp;nbsp;*/&lt;br&gt;
&lt;br&gt;
=====&lt;br&gt;
Explanation&lt;br&gt;
So&amp;nbsp;what&amp;nbsp;happens?&amp;nbsp;_Each&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;stack_!,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;its&amp;nbsp;own&amp;nbsp;copy&lt;br&gt;
of&amp;nbsp;variables&amp;nbsp;it&amp;nbsp;can&amp;nbsp;access.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;created,&amp;nbsp;it&amp;nbsp;copies&amp;nbsp;the&amp;nbsp;value&lt;br&gt;
of&amp;nbsp;all&amp;nbsp;accessible&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;its&amp;nbsp;own&amp;nbsp;memory.&amp;nbsp;The&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;is&amp;nbsp;used&lt;br&gt;
to&amp;nbsp;say&amp;nbsp;to&amp;nbsp;the&amp;nbsp;jvm&amp;nbsp;"Warning,&amp;nbsp;this&amp;nbsp;variable&amp;nbsp;may&amp;nbsp;be&amp;nbsp;modified&amp;nbsp;in&amp;nbsp;an&amp;nbsp;other&amp;nbsp;Thread"&amp;nbsp;!.&lt;br&gt;
Without&amp;nbsp;this&amp;nbsp;keyword&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;is&amp;nbsp;free&amp;nbsp;to&amp;nbsp;make&amp;nbsp;some&amp;nbsp;optimizations,&amp;nbsp;like&amp;nbsp;never&lt;br&gt;
refreshing&amp;nbsp;those&amp;nbsp;local&amp;nbsp;copies&amp;nbsp;in&amp;nbsp;some&amp;nbsp;threads.&amp;nbsp;The&amp;nbsp;volatile&amp;nbsp;force&amp;nbsp;the&amp;nbsp;thread&lt;br&gt;
to&amp;nbsp;update&amp;nbsp;the&amp;nbsp;original&amp;nbsp;variable&amp;nbsp;for&amp;nbsp;each&amp;nbsp;variable.&amp;nbsp;The&amp;nbsp;volatile&amp;nbsp;keyword&amp;nbsp;could&lt;br&gt;
be&amp;nbsp;used&amp;nbsp;on&amp;nbsp;every&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;variable,&amp;nbsp;either&amp;nbsp;primitive&amp;nbsp;or&amp;nbsp;objects!&amp;nbsp;Maybe&amp;nbsp;the&amp;nbsp;subject&lt;br&gt;
of&amp;nbsp;another&amp;nbsp;article,&amp;nbsp;more&amp;nbsp;detailed...&lt;br&gt;
&lt;br&gt;
Never&amp;nbsp;used&amp;nbsp;volatile&amp;nbsp;and&amp;nbsp;never&amp;nbsp;met&amp;nbsp;this&amp;nbsp;problem...&lt;br&gt;
Like&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;issues,&amp;nbsp;it&amp;nbsp;happens&amp;nbsp;under&amp;nbsp;specials&amp;nbsp;circumstances.&amp;nbsp;Really&lt;br&gt;
special&amp;nbsp;for&amp;nbsp;this&amp;nbsp;one...&amp;nbsp;My&amp;nbsp;example&amp;nbsp;has&amp;nbsp;big&amp;nbsp;chances&amp;nbsp;to&amp;nbsp;show&amp;nbsp;mainly&amp;nbsp;because&lt;br&gt;
the&amp;nbsp;ChangeListener&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;busy,&amp;nbsp;thanks&amp;nbsp;to&amp;nbsp;the&amp;nbsp;loop,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;consider&amp;nbsp;that&lt;br&gt;
this&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;no&amp;nbsp;time&amp;nbsp;for&amp;nbsp;updating&amp;nbsp;the&amp;nbsp;local&amp;nbsp;variables.&amp;nbsp;Executing&amp;nbsp;some&amp;nbsp;synchronized&lt;br&gt;
methods&amp;nbsp;or&amp;nbsp;adding&amp;nbsp;an&amp;nbsp;other&amp;nbsp;variable&amp;nbsp;which&amp;nbsp;is&amp;nbsp;volatile&amp;nbsp;(or&amp;nbsp;even&amp;nbsp;executing&amp;nbsp;some&lt;br&gt;
simple&amp;nbsp;lines&amp;nbsp;of&amp;nbsp;code)&amp;nbsp;could&amp;nbsp;modify&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;behavior&amp;nbsp;and&amp;nbsp;"correct"&amp;nbsp;this&amp;nbsp;problem...&lt;br&gt;
&lt;br&gt;
Should&amp;nbsp;I&amp;nbsp;do&amp;nbsp;a&amp;nbsp;big&amp;nbsp;refactor&amp;nbsp;to&amp;nbsp;identify&amp;nbsp;all&amp;nbsp;variables&amp;nbsp;who&amp;nbsp;needs&amp;nbsp;volatile?&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Be&amp;nbsp;pragmatic!&amp;nbsp;If&amp;nbsp;you&amp;nbsp;think&amp;nbsp;your&amp;nbsp;project&amp;nbsp;needs&amp;nbsp;it,&amp;nbsp;do&amp;nbsp;it.&amp;nbsp;I&amp;nbsp;think&amp;nbsp;that&amp;nbsp;the&amp;nbsp;essential&lt;br&gt;
is&amp;nbsp;to&amp;nbsp;be&amp;nbsp;aware&amp;nbsp;of&amp;nbsp;that,&amp;nbsp;to&amp;nbsp;know&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&amp;nbsp;goal&amp;nbsp;of&amp;nbsp;each&amp;nbsp;keyword&amp;nbsp;of&amp;nbsp;the&amp;nbsp;java&amp;nbsp;language&lt;br&gt;
in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;take&amp;nbsp;the&amp;nbsp;good&amp;nbsp;decisions.&lt;br&gt;
===============================&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;wait()&amp;nbsp;and&amp;nbsp;notify()&amp;nbsp;Methods,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;wait&amp;nbsp;and&amp;nbsp;sleep&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>WAIT&amp;nbsp;:&lt;br&gt;
wait()&amp;nbsp;tells&amp;nbsp;the&amp;nbsp;calling&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;give&amp;nbsp;up&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;and&amp;nbsp;go&amp;nbsp;to&amp;nbsp;sleep&amp;nbsp;until&lt;br&gt;
some&amp;nbsp;other&amp;nbsp;thread&amp;nbsp;enters&amp;nbsp;the&amp;nbsp;same&amp;nbsp;monitor&amp;nbsp;and&amp;nbsp;calls&amp;nbsp;notify(&amp;nbsp;).&amp;nbsp;!!!!&amp;nbsp;&lt;br&gt;
&lt;br&gt;
With&amp;nbsp;the&amp;nbsp;synchronized&amp;nbsp;keyword,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;serialize&amp;nbsp;the&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;methods&lt;br&gt;
and&amp;nbsp;blocks&amp;nbsp;of&amp;nbsp;code&amp;nbsp;so&amp;nbsp;that&amp;nbsp;only&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time&amp;nbsp;can&amp;nbsp;execute&amp;nbsp;a&lt;br&gt;
synchronized&amp;nbsp;item.&amp;nbsp;The&amp;nbsp;wait()&amp;nbsp;and&amp;nbsp;notify()&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;class&lt;br&gt;
extend&amp;nbsp;this&amp;nbsp;capability&amp;nbsp;by&amp;nbsp;allowing&amp;nbsp;us&amp;nbsp;to&amp;nbsp;explicitly&amp;nbsp;coordinate&amp;nbsp;the&amp;nbsp;waiting&amp;nbsp;and&lt;br&gt;
running&amp;nbsp;threads.&amp;nbsp;Every&amp;nbsp;object&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;Object,&amp;nbsp;so&amp;nbsp;every&amp;nbsp;object&lt;br&gt;
inherits&amp;nbsp;these&amp;nbsp;methods.&amp;nbsp;By&amp;nbsp;using&amp;nbsp;wait()&amp;nbsp;and&amp;nbsp;notify(),&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;effectively&lt;br&gt;
give&amp;nbsp;up&amp;nbsp;its&amp;nbsp;hold&amp;nbsp;on&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;at&amp;nbsp;an&amp;nbsp;arbitrary&amp;nbsp;point&amp;nbsp;and&amp;nbsp;then&amp;nbsp;wait&amp;nbsp;for&lt;br&gt;
another&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;give&amp;nbsp;it&amp;nbsp;back&amp;nbsp;before&amp;nbsp;continuing.&amp;nbsp;All&amp;nbsp;of&amp;nbsp;the&amp;nbsp;coordinated&lt;br&gt;
activity&amp;nbsp;still&amp;nbsp;happens&amp;nbsp;inside&amp;nbsp;synchronized&amp;nbsp;blocks,&amp;nbsp;and&amp;nbsp;still&amp;nbsp;only&amp;nbsp;one&amp;nbsp;thread&lt;br&gt;
is&amp;nbsp;executing&amp;nbsp;at&amp;nbsp;a&amp;nbsp;given&amp;nbsp;time.&lt;br&gt;
&lt;br&gt;
By&amp;nbsp;executing&amp;nbsp;wait()&amp;nbsp;from&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;block,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;gives&amp;nbsp;up&amp;nbsp;its&amp;nbsp;hold&lt;br&gt;
on&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;goes&amp;nbsp;to&amp;nbsp;sleep.&amp;nbsp;A&amp;nbsp;thread&amp;nbsp;might&amp;nbsp;do&amp;nbsp;this&amp;nbsp;if&amp;nbsp;it&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;wait&lt;br&gt;
for&amp;nbsp;something&amp;nbsp;to&amp;nbsp;happen&amp;nbsp;in&amp;nbsp;another&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application,&amp;nbsp;as&amp;nbsp;we’ll&amp;nbsp;see&lt;br&gt;
shortly.&amp;nbsp;Later,&amp;nbsp;when&amp;nbsp;the&amp;nbsp;necessary&amp;nbsp;event&amp;nbsp;happens,&amp;nbsp;the&amp;nbsp;running&amp;nbsp;thread&amp;nbsp;calls&lt;br&gt;
notify()&amp;nbsp;from&amp;nbsp;a&amp;nbsp;block&amp;nbsp;synchronized&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;object.&amp;nbsp;The&amp;nbsp;first&amp;nbsp;thread&amp;nbsp;wakes&lt;br&gt;
up&amp;nbsp;and&amp;nbsp;begins&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;again.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;first&amp;nbsp;thread&amp;nbsp;manages&lt;br&gt;
to&amp;nbsp;reacquire&amp;nbsp;the&amp;nbsp;lock,&amp;nbsp;it&amp;nbsp;continues&amp;nbsp;from&amp;nbsp;where&amp;nbsp;it&amp;nbsp;left&amp;nbsp;off.&amp;nbsp;However,&lt;br&gt;
the&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;was&amp;nbsp;waiting&amp;nbsp;may&amp;nbsp;not&amp;nbsp;get&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;immediately&amp;nbsp;(or&amp;nbsp;perhaps&lt;br&gt;
ever).&amp;nbsp;It&amp;nbsp;depends&amp;nbsp;on&amp;nbsp;when&amp;nbsp;the&amp;nbsp;second&amp;nbsp;thread&amp;nbsp;eventually&amp;nbsp;releases&amp;nbsp;the&amp;nbsp;lock&lt;br&gt;
and&amp;nbsp;which&amp;nbsp;thread&amp;nbsp;manages&amp;nbsp;to&amp;nbsp;snag&amp;nbsp;it&amp;nbsp;next.&amp;nbsp;The&amp;nbsp;first&amp;nbsp;thread&amp;nbsp;won’t&amp;nbsp;wake&amp;nbsp;up&lt;br&gt;
from&amp;nbsp;the&amp;nbsp;wait()&amp;nbsp;unless&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;calls&amp;nbsp;notify().&amp;nbsp;!!!!&amp;nbsp;An&amp;nbsp;overloaded&amp;nbsp;version&lt;br&gt;
of&amp;nbsp;wait(),&amp;nbsp;however,&amp;nbsp;allows&amp;nbsp;us&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;a&amp;nbsp;timeout&amp;nbsp;period.&amp;nbsp;If&amp;nbsp;another&amp;nbsp;thread&lt;br&gt;
doesn’t&amp;nbsp;call&amp;nbsp;notify()&amp;nbsp;in&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;period,&amp;nbsp;the&amp;nbsp;waiting&amp;nbsp;thread&lt;br&gt;
automatically&amp;nbsp;wakes&amp;nbsp;up.&lt;br&gt;
&lt;br&gt;
Let’s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;scenario&amp;nbsp;to&amp;nbsp;see&amp;nbsp;what’s&amp;nbsp;going&amp;nbsp;on.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
example,&amp;nbsp;we’ll&amp;nbsp;assume&amp;nbsp;there&amp;nbsp;are&amp;nbsp;three&amp;nbsp;threads—one&amp;nbsp;waiting&amp;nbsp;to&amp;nbsp;execute&lt;br&gt;
each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;three&amp;nbsp;synchronized&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;the&amp;nbsp;MyThing&amp;nbsp;class.&amp;nbsp;We’ll&amp;nbsp;call&lt;br&gt;
them&amp;nbsp;the&amp;nbsp;waiter,&amp;nbsp;notifier,&amp;nbsp;and&amp;nbsp;related&amp;nbsp;threads.&lt;br&gt;
Here’s&amp;nbsp;a&amp;nbsp;code&amp;nbsp;fragment&amp;nbsp;to&amp;nbsp;illustrate:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;class&amp;nbsp;MyThing&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;waiterMethod()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;do&amp;nbsp;some&amp;nbsp;stuff&lt;br&gt;
&amp;nbsp;&amp;nbsp;wait();&amp;nbsp;//&amp;nbsp;now&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;notifier&amp;nbsp;to&amp;nbsp;do&amp;nbsp;something&lt;br&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;continue&amp;nbsp;where&amp;nbsp;we&amp;nbsp;left&amp;nbsp;off&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;notifierMethod()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;do&amp;nbsp;some&amp;nbsp;stuff&lt;br&gt;
&amp;nbsp;&amp;nbsp;notify();&amp;nbsp;//&amp;nbsp;notify&amp;nbsp;waiter&amp;nbsp;that&amp;nbsp;we've&amp;nbsp;done&amp;nbsp;it&lt;br&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;continue&amp;nbsp;doing&amp;nbsp;stuff&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;relatedMethod()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;//&amp;nbsp;do&amp;nbsp;some&amp;nbsp;related&amp;nbsp;stuff&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Let’s&amp;nbsp;assume&amp;nbsp;that&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;named&amp;nbsp;waiter&amp;nbsp;gets&amp;nbsp;through&amp;nbsp;the&amp;nbsp;gate&amp;nbsp;first&amp;nbsp;and&lt;br&gt;
begins&amp;nbsp;executing&amp;nbsp;waiterMethod().&amp;nbsp;The&amp;nbsp;two&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;initially&lt;br&gt;
blocked&amp;nbsp;when&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;for&amp;nbsp;the&amp;nbsp;MyThing&amp;nbsp;object.&amp;nbsp;When&amp;nbsp;waiter&lt;br&gt;
executes&amp;nbsp;the&amp;nbsp;wait()&amp;nbsp;method,&amp;nbsp;it&amp;nbsp;relinquishes&amp;nbsp;its&amp;nbsp;hold&amp;nbsp;on&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;goes&amp;nbsp;to&lt;br&gt;
sleep.&amp;nbsp;Now&amp;nbsp;two&amp;nbsp;viable&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;the&amp;nbsp;lock.&amp;nbsp;Which&amp;nbsp;thread&amp;nbsp;gets&amp;nbsp;it&lt;br&gt;
depends&amp;nbsp;on&amp;nbsp;several&amp;nbsp;factors,&amp;nbsp;including&amp;nbsp;chance&amp;nbsp;and&amp;nbsp;the&amp;nbsp;priorities&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;threads.&amp;nbsp;(We’ll&amp;nbsp;discuss&amp;nbsp;thread&amp;nbsp;scheduling&amp;nbsp;in&amp;nbsp;the&amp;nbsp;next&amp;nbsp;section.)&lt;br&gt;
&lt;br&gt;
Let’s&amp;nbsp;suppose&amp;nbsp;that&amp;nbsp;notifier&amp;nbsp;is&amp;nbsp;the&amp;nbsp;next&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;acquire&amp;nbsp;the&amp;nbsp;lock,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;begins&amp;nbsp;to&amp;nbsp;run&lt;br&gt;
notifierMethod().&amp;nbsp;waiter&amp;nbsp;continues&amp;nbsp;to&amp;nbsp;sleep,&amp;nbsp;and&amp;nbsp;related&amp;nbsp;languishes,&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;its&lt;br&gt;
turn.&amp;nbsp;When&amp;nbsp;notifier&amp;nbsp;executes&amp;nbsp;the&amp;nbsp;call&amp;nbsp;to&amp;nbsp;notify(),&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;system&amp;nbsp;prods&amp;nbsp;the&amp;nbsp;waiter&lt;br&gt;
thread,&amp;nbsp;effectively&amp;nbsp;telling&amp;nbsp;it&amp;nbsp;something&amp;nbsp;has&amp;nbsp;changed.&amp;nbsp;waiter&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;and&amp;nbsp;rejoins&lt;br&gt;
related&amp;nbsp;in&amp;nbsp;vying&amp;nbsp;for&amp;nbsp;the&amp;nbsp;MyThing&amp;nbsp;lock.&amp;nbsp;It&amp;nbsp;doesn’t&amp;nbsp;receive&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;automatically;&amp;nbsp;it&amp;nbsp;just&lt;br&gt;
changes&amp;nbsp;its&amp;nbsp;state&amp;nbsp;from&amp;nbsp;&amp;nbsp;!!!!!&amp;nbsp;"Leave&amp;nbsp;me&amp;nbsp;alone"&amp;nbsp;to&amp;nbsp;"I&amp;nbsp;want&amp;nbsp;the&amp;nbsp;lock."&lt;br&gt;
&lt;br&gt;
At&amp;nbsp;this&amp;nbsp;point,&amp;nbsp;notifier&amp;nbsp;still&amp;nbsp;owns&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;and&amp;nbsp;continues&amp;nbsp;to&amp;nbsp;hold&amp;nbsp;it&amp;nbsp;until&amp;nbsp;the&lt;br&gt;
synchronized&amp;nbsp;notifierMethod()&amp;nbsp;returns,&amp;nbsp;or&amp;nbsp;perhaps&amp;nbsp;executes&amp;nbsp;a&amp;nbsp;wait()&amp;nbsp;itself.&amp;nbsp;At&lt;br&gt;
that&amp;nbsp;point,&amp;nbsp;the&amp;nbsp;other&amp;nbsp;two&amp;nbsp;methods&amp;nbsp;get&amp;nbsp;to&amp;nbsp;fight&amp;nbsp;over&amp;nbsp;the&amp;nbsp;lock.&amp;nbsp;waiter&amp;nbsp;would&amp;nbsp;like&lt;br&gt;
to&amp;nbsp;continue&amp;nbsp;executing&amp;nbsp;waiter&amp;nbsp;Method()&amp;nbsp;from&amp;nbsp;the&amp;nbsp;point&amp;nbsp;where&amp;nbsp;it&amp;nbsp;left&amp;nbsp;off,&amp;nbsp;while&lt;br&gt;
related,&amp;nbsp;which&amp;nbsp;has&amp;nbsp;been&amp;nbsp;patient,&amp;nbsp;would&amp;nbsp;like&amp;nbsp;to&amp;nbsp;get&amp;nbsp;started.&amp;nbsp;We’ll&amp;nbsp;let&amp;nbsp;you&amp;nbsp;choose&lt;br&gt;
your&amp;nbsp;own&amp;nbsp;ending&amp;nbsp;for&amp;nbsp;the&amp;nbsp;story.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;each&amp;nbsp;call&amp;nbsp;to&amp;nbsp;notify(),&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;system&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;just&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;that&lt;br&gt;
is&amp;nbsp;asleep&amp;nbsp;in&amp;nbsp;a&amp;nbsp;wait()&amp;nbsp;call.&amp;nbsp;The&amp;nbsp;group&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;waiting&amp;nbsp;on&amp;nbsp;a&amp;nbsp;lock&amp;nbsp;is&amp;nbsp;called&amp;nbsp;the&lt;br&gt;
wait&amp;nbsp;set.&amp;nbsp;If&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;waiting,&amp;nbsp;Java&amp;nbsp;picks&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;on&amp;nbsp;an&amp;nbsp;arbitrary&lt;br&gt;
basis,&amp;nbsp;which&amp;nbsp;may&amp;nbsp;be&amp;nbsp;implementation-dependent.&amp;nbsp;The&amp;nbsp;Object&amp;nbsp;class&amp;nbsp;also&amp;nbsp;provides&lt;br&gt;
a&amp;nbsp;notifyAll()&amp;nbsp;call&amp;nbsp;to&amp;nbsp;wake&amp;nbsp;up&amp;nbsp;all&amp;nbsp;waiting&amp;nbsp;threads.&amp;nbsp;In&amp;nbsp;most&amp;nbsp;cases,&amp;nbsp;you’ll&amp;nbsp;probably&lt;br&gt;
want&amp;nbsp;to&amp;nbsp;use&amp;nbsp;notifyAll()&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;notify().&amp;nbsp;Keep&amp;nbsp;in&amp;nbsp;mind&amp;nbsp;that&amp;nbsp;notify()&amp;nbsp;really&lt;br&gt;
means,&amp;nbsp;“Hey,&amp;nbsp;something&amp;nbsp;related&amp;nbsp;to&amp;nbsp;this&amp;nbsp;object&amp;nbsp;has&amp;nbsp;changed.&amp;nbsp;The&amp;nbsp;condition&amp;nbsp;you&lt;br&gt;
are&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;may&amp;nbsp;have&amp;nbsp;changed,&amp;nbsp;so&amp;nbsp;check&amp;nbsp;it&amp;nbsp;again.”&amp;nbsp;In&amp;nbsp;general,&amp;nbsp;there&amp;nbsp;is&amp;nbsp;no&lt;br&gt;
reason&amp;nbsp;to&amp;nbsp;assume&amp;nbsp;only&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;at&amp;nbsp;a&amp;nbsp;time&amp;nbsp;is&amp;nbsp;interested&amp;nbsp;in&amp;nbsp;the&amp;nbsp;change&amp;nbsp;or&amp;nbsp;able&amp;nbsp;to&lt;br&gt;
act&amp;nbsp;upon&amp;nbsp;it.&amp;nbsp;Different&amp;nbsp;threads&amp;nbsp;might&amp;nbsp;look&amp;nbsp;upon&amp;nbsp;whatever&amp;nbsp;has&amp;nbsp;changed&amp;nbsp;in&amp;nbsp;different&amp;nbsp;ways.&lt;br&gt;
=================================================&lt;br&gt;
Wait&amp;nbsp;conditions&lt;br&gt;
In&amp;nbsp;general,&amp;nbsp;our&amp;nbsp;waiter&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;condition&amp;nbsp;to&amp;nbsp;change,&amp;nbsp;and&lt;br&gt;
we&amp;nbsp;will&amp;nbsp;want&amp;nbsp;it&amp;nbsp;to&amp;nbsp;sit&amp;nbsp;in&amp;nbsp;a&amp;nbsp;loop&amp;nbsp;like&amp;nbsp;the&amp;nbsp;following:&lt;br&gt;
&amp;nbsp;while&amp;nbsp;(&amp;nbsp;condition&amp;nbsp;!=&amp;nbsp;true&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;wait();&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;test&amp;nbsp;is&amp;nbsp;called&amp;nbsp;the&amp;nbsp;wait&amp;nbsp;condition.&amp;nbsp;Other&amp;nbsp;synchronized&amp;nbsp;threads&amp;nbsp;call&amp;nbsp;notify()&amp;nbsp;or&lt;br&gt;
notifyAll()&amp;nbsp;when&amp;nbsp;they&amp;nbsp;have&amp;nbsp;modified&amp;nbsp;the&amp;nbsp;environment&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;condition&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
checked&amp;nbsp;again.&amp;nbsp;It’s&amp;nbsp;important&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;loop&amp;nbsp;on&amp;nbsp;the&amp;nbsp;wait&amp;nbsp;condition&amp;nbsp;to&amp;nbsp;be&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;the&lt;br&gt;
thread&amp;nbsp;has&amp;nbsp;been&amp;nbsp;awakened&amp;nbsp;for&amp;nbsp;the&amp;nbsp;right&amp;nbsp;reason.&amp;nbsp;Threads&amp;nbsp;may&amp;nbsp;also&amp;nbsp;use&amp;nbsp;a&amp;nbsp;timed&amp;nbsp;version&lt;br&gt;
of&amp;nbsp;wait()&amp;nbsp;to&amp;nbsp;do&amp;nbsp;periodic&amp;nbsp;work&amp;nbsp;while&amp;nbsp;checking&amp;nbsp;the&amp;nbsp;condition&amp;nbsp;in&amp;nbsp;this&amp;nbsp;way.&amp;nbsp;Using&amp;nbsp;wait&lt;br&gt;
conditions&amp;nbsp;like&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;an&amp;nbsp;alternative&amp;nbsp;to&amp;nbsp;polling&amp;nbsp;and&amp;nbsp;sleeping,&amp;nbsp;as&amp;nbsp;you’ll&amp;nbsp;see&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;section.&lt;br&gt;
==================================================&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;waitandnotify;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;WaitAndNotify1&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadB&amp;nbsp;b&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadB();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Waiting&amp;nbsp;for&amp;nbsp;b&amp;nbsp;to&amp;nbsp;complete...");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Total&amp;nbsp;is:&amp;nbsp;"&amp;nbsp;+b.total);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;ThreadB&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;total;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.total&amp;nbsp;+&amp;nbsp;"";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(this)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;=&amp;nbsp;1000000000;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;total&amp;nbsp;+=&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//System.out.println(total);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Waiting&amp;nbsp;for&amp;nbsp;b&amp;nbsp;to&amp;nbsp;complete...&lt;br&gt;
Total&amp;nbsp;is:&amp;nbsp;-243309312&lt;br&gt;
&lt;br&gt;
======================================&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;Producer&amp;nbsp;=&amp;nbsp;&gt;&amp;nbsp;Consumer&amp;nbsp;(using&amp;nbsp;wait&amp;nbsp;and&amp;nbsp;notify):&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;waitandnotify.consumerproducer;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.Date;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Producer&amp;nbsp;implements&amp;nbsp;Runnable{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;final&amp;nbsp;int&amp;nbsp;MAXQUEUE&amp;nbsp;=&amp;nbsp;5;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;List&lt;String&gt;&amp;nbsp;messages&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;putMessage();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;putMessage(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(messages.size()&amp;nbsp;&gt;=&amp;nbsp;MAXQUEUE)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;messages.add(&amp;nbsp;(new&amp;nbsp;Date()).toString()&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;String&amp;nbsp;getMessage()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(messages.size()&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;message&amp;nbsp;=&amp;nbsp;messages.remove(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;message;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
package&amp;nbsp;waitandnotify.consumerproducer;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Consumer&amp;nbsp;implements&amp;nbsp;Runnable{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Producer&amp;nbsp;producer;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Consumer(Producer&amp;nbsp;producer)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.producer&amp;nbsp;=&amp;nbsp;producer;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;message&amp;nbsp;=&amp;nbsp;producer.getMessage();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Get&amp;nbsp;message&amp;nbsp;"&amp;nbsp;+&amp;nbsp;message);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(2000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
package&amp;nbsp;waitandnotify.consumerproducer;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ConsumerProducerProgram&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Producer&amp;nbsp;producer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Producer();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Consumer&amp;nbsp;consumer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Consumer(producer);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(producer).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(consumer).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Get&amp;nbsp;message&amp;nbsp;Sun&amp;nbsp;Mar&amp;nbsp;23&amp;nbsp;09:51:07&amp;nbsp;EET&amp;nbsp;2014&lt;br&gt;
Get&amp;nbsp;message&amp;nbsp;Sun&amp;nbsp;Mar&amp;nbsp;23&amp;nbsp;09:51:08&amp;nbsp;EET&amp;nbsp;2014&lt;br&gt;
Get&amp;nbsp;message&amp;nbsp;Sun&amp;nbsp;Mar&amp;nbsp;23&amp;nbsp;09:51:09&amp;nbsp;EET&amp;nbsp;2014&lt;br&gt;
Get&amp;nbsp;message&amp;nbsp;Sun&amp;nbsp;Mar&amp;nbsp;23&amp;nbsp;09:51:10&amp;nbsp;EET&amp;nbsp;2014&lt;br&gt;
.....&lt;br&gt;
===========================================&lt;br&gt;
===&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;wait&amp;nbsp;and&amp;nbsp;sleep&amp;nbsp;?&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;major&amp;nbsp;difference&amp;nbsp;is&amp;nbsp;that&amp;nbsp;wait()&amp;nbsp;releases&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;or&amp;nbsp;monitor&amp;nbsp;while&amp;nbsp;sleep()&amp;nbsp;doesn’t&lt;br&gt;
releases&amp;nbsp;any&amp;nbsp;lock&amp;nbsp;or&amp;nbsp;monitor&amp;nbsp;while&amp;nbsp;waiting.&amp;nbsp;Wait&amp;nbsp;is&amp;nbsp;used&amp;nbsp;for&amp;nbsp;inter-thread&amp;nbsp;communication&lt;br&gt;
while&amp;nbsp;sleep&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;introduce&amp;nbsp;pause&amp;nbsp;on&amp;nbsp;execution,&amp;nbsp;generally.&lt;br&gt;
&lt;br&gt;
Thread.sleep()&amp;nbsp;sends&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;into&amp;nbsp;the&amp;nbsp;“Not&amp;nbsp;Runnable”&amp;nbsp;state&amp;nbsp;for&amp;nbsp;some&lt;br&gt;
amount&amp;nbsp;of&amp;nbsp;time.&amp;nbsp;The&amp;nbsp;thread&amp;nbsp;__&amp;nbsp;keeps&amp;nbsp;the&amp;nbsp;monitors&amp;nbsp;it&amp;nbsp;has&amp;nbsp;acquired&amp;nbsp;—&amp;nbsp;i.e.&amp;nbsp;if&amp;nbsp;the&amp;nbsp;thread&lt;br&gt;
is&amp;nbsp;currently&amp;nbsp;in&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;block&amp;nbsp;or&amp;nbsp;method&amp;nbsp;no&amp;nbsp;other&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;enter&amp;nbsp;this&amp;nbsp;block&lt;br&gt;
or&amp;nbsp;method.&amp;nbsp;If&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;calls&amp;nbsp;t.interrupt()&amp;nbsp;it&amp;nbsp;will&amp;nbsp;wake&amp;nbsp;up&amp;nbsp;the&amp;nbsp;sleeping&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;Note&amp;nbsp;that&amp;nbsp;sleep&amp;nbsp;is&amp;nbsp;a&amp;nbsp;static&amp;nbsp;method,&amp;nbsp;which&amp;nbsp;means&amp;nbsp;that&amp;nbsp;it&amp;nbsp;always&amp;nbsp;affects&amp;nbsp;the&amp;nbsp;current&lt;br&gt;
thread&amp;nbsp;(the&amp;nbsp;one&amp;nbsp;that&amp;nbsp;is&amp;nbsp;executing&amp;nbsp;the&amp;nbsp;sleep&amp;nbsp;method).&amp;nbsp;A&amp;nbsp;common&amp;nbsp;mistake&amp;nbsp;is&amp;nbsp;to&amp;nbsp;call&lt;br&gt;
t.sleep()&amp;nbsp;where&amp;nbsp;t&amp;nbsp;is&amp;nbsp;a&amp;nbsp;different&amp;nbsp;thread;&amp;nbsp;even&amp;nbsp;then,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;that&amp;nbsp;will&lt;br&gt;
sleep,&amp;nbsp;not&amp;nbsp;the&amp;nbsp;t&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
object.wait()&amp;nbsp;sends&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;into&amp;nbsp;the&amp;nbsp;“Not&amp;nbsp;Runnable”&amp;nbsp;state,&amp;nbsp;like&amp;nbsp;sleep(),&lt;br&gt;
but&amp;nbsp;with&amp;nbsp;a&amp;nbsp;twist.&amp;nbsp;Wait&amp;nbsp;is&amp;nbsp;called&amp;nbsp;on&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;not&amp;nbsp;a&amp;nbsp;thread;&amp;nbsp;we&amp;nbsp;call&amp;nbsp;this&amp;nbsp;object&amp;nbsp;the&lt;br&gt;
“lock&amp;nbsp;object.”&amp;nbsp;Before&amp;nbsp;lock.wait()&amp;nbsp;is&amp;nbsp;called,&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;synchronize&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;lock&amp;nbsp;object;&amp;nbsp;wait()&amp;nbsp;then&amp;nbsp;releases&amp;nbsp;this&amp;nbsp;lock,&amp;nbsp;and&amp;nbsp;adds&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;the&amp;nbsp;“wait&amp;nbsp;list”&amp;nbsp;!!&lt;br&gt;
associated&amp;nbsp;with&amp;nbsp;the&amp;nbsp;lock.&amp;nbsp;Later,&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;synchronize&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;lock&lt;br&gt;
object&amp;nbsp;and&amp;nbsp;call&amp;nbsp;lock.notify().&amp;nbsp;This&amp;nbsp;wakes&amp;nbsp;up&amp;nbsp;the&amp;nbsp;original,&amp;nbsp;waiting&amp;nbsp;thread.&lt;br&gt;
Basically,&amp;nbsp;wait()/notify()&amp;nbsp;is&amp;nbsp;like&amp;nbsp;sleep()/interrupt(),&amp;nbsp;only&amp;nbsp;the&amp;nbsp;active&amp;nbsp;thread&amp;nbsp;does&amp;nbsp;not&lt;br&gt;
need&amp;nbsp;a&amp;nbsp;direct&amp;nbsp;pointer&amp;nbsp;to&amp;nbsp;the&amp;nbsp;sleeping&amp;nbsp;thread,&amp;nbsp;but&amp;nbsp;only&amp;nbsp;to&amp;nbsp;the&amp;nbsp;shared&amp;nbsp;lock&amp;nbsp;object.&lt;br&gt;
&lt;br&gt;
synchronized(LOCK)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(1000);&amp;nbsp;//&amp;nbsp;LOCK&amp;nbsp;is&amp;nbsp;held&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
synchronized(LOCK)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOCK.wait();&amp;nbsp;//&amp;nbsp;LOCK&amp;nbsp;is&amp;nbsp;not&amp;nbsp;held&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=&lt;br&gt;
Let&amp;nbsp;categorize&amp;nbsp;all&amp;nbsp;above&amp;nbsp;points&amp;nbsp;:&lt;br&gt;
Call&amp;nbsp;on:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait():&amp;nbsp;Call&amp;nbsp;on&amp;nbsp;an&amp;nbsp;object;&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;must&amp;nbsp;synchronize&amp;nbsp;on&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;object.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep():&amp;nbsp;Call&amp;nbsp;on&amp;nbsp;a&amp;nbsp;Thread;&amp;nbsp;always&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
Synchronized:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait():&amp;nbsp;when&amp;nbsp;synchronized&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;access&amp;nbsp;same&amp;nbsp;Object&amp;nbsp;one&amp;nbsp;by&amp;nbsp;one.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep():&amp;nbsp;when&amp;nbsp;synchronized&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;sleep&amp;nbsp;over&amp;nbsp;of&amp;nbsp;sleeping&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
Hold&amp;nbsp;lock:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait():&amp;nbsp;release&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;for&amp;nbsp;other&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;have&amp;nbsp;chance&amp;nbsp;to&amp;nbsp;execute.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep():&amp;nbsp;keep&amp;nbsp;lock&amp;nbsp;for&amp;nbsp;at&amp;nbsp;least&amp;nbsp;t&amp;nbsp;times&amp;nbsp;if&amp;nbsp;timeout&amp;nbsp;specified&amp;nbsp;or&amp;nbsp;somebody&amp;nbsp;interrupt.&lt;br&gt;
&lt;br&gt;
Wake-up&amp;nbsp;condition:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait():&amp;nbsp;until&amp;nbsp;call&amp;nbsp;notify(),&amp;nbsp;notifyAll()&amp;nbsp;from&amp;nbsp;object&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep():&amp;nbsp;until&amp;nbsp;at&amp;nbsp;least&amp;nbsp;time&amp;nbsp;expire&amp;nbsp;or&amp;nbsp;call&amp;nbsp;interrupt().&lt;br&gt;
&lt;br&gt;
Usage:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep():&amp;nbsp;for&amp;nbsp;time-synchronization&amp;nbsp;and;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait():&amp;nbsp;for&amp;nbsp;multi-thread-synchronization.&lt;br&gt;
===========</questionanswer>
  </question>
  <question id="1_0_0_3_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;ThreadLocal&amp;nbsp;objects,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;examples.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
A&amp;nbsp;common&amp;nbsp;issue&amp;nbsp;that&amp;nbsp;arises&amp;nbsp;is&amp;nbsp;the&amp;nbsp;need&amp;nbsp;to&amp;nbsp;maintain&amp;nbsp;some&amp;nbsp;information&lt;br&gt;
or&amp;nbsp;state&amp;nbsp;on&amp;nbsp;a&amp;nbsp;perthread&amp;nbsp;basis.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;we&amp;nbsp;might&amp;nbsp;want&amp;nbsp;to&amp;nbsp;carry&amp;nbsp;some&lt;br&gt;
context&amp;nbsp;with&amp;nbsp;the&amp;nbsp;!!&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;as&amp;nbsp;it&amp;nbsp;executes&amp;nbsp;our&amp;nbsp;application.&amp;nbsp;Or&amp;nbsp;we&amp;nbsp;might&lt;br&gt;
simply&amp;nbsp;want&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;__&amp;nbsp;value&amp;nbsp;that&amp;nbsp;is&amp;nbsp;different&amp;nbsp;for&amp;nbsp;different&amp;nbsp;threads__&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
way&amp;nbsp;that&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;“sees”&amp;nbsp;its&amp;nbsp;own&amp;nbsp;local&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;a&amp;nbsp;method.&amp;nbsp;Java&amp;nbsp;supports&lt;br&gt;
this&amp;nbsp;through&amp;nbsp;the&amp;nbsp;ThreadLocal&amp;nbsp;class.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;ThreadLocal&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;wrapper&amp;nbsp;that&amp;nbsp;automatically&amp;nbsp;maintains&amp;nbsp;a&amp;nbsp;separate&amp;nbsp;value&amp;nbsp;for&lt;br&gt;
any&amp;nbsp;thread&amp;nbsp;calling&amp;nbsp;it.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
ThreadLocal&amp;nbsp;userID&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal();&lt;br&gt;
userID.set("Pat");&amp;nbsp;//&amp;nbsp;called&amp;nbsp;by&amp;nbsp;thread&amp;nbsp;1&lt;br&gt;
userID.set("Bob");&amp;nbsp;//&amp;nbsp;called&amp;nbsp;by&amp;nbsp;thread&amp;nbsp;2&lt;br&gt;
userID.get();&amp;nbsp;//&amp;nbsp;thread&amp;nbsp;1&amp;nbsp;gets&amp;nbsp;"Pat"&lt;br&gt;
userID.get();&amp;nbsp;//&amp;nbsp;thread&amp;nbsp;2&amp;nbsp;gets&amp;nbsp;"Bob"&lt;br&gt;
&lt;br&gt;
ThreadLocals&amp;nbsp;are&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;a&amp;nbsp;Map&amp;nbsp;attached&amp;nbsp;to&amp;nbsp;each&amp;nbsp;Thread&lt;br&gt;
instance,&amp;nbsp;so&amp;nbsp;their&amp;nbsp;values&amp;nbsp;will&amp;nbsp;disappear&amp;nbsp;when&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;used&amp;nbsp;and&lt;br&gt;
garbage&amp;nbsp;is&amp;nbsp;collected.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;useful&amp;nbsp;addition&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;7&amp;nbsp;is&amp;nbsp;the&amp;nbsp;ThreadLocalRandom&amp;nbsp;class,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;an&lt;br&gt;
extension&amp;nbsp;of&amp;nbsp;the&amp;nbsp;java.util.Random&amp;nbsp;class&amp;nbsp;discussed&amp;nbsp;in&amp;nbsp;Chapter&amp;nbsp;11.&amp;nbsp;The&lt;br&gt;
ThreadLocalRandom&amp;nbsp;class&amp;nbsp;eliminates&amp;nbsp;contention&amp;nbsp;(waiting&amp;nbsp;due&amp;nbsp;to&lt;br&gt;
synchronization)&amp;nbsp;on&amp;nbsp;the&amp;nbsp;random-number&amp;nbsp;generator&amp;nbsp;when&amp;nbsp;called&amp;nbsp;from&amp;nbsp;different&amp;nbsp;threads.&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
ThreadLocal&amp;nbsp;instances&amp;nbsp;are&amp;nbsp;typically&amp;nbsp;private&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;in&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;wish&amp;nbsp;to&amp;nbsp;associate&lt;br&gt;
state&amp;nbsp;with&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;(e.g.,&amp;nbsp;a&amp;nbsp;user&amp;nbsp;ID&amp;nbsp;or&amp;nbsp;Transaction&amp;nbsp;ID).&lt;br&gt;
===&lt;br&gt;
Method&amp;nbsp;Summary&lt;br&gt;
&lt;br&gt;
Methods&amp;nbsp;&lt;br&gt;
Modifier&amp;nbsp;and&amp;nbsp;Type&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Method&amp;nbsp;and&amp;nbsp;Description&lt;br&gt;
-&amp;nbsp;T&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;get()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;value&amp;nbsp;in&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread-local&amp;nbsp;variable.&lt;br&gt;
-&amp;nbsp;protected&amp;nbsp;T&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;initialValue()&lt;br&gt;
Returns&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;"initial&amp;nbsp;value"&amp;nbsp;for&amp;nbsp;this&amp;nbsp;thread-local&amp;nbsp;variable.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;remove()&lt;br&gt;
Removes&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;value&amp;nbsp;for&amp;nbsp;this&amp;nbsp;thread-local&amp;nbsp;variable.&lt;br&gt;
-&amp;nbsp;void&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set(T&amp;nbsp;value)&lt;br&gt;
Sets&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread's&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;this&amp;nbsp;thread-local&amp;nbsp;variable&amp;nbsp;to&amp;nbsp;the&amp;nbsp;specified&amp;nbsp;value.&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===================================================&lt;br&gt;
===================================================&lt;br&gt;
EXAMPLE&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;synchronization;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ThreadLocalExample&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//!!!!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;ThreadLocal&lt;String&gt;&amp;nbsp;threadLocalValue&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&lt;String&gt;(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;String&amp;nbsp;initialValue()&amp;nbsp;{&amp;nbsp;//&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"default&amp;nbsp;value";&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OPTIONAL&amp;nbsp;BLOCK&amp;nbsp;to&amp;nbsp;set&amp;nbsp;default&amp;nbsp;value&amp;nbsp;of&amp;nbsp;ThreadLocal&amp;nbsp;Object&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Thread&amp;nbsp;Name=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;threadLocalValue.get());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;nextValue&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Random().nextInt(1000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(nextValue);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;threadLocalValue.set(nextValue&amp;nbsp;+&amp;nbsp;"");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Thread&amp;nbsp;Name=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.currentThread().getName()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;"&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;threadLocalValue.get());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalExample&amp;nbsp;example&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocalExample();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(example,&amp;nbsp;i&amp;nbsp;+&amp;nbsp;"");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(new&amp;nbsp;Random().nextInt(1000));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(9000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalExample.threadLocalValue.set("hello&amp;nbsp;,&amp;nbsp;i&amp;nbsp;am&amp;nbsp;thread&amp;nbsp;local&amp;nbsp;in&amp;nbsp;main");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("In&amp;nbsp;main&amp;nbsp;Thread&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;ThreadLocalExample.threadLocalValue.get());//&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;0&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;0&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;319&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;1&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;1&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;338&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;2&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;3&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;4&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;2&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;814&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;3&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;909&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;5&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;6&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;6&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;211&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;5&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;408&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;4&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;964&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;7&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;8&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;8&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;253&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;9&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;default&amp;nbsp;value&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;9&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;80&lt;br&gt;
Thread&amp;nbsp;Name=&amp;nbsp;7&amp;nbsp;default&amp;nbsp;Formatter&amp;nbsp;=&amp;nbsp;944&lt;br&gt;
In&amp;nbsp;main&amp;nbsp;Thread&amp;nbsp;:&amp;nbsp;hello&amp;nbsp;,&amp;nbsp;i&amp;nbsp;am&amp;nbsp;thread&amp;nbsp;local&amp;nbsp;in&amp;nbsp;main&lt;br&gt;
========================================&lt;br&gt;
IMPLEMENTATION&amp;nbsp;OF&amp;nbsp;ThreadLocal:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ThreadLocal&lt;T&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;threadLocalHashCode&amp;nbsp;=&amp;nbsp;nextHashCode();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;AtomicInteger&amp;nbsp;nextHashCode&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;AtomicInteger();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;T&amp;nbsp;initialValue()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ThreadLocal()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;T&amp;nbsp;get()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;Thread.currentThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalMap&amp;nbsp;map&amp;nbsp;=&amp;nbsp;getMap(t);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalMap.Entry&amp;nbsp;e&amp;nbsp;=&amp;nbsp;map.getEntry(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(e&amp;nbsp;!=&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;(T)e.value;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;setInitialValue();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;set(T&amp;nbsp;value)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;Thread.currentThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalMap&amp;nbsp;map&amp;nbsp;=&amp;nbsp;getMap(t);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(map&amp;nbsp;!=&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.set(this,&amp;nbsp;value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createMap(t,&amp;nbsp;value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;remove()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalMap&amp;nbsp;m&amp;nbsp;=&amp;nbsp;getMap(Thread.currentThread());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(m&amp;nbsp;!=&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m.remove(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;ThreadLocalMap&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Entry&amp;nbsp;extends&amp;nbsp;WeakReference&lt;ThreadLocal&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&amp;nbsp;The&amp;nbsp;value&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;this&amp;nbsp;ThreadLocal.&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;value;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Entry(ThreadLocal&amp;nbsp;k,&amp;nbsp;Object&amp;nbsp;v)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(k);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value&amp;nbsp;=&amp;nbsp;v;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;int&amp;nbsp;INITIAL_CAPACITY&amp;nbsp;=&amp;nbsp;16;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;The&amp;nbsp;table,&amp;nbsp;resized&amp;nbsp;as&amp;nbsp;necessary.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;table.length&amp;nbsp;MUST&amp;nbsp;always&amp;nbsp;be&amp;nbsp;a&amp;nbsp;power&amp;nbsp;of&amp;nbsp;two.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Entry[]&amp;nbsp;table;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocalMap(ThreadLocal&amp;nbsp;firstKey,&amp;nbsp;Object&amp;nbsp;firstValue)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Entry[INITIAL_CAPACITY];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;firstKey.threadLocalHashCode&amp;nbsp;&amp;&amp;nbsp;(INITIAL_CAPACITY&amp;nbsp;-&amp;nbsp;1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table[i]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Entry(firstKey,&amp;nbsp;firstValue);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size&amp;nbsp;=&amp;nbsp;1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setThreshold(INITIAL_CAPACITY);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocalMap(ThreadLocalMap&amp;nbsp;parentMap)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Entry[]&amp;nbsp;parentTable&amp;nbsp;=&amp;nbsp;parentMap.table;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;len&amp;nbsp;=&amp;nbsp;parentTable.length;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setThreshold(len);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Entry[len];&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;j&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;j&amp;nbsp;&lt;&amp;nbsp;len;&amp;nbsp;j++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Entry&amp;nbsp;e&amp;nbsp;=&amp;nbsp;parentTable[j];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(e&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadLocal&amp;nbsp;key&amp;nbsp;=&amp;nbsp;e.get();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(key&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;value&amp;nbsp;=&amp;nbsp;key.childValue(e.value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Entry&amp;nbsp;c&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Entry(key,&amp;nbsp;value);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;h&amp;nbsp;=&amp;nbsp;key.threadLocalHashCode&amp;nbsp;&amp;&amp;nbsp;(len&amp;nbsp;-&amp;nbsp;1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(table[h]&amp;nbsp;!=&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;h&amp;nbsp;=&amp;nbsp;nextIndex(h,&amp;nbsp;len);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table[h]&amp;nbsp;=&amp;nbsp;c;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size++;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;........&lt;br&gt;
}</questionanswer>
  </question>
  <question id="1_0_0_3_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;&amp;nbsp;Scheduling&amp;nbsp;and&amp;nbsp;Priority,&amp;nbsp;describe.&lt;br&gt;
In&amp;nbsp;which&amp;nbsp;states&amp;nbsp;Thread&amp;nbsp;can&amp;nbsp;be&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
Java&amp;nbsp;makes&amp;nbsp;few&amp;nbsp;guarantees&amp;nbsp;about&amp;nbsp;how&amp;nbsp;it&amp;nbsp;schedules&amp;nbsp;threads.&amp;nbsp;Almost&amp;nbsp;all&lt;br&gt;
of&amp;nbsp;Java’s&amp;nbsp;thread&amp;nbsp;scheduling&amp;nbsp;is&amp;nbsp;left&amp;nbsp;up&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;implementation&amp;nbsp;and,&lt;br&gt;
to&amp;nbsp;some&amp;nbsp;degree,&amp;nbsp;the&amp;nbsp;application.&amp;nbsp;Although&amp;nbsp;it&amp;nbsp;might&amp;nbsp;have&amp;nbsp;made&amp;nbsp;sense&lt;br&gt;
(and&amp;nbsp;would&amp;nbsp;certainly&amp;nbsp;have&amp;nbsp;made&amp;nbsp;many&amp;nbsp;developers&amp;nbsp;happier)&amp;nbsp;if&amp;nbsp;Java’s&lt;br&gt;
developers&amp;nbsp;had&amp;nbsp;specified&amp;nbsp;a&amp;nbsp;scheduling&amp;nbsp;algorithm,&amp;nbsp;a&amp;nbsp;single&amp;nbsp;algorithm&lt;br&gt;
isn’t&amp;nbsp;necessarily&amp;nbsp;suitable&amp;nbsp;for&amp;nbsp;all&amp;nbsp;the&amp;nbsp;roles&amp;nbsp;that&amp;nbsp;Java&amp;nbsp;can&amp;nbsp;play.&amp;nbsp;Instead,&lt;br&gt;
Java’s&amp;nbsp;designers&amp;nbsp;put&amp;nbsp;the&amp;nbsp;burden&amp;nbsp;on&amp;nbsp;you&amp;nbsp;to&amp;nbsp;write&amp;nbsp;robust&amp;nbsp;code&amp;nbsp;that&amp;nbsp;works&lt;br&gt;
no&amp;nbsp;matter&amp;nbsp;the&amp;nbsp;scheduling&amp;nbsp;algorithm,&amp;nbsp;and&amp;nbsp;let&amp;nbsp;the&amp;nbsp;implementation&amp;nbsp;tune&amp;nbsp;the&lt;br&gt;
algorithm&amp;nbsp;for&amp;nbsp;the&amp;nbsp;best&amp;nbsp;fit.&lt;br&gt;
&lt;br&gt;
Every&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;a&amp;nbsp;priority&amp;nbsp;value.&amp;nbsp;In&amp;nbsp;general,&amp;nbsp;any&amp;nbsp;time&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;of&amp;nbsp;a&amp;nbsp;higher&lt;br&gt;
priority&amp;nbsp;than&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;becomes&amp;nbsp;runnable&amp;nbsp;(is&amp;nbsp;started,&amp;nbsp;stops&lt;br&gt;
sleeping,&amp;nbsp;or&amp;nbsp;is&amp;nbsp;notified),&amp;nbsp;it&amp;nbsp;preempts&amp;nbsp;the&amp;nbsp;lower-priority&amp;nbsp;thread&amp;nbsp;and&amp;nbsp;begins&lt;br&gt;
executing.&amp;nbsp;By&amp;nbsp;default,&amp;nbsp;threads&amp;nbsp;with&amp;nbsp;the&amp;nbsp;same&amp;nbsp;priority&amp;nbsp;are&amp;nbsp;scheduled&amp;nbsp;round-robin,&lt;br&gt;
which&amp;nbsp;means&amp;nbsp;once&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;starts&amp;nbsp;to&amp;nbsp;run,&amp;nbsp;it&amp;nbsp;continues&amp;nbsp;until&amp;nbsp;it&amp;nbsp;does&lt;br&gt;
one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Sleeps,&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;Thread.sleep()&amp;nbsp;or&amp;nbsp;wait()&lt;br&gt;
-&amp;nbsp;Waits&amp;nbsp;for&amp;nbsp;a&amp;nbsp;lock,&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;run&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method&lt;br&gt;
-&amp;nbsp;Blocks&amp;nbsp;on&amp;nbsp;I/O,&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;in&amp;nbsp;a&amp;nbsp;read()&amp;nbsp;or&amp;nbsp;accept()&amp;nbsp;call&lt;br&gt;
-&amp;nbsp;Explicitly&amp;nbsp;yields&amp;nbsp;control,&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;yield()&lt;br&gt;
-&amp;nbsp;Terminates,&amp;nbsp;by&amp;nbsp;completing&amp;nbsp;its&amp;nbsp;target&amp;nbsp;method&amp;nbsp;or&amp;nbsp;with&amp;nbsp;a&amp;nbsp;stop()&amp;nbsp;call&amp;nbsp;(deprecated)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;threadspriorityandstate;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ThreadPriorityExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyT(),&amp;nbsp;"t1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;MyT(),&amp;nbsp;"t22222222222");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.setPriority(Thread.MIN_PRIORITY);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.setPriority(Thread.MAX_PRIORITY);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;MyT&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;100;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
We&amp;nbsp;would&amp;nbsp;expect&amp;nbsp;that&amp;nbsp;with&amp;nbsp;this&amp;nbsp;change&amp;nbsp;to&amp;nbsp;our&amp;nbsp;Thready&amp;nbsp;class,&amp;nbsp;the&amp;nbsp;t1&amp;nbsp;thread&lt;br&gt;
would&amp;nbsp;take&amp;nbsp;over&amp;nbsp;completely.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;run&amp;nbsp;this&amp;nbsp;code&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Solaris&amp;nbsp;implementation&lt;br&gt;
of&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;that’s&amp;nbsp;what&amp;nbsp;happens.&amp;nbsp;The&amp;nbsp;same&amp;nbsp;is&amp;nbsp;not&amp;nbsp;true&amp;nbsp;on&amp;nbsp;Windows&amp;nbsp;or&amp;nbsp;with&lt;br&gt;
some&amp;nbsp;older&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;Java.&amp;nbsp;Similarly,&amp;nbsp;if&amp;nbsp;you&amp;nbsp;change&amp;nbsp;the&amp;nbsp;priorities&amp;nbsp;to&amp;nbsp;values&amp;nbsp;other&lt;br&gt;
than&amp;nbsp;min&amp;nbsp;and&amp;nbsp;max,&amp;nbsp;you&amp;nbsp;may&amp;nbsp;not&amp;nbsp;see&amp;nbsp;any&amp;nbsp;difference&amp;nbsp;at&amp;nbsp;all.&amp;nbsp;The&amp;nbsp;subtleties&lt;br&gt;
relating&amp;nbsp;to&amp;nbsp;priority&amp;nbsp;and&amp;nbsp;performance&amp;nbsp;relate&amp;nbsp;to&amp;nbsp;how&amp;nbsp;Java&amp;nbsp;threads&amp;nbsp;and&amp;nbsp;priorities&lt;br&gt;
are&amp;nbsp;mapped&amp;nbsp;to&amp;nbsp;real&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;OS.&amp;nbsp;For&amp;nbsp;this&amp;nbsp;reason,&amp;nbsp;thread&amp;nbsp;priorities&amp;nbsp;should&lt;br&gt;
be&amp;nbsp;reserved&amp;nbsp;for&amp;nbsp;system&amp;nbsp;and&amp;nbsp;framework&amp;nbsp;development.&lt;br&gt;
&lt;br&gt;
!!!!!!!&amp;nbsp;(Rarely&amp;nbsp;-&amp;nbsp;ridko)&lt;br&gt;
&amp;nbsp;Why-thread-priority-rarely-matters&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;have&amp;nbsp;plenty&amp;nbsp;of&amp;nbsp;free&amp;nbsp;CPU,&amp;nbsp;every&amp;nbsp;thread&amp;nbsp;which&amp;nbsp;can&amp;nbsp;run&amp;nbsp;will&amp;nbsp;run.&amp;nbsp;The&amp;nbsp;OS&lt;br&gt;
has&amp;nbsp;no&amp;nbsp;reason&amp;nbsp;not&amp;nbsp;to&amp;nbsp;run&amp;nbsp;a&amp;nbsp;low&amp;nbsp;priority&amp;nbsp;thread&amp;nbsp;or&amp;nbsp;process&amp;nbsp;when&amp;nbsp;it&amp;nbsp;has&amp;nbsp;free&lt;br&gt;
resources.&amp;nbsp;If&amp;nbsp;your&amp;nbsp;system&amp;nbsp;is&amp;nbsp;close&amp;nbsp;to&amp;nbsp;100%&amp;nbsp;of&amp;nbsp;CPU&amp;nbsp;on&amp;nbsp;every&amp;nbsp;core,&amp;nbsp;the&amp;nbsp;OS&amp;nbsp;has&amp;nbsp;to&lt;br&gt;
make&amp;nbsp;a&amp;nbsp;choice&amp;nbsp;as&amp;nbsp;to&amp;nbsp;how&amp;nbsp;much&amp;nbsp;time&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;or&amp;nbsp;process&amp;nbsp;gets&amp;nbsp;on&amp;nbsp;the&amp;nbsp;CPU&lt;br&gt;
and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;likely&amp;nbsp;to&amp;nbsp;give&amp;nbsp;favour&amp;nbsp;to&amp;nbsp;higher&amp;nbsp;priority&amp;nbsp;threads&amp;nbsp;over&amp;nbsp;lower&amp;nbsp;priority&amp;nbsp;threads,&lt;br&gt;
(many&amp;nbsp;OSes&amp;nbsp;ignore&amp;nbsp;the&amp;nbsp;hint)&amp;nbsp;and&amp;nbsp;other&amp;nbsp;factors&amp;nbsp;are&amp;nbsp;likely&amp;nbsp;to&amp;nbsp;matter&amp;nbsp;as&amp;nbsp;well.&lt;br&gt;
This&amp;nbsp;priority&amp;nbsp;only&amp;nbsp;extends&amp;nbsp;to&amp;nbsp;raw&amp;nbsp;CPU.&amp;nbsp;Threads&amp;nbsp;compete&amp;nbsp;equally&amp;nbsp;for&amp;nbsp;CPU&amp;nbsp;cache,&lt;br&gt;
heap&amp;nbsp;space,&amp;nbsp;CPU&amp;nbsp;to&amp;nbsp;memory&amp;nbsp;bandwidth,&amp;nbsp;file&amp;nbsp;cache,&amp;nbsp;disk&amp;nbsp;IO,&amp;nbsp;network&amp;nbsp;IO&amp;nbsp;and&lt;br&gt;
everything&amp;nbsp;else.&amp;nbsp;If&amp;nbsp;any&amp;nbsp;of&amp;nbsp;these&amp;nbsp;resource&amp;nbsp;are&amp;nbsp;in&amp;nbsp;competition,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;all&amp;nbsp;equal.&lt;br&gt;
&lt;br&gt;
To&amp;nbsp;set&amp;nbsp;a&amp;nbsp;high&amp;nbsp;priority&amp;nbsp;on&amp;nbsp;Windows&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;an&amp;nbsp;administrator&amp;nbsp;and&amp;nbsp;on&lt;br&gt;
Linux&amp;nbsp;you&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;root&amp;nbsp;to&amp;nbsp;set&amp;nbsp;the&amp;nbsp;priority&amp;nbsp;of&amp;nbsp;a&amp;nbsp;thread.&lt;br&gt;
Different&amp;nbsp;Implementations&amp;nbsp;and&amp;nbsp;OSes&amp;nbsp;can&amp;nbsp;ignore&amp;nbsp;this&amp;nbsp;hint.&lt;br&gt;
&lt;br&gt;
============================================&lt;br&gt;
Thread&amp;nbsp;State&lt;br&gt;
&amp;nbsp;At&amp;nbsp;any&amp;nbsp;given&amp;nbsp;time,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;in&amp;nbsp;one&amp;nbsp;of&amp;nbsp;five&amp;nbsp;general&amp;nbsp;states&amp;nbsp;that&amp;nbsp;encompass&lt;br&gt;
its&amp;nbsp;lifecycle&amp;nbsp;and&amp;nbsp;activities.&amp;nbsp;These&amp;nbsp;states&amp;nbsp;are&amp;nbsp;defined&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Thread.State&lt;br&gt;
enumeration&amp;nbsp;and&amp;nbsp;queried&amp;nbsp;via&amp;nbsp;the&amp;nbsp;getState()&amp;nbsp;method&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;class:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;NEW&lt;br&gt;
The&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;been&amp;nbsp;created&amp;nbsp;but&amp;nbsp;not&amp;nbsp;yet&amp;nbsp;started.&lt;br&gt;
-&amp;nbsp;RUNNABLE&lt;br&gt;
The&amp;nbsp;normal&amp;nbsp;active&amp;nbsp;state&amp;nbsp;of&amp;nbsp;a&amp;nbsp;running&amp;nbsp;thread,&amp;nbsp;including&amp;nbsp;the&amp;nbsp;time&amp;nbsp;when&amp;nbsp;a&lt;br&gt;
thread&amp;nbsp;is&amp;nbsp;blocked&amp;nbsp;in&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;operation,&amp;nbsp;like&amp;nbsp;a&amp;nbsp;read&amp;nbsp;or&amp;nbsp;write&amp;nbsp;or&amp;nbsp;network&lt;br&gt;
connection.&lt;br&gt;
-&amp;nbsp;BLOCKED&lt;br&gt;
The&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;blocked,&amp;nbsp;waiting&amp;nbsp;to&amp;nbsp;enter&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;or&amp;nbsp;code&lt;br&gt;
block.&amp;nbsp;This&amp;nbsp;includes&amp;nbsp;the&amp;nbsp;time&amp;nbsp;when&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;been&amp;nbsp;awakened&amp;nbsp;by&amp;nbsp;a&lt;br&gt;
notify()&amp;nbsp;and&amp;nbsp;is&amp;nbsp;attempting&amp;nbsp;to&amp;nbsp;reacquire&amp;nbsp;its&amp;nbsp;lock&amp;nbsp;after&amp;nbsp;a&amp;nbsp;wait().&lt;br&gt;
-&amp;nbsp;WAITING,&amp;nbsp;TIMED_WAITING&lt;br&gt;
The&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;waiting&amp;nbsp;for&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;via&amp;nbsp;a&amp;nbsp;call&amp;nbsp;to&amp;nbsp;wait()&amp;nbsp;or&amp;nbsp;join().&amp;nbsp;In&amp;nbsp;the&lt;br&gt;
case&amp;nbsp;of&amp;nbsp;TIMED_WAITING,&amp;nbsp;the&amp;nbsp;call&amp;nbsp;has&amp;nbsp;a&amp;nbsp;timeout.&lt;br&gt;
-&amp;nbsp;TERMINATED&lt;br&gt;
The&amp;nbsp;thread&amp;nbsp;has&amp;nbsp;completed&amp;nbsp;due&amp;nbsp;to&amp;nbsp;a&amp;nbsp;return,&amp;nbsp;an&amp;nbsp;exception,&amp;nbsp;or&amp;nbsp;being&amp;nbsp;stopped.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;preemptive&amp;nbsp;scheduling&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;time&amp;nbsp;slicing?&amp;#0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Preemptive&amp;nbsp;scheduling:&amp;nbsp;The&amp;nbsp;highest&amp;nbsp;priority&amp;nbsp;task&amp;nbsp;executes&amp;nbsp;until&amp;nbsp;it&amp;nbsp;enters&lt;br&gt;
the&amp;nbsp;waiting&amp;nbsp;or&amp;nbsp;dead&amp;nbsp;states&amp;nbsp;or&amp;nbsp;a&amp;nbsp;higher&amp;nbsp;priority&amp;nbsp;task&amp;nbsp;comes&amp;nbsp;into&amp;nbsp;existence.&lt;br&gt;
&lt;br&gt;
Time&amp;nbsp;slicing:&amp;nbsp;A&amp;nbsp;task&amp;nbsp;executes&amp;nbsp;for&amp;nbsp;a&amp;nbsp;predefined&amp;nbsp;slice&amp;nbsp;of&amp;nbsp;time&amp;nbsp;and&amp;nbsp;then&amp;nbsp;reenters&lt;br&gt;
the&amp;nbsp;pool&amp;nbsp;of&amp;nbsp;ready&amp;nbsp;tasks.&amp;nbsp;The&amp;nbsp;scheduler&amp;nbsp;then&amp;nbsp;determines&amp;nbsp;which&amp;nbsp;task&amp;nbsp;should&amp;nbsp;execute&lt;br&gt;
next,&amp;nbsp;based&amp;nbsp;on&amp;nbsp;priority&amp;nbsp;and&amp;nbsp;other&amp;nbsp;factors&lt;br&gt;
&lt;br&gt;
==========&lt;br&gt;
Wiki&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Fixed-priority&amp;nbsp;pre-emptive&amp;nbsp;scheduling&amp;nbsp;is&amp;nbsp;a&amp;nbsp;scheduling&amp;nbsp;system&amp;nbsp;commonly&amp;nbsp;used&amp;nbsp;in&lt;br&gt;
real-time&amp;nbsp;systems.&amp;nbsp;With&amp;nbsp;fixed&amp;nbsp;priority&amp;nbsp;pre-emptive&amp;nbsp;scheduling,&amp;nbsp;the&amp;nbsp;scheduler&lt;br&gt;
ensures&amp;nbsp;that&amp;nbsp;at&amp;nbsp;any&amp;nbsp;given&amp;nbsp;time,&amp;nbsp;the&amp;nbsp;processor&amp;nbsp;executes&amp;nbsp;the&amp;nbsp;highest&amp;nbsp;priority&amp;nbsp;task&lt;br&gt;
of&amp;nbsp;all&amp;nbsp;those&amp;nbsp;tasks&amp;nbsp;that&amp;nbsp;are&amp;nbsp;currently&amp;nbsp;ready&amp;nbsp;to&amp;nbsp;execute.&lt;br&gt;
The&amp;nbsp;pre-emptive&amp;nbsp;scheduler&amp;nbsp;has&amp;nbsp;a&amp;nbsp;clock&amp;nbsp;interrupt&amp;nbsp;task&amp;nbsp;that&amp;nbsp;can&amp;nbsp;provide&amp;nbsp;the&lt;br&gt;
scheduler&amp;nbsp;with&amp;nbsp;options&amp;nbsp;to&amp;nbsp;switch&amp;nbsp;after&amp;nbsp;the&amp;nbsp;task&amp;nbsp;has&amp;nbsp;had&amp;nbsp;a&amp;nbsp;given&amp;nbsp;period&amp;nbsp;to&lt;br&gt;
execute—the&amp;nbsp;time&amp;nbsp;slice.&amp;nbsp;This&amp;nbsp;scheduling&amp;nbsp;system&amp;nbsp;has&amp;nbsp;the&amp;nbsp;advantage&amp;nbsp;of&amp;nbsp;making&lt;br&gt;
sure&amp;nbsp;no&amp;nbsp;task&amp;nbsp;hogs&amp;nbsp;the&amp;nbsp;processor&amp;nbsp;for&amp;nbsp;any&amp;nbsp;time&amp;nbsp;longer&amp;nbsp;than&amp;nbsp;the&amp;nbsp;time&amp;nbsp;slice.&amp;nbsp;However,&lt;br&gt;
this&amp;nbsp;scheduling&amp;nbsp;scheme&amp;nbsp;is&amp;nbsp;vulnerable&amp;nbsp;to&amp;nbsp;process&amp;nbsp;or&amp;nbsp;thread&amp;nbsp;lockout:&amp;nbsp;since&amp;nbsp;priority&lt;br&gt;
is&amp;nbsp;given&amp;nbsp;to&amp;nbsp;higher-priority&amp;nbsp;tasks,&amp;nbsp;the&amp;nbsp;lower-priority&amp;nbsp;tasks&amp;nbsp;could&amp;nbsp;wait&amp;nbsp;an&amp;nbsp;indefinite&lt;br&gt;
amount&amp;nbsp;of&amp;nbsp;time.&amp;nbsp;One&amp;nbsp;common&amp;nbsp;method&amp;nbsp;of&amp;nbsp;arbitrating&amp;nbsp;this&amp;nbsp;situation&amp;nbsp;is&amp;nbsp;aging,&amp;nbsp;which&lt;br&gt;
gradually&amp;nbsp;increments&amp;nbsp;the&amp;nbsp;priority&amp;nbsp;of&amp;nbsp;waiting&amp;nbsp;processes&amp;nbsp;and&amp;nbsp;threads,&amp;nbsp;ensuring&lt;br&gt;
that&amp;nbsp;they&amp;nbsp;will&amp;nbsp;all&amp;nbsp;eventually&amp;nbsp;execute.&amp;nbsp;Most&amp;nbsp;Real-time&amp;nbsp;operating&amp;nbsp;systems&amp;nbsp;(RTOSs)&lt;br&gt;
have&amp;nbsp;pre-emptive&amp;nbsp;schedulers.&amp;nbsp;Also&amp;nbsp;turning&amp;nbsp;off&amp;nbsp;time&amp;nbsp;slicing&amp;nbsp;effectively&amp;nbsp;gives&amp;nbsp;you&lt;br&gt;
&amp;nbsp;the&amp;nbsp;non-pre-emptive&amp;nbsp;RTOS.&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Yielding,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Whenever&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;sleeps,&amp;nbsp;waits,&amp;nbsp;or&amp;nbsp;blocks&amp;nbsp;on&amp;nbsp;I/O,&amp;nbsp;it&amp;nbsp;gives&amp;nbsp;up&amp;nbsp;its&lt;br&gt;
time&amp;nbsp;slot&amp;nbsp;and&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;scheduled.&amp;nbsp;As&amp;nbsp;long&amp;nbsp;as&amp;nbsp;you&amp;nbsp;don’t&amp;nbsp;write&lt;br&gt;
methods&amp;nbsp;that&amp;nbsp;use&amp;nbsp;hard&amp;nbsp;loops,&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;should&amp;nbsp;get&amp;nbsp;their&amp;nbsp;due.&lt;br&gt;
However,&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;also&amp;nbsp;signal&amp;nbsp;that&amp;nbsp;it&amp;nbsp;is&amp;nbsp;willing&amp;nbsp;to&amp;nbsp;give&amp;nbsp;up&amp;nbsp;its&lt;br&gt;
time&amp;nbsp;voluntarily&amp;nbsp;at&amp;nbsp;any&amp;nbsp;point&amp;nbsp;with&amp;nbsp;the&amp;nbsp;yield()&amp;nbsp;call.&amp;nbsp;We&amp;nbsp;can&amp;nbsp;change&amp;nbsp;our&lt;br&gt;
previous&amp;nbsp;example&amp;nbsp;to&amp;nbsp;include&amp;nbsp;a&amp;nbsp;yield()&amp;nbsp;on&amp;nbsp;each&amp;nbsp;iteration:&lt;br&gt;
!!&amp;nbsp;Yield&amp;nbsp;-&amp;nbsp;(viddavaty&amp;nbsp;(ukr))&lt;br&gt;
&lt;br&gt;
DEF:&lt;br&gt;
The&amp;nbsp;java.lang.Thread.yield()&amp;nbsp;method&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&lt;br&gt;
object&amp;nbsp;to&amp;nbsp;temporarily&amp;nbsp;pause&amp;nbsp;and&amp;nbsp;allow&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;execute.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;yield;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;YieldExample&amp;nbsp;implements&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;YieldExample(String&amp;nbsp;str)&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(this,&amp;nbsp;str);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;will&amp;nbsp;call&amp;nbsp;run()&amp;nbsp;function&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;5;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;yields&amp;nbsp;control&amp;nbsp;to&amp;nbsp;another&amp;nbsp;thread&amp;nbsp;every&amp;nbsp;5&amp;nbsp;iterations&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;((i&amp;nbsp;%&amp;nbsp;5)&amp;nbsp;==&amp;nbsp;0)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&amp;nbsp;+&amp;nbsp;"yielding&amp;nbsp;control...");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;causes&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;executing&amp;nbsp;thread&amp;nbsp;object&amp;nbsp;to&amp;nbsp;temporarily&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pause&amp;nbsp;and&amp;nbsp;allow&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;to&amp;nbsp;execute&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.yield();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;has&amp;nbsp;finished&amp;nbsp;executing.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;YieldExample("Thread&amp;nbsp;1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;YieldExample("Thread&amp;nbsp;2");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;YieldExample("Thread&amp;nbsp;3");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;(can&amp;nbsp;change&amp;nbsp;=)):&lt;br&gt;
Thread&amp;nbsp;1&amp;nbsp;is&amp;nbsp;yielding&amp;nbsp;control...&lt;br&gt;
Thread&amp;nbsp;2&amp;nbsp;is&amp;nbsp;yielding&amp;nbsp;control...&lt;br&gt;
Thread&amp;nbsp;3&amp;nbsp;is&amp;nbsp;yielding&amp;nbsp;control...&lt;br&gt;
Thread&amp;nbsp;1&amp;nbsp;has&amp;nbsp;finished&amp;nbsp;executing.&lt;br&gt;
Thread&amp;nbsp;2&amp;nbsp;has&amp;nbsp;finished&amp;nbsp;executing.&lt;br&gt;
Thread&amp;nbsp;3&amp;nbsp;has&amp;nbsp;finished&amp;nbsp;executing.</questionanswer>
  </question>
  <question id="1_0_0_3_0:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Thread&amp;nbsp;Groups,&amp;nbsp;describe.&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;code&amp;nbsp;:&lt;br&gt;
Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MyThread();&amp;nbsp;//&amp;nbsp;MyThread&amp;nbsp;extends&amp;nbsp;Thread&lt;br&gt;
System.out.println(t&amp;nbsp;instanseof&amp;nbsp;Runnable);&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
The&amp;nbsp;ThreadGroup&amp;nbsp;class&amp;nbsp;allows&amp;nbsp;us&amp;nbsp;to&amp;nbsp;deal&amp;nbsp;with&amp;nbsp;threads&amp;nbsp;wholesale:&amp;nbsp;we&amp;nbsp;can&amp;nbsp;use&lt;br&gt;
it&amp;nbsp;to&amp;nbsp;arrange&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;groups&amp;nbsp;and&amp;nbsp;deal&amp;nbsp;with&amp;nbsp;the&amp;nbsp;groups&amp;nbsp;as&amp;nbsp;a&amp;nbsp;whole.&amp;nbsp;A&lt;br&gt;
thread&amp;nbsp;group&amp;nbsp;can&amp;nbsp;contain&amp;nbsp;other&amp;nbsp;thread&amp;nbsp;groups&amp;nbsp;in&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;individual&amp;nbsp;threads,&lt;br&gt;
so&amp;nbsp;our&amp;nbsp;arrangements&amp;nbsp;can&amp;nbsp;be&amp;nbsp;hierarchical.&lt;br&gt;
&lt;br&gt;
Thread&amp;nbsp;groups&amp;nbsp;are&amp;nbsp;particularly&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;start&amp;nbsp;a&amp;nbsp;task&amp;nbsp;that&lt;br&gt;
might&amp;nbsp;create&amp;nbsp;__&amp;nbsp;many&amp;nbsp;threads&amp;nbsp;of&amp;nbsp;its&amp;nbsp;own&amp;nbsp;__.&amp;nbsp;By&amp;nbsp;assigning&amp;nbsp;the&amp;nbsp;task&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;group,&lt;br&gt;
we&amp;nbsp;can&amp;nbsp;later&amp;nbsp;identify&amp;nbsp;and&amp;nbsp;control&amp;nbsp;all&amp;nbsp;the&amp;nbsp;task’s&amp;nbsp;threads.&amp;nbsp;Thread&amp;nbsp;groups&amp;nbsp;are&lt;br&gt;
also&amp;nbsp;the&amp;nbsp;subject&amp;nbsp;of&amp;nbsp;restrictions&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;imposed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Security&amp;nbsp;Manager,&lt;br&gt;
so&amp;nbsp;we&amp;nbsp;can&amp;nbsp;restrict&amp;nbsp;a&amp;nbsp;thread’s&amp;nbsp;behavior&amp;nbsp;according&amp;nbsp;to&amp;nbsp;its&amp;nbsp;thread&amp;nbsp;group.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
we&amp;nbsp;can&amp;nbsp;forbid&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;group&amp;nbsp;from&amp;nbsp;interacting&amp;nbsp;with&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;other&lt;br&gt;
groups.&amp;nbsp;!!!&amp;nbsp;This&amp;nbsp;is&amp;nbsp;one&amp;nbsp;way&amp;nbsp;web&amp;nbsp;browsers&amp;nbsp;can&amp;nbsp;prevent&amp;nbsp;threads&amp;nbsp;started&amp;nbsp;by&lt;br&gt;
&amp;nbsp;!&amp;nbsp;Java&amp;nbsp;applets&amp;nbsp;from&amp;nbsp;stopping&amp;nbsp;important&amp;nbsp;system&amp;nbsp;threads.&amp;nbsp;When&amp;nbsp;we&amp;nbsp;create&amp;nbsp;a&amp;nbsp;thread,&lt;br&gt;
it&amp;nbsp;normally&amp;nbsp;becomes&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;to&amp;nbsp;which&amp;nbsp;the&amp;nbsp;currently&amp;nbsp;running&amp;nbsp;thread&lt;br&gt;
belongs.&amp;nbsp;To&amp;nbsp;create&amp;nbsp;a&amp;nbsp;new&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;of&amp;nbsp;our&amp;nbsp;own,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;call&amp;nbsp;the&amp;nbsp;constructor:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;myTaskGroup&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadGroup("My&amp;nbsp;Task&amp;nbsp;Group");&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;ThreadGroup&amp;nbsp;constructor&amp;nbsp;takes&amp;nbsp;a&amp;nbsp;name,&amp;nbsp;which&amp;nbsp;a&amp;nbsp;debugger&amp;nbsp;can&amp;nbsp;use&amp;nbsp;to&amp;nbsp;help&lt;br&gt;
you&amp;nbsp;identify&amp;nbsp;the&amp;nbsp;group.&amp;nbsp;Once&amp;nbsp;we&amp;nbsp;have&amp;nbsp;a&amp;nbsp;group,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;put&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;group&amp;nbsp;by&lt;br&gt;
supplying&amp;nbsp;the&amp;nbsp;ThreadGroup&amp;nbsp;object&amp;nbsp;as&amp;nbsp;an&amp;nbsp;argument&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Thread&amp;nbsp;constructor:&lt;br&gt;
&lt;br&gt;
Thread&amp;nbsp;myTask&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(&amp;nbsp;myTaskGroup,&amp;nbsp;taskPerformer&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
Here,&amp;nbsp;myTaskGroup&amp;nbsp;is&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;group,&amp;nbsp;and&amp;nbsp;taskPerformer&amp;nbsp;is&amp;nbsp;the&amp;nbsp;target&lt;br&gt;
object&amp;nbsp;(the&amp;nbsp;Runnable&amp;nbsp;object&amp;nbsp;that&amp;nbsp;performs&amp;nbsp;the&amp;nbsp;task).&amp;nbsp;Any&amp;nbsp;additional&amp;nbsp;threads&amp;nbsp;that&lt;br&gt;
myTask&amp;nbsp;creates&amp;nbsp;also&amp;nbsp;belong&amp;nbsp;to&amp;nbsp;the&amp;nbsp;myTaskGroup&amp;nbsp;thread&amp;nbsp;group.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;ThreadGroup&amp;nbsp;class&amp;nbsp;exists&amp;nbsp;so&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;control&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;batches.&amp;nbsp;It&lt;br&gt;
has&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;parallel&amp;nbsp;the&amp;nbsp;basic&amp;nbsp;Thread&amp;nbsp;control&amp;nbsp;methods—even&amp;nbsp;the&amp;nbsp;deprecated&lt;br&gt;
stop(),&amp;nbsp;suspend(),&amp;nbsp;and&amp;nbsp;resume().&amp;nbsp;These&amp;nbsp;methods&amp;nbsp;operate&amp;nbsp;on&amp;nbsp;all&amp;nbsp;the&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;a&lt;br&gt;
thread&amp;nbsp;group.&amp;nbsp;You&amp;nbsp;can&amp;nbsp;also&amp;nbsp;mark&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;as&amp;nbsp;a&amp;nbsp;“daemon”;&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;thread&lt;br&gt;
group&amp;nbsp;is&amp;nbsp;automatically&amp;nbsp;removed&amp;nbsp;when&amp;nbsp;all&amp;nbsp;of&amp;nbsp;its&amp;nbsp;children&amp;nbsp;are&amp;nbsp;gone.&amp;nbsp;If&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;group&lt;br&gt;
isn’t&amp;nbsp;a&amp;nbsp;daemon,&amp;nbsp;you&amp;nbsp;have&amp;nbsp;to&amp;nbsp;call&amp;nbsp;destroy()&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;remove&amp;nbsp;it&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;empty.&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;can&amp;nbsp;set&amp;nbsp;the&amp;nbsp;maximum&amp;nbsp;priority&amp;nbsp;for&amp;nbsp;threads&amp;nbsp;created&amp;nbsp;in&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;by&lt;br&gt;
calling&amp;nbsp;setMaximumPriority().&amp;nbsp;Thereafter,&amp;nbsp;no&amp;nbsp;threads&amp;nbsp;can&amp;nbsp;be&amp;nbsp;created&amp;nbsp;in&amp;nbsp;the&amp;nbsp;thread&lt;br&gt;
group&amp;nbsp;with&amp;nbsp;a&amp;nbsp;priority&amp;nbsp;to&amp;nbsp;be&amp;nbsp;higher&amp;nbsp;than&amp;nbsp;the&amp;nbsp;maximum;&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;change&amp;nbsp;their&lt;br&gt;
priority&amp;nbsp;can’t&amp;nbsp;set&amp;nbsp;their&amp;nbsp;new&amp;nbsp;priority&amp;nbsp;to&amp;nbsp;be&amp;nbsp;higher&amp;nbsp;than&amp;nbsp;the&amp;nbsp;maximum.&lt;br&gt;
&lt;br&gt;
Finally,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;get&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;a&amp;nbsp;group.&amp;nbsp;The&amp;nbsp;method&amp;nbsp;activeCount()&lt;br&gt;
tells&amp;nbsp;you&amp;nbsp;how&amp;nbsp;many&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;in&amp;nbsp;the&amp;nbsp;group;&amp;nbsp;the&amp;nbsp;method&amp;nbsp;enumerate()&amp;nbsp;gives&lt;br&gt;
you&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;We&amp;nbsp;used&amp;nbsp;the&amp;nbsp;enumerate()&amp;nbsp;method&amp;nbsp;earlier&amp;nbsp;when&amp;nbsp;we&amp;nbsp;showed&amp;nbsp;the&lt;br&gt;
state&amp;nbsp;of&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;default&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;using&amp;nbsp;the&amp;nbsp;static&amp;nbsp;Thread.enumerate()&lt;br&gt;
method.&amp;nbsp;The&amp;nbsp;argument&amp;nbsp;to&amp;nbsp;enumerate()&amp;nbsp;is&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;Threads&amp;nbsp;that&amp;nbsp;enumerate()&lt;br&gt;
fills&amp;nbsp;in&amp;nbsp;with&amp;nbsp;the&amp;nbsp;group’s&amp;nbsp;threads.&amp;nbsp;Both&amp;nbsp;activeCount()&amp;nbsp;and&amp;nbsp;enumerate()&amp;nbsp;operate&lt;br&gt;
recursively&amp;nbsp;on&amp;nbsp;all&amp;nbsp;thread&amp;nbsp;groups&amp;nbsp;that&amp;nbsp;are&amp;nbsp;contained&amp;nbsp;in&amp;nbsp;the&amp;nbsp;group.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Interrupt&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;group&lt;br&gt;
&lt;br&gt;
ThreadGroup's&amp;nbsp;interrupt()&amp;nbsp;method&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;interrupt&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;thread&lt;br&gt;
group's&amp;nbsp;threads&amp;nbsp;and&amp;nbsp;subgroups.&amp;nbsp;This&amp;nbsp;technique&amp;nbsp;would&amp;nbsp;prove&amp;nbsp;appropriate&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;scenario:&amp;nbsp;Your&amp;nbsp;application's&amp;nbsp;main&amp;nbsp;thread&amp;nbsp;creates&amp;nbsp;multiple&amp;nbsp;threads&amp;nbsp;that&lt;br&gt;
each&amp;nbsp;perform&amp;nbsp;a&amp;nbsp;unit&amp;nbsp;of&amp;nbsp;work.&amp;nbsp;Because&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;must&amp;nbsp;complete&amp;nbsp;their&amp;nbsp;respective&lt;br&gt;
work&amp;nbsp;units&amp;nbsp;before&amp;nbsp;any&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;examine&amp;nbsp;the&amp;nbsp;results,&amp;nbsp;each&amp;nbsp;thread&amp;nbsp;waits&amp;nbsp;after&lt;br&gt;
completing&amp;nbsp;its&amp;nbsp;work&amp;nbsp;unit.&amp;nbsp;The&amp;nbsp;main&amp;nbsp;thread&amp;nbsp;monitors&amp;nbsp;the&amp;nbsp;work&amp;nbsp;state.&amp;nbsp;Once&amp;nbsp;all&lt;br&gt;
other&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;waiting,&amp;nbsp;the&amp;nbsp;main&amp;nbsp;thread&amp;nbsp;calls&amp;nbsp;interrupt()&amp;nbsp;to&amp;nbsp;interrupt&amp;nbsp;the&amp;nbsp;other&lt;br&gt;
threads'&amp;nbsp;waits.&amp;nbsp;Then&amp;nbsp;those&amp;nbsp;threads&amp;nbsp;can&amp;nbsp;examine&amp;nbsp;and&amp;nbsp;process&amp;nbsp;the&amp;nbsp;results.&lt;br&gt;
Listing&amp;nbsp;3&amp;nbsp;demonstrates&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;interruption:&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;threadgroups;&lt;br&gt;
&lt;br&gt;
//InterruptThreadGroup.java&lt;br&gt;
class&amp;nbsp;InterruptThreadGroup&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadGroup&amp;nbsp;group&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadGroup("A&amp;nbsp;group");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;mt&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(group,&amp;nbsp;new&amp;nbsp;MyThread());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mt.setName("A");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mt.start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;mt2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(group,&amp;nbsp;new&amp;nbsp;MyThread());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mt2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MyThread();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mt2.setName("B");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mt2.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(2000);&amp;nbsp;//&amp;nbsp;Wait&amp;nbsp;2&amp;nbsp;seconds&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Thread&amp;nbsp;is&amp;nbsp;Runnable&amp;nbsp;=)&amp;nbsp;!!!!!!!!!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Interrupt&amp;nbsp;all&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;thread&amp;nbsp;group&amp;nbsp;as&amp;nbsp;the&amp;nbsp;main&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;thread&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.currentThread().getThreadGroup().interrupt();&amp;nbsp;//&amp;nbsp;interrupt&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;group&amp;nbsp;after&amp;nbsp;2&amp;nbsp;second&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;MyThread&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i=0;i&lt;10000000;i++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(i%148&amp;nbsp;==&amp;nbsp;0)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Thread.currentThread().getName()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;,&amp;nbsp;i&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(Thread.interrupted()){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;break;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
========================================&lt;br&gt;
========================================&lt;br&gt;
&lt;br&gt;
Thread&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MyThread();&amp;nbsp;//&amp;nbsp;MyThread&amp;nbsp;extends&amp;nbsp;Thread&lt;br&gt;
System.out.println(t&amp;nbsp;instanseof&amp;nbsp;Runnable);&amp;nbsp;&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
&lt;br&gt;
because:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Thread&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;extends&amp;nbsp;Object&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implements&amp;nbsp;Runnable&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
and&amp;nbsp;Runnable.java&amp;nbsp;is&amp;nbsp;:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Runnable&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;run();&lt;br&gt;
}&lt;br&gt;
=============</questionanswer>
  </question>
  <question id="1_0_0_3_0:11" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Daemon&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;Java,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>DEF:&lt;br&gt;
Use&amp;nbsp;thread.setDaemon(true)&amp;nbsp;to&amp;nbsp;tell&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;to&amp;nbsp;make&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
According&amp;nbsp;to&amp;nbsp;Webster's,&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;(variant&amp;nbsp;of&amp;nbsp;demon)&amp;nbsp;is&amp;nbsp;an&amp;nbsp;attendant&amp;nbsp;power&amp;nbsp;or&lt;br&gt;
spirit.&amp;nbsp;Daemon&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;typically&amp;nbsp;used&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;services&amp;nbsp;for&amp;nbsp;your&amp;nbsp;application/applet&lt;br&gt;
(such&amp;nbsp;as&amp;nbsp;loading&amp;nbsp;the&amp;nbsp;"fiddley&amp;nbsp;bits").&amp;nbsp;The&amp;nbsp;core&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;user&amp;nbsp;threads&amp;nbsp;and&lt;br&gt;
daemon&amp;nbsp;threads&amp;nbsp;is&amp;nbsp;that&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;will&amp;nbsp;only&amp;nbsp;shut&amp;nbsp;down&amp;nbsp;a&amp;nbsp;program&amp;nbsp;when&amp;nbsp;all&amp;nbsp;user&amp;nbsp;threads&lt;br&gt;
have&amp;nbsp;terminated.&amp;nbsp;Daemon&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;terminated&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;when&amp;nbsp;there&amp;nbsp;are&amp;nbsp;no&lt;br&gt;
longer&amp;nbsp;any&amp;nbsp;user&amp;nbsp;threads&amp;nbsp;running,&amp;nbsp;including&amp;nbsp;the&amp;nbsp;main&amp;nbsp;thread&amp;nbsp;of&amp;nbsp;execution.&lt;br&gt;
Use&amp;nbsp;daemons&amp;nbsp;as&amp;nbsp;the&amp;nbsp;minions&amp;nbsp;they&amp;nbsp;are.&lt;br&gt;
&lt;br&gt;
[In&amp;nbsp;short:&amp;nbsp;daemon&amp;nbsp;threads&amp;nbsp;do&amp;nbsp;not&amp;nbsp;keep&amp;nbsp;the&amp;nbsp;program&amp;nbsp;from&amp;nbsp;quitting;&amp;nbsp;user&amp;nbsp;threads&lt;br&gt;
keep&amp;nbsp;the&amp;nbsp;program&amp;nbsp;from&amp;nbsp;quitting.&amp;nbsp;-Alex]&lt;br&gt;
&lt;br&gt;
EXAMPLE&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;daemonthreads;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;DaemonTest&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;WorkerThread().start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(7500);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Main&amp;nbsp;Thread&amp;nbsp;ending");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;WorkerThread&amp;nbsp;extends&amp;nbsp;Thread&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;WorkerThread()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;by&amp;nbsp;default&amp;nbsp;false&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;if&amp;nbsp;FALSE&amp;nbsp;Thread&amp;nbsp;will&amp;nbsp;live&amp;nbsp;even&amp;nbsp;after&amp;nbsp;main&amp;nbsp;thread&amp;nbsp;die&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setDaemon(false);&amp;nbsp;//&amp;nbsp;When&amp;nbsp;false,&amp;nbsp;(i.e.&amp;nbsp;when&amp;nbsp;it's&amp;nbsp;a&amp;nbsp;user&amp;nbsp;thread),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;Worker&amp;nbsp;thread&amp;nbsp;continues&amp;nbsp;to&amp;nbsp;run.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;When&amp;nbsp;true,&amp;nbsp;(i.e.&amp;nbsp;when&amp;nbsp;it's&amp;nbsp;a&amp;nbsp;daemon&amp;nbsp;thread),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;Worker&amp;nbsp;thread&amp;nbsp;terminates&amp;nbsp;when&amp;nbsp;the&amp;nbsp;main&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;thread&amp;nbsp;terminates.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(true)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;"&amp;nbsp;+&amp;nbsp;count++);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sleep(5000);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;0&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;1&lt;br&gt;
Main&amp;nbsp;Thread&amp;nbsp;ending&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;2&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;3&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;4&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;5&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;6&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;7&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;8&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;9&lt;br&gt;
Hello&amp;nbsp;from&amp;nbsp;Worker&amp;nbsp;10&lt;br&gt;
.....&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:12" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;how&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;Lock&amp;nbsp;using&amp;nbsp;synchronized&amp;nbsp;blocks&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Counter{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;Lock&amp;nbsp;lock&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;count&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;inc(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.lock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;newCount&amp;nbsp;=&amp;nbsp;++count;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;newCount;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
==&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Lock{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;isLocked&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;lock()&lt;br&gt;
&amp;nbsp;&amp;nbsp;throws&amp;nbsp;InterruptedException{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while(isLocked){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wait();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isLocked&amp;nbsp;=&amp;nbsp;true;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;unlock(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isLocked&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notify();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
========================================&lt;br&gt;
Lock&amp;nbsp;Reentrance&lt;br&gt;
Synchronized&amp;nbsp;blocks&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;are&amp;nbsp;reentrant.&amp;nbsp;This&amp;nbsp;means,&amp;nbsp;that&amp;nbsp;if&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;thread&lt;br&gt;
enters&amp;nbsp;a&amp;nbsp;synchronized&amp;nbsp;block&amp;nbsp;of&amp;nbsp;code,&amp;nbsp;and&amp;nbsp;thereby&amp;nbsp;take&amp;nbsp;the&amp;nbsp;lock&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
monitor&amp;nbsp;object&amp;nbsp;the&amp;nbsp;block&amp;nbsp;is&amp;nbsp;synchronized&amp;nbsp;on,&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;can&amp;nbsp;enter&amp;nbsp;other&lt;br&gt;
Java&amp;nbsp;code&amp;nbsp;blocks&amp;nbsp;synchronized&amp;nbsp;on&amp;nbsp;the&amp;nbsp;same&amp;nbsp;monitor&amp;nbsp;object.&amp;nbsp;Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Reentrant{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;outer(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inner();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;inner(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do&amp;nbsp;something&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_3_0:13" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Why&amp;nbsp;thread&amp;nbsp;communication&amp;nbsp;methods&amp;nbsp;wait(),&amp;nbsp;notify()&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;notifyAll()&amp;nbsp;are&amp;nbsp;in&amp;nbsp;Object&amp;nbsp;class?&lt;br&gt;
Why&amp;nbsp;wait(),&amp;nbsp;notify()&amp;nbsp;and&amp;nbsp;notifyAll()&amp;nbsp;methods&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;called&amp;nbsp;from&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;or&amp;nbsp;block?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&lt;br&gt;
In&amp;nbsp;Java&amp;nbsp;every&amp;nbsp;Object&amp;nbsp;has&amp;nbsp;a&amp;nbsp;monitor&amp;nbsp;and&amp;nbsp;wait,&amp;nbsp;notify&amp;nbsp;methods&amp;nbsp;are&lt;br&gt;
used&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;monitor&amp;nbsp;or&amp;nbsp;to&amp;nbsp;notify&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;that&lt;br&gt;
Object&amp;nbsp;monitor&amp;nbsp;is&amp;nbsp;free&amp;nbsp;now.&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;monitor&amp;nbsp;on&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;java&lt;br&gt;
and&amp;nbsp;synchronization&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;with&amp;nbsp;any&amp;nbsp;Object,&amp;nbsp;that’s&amp;nbsp;why&amp;nbsp;it’s&lt;br&gt;
part&amp;nbsp;of&amp;nbsp;Object&amp;nbsp;class&amp;nbsp;so&amp;nbsp;that&amp;nbsp;every&amp;nbsp;class&amp;nbsp;in&amp;nbsp;java&amp;nbsp;has&amp;nbsp;these&amp;nbsp;essential&lt;br&gt;
methods&amp;nbsp;for&amp;nbsp;inter&amp;nbsp;thread&amp;nbsp;communication.&lt;br&gt;
&lt;br&gt;
=========================================&lt;br&gt;
2&lt;br&gt;
When&amp;nbsp;a&amp;nbsp;Thread&amp;nbsp;calls&amp;nbsp;wait()&amp;nbsp;on&amp;nbsp;any&amp;nbsp;Object,&amp;nbsp;it&amp;nbsp;must&amp;nbsp;have&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;on&lt;br&gt;
the&amp;nbsp;Object&amp;nbsp;that&amp;nbsp;it&amp;nbsp;will&amp;nbsp;leave&amp;nbsp;and&amp;nbsp;goes&amp;nbsp;in&amp;nbsp;wait&amp;nbsp;state&amp;nbsp;until&amp;nbsp;any&amp;nbsp;other&lt;br&gt;
thread&amp;nbsp;call&amp;nbsp;notify()&amp;nbsp;on&amp;nbsp;this&amp;nbsp;Object.&amp;nbsp;Similarly&amp;nbsp;when&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;calls&amp;nbsp;notify()&lt;br&gt;
on&amp;nbsp;any&amp;nbsp;Object,&amp;nbsp;it&amp;nbsp;leaves&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;and&amp;nbsp;other&amp;nbsp;waiting&lt;br&gt;
threads&amp;nbsp;can&amp;nbsp;get&amp;nbsp;the&amp;nbsp;monitor&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Object.&amp;nbsp;Since&amp;nbsp;all&amp;nbsp;these&amp;nbsp;methods&lt;br&gt;
require&amp;nbsp;Thread&amp;nbsp;to&amp;nbsp;have&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;monitor,&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;achieved&amp;nbsp;only&lt;br&gt;
by&amp;nbsp;synchronization,&amp;nbsp;they&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;called&amp;nbsp;from&amp;nbsp;synchronized&amp;nbsp;method&amp;nbsp;or&amp;nbsp;block.</questionanswer>
  </question>
  <question id="1_0_0_3_0:14" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Concurency&amp;nbsp;:&amp;nbsp;Green&amp;nbsp;Threads&amp;nbsp;vs&amp;nbsp;Non&amp;nbsp;Green&amp;nbsp;Threads.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1&amp;nbsp;answer&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Wikipedia&amp;nbsp;article&amp;nbsp;Green&amp;nbsp;Threads&amp;nbsp;explains&amp;nbsp;it&amp;nbsp;very&amp;nbsp;well.&lt;br&gt;
Green&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;"user-level&amp;nbsp;threads".&amp;nbsp;They&amp;nbsp;are&amp;nbsp;scheduled&amp;nbsp;by&amp;nbsp;an&lt;br&gt;
"ordinary"&amp;nbsp;user-level&amp;nbsp;process,&amp;nbsp;not&amp;nbsp;by&amp;nbsp;the&amp;nbsp;kernel.&amp;nbsp;So&amp;nbsp;they&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&lt;br&gt;
to&amp;nbsp;simulate&amp;nbsp;multi-threading&amp;nbsp;on&amp;nbsp;platforms&amp;nbsp;that&amp;nbsp;don't&amp;nbsp;provide&amp;nbsp;that&amp;nbsp;capability.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;context&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;specifically,&amp;nbsp;green&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;a&amp;nbsp;thing&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
past.&amp;nbsp;See&amp;nbsp;the&amp;nbsp;Threading&amp;nbsp;article.&amp;nbsp;(It's&amp;nbsp;about&amp;nbsp;Solaris,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;fact&amp;nbsp;that&lt;br&gt;
green&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;not&amp;nbsp;used&amp;nbsp;anymore&amp;nbsp;is&amp;nbsp;valid&amp;nbsp;for&amp;nbsp;the&amp;nbsp;usual&amp;nbsp;platforms).&lt;br&gt;
&lt;br&gt;
Green&amp;nbsp;threads&amp;nbsp;were&amp;nbsp;abandoned&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Sun&amp;nbsp;JVM&amp;nbsp;for&amp;nbsp;Linux&amp;nbsp;as&amp;nbsp;of&amp;nbsp;the&amp;nbsp;release&lt;br&gt;
of&amp;nbsp;version&amp;nbsp;1.3&amp;nbsp;(see&amp;nbsp;Java[tm]&amp;nbsp;Technology&amp;nbsp;on&amp;nbsp;the&amp;nbsp;Linux&amp;nbsp;Platform).&amp;nbsp;That&amp;nbsp;dates&lt;br&gt;
back&amp;nbsp;to&amp;nbsp;2000.&amp;nbsp;For&amp;nbsp;Solaris,&amp;nbsp;native&amp;nbsp;threads&amp;nbsp;were&amp;nbsp;available&amp;nbsp;from&amp;nbsp;JDK&amp;nbsp;1.2.&lt;br&gt;
That&amp;nbsp;dates&amp;nbsp;back&amp;nbsp;to&amp;nbsp;1998.&amp;nbsp;I&amp;nbsp;don't&amp;nbsp;even&amp;nbsp;think&amp;nbsp;there&amp;nbsp;ever&amp;nbsp;was&amp;nbsp;a&amp;nbsp;green&amp;nbsp;thread&lt;br&gt;
implementation&amp;nbsp;for&amp;nbsp;Windows,&amp;nbsp;but&amp;nbsp;I&amp;nbsp;can't&amp;nbsp;find&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;for&amp;nbsp;that.&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;are&amp;nbsp;some&amp;nbsp;exceptions&amp;nbsp;as&amp;nbsp;noted&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Wikipedia&amp;nbsp;article,&amp;nbsp;I&amp;nbsp;gather&lt;br&gt;
mostly&amp;nbsp;for&amp;nbsp;low-power&amp;nbsp;(embedded)&amp;nbsp;devices.&lt;br&gt;
================================================&lt;br&gt;
2&lt;br&gt;
Green&amp;nbsp;threads&amp;nbsp;are&amp;nbsp;threads&amp;nbsp;implemented&amp;nbsp;at&amp;nbsp;the&amp;nbsp;application&amp;nbsp;level&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;OS.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;usually&amp;nbsp;done&amp;nbsp;when&amp;nbsp;the&amp;nbsp;OS&amp;nbsp;does&amp;nbsp;not&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;thread&amp;nbsp;API,&amp;nbsp;or&amp;nbsp;it&lt;br&gt;
doesn't&amp;nbsp;work&amp;nbsp;the&amp;nbsp;way&amp;nbsp;you&amp;nbsp;need.&lt;br&gt;
&lt;br&gt;
Thus,&amp;nbsp;the&amp;nbsp;advantage&amp;nbsp;is&amp;nbsp;that&amp;nbsp;you&amp;nbsp;get&amp;nbsp;thread-like&amp;nbsp;functionality&amp;nbsp;at&amp;nbsp;all.&amp;nbsp;The&amp;nbsp;disadvantage&lt;br&gt;
is&amp;nbsp;that&amp;nbsp;green&amp;nbsp;threads&amp;nbsp;can't&amp;nbsp;actually&amp;nbsp;use&amp;nbsp;multiple&amp;nbsp;cores.&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;were&amp;nbsp;a&amp;nbsp;few&amp;nbsp;early&amp;nbsp;JVMs&amp;nbsp;that&amp;nbsp;used&amp;nbsp;green&amp;nbsp;threads&amp;nbsp;(IIRC&amp;nbsp;the&amp;nbsp;Blackdown&amp;nbsp;JVM&amp;nbsp;port&lt;br&gt;
to&amp;nbsp;Linux&amp;nbsp;did),&amp;nbsp;but&amp;nbsp;nowadays&amp;nbsp;all&amp;nbsp;mainstream&amp;nbsp;JVMs&amp;nbsp;use&amp;nbsp;real&amp;nbsp;threads.&amp;nbsp;There&amp;nbsp;may&amp;nbsp;be&lt;br&gt;
some&amp;nbsp;embedded&amp;nbsp;JVMs&amp;nbsp;that&amp;nbsp;still&amp;nbsp;use&amp;nbsp;green&amp;nbsp;threads.&lt;br&gt;
===============================================&lt;br&gt;
3&amp;nbsp;habrahabr.ru&lt;br&gt;
&lt;br&gt;
Java,&amp;nbsp;&amp;nbsp;brought&amp;nbsp;with&amp;nbsp;it&amp;nbsp;a&amp;nbsp;different&amp;nbsp;type&amp;nbsp;of&amp;nbsp;multi-threading,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;called&amp;nbsp;green&lt;br&gt;
threads.&amp;nbsp;Green&amp;nbsp;threads&amp;nbsp;-&amp;nbsp;is,&amp;nbsp;in&amp;nbsp;fact,&amp;nbsp;the&amp;nbsp;__&amp;nbsp;simulation&amp;nbsp;flows&amp;nbsp;__.&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;Virtual&lt;br&gt;
Machine&amp;nbsp;takes&amp;nbsp;care&amp;nbsp;of&amp;nbsp;switching&amp;nbsp;between&amp;nbsp;different&amp;nbsp;green&amp;nbsp;threads,&amp;nbsp;and&amp;nbsp;the&lt;br&gt;
car&amp;nbsp;runs&amp;nbsp;as&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread&amp;nbsp;OS.&amp;nbsp;This&amp;nbsp;gives&amp;nbsp;several&amp;nbsp;advantages.&amp;nbsp;OS&amp;nbsp;flows&amp;nbsp;are&lt;br&gt;
relatively&amp;nbsp;expensive&amp;nbsp;in&amp;nbsp;most&amp;nbsp;POSIX-systems.&amp;nbsp;In&amp;nbsp;addition,&amp;nbsp;switching&amp;nbsp;between&amp;nbsp;native&lt;br&gt;
threads&amp;nbsp;is&amp;nbsp;much&amp;nbsp;slower&amp;nbsp;than&amp;nbsp;between&amp;nbsp;green&amp;nbsp;threads.&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;there&amp;nbsp;are&amp;nbsp;drawbacks.&amp;nbsp;The&amp;nbsp;biggest&amp;nbsp;is&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;not&amp;nbsp;execute&amp;nbsp;two&lt;br&gt;
threads&amp;nbsp;simultaneously.&amp;nbsp;Since&amp;nbsp;there&amp;nbsp;is&amp;nbsp;only&amp;nbsp;one&amp;nbsp;native&amp;nbsp;thread,&amp;nbsp;only&amp;nbsp;he&amp;nbsp;called&lt;br&gt;
OS&amp;nbsp;scheduler.&amp;nbsp;Even&amp;nbsp;if&amp;nbsp;you&amp;nbsp;have&amp;nbsp;multiple&amp;nbsp;processors&amp;nbsp;and&amp;nbsp;multiple&amp;nbsp;green&amp;nbsp;threads,&lt;br&gt;
only&amp;nbsp;one&amp;nbsp;processor&amp;nbsp;can&amp;nbsp;cause&amp;nbsp;green&amp;nbsp;thread.&amp;nbsp;And&amp;nbsp;all&amp;nbsp;because&amp;nbsp;the&amp;nbsp;terms&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
Task&amp;nbsp;Scheduler&amp;nbsp;OS,&amp;nbsp;it&amp;nbsp;looks&amp;nbsp;a&amp;nbsp;single&amp;nbsp;thread.&lt;br&gt;
&lt;br&gt;
!!&amp;nbsp;Starting&amp;nbsp;with&amp;nbsp;version&amp;nbsp;1.2&amp;nbsp;Java&amp;nbsp;support&amp;nbsp;native&amp;nbsp;threads,&amp;nbsp;and&amp;nbsp;since&amp;nbsp;they&amp;nbsp;are&amp;nbsp;used&amp;nbsp;by&amp;nbsp;default&lt;br&gt;
&lt;br&gt;
Note&amp;nbsp;:&amp;nbsp;C#&amp;nbsp;uses&amp;nbsp;native&amp;nbsp;threads&amp;nbsp;.</questionanswer>
  </question>
</questions>
