<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_3_3_0" name="Part2_BasicConcurrency" nofquestions="3" nofsubcategories="0" filename="part2_basicconcurrency1_0_0_3_3_0.xml">
  <question id="1_0_0_3_3_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Process&amp;nbsp;vs&amp;nbsp;Thread,&amp;nbsp;describe.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;ProcessBuilder&amp;nbsp;class?&lt;br&gt;
Java:&amp;nbsp;ProcessBuilder&amp;nbsp;vs&amp;nbsp;Runtime.exec(),&amp;nbsp;describe.&amp;nbsp;What&amp;nbsp;is&amp;nbsp;process&amp;nbsp;'working&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;directory'&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html&lt;br&gt;
http://beginnersbook.com/2015/01/what-is-the-difference-between-a-process-and-a-thread-in-java/&lt;br&gt;
http://javaconceptoftheday.com/differences-between-program-vs-process-vs-threads/&lt;br&gt;
Below&amp;nbsp;is&amp;nbsp;the&amp;nbsp;list&amp;nbsp;of&amp;nbsp;differences&amp;nbsp;between&amp;nbsp;Process&amp;nbsp;Vs&amp;nbsp;Thread.&lt;br&gt;
&lt;br&gt;
Process&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&lt;br&gt;
Processes&amp;nbsp;are&amp;nbsp;heavy&amp;nbsp;weight&amp;nbsp;operations.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Threads&amp;nbsp;are&amp;nbsp;light&amp;nbsp;weight&amp;nbsp;operations.&lt;br&gt;
Every&amp;nbsp;process&amp;nbsp;has&amp;nbsp;its&amp;nbsp;own&amp;nbsp;memory&amp;nbsp;space.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Threads&amp;nbsp;use&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;of&amp;nbsp;the&amp;nbsp;process&amp;nbsp;they&amp;nbsp;belong&amp;nbsp;to.&lt;br&gt;
Inter&amp;nbsp;process&amp;nbsp;communication&amp;nbsp;is&amp;nbsp;slow&amp;nbsp;as&amp;nbsp;processes&amp;nbsp;have&amp;nbsp;different&amp;nbsp;memory&amp;nbsp;address.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inter&amp;nbsp;thread&amp;nbsp;communication&amp;nbsp;is&amp;nbsp;fast&amp;nbsp;as&amp;nbsp;threads&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;process&amp;nbsp;share&amp;nbsp;the&amp;nbsp;same&amp;nbsp;memory&amp;nbsp;address&amp;nbsp;of&amp;nbsp;the&amp;nbsp;process&amp;nbsp;they&amp;nbsp;belong&amp;nbsp;to.&lt;br&gt;
Context&amp;nbsp;switching&amp;nbsp;between&amp;nbsp;the&amp;nbsp;process&amp;nbsp;is&amp;nbsp;more&amp;nbsp;expensive.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Context&amp;nbsp;switching&amp;nbsp;between&amp;nbsp;threads&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;process&amp;nbsp;is&amp;nbsp;less&amp;nbsp;expensive.&lt;br&gt;
Processes&amp;nbsp;donâ€™t&amp;nbsp;share&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;with&amp;nbsp;other&amp;nbsp;processes.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Threads&amp;nbsp;share&amp;nbsp;the&amp;nbsp;memory&amp;nbsp;with&amp;nbsp;other&amp;nbsp;threads&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;process.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Process&amp;nbsp;vs&amp;nbsp;threads&lt;br&gt;
&lt;img&amp;nbsp;width='1680'&amp;nbsp;height='640'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/ProcessThread.png'/&gt;&lt;br&gt;
&lt;br&gt;
========================================================&lt;br&gt;
https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html&lt;br&gt;
This&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;create&amp;nbsp;operating&amp;nbsp;system&amp;nbsp;processes.&lt;br&gt;
Each&amp;nbsp;ProcessBuilder&amp;nbsp;instance&amp;nbsp;manages&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;process&amp;nbsp;attributes.&amp;nbsp;The&amp;nbsp;start()&amp;nbsp;method&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Process&amp;nbsp;instance&lt;br&gt;
with&amp;nbsp;those&amp;nbsp;attributes.&amp;nbsp;The&amp;nbsp;start()&amp;nbsp;method&amp;nbsp;can&amp;nbsp;be&amp;nbsp;invoked&amp;nbsp;repeatedly&amp;nbsp;from&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;to&amp;nbsp;create&amp;nbsp;new&amp;nbsp;subprocesses&amp;nbsp;with&amp;nbsp;identical&amp;nbsp;or&amp;nbsp;related&amp;nbsp;attributes.&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;that&amp;nbsp;starts&amp;nbsp;a&amp;nbsp;process&amp;nbsp;with&amp;nbsp;a&amp;nbsp;modified&amp;nbsp;working&amp;nbsp;directory&amp;nbsp;and&amp;nbsp;environment,&amp;nbsp;and&amp;nbsp;redirects&amp;nbsp;standard&amp;nbsp;output&amp;nbsp;and&amp;nbsp;error&amp;nbsp;to&amp;nbsp;be&amp;nbsp;appended&amp;nbsp;to&amp;nbsp;a&amp;nbsp;log&amp;nbsp;file:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;ProcessBuilder&amp;nbsp;pb&amp;nbsp;=&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;ProcessBuilder("myCommand",&amp;nbsp;"myArg1",&amp;nbsp;"myArg2");&lt;br&gt;
&amp;nbsp;Map&lt;String,&amp;nbsp;String&gt;&amp;nbsp;env&amp;nbsp;=&amp;nbsp;pb.environment();&lt;br&gt;
&amp;nbsp;env.put("VAR1",&amp;nbsp;"myValue");&lt;br&gt;
&amp;nbsp;env.remove("OTHERVAR");&lt;br&gt;
&amp;nbsp;env.put("VAR2",&amp;nbsp;env.get("VAR1")&amp;nbsp;+&amp;nbsp;"suffix");&lt;br&gt;
&amp;nbsp;pb.directory(new&amp;nbsp;File("myDir"));&amp;nbsp;//&amp;nbsp;Sets&amp;nbsp;this&amp;nbsp;process&amp;nbsp;builder's&amp;nbsp;working&amp;nbsp;directory.&lt;br&gt;
&amp;nbsp;File&amp;nbsp;log&amp;nbsp;=&amp;nbsp;new&amp;nbsp;File("log");&lt;br&gt;
&amp;nbsp;pb.redirectErrorStream(true);&lt;br&gt;
&amp;nbsp;pb.redirectOutput(Redirect.appendTo(log));&lt;br&gt;
&amp;nbsp;Process&amp;nbsp;p&amp;nbsp;=&amp;nbsp;pb.start();&lt;br&gt;
&amp;nbsp;assert&amp;nbsp;pb.redirectInput()&amp;nbsp;==&amp;nbsp;Redirect.PIPE;&lt;br&gt;
&amp;nbsp;assert&amp;nbsp;pb.redirectOutput().file()&amp;nbsp;==&amp;nbsp;log;&lt;br&gt;
&amp;nbsp;assert&amp;nbsp;p.getInputStream().read()&amp;nbsp;==&amp;nbsp;-1;&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java:&amp;nbsp;ProcessBuilder&amp;nbsp;vs&amp;nbsp;Runtime.exec(),&amp;nbsp;describe.&lt;br&gt;
&lt;br&gt;
Before&amp;nbsp;JDK&amp;nbsp;5.0,&amp;nbsp;the&amp;nbsp;only&amp;nbsp;way&amp;nbsp;to&amp;nbsp;fork&amp;nbsp;off&amp;nbsp;a&amp;nbsp;process&amp;nbsp;and&amp;nbsp;execute&amp;nbsp;it&amp;nbsp;local&amp;nbsp;to&amp;nbsp;the&amp;nbsp;user&amp;nbsp;runtime&amp;nbsp;was&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&amp;nbsp;exec()&lt;br&gt;
method&amp;nbsp;of&amp;nbsp;the&amp;nbsp;java.lang.Runtime&amp;nbsp;class.&amp;nbsp;JDK&amp;nbsp;5.0&amp;nbsp;adds&amp;nbsp;a&amp;nbsp;new&amp;nbsp;way&amp;nbsp;of&amp;nbsp;executing&amp;nbsp;a&amp;nbsp;command&amp;nbsp;in&amp;nbsp;a&amp;nbsp;separate&amp;nbsp;process,&amp;nbsp;through&amp;nbsp;a&amp;nbsp;class&amp;nbsp;called&amp;nbsp;ProcessBuilder.&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;find&amp;nbsp;ProcessBuilder&amp;nbsp;in&amp;nbsp;the&amp;nbsp;java.lang&amp;nbsp;package&amp;nbsp;(like&amp;nbsp;Runtime&amp;nbsp;and&amp;nbsp;Process).&lt;br&gt;
&lt;br&gt;
!&amp;nbsp;ProcessBuilder&amp;nbsp;makes&amp;nbsp;it&amp;nbsp;much&amp;nbsp;easier&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;a&amp;nbsp;process,&amp;nbsp;set&amp;nbsp;up&amp;nbsp;its&amp;nbsp;environment,&amp;nbsp;spawn&amp;nbsp;it,&amp;nbsp;and&amp;nbsp;handle&amp;nbsp;its&amp;nbsp;file&amp;nbsp;descriptors.&lt;br&gt;
This&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;create&amp;nbsp;operating&amp;nbsp;system&amp;nbsp;processes.&lt;br&gt;
Each&amp;nbsp;ProcessBuilder&amp;nbsp;instance&amp;nbsp;manages&amp;nbsp;a&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;process&amp;nbsp;attributes.&amp;nbsp;The&amp;nbsp;start()&amp;nbsp;method&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;Process&amp;nbsp;instance&lt;br&gt;
with&amp;nbsp;those&amp;nbsp;attributes.&amp;nbsp;The&amp;nbsp;start()&amp;nbsp;method&amp;nbsp;can&amp;nbsp;be&amp;nbsp;invoked&amp;nbsp;repeatedly&amp;nbsp;from&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;to&amp;nbsp;create&amp;nbsp;new&amp;nbsp;subprocesses&amp;nbsp;with&amp;nbsp;identical&amp;nbsp;or&amp;nbsp;related&amp;nbsp;attributes.&lt;br&gt;
&lt;br&gt;
===========================================&lt;br&gt;
https://en.wikipedia.org/wiki/Working_directory&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computing,&amp;nbsp;the&amp;nbsp;working&amp;nbsp;directory&amp;nbsp;of&amp;nbsp;a&amp;nbsp;process&amp;nbsp;is&amp;nbsp;a&amp;nbsp;directory&amp;nbsp;of&amp;nbsp;a&amp;nbsp;hierarchical&amp;nbsp;file&amp;nbsp;system,&amp;nbsp;if&amp;nbsp;any,[1]&amp;nbsp;dynamically&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;each&amp;nbsp;process.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;sometimes&amp;nbsp;called&amp;nbsp;the&amp;nbsp;current&amp;nbsp;working&amp;nbsp;directory&amp;nbsp;or&amp;nbsp;CWD,&amp;nbsp;e.g.&amp;nbsp;the&amp;nbsp;BSD&amp;nbsp;getcwd(3)&amp;nbsp;function.&amp;nbsp;When&amp;nbsp;the&amp;nbsp;process&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;a&amp;nbsp;file&amp;nbsp;using&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;file&lt;br&gt;
name&amp;nbsp;or&amp;nbsp;relative&amp;nbsp;path&amp;nbsp;(as&amp;nbsp;opposed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;file&amp;nbsp;designated&amp;nbsp;by&amp;nbsp;a&amp;nbsp;full&amp;nbsp;path&amp;nbsp;from&amp;nbsp;a&amp;nbsp;root&amp;nbsp;directory),&amp;nbsp;the&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;interpreted&amp;nbsp;relative&amp;nbsp;to&amp;nbsp;the&amp;nbsp;current&lt;br&gt;
working&amp;nbsp;directory&amp;nbsp;of&amp;nbsp;the&amp;nbsp;process.&amp;nbsp;So&amp;nbsp;for&amp;nbsp;example&amp;nbsp;a&amp;nbsp;process&amp;nbsp;with&amp;nbsp;&lt;br&gt;
working&amp;nbsp;directory&amp;nbsp;/rabbit-shoes&amp;nbsp;that&amp;nbsp;asks&amp;nbsp;to&amp;nbsp;create&amp;nbsp;the&amp;nbsp;file&amp;nbsp;foo.txt&amp;nbsp;will&amp;nbsp;end&amp;nbsp;up&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;file&amp;nbsp;/rabbit-shoes/foo.txt.</questionanswer>
  </question>
  <question id="1_0_0_3_3_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;Thread.join&amp;nbsp;method?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>The&amp;nbsp;join&amp;nbsp;method&amp;nbsp;allows&amp;nbsp;one&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;the&amp;nbsp;completion&amp;nbsp;of&amp;nbsp;another.&amp;nbsp;If&amp;nbsp;t&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Thread&amp;nbsp;object&amp;nbsp;whose&amp;nbsp;thread&amp;nbsp;is&amp;nbsp;currently&amp;nbsp;executing,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
t.join();&lt;br&gt;
causes&amp;nbsp;the&amp;nbsp;current&amp;nbsp;thread&amp;nbsp;to&amp;nbsp;pause&amp;nbsp;execution&amp;nbsp;until&amp;nbsp;t's&amp;nbsp;thread&amp;nbsp;terminates.&amp;nbsp;Overloads&amp;nbsp;of&amp;nbsp;join&amp;nbsp;allow&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;a&amp;nbsp;waiting&amp;nbsp;period.&amp;nbsp;However,&amp;nbsp;as&amp;nbsp;with&amp;nbsp;sleep,&amp;nbsp;join&amp;nbsp;is&amp;nbsp;dependent&amp;nbsp;on&amp;nbsp;the&amp;nbsp;OS&amp;nbsp;for&amp;nbsp;timing,&amp;nbsp;so&amp;nbsp;you&amp;nbsp;should&amp;nbsp;not&amp;nbsp;assume&amp;nbsp;that&amp;nbsp;join&amp;nbsp;will&amp;nbsp;wait&amp;nbsp;exactly&amp;nbsp;as&amp;nbsp;long&amp;nbsp;as&amp;nbsp;you&amp;nbsp;specify.&lt;br&gt;
&lt;br&gt;
Like&amp;nbsp;sleep,&amp;nbsp;join&amp;nbsp;responds&amp;nbsp;to&amp;nbsp;an&amp;nbsp;interrupt&amp;nbsp;by&amp;nbsp;exiting&amp;nbsp;with&amp;nbsp;an&amp;nbsp;InterruptedException.&lt;br&gt;
&lt;br&gt;
============&lt;br&gt;
Simple&amp;nbsp;example:package&amp;nbsp;com.ap.part2basicconcurrency;&lt;br&gt;
&lt;br&gt;
/**&lt;br&gt;
&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;andrii&amp;nbsp;on&amp;nbsp;07.01.17.&lt;br&gt;
&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;p2JoinExample&amp;nbsp;implements&amp;nbsp;Runnable{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;InterruptedException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread&amp;nbsp;t1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;p2JoinExample());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1.join();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Finished.");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;10;&amp;nbsp;i++)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(300);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(InterruptedException&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Output:&lt;br&gt;
0&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
3&lt;br&gt;
4&lt;br&gt;
5&lt;br&gt;
6&lt;br&gt;
7&lt;br&gt;
8&lt;br&gt;
9&lt;br&gt;
Finished.&lt;br&gt;
-----------------&lt;br&gt;
WITHOT&amp;nbsp;calling&amp;nbsp;'join'&amp;nbsp;output&amp;nbsp;will&amp;nbsp;be&amp;nbsp;:&lt;br&gt;
Finished.&lt;br&gt;
0&lt;br&gt;
1&lt;br&gt;
2&lt;br&gt;
3&lt;br&gt;
4&lt;br&gt;
5&lt;br&gt;
6&lt;br&gt;
7&lt;br&gt;
8&lt;br&gt;
9</questionanswer>
  </question>
  <question id="1_0_0_3_3_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;deadlock&amp;nbsp;and&amp;nbsp;livelock?&amp;nbsp;Provide&amp;nbsp;example&amp;nbsp;of&amp;nbsp;livelock.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&lt;img&amp;nbsp;width='1280'&amp;nbsp;height='738'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/vlcsnap-2017-01-08-21h50m24s922.png'/&gt;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='1280'&amp;nbsp;height='738'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/vlcsnap-2017-01-08-21h50m35s301.png'/&gt;&lt;br&gt;
&lt;br&gt;
Livelock&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
Here's&amp;nbsp;a&amp;nbsp;very&amp;nbsp;simple&amp;nbsp;Java&amp;nbsp;example&amp;nbsp;of&amp;nbsp;livelock&amp;nbsp;where&amp;nbsp;a&amp;nbsp;husband&amp;nbsp;and&amp;nbsp;wife&amp;nbsp;are&amp;nbsp;trying&amp;nbsp;to&amp;nbsp;eat&amp;nbsp;soup,&amp;nbsp;but&amp;nbsp;only&lt;br&gt;
have&amp;nbsp;one&amp;nbsp;spoon&amp;nbsp;between&amp;nbsp;them.&amp;nbsp;Each&amp;nbsp;spouse&amp;nbsp;is&amp;nbsp;too&amp;nbsp;polite,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;pass&amp;nbsp;the&amp;nbsp;spoon&amp;nbsp;if&amp;nbsp;the&amp;nbsp;other&amp;nbsp;has&amp;nbsp;not&amp;nbsp;yet&amp;nbsp;eaten.&lt;br&gt;
package&amp;nbsp;com.ap.part2basicconcurrency;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;p3Livelock&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Spoon&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Diner&amp;nbsp;owner;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Spoon(Diner&amp;nbsp;d)&amp;nbsp;{&amp;nbsp;owner&amp;nbsp;=&amp;nbsp;d;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Diner&amp;nbsp;getOwner()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;owner;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;setOwner(Diner&amp;nbsp;d)&amp;nbsp;{&amp;nbsp;owner&amp;nbsp;=&amp;nbsp;d;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;synchronized&amp;nbsp;void&amp;nbsp;use()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf("%s&amp;nbsp;has&amp;nbsp;eaten!",&amp;nbsp;owner.name);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;class&amp;nbsp;Diner&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;isHungry;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Diner(String&amp;nbsp;n)&amp;nbsp;{&amp;nbsp;name&amp;nbsp;=&amp;nbsp;n;&amp;nbsp;isHungry&amp;nbsp;=&amp;nbsp;true;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;name;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isHungry()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;isHungry;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;eatWith(Spoon&amp;nbsp;spoon,&amp;nbsp;Diner&amp;nbsp;spouse)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(isHungry)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Don't&amp;nbsp;have&amp;nbsp;the&amp;nbsp;spoon,&amp;nbsp;so&amp;nbsp;wait&amp;nbsp;patiently&amp;nbsp;for&amp;nbsp;spouse.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(spoon.owner&amp;nbsp;!=&amp;nbsp;this)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&amp;nbsp;Thread.sleep(1);&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch(InterruptedException&amp;nbsp;e)&amp;nbsp;{&amp;nbsp;continue;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;If&amp;nbsp;spouse&amp;nbsp;is&amp;nbsp;hungry,&amp;nbsp;insist&amp;nbsp;upon&amp;nbsp;passing&amp;nbsp;the&amp;nbsp;spoon.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(spouse.isHungry())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"%s:&amp;nbsp;You&amp;nbsp;eat&amp;nbsp;first&amp;nbsp;my&amp;nbsp;darling&amp;nbsp;%s!%n",&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name,&amp;nbsp;spouse.getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;spoon.setOwner(spouse);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Spouse&amp;nbsp;wasn't&amp;nbsp;hungry,&amp;nbsp;so&amp;nbsp;finally&amp;nbsp;eat&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;spoon.use();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;isHungry&amp;nbsp;=&amp;nbsp;false;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"%s:&amp;nbsp;I&amp;nbsp;am&amp;nbsp;stuffed,&amp;nbsp;my&amp;nbsp;darling&amp;nbsp;%s!%n",&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name,&amp;nbsp;spouse.getName());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;spoon.setOwner(spouse);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Diner&amp;nbsp;husband&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Diner("Bob");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Diner&amp;nbsp;wife&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Diner("Alice");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Spoon&amp;nbsp;s&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Spoon(husband);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&amp;nbsp;husband.eatWith(s,&amp;nbsp;wife);&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;Thread(new&amp;nbsp;Runnable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;run()&amp;nbsp;{&amp;nbsp;wife.eatWith(s,&amp;nbsp;husband);&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}).start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}</questionanswer>
  </question>
</questions>
