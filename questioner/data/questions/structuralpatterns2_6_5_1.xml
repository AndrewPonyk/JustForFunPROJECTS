<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_1" name="StructuralPatterns" nofquestions="2" nofsubcategories="0" filename="structuralpatterns2_6_5_1.xml">
  <question id="2_6_5_1:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Adapter,&amp;nbsp;describe&amp;nbsp;.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;My&amp;nbsp;opinion&amp;nbsp;:&amp;nbsp;Easy&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;two&amp;nbsp;types&amp;nbsp;:&amp;nbsp;object&amp;nbsp;adapter&amp;nbsp;&lt;br&gt;
and&amp;nbsp;class&amp;nbsp;pattern.&amp;nbsp;Look&amp;nbsp;on&amp;nbsp;examples&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;idea&amp;nbsp;of&amp;nbsp;adapter.&lt;br&gt;
It&amp;nbsp;consists&amp;nbsp;of&amp;nbsp;:&amp;nbsp;adaptee,&amp;nbsp;adapter,&amp;nbsp;and&amp;nbsp;client&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;adapter&amp;nbsp;pattern&amp;nbsp;(often&lt;br&gt;
referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;wrapper&amp;nbsp;pattern&amp;nbsp;or&amp;nbsp;simply&amp;nbsp;a&amp;nbsp;wrapper&amp;nbsp;-&amp;nbsp;an&amp;nbsp;&lt;br&gt;
alternative&amp;nbsp;naming&amp;nbsp;shared&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;pattern&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;GoF&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Design&lt;br&gt;
&amp;nbsp;Patterns&amp;nbsp;book&amp;nbsp;)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&amp;nbsp;translates&amp;nbsp;one&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;a&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;into&amp;nbsp;a&amp;nbsp;&lt;br&gt;
compatible&amp;nbsp;interface.&amp;nbsp;An&amp;nbsp;adapter&amp;nbsp;allows&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;that&amp;nbsp;normally&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;could&lt;br&gt;
not&amp;nbsp;because&amp;nbsp;of&amp;nbsp;incompatible&amp;nbsp;interfaces,&amp;nbsp;by&amp;nbsp;providing&amp;nbsp;its&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;clients&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&lt;br&gt;
using&amp;nbsp;the&amp;nbsp;original&amp;nbsp;interface.&amp;nbsp;The&amp;nbsp;adapter&amp;nbsp;translates&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;its&amp;nbsp;interface&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;into&amp;nbsp;calls&amp;nbsp;&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;original&amp;nbsp;interface,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;code&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;do&amp;nbsp;this&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typically&amp;nbsp;small.&lt;br&gt;
The&amp;nbsp;adapter&amp;nbsp;is&amp;nbsp;also&amp;nbsp;responsible&amp;nbsp;for&amp;nbsp;transforming&amp;nbsp;data&amp;nbsp;into&amp;nbsp;appropriate&amp;nbsp;&lt;br&gt;
forms.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;if&amp;nbsp;multiple&amp;nbsp;boolean&amp;nbsp;values&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;as&amp;nbsp;a&lt;br&gt;
single&amp;nbsp;integer&amp;nbsp;(i.e.&amp;nbsp;flags)&amp;nbsp;but&amp;nbsp;the&amp;nbsp;client&amp;nbsp;requires&amp;nbsp;individual&amp;nbsp;boolean&amp;nbsp;&lt;br&gt;
values,&amp;nbsp;the&amp;nbsp;adapter&amp;nbsp;would&amp;nbsp;be&amp;nbsp;responsible&amp;nbsp;for&amp;nbsp;extracting&amp;nbsp;the&amp;nbsp;appropriate&lt;br&gt;
values&amp;nbsp;from&amp;nbsp;the&amp;nbsp;integer&amp;nbsp;value.&amp;nbsp;Another&amp;nbsp;example&amp;nbsp;is&amp;nbsp;transforming&amp;nbsp;the&amp;nbsp;format&amp;nbsp;&lt;br&gt;
of&amp;nbsp;dates&amp;nbsp;(e.g.&amp;nbsp;YYYYMMDD&amp;nbsp;to&amp;nbsp;MM/DD/YYYY&amp;nbsp;or&amp;nbsp;DD/MM/YYYY&amp;nbsp;).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;adapter&amp;nbsp;helps&amp;nbsp;two&amp;nbsp;incompatible&amp;nbsp;interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;the&amp;nbsp;real&amp;nbsp;world&amp;nbsp;definition&amp;nbsp;for&amp;nbsp;an&amp;nbsp;adapter.&amp;nbsp;Adapter&amp;nbsp;design&lt;br&gt;
pattern&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;two&amp;nbsp;different&amp;nbsp;classes&amp;nbsp;with&amp;nbsp;incompatible&lt;br&gt;
interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together.&amp;nbsp;Interfaces&amp;nbsp;may&amp;nbsp;be&amp;nbsp;incompatible&amp;nbsp;but&amp;nbsp;the&amp;nbsp;inner&lt;br&gt;
functionality&amp;nbsp;should&amp;nbsp;suit&amp;nbsp;the&amp;nbsp;need.&amp;nbsp;The&amp;nbsp;Adapter&amp;nbsp;pattern&amp;nbsp;allows&lt;br&gt;
otherwise&amp;nbsp;incompatible&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;by&amp;nbsp;converting&amp;nbsp;the&lt;br&gt;
interface&amp;nbsp;of&amp;nbsp;one&amp;nbsp;class&amp;nbsp;into&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;expected&amp;nbsp;by&amp;nbsp;the&amp;nbsp;clients.&lt;br&gt;
&lt;br&gt;
Uml&amp;nbsp;diagrams&amp;nbsp;:&lt;br&gt;
&amp;nbsp;Object&amp;nbsp;adapter&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='370'&amp;nbsp;height='290'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/ObjectAdapter.png'/&gt;&lt;br&gt;
&lt;br&gt;
Class&amp;nbsp;adapter&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='370'&amp;nbsp;height='290'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/ClassAdapter.png'/&gt;&lt;br&gt;
&lt;br&gt;
Examples&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;Class&amp;nbsp;adapter:&lt;br&gt;
//&amp;nbsp;Target&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Chief&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast();&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeLunch();&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Adaptee&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Plumber&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getScrewNut()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getPipe()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getGasket()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Adapter&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChiefAdapter&amp;nbsp;extends&amp;nbsp;Plumber&amp;nbsp;implements&amp;nbsp;Chief&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getGasket();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeLunch()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getPipe();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getScrewNut();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Client&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Client&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;eat(Object&amp;nbsp;dish)&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chief&amp;nbsp;ch&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChiefAdapter();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeBreakfast();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeLunch();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeDinner();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;callAmbulance();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
2)&amp;nbsp;Object&amp;nbsp;adapter&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Chief.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Chief&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeSupper();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Plumber.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Plumber&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getPipe(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getKey(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getScrewDriver(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;ChiefAdapter.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChiefAdapter&amp;nbsp;implements&amp;nbsp;Chief{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Plumber&amp;nbsp;plumber&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Plumber();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getKey();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getScrewDriver();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeSupper()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getPipe();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Client.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Client&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main&amp;nbsp;(String&amp;nbsp;[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chief&amp;nbsp;chief&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChiefAdapter();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;key&amp;nbsp;=&amp;nbsp;chief.makeDinner();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Bridge,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;My&amp;nbsp;opinion&amp;nbsp;:&amp;nbsp;very&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;(&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;&amp;nbsp;,&amp;nbsp;realy&amp;nbsp;good&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;example&amp;nbsp;on&amp;nbsp;wiki)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;bridge&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;used&amp;nbsp;in&amp;nbsp;software&lt;br&gt;
engineering&amp;nbsp;which&amp;nbsp;is&amp;nbsp;meant&amp;nbsp;to&amp;nbsp;&amp;quot;decouple&amp;nbsp;an&amp;nbsp;abstraction&amp;nbsp;from&lt;br&gt;
its&amp;nbsp;implementation&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;two&amp;nbsp;can&amp;nbsp;vary&amp;nbsp;independently&amp;quot;.&lt;br&gt;
&amp;nbsp;The&amp;nbsp;bridge&amp;nbsp;uses&amp;nbsp;encapsulation,&amp;nbsp;aggregation,&amp;nbsp;and&amp;nbsp;can&amp;nbsp;use&lt;br&gt;
inheritance&amp;nbsp;to&amp;nbsp;separate&amp;nbsp;responsibilities&amp;nbsp;into&amp;nbsp;different&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='700'&amp;nbsp;height='350'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Bridge_UML_class_diagram.svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(wiki)&lt;br&gt;
&lt;br&gt;
/**&amp;nbsp;&amp;quot;Implementor&amp;quot;&amp;nbsp;*/&lt;br&gt;
interface&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius);&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;ConcreteImplementor&amp;quot;&amp;nbsp;&amp;nbsp;1/2&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;DrawingAPI1&amp;nbsp;implements&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;API1.circle&amp;nbsp;at&amp;nbsp;%f:%f&amp;nbsp;radius&amp;nbsp;%f\n&amp;quot;,&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;ConcreteImplementor&amp;quot;&amp;nbsp;2/2&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;DrawingAPI2&amp;nbsp;implements&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;API2.circle&amp;nbsp;at&amp;nbsp;%f:%f&amp;nbsp;radius&amp;nbsp;%f\n&amp;quot;,&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Abstraction&amp;quot;&amp;nbsp;*/&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;DrawingAPI&amp;nbsp;drawingAPI;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;Shape(DrawingAPI&amp;nbsp;drawingAPI){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.drawingAPI&amp;nbsp;=&amp;nbsp;drawingAPI;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;draw();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;low-level&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;resizeByPercentage(double&amp;nbsp;pct);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;high-level&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Refined&amp;nbsp;Abstraction&amp;quot;&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;CircleShape&amp;nbsp;extends&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;double&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CircleShape(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius,&amp;nbsp;DrawingAPI&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawingAPI)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(drawingAPI);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.x&amp;nbsp;=&amp;nbsp;x;&amp;nbsp;&amp;nbsp;this.y&amp;nbsp;=&amp;nbsp;y;&amp;nbsp;&amp;nbsp;this.radius&amp;nbsp;=&amp;nbsp;radius;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;low-level&amp;nbsp;i.e.&amp;nbsp;Implementation&amp;nbsp;specific&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawingAPI.drawCircle(x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;high-level&amp;nbsp;i.e.&amp;nbsp;Abstraction&amp;nbsp;specific&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;resizeByPercentage(double&amp;nbsp;pct)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;radius&amp;nbsp;*=&amp;nbsp;pct;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Client&amp;quot;&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;BridgePattern&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shape[]&amp;nbsp;shapes&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Shape[]&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;CircleShape(1,&amp;nbsp;2,&amp;nbsp;3,&amp;nbsp;new&amp;nbsp;DrawingAPI1()),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;CircleShape(5,&amp;nbsp;7,&amp;nbsp;11,&amp;nbsp;new&amp;nbsp;DrawingAPI2()),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Shape&amp;nbsp;shape&amp;nbsp;:&amp;nbsp;shapes)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shape.resizeByPercentage(2.5);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shape.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
From&amp;nbsp;stackoverflow.com&lt;br&gt;
BEFORE:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;________&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Car&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_________&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ForeignCar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
GoodNativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;BadNativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GoodForeignCar&amp;nbsp;&amp;nbsp;BadForeignCar&lt;br&gt;
&lt;br&gt;
After&amp;nbsp;using&amp;nbsp;Bridge&amp;nbsp;Pattern&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CarAbstraction&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CarAbstractionImpl-------------HAS-A-------&gt;&amp;nbsp;CarImplementor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ForeignCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GoodCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BadCar&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
</questions>
