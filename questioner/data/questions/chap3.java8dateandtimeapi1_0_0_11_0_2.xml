<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_11_0_2" name="chap3.Java8DateAndTimeAPI" nofquestions="3" nofsubcategories="0" filename="chap3.java8dateandtimeapi1_0_0_11_0_2.xml">
  <question id="1_0_0_11_0_2:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;Time&amp;nbsp;API,&amp;nbsp;describe.&lt;br&gt;
Format&amp;nbsp;LocalDate&amp;nbsp;and&amp;nbsp;LocalDateTime,&amp;nbsp;describe.&lt;br&gt;
Measure&amp;nbsp;Execution&amp;nbsp;time&amp;nbsp;of&amp;nbsp;some&amp;nbsp;code&amp;nbsp;in&amp;nbsp;java&amp;nbsp;8,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Package&amp;nbsp;java.time&amp;nbsp;&amp;nbsp;&amp;nbsp;(new&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8)&lt;br&gt;
The&amp;nbsp;main&amp;nbsp;API&amp;nbsp;for&amp;nbsp;dates,&amp;nbsp;times,&amp;nbsp;instants,&amp;nbsp;and&amp;nbsp;durations.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;classes&amp;nbsp;defined&amp;nbsp;here&amp;nbsp;represent&amp;nbsp;the&amp;nbsp;principle&amp;nbsp;date-time&amp;nbsp;concepts,&amp;nbsp;including&amp;nbsp;instants,&amp;nbsp;durations,&lt;br&gt;
dates,&amp;nbsp;times,&amp;nbsp;time-zones&amp;nbsp;and&amp;nbsp;periods.&amp;nbsp;They&amp;nbsp;are&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;ISO&amp;nbsp;calendar&amp;nbsp;system,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;the&amp;nbsp;de&amp;nbsp;facto&amp;nbsp;world&lt;br&gt;
calendar&amp;nbsp;following&amp;nbsp;the&amp;nbsp;proleptic&amp;nbsp;Gregorian&amp;nbsp;rules.&amp;nbsp;All&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;immutable&amp;nbsp;and&amp;nbsp;thread-safe.&lt;br&gt;
&lt;br&gt;
Each&amp;nbsp;date&amp;nbsp;time&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;composed&amp;nbsp;of&amp;nbsp;fields&amp;nbsp;that&amp;nbsp;are&amp;nbsp;conveniently&amp;nbsp;made&amp;nbsp;available&amp;nbsp;by&amp;nbsp;the&amp;nbsp;APIs.&amp;nbsp;For&lt;br&gt;
lower&amp;nbsp;level&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;fields&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;the&amp;nbsp;java.time.temporal&amp;nbsp;package.&amp;nbsp;Each&amp;nbsp;class&amp;nbsp;includes&amp;nbsp;support&amp;nbsp;for&lt;br&gt;
printing&amp;nbsp;and&amp;nbsp;parsing&amp;nbsp;all&amp;nbsp;manner&amp;nbsp;of&amp;nbsp;dates&amp;nbsp;and&amp;nbsp;times.&amp;nbsp;Refer&amp;nbsp;to&amp;nbsp;the&amp;nbsp;java.time.format&amp;nbsp;package&amp;nbsp;for&amp;nbsp;customization&amp;nbsp;options.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;java.time.chrono&amp;nbsp;package&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;calendar&amp;nbsp;neutral&amp;nbsp;API&amp;nbsp;ChronoLocalDate,&amp;nbsp;ChronoLocalDateTime,&lt;br&gt;
ChronoZonedDateTime&amp;nbsp;and&amp;nbsp;Era.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;intended&amp;nbsp;for&amp;nbsp;use&amp;nbsp;by&amp;nbsp;applications&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&amp;nbsp;use&amp;nbsp;localized&amp;nbsp;calendars.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;recommended&amp;nbsp;that&amp;nbsp;applications&amp;nbsp;use&amp;nbsp;the&amp;nbsp;ISO-8601&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;classes&amp;nbsp;from&amp;nbsp;this&lt;br&gt;
package&amp;nbsp;across&amp;nbsp;system&amp;nbsp;boundaries,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;to&amp;nbsp;the&amp;nbsp;database&amp;nbsp;or&amp;nbsp;across&amp;nbsp;the&amp;nbsp;network.&lt;br&gt;
The&amp;nbsp;calendar&amp;nbsp;neutral&amp;nbsp;API&amp;nbsp;should&amp;nbsp;be&amp;nbsp;reserved&amp;nbsp;for&amp;nbsp;interactions&amp;nbsp;with&amp;nbsp;users.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Dates&amp;nbsp;and&amp;nbsp;Times&lt;br&gt;
&lt;br&gt;
Instant&amp;nbsp;is&amp;nbsp;essentially&amp;nbsp;a&amp;nbsp;numeric&amp;nbsp;timestamp.&amp;nbsp;The&amp;nbsp;current&amp;nbsp;Instant&amp;nbsp;can&amp;nbsp;be&amp;nbsp;retrieved&amp;nbsp;from&amp;nbsp;a&amp;nbsp;Clock.&amp;nbsp;This&amp;nbsp;is&lt;br&gt;
useful&amp;nbsp;for&amp;nbsp;logging&amp;nbsp;and&amp;nbsp;persistence&amp;nbsp;of&amp;nbsp;a&amp;nbsp;point&amp;nbsp;in&amp;nbsp;time&amp;nbsp;and&amp;nbsp;has&amp;nbsp;in&amp;nbsp;the&amp;nbsp;past&amp;nbsp;been&amp;nbsp;associated&amp;nbsp;with&amp;nbsp;storing&lt;br&gt;
the&amp;nbsp;result&amp;nbsp;from&amp;nbsp;System.currentTimeMillis().&lt;br&gt;
&lt;br&gt;
LocalDate&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;without&amp;nbsp;a&amp;nbsp;time.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;like&amp;nbsp;'2010-12-03'&amp;nbsp;and&amp;nbsp;could&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;a&amp;nbsp;birthday.&lt;br&gt;
&lt;br&gt;
LocalTime&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;time&amp;nbsp;without&amp;nbsp;a&amp;nbsp;date.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;time&amp;nbsp;like&amp;nbsp;'11:30'&amp;nbsp;and&amp;nbsp;could&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;an&amp;nbsp;opening&amp;nbsp;or&amp;nbsp;closing&amp;nbsp;time.&lt;br&gt;
&lt;br&gt;
LocalDateTime&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date-time&amp;nbsp;like&amp;nbsp;'2010-12-03T11:30'.&lt;br&gt;
&lt;br&gt;
ZonedDateTime&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;with&amp;nbsp;a&amp;nbsp;time-zone.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;if&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;accurate&amp;nbsp;calculations&amp;nbsp;of&amp;nbsp;dates&amp;nbsp;and&amp;nbsp;times&amp;nbsp;taking&amp;nbsp;into&amp;nbsp;account&amp;nbsp;the&amp;nbsp;ZoneId,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'Europe/Paris'.&amp;nbsp;Where&amp;nbsp;possible,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;recommended&amp;nbsp;to&amp;nbsp;use&amp;nbsp;a&amp;nbsp;simpler&amp;nbsp;class&amp;nbsp;without&amp;nbsp;a&amp;nbsp;time-zone.&amp;nbsp;The&amp;nbsp;widespread&amp;nbsp;use&amp;nbsp;of&amp;nbsp;time-zones&amp;nbsp;tends&amp;nbsp;to&amp;nbsp;add&amp;nbsp;considerable&amp;nbsp;complexity&amp;nbsp;to&amp;nbsp;an&amp;nbsp;application.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Duration&amp;nbsp;and&amp;nbsp;Period&lt;br&gt;
&lt;br&gt;
Beyond&amp;nbsp;dates&amp;nbsp;and&amp;nbsp;times,&amp;nbsp;the&amp;nbsp;API&amp;nbsp;also&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;storage&amp;nbsp;of&amp;nbsp;periods&amp;nbsp;and&amp;nbsp;durations&amp;nbsp;of&amp;nbsp;time.&amp;nbsp;A&amp;nbsp;Duration&lt;br&gt;
is&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;measure&amp;nbsp;of&amp;nbsp;time&amp;nbsp;along&amp;nbsp;the&amp;nbsp;time-line&amp;nbsp;in&amp;nbsp;nanoseconds.&amp;nbsp;A&amp;nbsp;Period&amp;nbsp;expresses&amp;nbsp;an&lt;br&gt;
amount&amp;nbsp;of&amp;nbsp;time&amp;nbsp;in&amp;nbsp;units&amp;nbsp;meaningful&amp;nbsp;to&amp;nbsp;humans,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;years&amp;nbsp;or&amp;nbsp;days.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Additional&amp;nbsp;value&amp;nbsp;types&lt;br&gt;
&lt;br&gt;
Month&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;month&amp;nbsp;on&amp;nbsp;its&amp;nbsp;own.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;single&amp;nbsp;month-of-year&amp;nbsp;in&amp;nbsp;isolation,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'DECEMBER'.&lt;br&gt;
&lt;br&gt;
DayOfWeek&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;day-of-week&amp;nbsp;on&amp;nbsp;its&amp;nbsp;own.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;single&amp;nbsp;day-of-week&amp;nbsp;in&amp;nbsp;isolation,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'TUESDAY'.&lt;br&gt;
&lt;br&gt;
Year&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;year&amp;nbsp;on&amp;nbsp;its&amp;nbsp;own.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;single&amp;nbsp;year&amp;nbsp;in&amp;nbsp;isolation,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'2010'.&lt;br&gt;
&lt;br&gt;
YearMonth&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;year&amp;nbsp;and&amp;nbsp;month&amp;nbsp;without&amp;nbsp;a&amp;nbsp;day&amp;nbsp;or&amp;nbsp;time.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;year&amp;nbsp;and&amp;nbsp;month,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'2010-12'&amp;nbsp;and&amp;nbsp;could&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;a&amp;nbsp;credit&amp;nbsp;card&amp;nbsp;expiry.&lt;br&gt;
&lt;br&gt;
MonthDay&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;month&amp;nbsp;and&amp;nbsp;day&amp;nbsp;without&amp;nbsp;a&amp;nbsp;year&amp;nbsp;or&amp;nbsp;time.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;month&amp;nbsp;and&amp;nbsp;day-of-month,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;'--12-03'&amp;nbsp;and&amp;nbsp;could&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;store&amp;nbsp;an&amp;nbsp;annual&amp;nbsp;event&amp;nbsp;like&amp;nbsp;a&amp;nbsp;birthday&amp;nbsp;without&amp;nbsp;storing&amp;nbsp;the&amp;nbsp;year.&lt;br&gt;
&lt;br&gt;
OffsetTime&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;time&amp;nbsp;and&amp;nbsp;offset&amp;nbsp;from&amp;nbsp;UTC&amp;nbsp;without&amp;nbsp;a&amp;nbsp;date.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;like&amp;nbsp;'11:30+01:00'.&amp;nbsp;The&amp;nbsp;ZoneOffset&amp;nbsp;is&amp;nbsp;of&amp;nbsp;the&amp;nbsp;form&amp;nbsp;'+01:00'.&lt;br&gt;
&lt;br&gt;
OffsetDateTime&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;and&amp;nbsp;offset&amp;nbsp;from&amp;nbsp;UTC.&amp;nbsp;This&amp;nbsp;stores&amp;nbsp;a&amp;nbsp;date-time&amp;nbsp;like&amp;nbsp;'2010-12-03T11:30+01:00'.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;sometimes&amp;nbsp;found&amp;nbsp;in&amp;nbsp;XML&amp;nbsp;messages&amp;nbsp;and&amp;nbsp;other&amp;nbsp;forms&amp;nbsp;of&amp;nbsp;persistence,&amp;nbsp;but&amp;nbsp;contains&amp;nbsp;less&amp;nbsp;information&amp;nbsp;than&amp;nbsp;a&amp;nbsp;full&amp;nbsp;time-zone.&lt;br&gt;
=====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;1&amp;nbsp;(Instant&amp;nbsp;class&amp;nbsp;and&amp;nbsp;Duration&amp;nbsp;class,&amp;nbsp;Measure&amp;nbsp;exuction&amp;nbsp;time)&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.Duration;&lt;br&gt;
import&amp;nbsp;java.time.Instant;&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;InstantAndDuration&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("&amp;nbsp;Instant&amp;nbsp;and&amp;nbsp;Duration&amp;nbsp;classes&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;java.time&amp;nbsp;&amp;nbsp;package&amp;nbsp;replaces&amp;nbsp;java.util.Date&amp;nbsp;class&amp;nbsp;and&amp;nbsp;other&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;k&amp;nbsp;=0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;begin&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;oldBegin&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;i&lt;1000;i++){&amp;nbsp;//&amp;nbsp;takes&amp;nbsp;3&amp;nbsp;miliseconds&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;k&amp;nbsp;+=&amp;nbsp;i&amp;nbsp;*&amp;nbsp;i;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(k%3&amp;nbsp;==&amp;nbsp;0){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(k);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//java.util.stream.IntStream.range(0,1000).forEach(e-&gt;{&amp;nbsp;int&amp;nbsp;kk&amp;nbsp;=&amp;nbsp;e&amp;nbsp;*&amp;nbsp;e;&amp;nbsp;if(e%3&amp;nbsp;==&amp;nbsp;0&amp;nbsp;){&amp;nbsp;list.add(kk);}});&amp;nbsp;//&amp;nbsp;takes&amp;nbsp;105&amp;nbsp;miliseconds&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;end&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;oldEnd&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(k);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Calculation&amp;nbsp;takes&amp;nbsp;");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println((oldEnd&amp;nbsp;-&amp;nbsp;oldBegin)&amp;nbsp;+&amp;nbsp;"&amp;nbsp;miliseconds");&amp;nbsp;//&amp;nbsp;new&amp;nbsp;Way&amp;nbsp;in&amp;nbsp;java&amp;nbsp;8&amp;nbsp;,&amp;nbsp;using&amp;nbsp;Instant&amp;nbsp;and&amp;nbsp;Duration&amp;nbsp;classes&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(Duration.between(begin,&amp;nbsp;end).getNano()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;nanoseconds");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
&amp;nbsp;Instant&amp;nbsp;and&amp;nbsp;Duration&amp;nbsp;classes&amp;nbsp;&lt;br&gt;
332833500&lt;br&gt;
Calculation&amp;nbsp;takes&amp;nbsp;&lt;br&gt;
2&amp;nbsp;miliseconds&lt;br&gt;
2000000&amp;nbsp;nanoseconds&lt;br&gt;
=====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;2&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.LocalDate;&lt;br&gt;
import&amp;nbsp;java.time.Month;&lt;br&gt;
import&amp;nbsp;java.time.format.DateTimeFormatter;&lt;br&gt;
import&amp;nbsp;java.time.temporal.ChronoUnit;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;LocalDateandPeriodandFormatter&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("LocalDate&amp;nbsp;and&amp;nbsp;Period");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;now&amp;nbsp;=&amp;nbsp;LocalDate.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;shakeSpeare&amp;nbsp;=&amp;nbsp;LocalDate.of(1564,&amp;nbsp;Month.APRIL,&amp;nbsp;23);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;my&amp;nbsp;=&amp;nbsp;LocalDate.of(1992,&amp;nbsp;Month.APRIL,&amp;nbsp;2);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Now&amp;nbsp;is&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;now);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;print&amp;nbsp;date&amp;nbsp;as&amp;nbsp;"26/09/2015"&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Formatted&amp;nbsp;Now&amp;nbsp;is&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;now.format(DateTimeFormatter.ofPattern("dd/MM/uuuu")));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(my.until(now,&amp;nbsp;ChronoUnit.DAYS));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
LocalDate&amp;nbsp;and&amp;nbsp;Period&lt;br&gt;
Now&amp;nbsp;is&amp;nbsp;:&amp;nbsp;2015-09-27&lt;br&gt;
Formatted&amp;nbsp;Now&amp;nbsp;is&amp;nbsp;:&amp;nbsp;27/09/2015&lt;br&gt;
8578&lt;br&gt;
=====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;3&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.LocalDateTime;&lt;br&gt;
import&amp;nbsp;java.time.Month;&lt;br&gt;
import&amp;nbsp;java.time.format.DateTimeFormatter;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;LocalDateTimeExampl&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("LocalDateTime");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDateTime&amp;nbsp;now&amp;nbsp;=&amp;nbsp;LocalDateTime.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDateTime&amp;nbsp;some&amp;nbsp;=&amp;nbsp;LocalDateTime.of(1990,&amp;nbsp;Month.APRIL,2,0,0);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(now);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(some);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(some.format(DateTimeFormatter.ofPattern("dd&amp;nbsp;MMMM&amp;nbsp;YYYY")));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("After&amp;nbsp;10&amp;nbsp;days&amp;nbsp;after&amp;nbsp;now&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;now.plusDays(10));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
LocalDateTime&lt;br&gt;
2015-09-27T15:28:56.205&lt;br&gt;
1990-04-02T00:00&lt;br&gt;
02&amp;nbsp;April&amp;nbsp;1990&lt;br&gt;
After&amp;nbsp;10&amp;nbsp;days&amp;nbsp;after&amp;nbsp;now&amp;nbsp;:&amp;nbsp;2015-10-07T15:28:56.205&lt;br&gt;
&lt;br&gt;
=====================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;4&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.DayOfWeek;&lt;br&gt;
import&amp;nbsp;java.time.Instant;&lt;br&gt;
import&amp;nbsp;java.time.LocalDate;&lt;br&gt;
import&amp;nbsp;java.time.temporal.ChronoUnit;&lt;br&gt;
import&amp;nbsp;java.time.temporal.TemporalAdjusters;&lt;br&gt;
import&amp;nbsp;java.time.temporal.TemporalAmount;&lt;br&gt;
import&amp;nbsp;java.time.temporal.TemporalUnit;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;AddOrRemoveDaysMonthFromDate&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;now&amp;nbsp;=&amp;nbsp;LocalDate.now();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;nextSunday&amp;nbsp;=&amp;nbsp;now.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Next&amp;nbsp;sunday&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;nextSunday);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;after10Days&amp;nbsp;=&amp;nbsp;now.plus(10,&amp;nbsp;ChronoUnit.DAYS);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;before10Days&amp;nbsp;=&amp;nbsp;now.minus(10,&amp;nbsp;ChronoUnit.DAYS);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("10&amp;nbsp;days&amp;nbsp;after&amp;nbsp;today&amp;nbsp;"+after10Days);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("10&amp;nbsp;days&amp;nbsp;before&amp;nbsp;today&amp;nbsp;"+before10Days);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
Next&amp;nbsp;sunday&amp;nbsp;:&amp;nbsp;2015-10-04&lt;br&gt;
10&amp;nbsp;days&amp;nbsp;after&amp;nbsp;today&amp;nbsp;2015-10-07&lt;br&gt;
10&amp;nbsp;days&amp;nbsp;before&amp;nbsp;today&amp;nbsp;2015-09-17&lt;br&gt;
========================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;5&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.ZoneId;&lt;br&gt;
import&amp;nbsp;java.time.ZonedDateTime;&lt;br&gt;
import&amp;nbsp;java.time.format.DateTimeFormatter;&lt;br&gt;
import&amp;nbsp;java.util.Set;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TimeZones&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Time&amp;nbsp;zones&amp;nbsp;example");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Set&lt;String&gt;&amp;nbsp;allZonesIds&amp;nbsp;=&amp;nbsp;ZoneId.getAvailableZoneIds();&amp;nbsp;//&amp;nbsp;almost&amp;nbsp;600&amp;nbsp;zones&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//allZonesIds.forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ZonedDateTime&amp;nbsp;warsaw&amp;nbsp;=&amp;nbsp;ZonedDateTime.now(ZoneId.of("Europe/Warsaw"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ZonedDateTime&amp;nbsp;Kyiv&amp;nbsp;=&amp;nbsp;warsaw.withZoneSameInstant(ZoneId.of("Europe/Kiev"));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Now&amp;nbsp;in&amp;nbsp;Warsaw&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;warsaw);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Now&amp;nbsp;in&amp;nbsp;Kyiv&amp;nbsp;:"&amp;nbsp;+&amp;nbsp;Kyiv.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;&amp;nbsp;:&lt;br&gt;
Time&amp;nbsp;zones&amp;nbsp;example&lt;br&gt;
Now&amp;nbsp;in&amp;nbsp;Warsaw&amp;nbsp;:2015-09-27T14:30:54.835+02:00[Europe/Warsaw]&lt;br&gt;
Now&amp;nbsp;in&amp;nbsp;Kyiv&amp;nbsp;:2015-09-27T15:30:54.835</questionanswer>
  </question>
  <question id="1_0_0_11_0_2:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util.date&amp;nbsp;vs&amp;nbsp;java.time.LocalDate,&amp;nbsp;describe&amp;nbsp;difference.&lt;br&gt;
Which&amp;nbsp;of&amp;nbsp;them&amp;nbsp;is&amp;nbsp;IMMUTABLE&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html&lt;br&gt;
&lt;br&gt;
================================================&lt;br&gt;
java.time.LocalDate&amp;nbsp;is&amp;nbsp;IMMUTABLE&amp;nbsp;!!!&amp;nbsp;java.util.Date&amp;nbsp;is&amp;nbsp;MUTABLE&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Why&amp;nbsp;do&amp;nbsp;we&amp;nbsp;need&amp;nbsp;a&amp;nbsp;new&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;library?&lt;br&gt;
A&amp;nbsp;long-standing&amp;nbsp;bugbear&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;developers&amp;nbsp;has&amp;nbsp;been&amp;nbsp;the&amp;nbsp;inadequate&amp;nbsp;support&amp;nbsp;for&amp;nbsp;the&amp;nbsp;date&lt;br&gt;
and&amp;nbsp;time&amp;nbsp;use&amp;nbsp;cases&amp;nbsp;of&amp;nbsp;ordinary&amp;nbsp;developers.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;existing&amp;nbsp;classes&amp;nbsp;(such&amp;nbsp;as&amp;nbsp;java.util.Date&amp;nbsp;and&amp;nbsp;SimpleDateFormatter)&amp;nbsp;AREN'T&amp;nbsp;thread-safe,&lt;br&gt;
leading&amp;nbsp;to&amp;nbsp;potential&amp;nbsp;concurrency&amp;nbsp;issues&amp;nbsp;for&amp;nbsp;users—not&amp;nbsp;something&amp;nbsp;the&amp;nbsp;average&amp;nbsp;developer&amp;nbsp;would&amp;nbsp;expect&amp;nbsp;to&amp;nbsp;deal&lt;br&gt;
with&amp;nbsp;when&amp;nbsp;writing&amp;nbsp;date-handling&amp;nbsp;code.&lt;br&gt;
&lt;br&gt;
Some&amp;nbsp;of&amp;nbsp;the&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;classes&amp;nbsp;also&amp;nbsp;exhibit&amp;nbsp;quite&amp;nbsp;poor&amp;nbsp;API&amp;nbsp;design.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;years&amp;nbsp;in&amp;nbsp;java.util.Date&lt;br&gt;
start&amp;nbsp;at&amp;nbsp;1900,&amp;nbsp;months&amp;nbsp;start&amp;nbsp;at&amp;nbsp;1,&amp;nbsp;and&amp;nbsp;days&amp;nbsp;start&amp;nbsp;at&amp;nbsp;0—not&amp;nbsp;very&amp;nbsp;intuitive.&lt;br&gt;
&lt;br&gt;
These&amp;nbsp;issues,&amp;nbsp;and&amp;nbsp;several&amp;nbsp;others,&amp;nbsp;have&amp;nbsp;led&amp;nbsp;to&amp;nbsp;the&amp;nbsp;popularity&amp;nbsp;of&amp;nbsp;third-party&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;libraries,&lt;br&gt;
such&amp;nbsp;as&amp;nbsp;Joda-Time.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;order&amp;nbsp;to&amp;nbsp;address&amp;nbsp;these&amp;nbsp;problems&amp;nbsp;and&amp;nbsp;provide&amp;nbsp;better&amp;nbsp;support&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JDK&amp;nbsp;core,&amp;nbsp;a&lt;br&gt;
new&amp;nbsp;date&amp;nbsp;and&amp;nbsp;time&amp;nbsp;API,&amp;nbsp;which&amp;nbsp;is&amp;nbsp;free&amp;nbsp;of&amp;nbsp;these&amp;nbsp;problems,&amp;nbsp;has&amp;nbsp;been&amp;nbsp;designed&amp;nbsp;for&amp;nbsp;Java&amp;nbsp;SE&amp;nbsp;8.&lt;br&gt;
&lt;br&gt;
-------------------&lt;br&gt;
Core&amp;nbsp;Ideas&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;new&amp;nbsp;API&amp;nbsp;is&amp;nbsp;driven&amp;nbsp;by&amp;nbsp;three&amp;nbsp;core&amp;nbsp;ideas:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Immutable-value&amp;nbsp;classes.&amp;nbsp;One&amp;nbsp;of&amp;nbsp;the&amp;nbsp;serious&amp;nbsp;weaknesses&amp;nbsp;of&amp;nbsp;the&amp;nbsp;existing&amp;nbsp;formatters&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;that&amp;nbsp;they&lt;br&gt;
aren’t&amp;nbsp;thread-safe.&amp;nbsp;This&amp;nbsp;puts&amp;nbsp;the&amp;nbsp;burden&amp;nbsp;on&amp;nbsp;developers&amp;nbsp;to&amp;nbsp;use&amp;nbsp;them&amp;nbsp;in&amp;nbsp;a&amp;nbsp;thread-safe&amp;nbsp;manner&amp;nbsp;and&lt;br&gt;
to&amp;nbsp;think&amp;nbsp;about&amp;nbsp;concurrency&amp;nbsp;problems&amp;nbsp;in&amp;nbsp;their&amp;nbsp;day-to-day&amp;nbsp;development&amp;nbsp;of&amp;nbsp;date-handling&amp;nbsp;code.&lt;br&gt;
The&amp;nbsp;new&amp;nbsp;API&amp;nbsp;avoids&amp;nbsp;this&amp;nbsp;issue&amp;nbsp;by&amp;nbsp;ensuring&amp;nbsp;that&amp;nbsp;all&amp;nbsp;its&amp;nbsp;core&amp;nbsp;classes&amp;nbsp;are&amp;nbsp;immutable&amp;nbsp;and&amp;nbsp;represent&amp;nbsp;well-defined&amp;nbsp;values.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Domain-driven&amp;nbsp;design.&amp;nbsp;The&amp;nbsp;new&amp;nbsp;API&amp;nbsp;models&amp;nbsp;its&amp;nbsp;domain&amp;nbsp;very&amp;nbsp;precisely&amp;nbsp;with&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;represent&lt;br&gt;
different&amp;nbsp;use&amp;nbsp;cases&amp;nbsp;for&amp;nbsp;Date&amp;nbsp;and&amp;nbsp;Time&amp;nbsp;closely.&amp;nbsp;This&amp;nbsp;differs&amp;nbsp;from&amp;nbsp;previous&amp;nbsp;Java&amp;nbsp;libraries&amp;nbsp;that&amp;nbsp;were&amp;nbsp;quite&lt;br&gt;
poor&amp;nbsp;in&amp;nbsp;that&amp;nbsp;regard.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;java.util.Date&amp;nbsp;represents&amp;nbsp;an&amp;nbsp;instant&amp;nbsp;on&amp;nbsp;the&amp;nbsp;timeline—a&amp;nbsp;wrapper&lt;br&gt;
around&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;milli-seconds&amp;nbsp;since&amp;nbsp;the&amp;nbsp;UNIX&amp;nbsp;epoch—but&amp;nbsp;if&amp;nbsp;you&amp;nbsp;call&amp;nbsp;toString(),&lt;br&gt;
the&amp;nbsp;result&amp;nbsp;suggests&amp;nbsp;that&amp;nbsp;it&amp;nbsp;has&amp;nbsp;a&amp;nbsp;time&amp;nbsp;zone,&amp;nbsp;causing&amp;nbsp;confusion&amp;nbsp;among&amp;nbsp;developers.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Separation&amp;nbsp;of&amp;nbsp;chronologies.&amp;nbsp;The&amp;nbsp;new&amp;nbsp;API&amp;nbsp;allows&amp;nbsp;people&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;different&amp;nbsp;calendaring&amp;nbsp;systems&amp;nbsp;in&amp;nbsp;order&lt;br&gt;
to&amp;nbsp;support&amp;nbsp;the&amp;nbsp;needs&amp;nbsp;of&amp;nbsp;users&amp;nbsp;in&amp;nbsp;some&amp;nbsp;areas&amp;nbsp;of&amp;nbsp;the&amp;nbsp;world,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;Japan&amp;nbsp;or&amp;nbsp;Thailand,&lt;br&gt;
that&amp;nbsp;don’t&amp;nbsp;necessarily&amp;nbsp;follow&amp;nbsp;ISO-8601.&amp;nbsp;It&amp;nbsp;does&amp;nbsp;so&amp;nbsp;without&amp;nbsp;imposing&amp;nbsp;additional&lt;br&gt;
burden&amp;nbsp;on&amp;nbsp;the&amp;nbsp;majority&amp;nbsp;of&amp;nbsp;developers,&amp;nbsp;who&amp;nbsp;need&amp;nbsp;to&amp;nbsp;work&amp;nbsp;only&amp;nbsp;with&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;chronology.</questionanswer>
  </question>
  <question id="1_0_0_11_0_2:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Date&amp;nbsp;Time&amp;nbsp;APi&amp;nbsp;and&amp;nbsp;legacy&amp;nbsp;code,&amp;nbsp;describe.&lt;br&gt;
Convert&amp;nbsp;old&amp;nbsp;Date&amp;nbsp;to&amp;nbsp;new&amp;nbsp;LocalDate,&amp;nbsp;and&amp;nbsp;vice&amp;nbsp;versa.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;part3DateAndTime;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.Instant;&lt;br&gt;
import&amp;nbsp;java.time.LocalDate;&lt;br&gt;
import&amp;nbsp;java.time.LocalDateTime;&lt;br&gt;
import&amp;nbsp;java.time.ZoneId;&lt;br&gt;
import&amp;nbsp;java.util.Date;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;LegacyOldDate&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Legacy&amp;nbsp;code&amp;nbsp;using&amp;nbsp;old&amp;nbsp;Date");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;nowJava8&amp;nbsp;=&amp;nbsp;LocalDate.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Date&amp;nbsp;oldJavaDate;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;convert&amp;nbsp;LocalDate&amp;nbsp;to&amp;nbsp;Date&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;oldJavaDate&amp;nbsp;=&amp;nbsp;Date.from(nowJava8.atStartOfDay(ZoneId.systemDefault()).toInstant());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("java.util.Date&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;oldJavaDate);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;convert&amp;nbsp;Date&amp;nbsp;to&amp;nbsp;LocalDate&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LocalDate&amp;nbsp;java8LocalDate&amp;nbsp;=&amp;nbsp;oldJavaDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(java8LocalDate);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Legacy&amp;nbsp;code&amp;nbsp;using&amp;nbsp;old&amp;nbsp;Date&lt;br&gt;
java.util.Date&amp;nbsp;=&amp;nbsp;Sun&amp;nbsp;Sep&amp;nbsp;27&amp;nbsp;00:00:00&amp;nbsp;EEST&amp;nbsp;2015&lt;br&gt;
2015-09-27</questionanswer>
  </question>
</questions>
