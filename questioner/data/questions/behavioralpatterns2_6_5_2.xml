<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_2" name="BehavioralPatterns" nofquestions="15" nofsubcategories="0" filename="behavioralpatterns2_6_5_2.xml">
  <question id="2_6_5_2:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;Behavioral&amp;nbsp;patterns&amp;nbsp;you&amp;nbsp;know&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>-&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility&lt;br&gt;
-&amp;nbsp;Command&lt;br&gt;
-&amp;nbsp;Interpreter&lt;br&gt;
-&amp;nbsp;Iterator&lt;br&gt;
-&amp;nbsp;Mediator&lt;br&gt;
-&amp;nbsp;Memento&lt;br&gt;
-&amp;nbsp;Observer&lt;br&gt;
-&amp;nbsp;State&lt;br&gt;
-&amp;nbsp;Strategy&lt;br&gt;
-&amp;nbsp;Template&amp;nbsp;Method&lt;br&gt;
-&amp;nbsp;Visitor&lt;br&gt;</questionanswer>
  </question>
  <question id="2_6_5_2:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Andrii&amp;nbsp;Budaj&amp;nbsp;Explanation&amp;nbsp;(cafe&amp;nbsp;example):&lt;br&gt;
&lt;br&gt;
Imagine&amp;nbsp;if&amp;nbsp;you&amp;nbsp;went&amp;nbsp;with&amp;nbsp;friends&amp;nbsp;in&amp;nbsp;a&amp;nbsp;cafe.&amp;nbsp;Cafe&lt;br&gt;
something&amp;nbsp;specific&amp;nbsp;-&amp;nbsp;a&amp;nbsp;small&amp;nbsp;place&amp;nbsp;,&amp;nbsp;and&amp;nbsp;when&amp;nbsp;you&amp;nbsp;bring&lt;br&gt;
a&amp;nbsp;dish&amp;nbsp;normally&amp;nbsp;have&amp;nbsp;to&amp;nbsp;pass&amp;nbsp;it&lt;br&gt;
the&amp;nbsp;next&amp;nbsp;person&amp;nbsp;at&amp;nbsp;the&amp;nbsp;table.&amp;nbsp;Your&amp;nbsp;best&amp;nbsp;friend&lt;br&gt;
sat&amp;nbsp;closest&amp;nbsp;to&amp;nbsp;the&amp;nbsp;edge&amp;nbsp;,&amp;nbsp;so&amp;nbsp;he&amp;nbsp;gets&amp;nbsp;the&amp;nbsp;first&lt;br&gt;
the&amp;nbsp;hands&amp;nbsp;of&amp;nbsp;the&amp;nbsp;order.&amp;nbsp;Since&amp;nbsp;he&amp;nbsp;had&amp;nbsp;slept&amp;nbsp;in&amp;nbsp;the&amp;nbsp;morning&amp;nbsp;and&lt;br&gt;
loves&amp;nbsp;to&amp;nbsp;eat&amp;nbsp;meal,&amp;nbsp;he&amp;nbsp;will&amp;nbsp;never&amp;nbsp;deliver&amp;nbsp;you&lt;br&gt;
meat&amp;nbsp;meal&amp;nbsp;or&amp;nbsp;coffee,&amp;nbsp;unless&amp;nbsp;he&amp;nbsp;is&amp;nbsp;not&amp;nbsp;satisfied&amp;nbsp;.&amp;nbsp;Following&amp;nbsp;the&amp;nbsp;second&lt;br&gt;
you&amp;nbsp;sit&amp;nbsp;,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;your&amp;nbsp;girlfriend,&amp;nbsp;who&amp;nbsp;is&amp;nbsp;against&amp;nbsp;the&amp;nbsp;wall.&amp;nbsp;She&amp;nbsp;wants&amp;nbsp;only&lt;br&gt;
cappuccino&amp;nbsp;,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;send&amp;nbsp;to&amp;nbsp;anyone&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
!!&amp;nbsp;WIki&amp;nbsp;explanation:&lt;br&gt;
In&amp;nbsp;object-oriented&amp;nbsp;design,&amp;nbsp;the&amp;nbsp;chain-of-responsibility&amp;nbsp;pattern&lt;br&gt;
is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;consisting&amp;nbsp;of&amp;nbsp;a&amp;nbsp;source&amp;nbsp;of&amp;nbsp;command&lt;br&gt;
objects&amp;nbsp;and&amp;nbsp;a&amp;nbsp;series&amp;nbsp;of&amp;nbsp;processing&amp;nbsp;objects.&lt;br&gt;
Each&amp;nbsp;processing&amp;nbsp;object&amp;nbsp;contains&amp;nbsp;logic&amp;nbsp;that&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;types&lt;br&gt;
of&amp;nbsp;command&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;handle;&amp;nbsp;the&amp;nbsp;rest&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
next&amp;nbsp;processing&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;chain.&lt;br&gt;
A&amp;nbsp;mechanism&amp;nbsp;also&amp;nbsp;exists&amp;nbsp;for&amp;nbsp;adding&amp;nbsp;new&amp;nbsp;processing&lt;br&gt;
objects&amp;nbsp;to&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;chain.&lt;br&gt;
In&amp;nbsp;a&amp;nbsp;variation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;chain-of-responsibility&amp;nbsp;model,&lt;br&gt;
some&amp;nbsp;handlers&amp;nbsp;may&amp;nbsp;act&amp;nbsp;as&amp;nbsp;dispatchers,&amp;nbsp;capable&amp;nbsp;of&amp;nbsp;sending&amp;nbsp;&lt;br&gt;
commands&amp;nbsp;out&amp;nbsp;in&amp;nbsp;a&amp;nbsp;variety&amp;nbsp;of&amp;nbsp;directions,&amp;nbsp;forming&amp;nbsp;a&amp;nbsp;tree&amp;nbsp;of&amp;nbsp;responsibility.&amp;nbsp;&lt;br&gt;
In&amp;nbsp;some&amp;nbsp;cases,&amp;nbsp;this&amp;nbsp;can&amp;nbsp;occur&amp;nbsp;recursively,&amp;nbsp;with&amp;nbsp;processing&amp;nbsp;objects&amp;nbsp;&lt;br&gt;
calling&amp;nbsp;higher-up&amp;nbsp;processing&amp;nbsp;objects&amp;nbsp;with&amp;nbsp;commands&amp;nbsp;that&amp;nbsp;attempt&amp;nbsp;to&lt;br&gt;
solve&amp;nbsp;some&amp;nbsp;smaller&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;problem;&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case&amp;nbsp;recursion&amp;nbsp;continues&lt;br&gt;
until&amp;nbsp;the&amp;nbsp;command&amp;nbsp;is&amp;nbsp;processed,&amp;nbsp;or&amp;nbsp;the&amp;nbsp;entire&amp;nbsp;tree&amp;nbsp;has&amp;nbsp;been&amp;nbsp;explored.&lt;br&gt;
An&amp;nbsp;XML&amp;nbsp;interpreter&amp;nbsp;might&amp;nbsp;work&amp;nbsp;in&amp;nbsp;this&amp;nbsp;manner.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Would&amp;nbsp;I&amp;nbsp;Use&amp;nbsp;This&amp;nbsp;Pattern?&lt;br&gt;
This&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;recommended&amp;nbsp;when&amp;nbsp;either&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;scenarios&amp;nbsp;occur&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;your&amp;nbsp;application:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Multiple&amp;nbsp;objects&amp;nbsp;can&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;request&amp;nbsp;and&amp;nbsp;the&lt;br&gt;
&amp;nbsp;handler&amp;nbsp;doesn't&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;object&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;set&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;request&lt;br&gt;
&amp;nbsp;with&amp;nbsp;the&amp;nbsp;handler&amp;nbsp;determined&amp;nbsp;at&amp;nbsp;runtime&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;request&amp;nbsp;not&amp;nbsp;being&amp;nbsp;handled&amp;nbsp;is&amp;nbsp;an&amp;nbsp;acceptable&amp;nbsp;outcome.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;used&amp;nbsp;in&amp;nbsp;windows&amp;nbsp;systems&amp;nbsp;to&lt;br&gt;
handle&amp;nbsp;events&amp;nbsp;generated&amp;nbsp;from&amp;nbsp;the&amp;nbsp;keyboard&amp;nbsp;or&amp;nbsp;mouse.&lt;br&gt;
Exception&amp;nbsp;handling&amp;nbsp;systems&amp;nbsp;also&amp;nbsp;implement&amp;nbsp;this&amp;nbsp;pattern,&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;checking&amp;nbsp;if&amp;nbsp;a&amp;nbsp;handler&amp;nbsp;is&amp;nbsp;provided&amp;nbsp;for&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;through&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
In&amp;nbsp;__&amp;nbsp;JavaEE&amp;nbsp;__&amp;nbsp;,&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;Servlet&amp;nbsp;filters&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;&lt;br&gt;
Chain&amp;nbsp;of&amp;nbsp;Responsibility&amp;nbsp;pattern,&amp;nbsp;and&amp;nbsp;may&amp;nbsp;also&amp;nbsp;decorate&amp;nbsp;the&lt;br&gt;
request&amp;nbsp;to&amp;nbsp;add&amp;nbsp;extra&amp;nbsp;information&amp;nbsp;before&amp;nbsp;the&amp;nbsp;request&amp;nbsp;is&amp;nbsp;handled&amp;nbsp;by&amp;nbsp;a&amp;nbsp;servlet.&lt;br&gt;
If&amp;nbsp;no&amp;nbsp;handler&amp;nbsp;is&amp;nbsp;defined,&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;will&lt;br&gt;
cause&amp;nbsp;a&amp;nbsp;crash&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program,&amp;nbsp;as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;unhandled.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='430'&amp;nbsp;height='260'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/chain_of_resp_pattern.PNG'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(from&amp;nbsp;java.dzone.com):&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Email&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getText()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setText(String&amp;nbsp;text)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.text&amp;nbsp;=&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFrom()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setFrom(String&amp;nbsp;from)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.from&amp;nbsp;=&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
//Handler&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;next&amp;nbsp;handler&amp;nbsp;in&amp;nbsp;the&amp;nbsp;chain&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email);&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;GMailHandler&amp;nbsp;implements&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;next;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next&amp;nbsp;=&amp;nbsp;handler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(!email.getFrom().endsWith(&amp;quot;@gmail.com&amp;quot;)){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&amp;nbsp;(move&amp;nbsp;to&amp;nbsp;correct&amp;nbsp;folder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Gmail&amp;nbsp;handle&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BusinessMailHandler&amp;nbsp;implements&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;next;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next&amp;nbsp;=&amp;nbsp;handler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(!email.getFrom().endsWith(&amp;quot;@businessaddress.com&amp;quot;)){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&amp;nbsp;(move&amp;nbsp;to&amp;nbsp;correct&amp;nbsp;folder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Business&amp;nbsp;handler&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EmailProcessor&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;successor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;first;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;EmailProcessor(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addEmailHandler(EmailHandler&amp;nbsp;emailHandler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(this.first&amp;nbsp;==&amp;nbsp;null){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.first&amp;nbsp;=&amp;nbsp;emailHandler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.successor.setNext(emailHandler);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.successor&amp;nbsp;=&amp;nbsp;emailHandler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;first.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
//email&amp;nbsp;client&amp;nbsp;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChainOfResponsibilityProgram&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailProcessor&amp;nbsp;processor;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ChainOfResponsibilityProgram(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createProcessor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;createProcessor(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor&amp;nbsp;=&amp;nbsp;new&amp;nbsp;EmailProcessor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.addEmailHandler(new&amp;nbsp;BusinessMailHandler());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.addEmailHandler(new&amp;nbsp;GMailHandler());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;emailReceived(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ChainOfResponsibilityProgram&amp;nbsp;client&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChainOfResponsibilityProgram();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Email&amp;nbsp;helloEmail&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Email();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;helloEmail.setFrom(&amp;quot;andrew9999@gmail.com&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.emailReceived(helloEmail);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;pattern,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;object-oriented&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;command&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
behavioral&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;in&amp;nbsp;which&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;used&amp;nbsp;&lt;br&gt;
to&amp;nbsp;represent&amp;nbsp;and&amp;nbsp;encapsulate&amp;nbsp;all&amp;nbsp;the&amp;nbsp;information&amp;nbsp;&lt;br&gt;
needed&amp;nbsp;to&amp;nbsp;call&amp;nbsp;a&amp;nbsp;method&amp;nbsp;at&amp;nbsp;a&amp;nbsp;later&amp;nbsp;time.&amp;nbsp;&lt;br&gt;
(to&amp;nbsp;understand&amp;nbsp;it&amp;nbsp;look&amp;nbsp;on&amp;nbsp;the&amp;nbsp;example)&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='400'&amp;nbsp;height='250'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/Command.gif'/&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(wiki)&lt;br&gt;
&lt;br&gt;
/*the&amp;nbsp;Invoker&amp;nbsp;class*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Switch&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Command&amp;nbsp;flipUpCommand;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Command&amp;nbsp;flipDownCommand;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Switch(Command&amp;nbsp;flipUpCmd,Command&amp;nbsp;flipDownCmd){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.flipUpCommand=flipUpCmd;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.flipDownCommand=flipDownCmd;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;flipUp(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flipUpCommand.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;flipDown(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flipDownCommand.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*Receiver&amp;nbsp;class*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Light{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Light(){&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;turnOn(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;light&amp;nbsp;is&amp;nbsp;on&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;turnOff(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;light&amp;nbsp;is&amp;nbsp;off&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;interface*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;execute();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;for&amp;nbsp;turning&amp;nbsp;on&amp;nbsp;the&amp;nbsp;light*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TurnOnLightCommand&amp;nbsp;implements&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Light&amp;nbsp;theLight;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TurnOnLightCommand(Light&amp;nbsp;light){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.theLight=light;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;theLight.turnOn();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;for&amp;nbsp;turning&amp;nbsp;off&amp;nbsp;the&amp;nbsp;light*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TurnOffLightCommand&amp;nbsp;implements&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Light&amp;nbsp;theLight;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TurnOffLightCommand(Light&amp;nbsp;light){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.theLight=light;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;theLight.turnOff();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*The&amp;nbsp;test&amp;nbsp;class*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TestCommand{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Light&amp;nbsp;l=new&amp;nbsp;Light();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;switchUp=new&amp;nbsp;TurnOnLightCommand(l);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;switchDown=new&amp;nbsp;TurnOffLightCommand(l);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Switch&amp;nbsp;s=new&amp;nbsp;Switch(switchUp,switchDown);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.flipUp();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.flipDown();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
==&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;Uses&lt;br&gt;
-&amp;nbsp;GUI&amp;nbsp;buttons&amp;nbsp;and&amp;nbsp;menu&amp;nbsp;items&amp;nbsp;&lt;br&gt;
In&amp;nbsp;Swing&amp;nbsp;and&amp;nbsp;Borland&amp;nbsp;Delphi&amp;nbsp;programming,&amp;nbsp;&lt;br&gt;
an&amp;nbsp;Action&amp;nbsp;is&amp;nbsp;a&amp;nbsp;command&amp;nbsp;object.&amp;nbsp;In&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
ability&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;the&amp;nbsp;desired&amp;nbsp;command,&amp;nbsp;an&amp;nbsp;Action&amp;nbsp;may&amp;nbsp;have&lt;br&gt;
an&amp;nbsp;associated&amp;nbsp;icon,&amp;nbsp;keyboard&amp;nbsp;shortcut,&amp;nbsp;tooltip&amp;nbsp;text,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
A&amp;nbsp;toolbar&amp;nbsp;button&amp;nbsp;or&amp;nbsp;menu&amp;nbsp;item&amp;nbsp;component&amp;nbsp;may&amp;nbsp;be&amp;nbsp;completely&lt;br&gt;
initialized&amp;nbsp;using&amp;nbsp;only&amp;nbsp;the&amp;nbsp;Action&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread&amp;nbsp;pools&amp;nbsp;&lt;br&gt;
A&amp;nbsp;typical,&amp;nbsp;general-purpose&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;class&lt;br&gt;
might&amp;nbsp;have&amp;nbsp;a&amp;nbsp;public&amp;nbsp;addTask()&amp;nbsp;method&amp;nbsp;that&amp;nbsp;adds&amp;nbsp;a&amp;nbsp;work&lt;br&gt;
item&amp;nbsp;to&amp;nbsp;an&amp;nbsp;internal&amp;nbsp;queue&amp;nbsp;of&amp;nbsp;tasks&amp;nbsp;waiting&amp;nbsp;to&amp;nbsp;be&amp;nbsp;done.&lt;br&gt;
It&amp;nbsp;maintains&amp;nbsp;a&amp;nbsp;pool&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;execute&amp;nbsp;commands&amp;nbsp;from&lt;br&gt;
the&amp;nbsp;queue.&amp;nbsp;The&amp;nbsp;items&amp;nbsp;in&amp;nbsp;the&amp;nbsp;queue&amp;nbsp;are&amp;nbsp;command&amp;nbsp;objects.&lt;br&gt;
Typically&amp;nbsp;these&amp;nbsp;objects&amp;nbsp;implement&amp;nbsp;a&amp;nbsp;common&amp;nbsp;interface&amp;nbsp;such&amp;nbsp;as&amp;nbsp;&lt;br&gt;
java.lang.Runnable&amp;nbsp;that&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;to&amp;nbsp;execute&amp;nbsp;the&amp;nbsp;command&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;class&amp;nbsp;itself&amp;nbsp;was&amp;nbsp;written&amp;nbsp;without&lt;br&gt;
any&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specific&amp;nbsp;tasks&amp;nbsp;for&amp;nbsp;which&amp;nbsp;it&amp;nbsp;would&amp;nbsp;be&amp;nbsp;used.&lt;br&gt;
-&amp;nbsp;Transactional&amp;nbsp;behavior&amp;nbsp;&lt;br&gt;
Similar&amp;nbsp;to&amp;nbsp;undo,&amp;nbsp;a&amp;nbsp;database&amp;nbsp;engine&amp;nbsp;or&amp;nbsp;software&amp;nbsp;installer&amp;nbsp;may&lt;br&gt;
keep&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;operations&amp;nbsp;that&amp;nbsp;have&amp;nbsp;been&amp;nbsp;or&amp;nbsp;will&amp;nbsp;be&amp;nbsp;performed.&lt;br&gt;
Should&amp;nbsp;one&amp;nbsp;of&amp;nbsp;them&amp;nbsp;fail,&amp;nbsp;all&amp;nbsp;others&amp;nbsp;can&amp;nbsp;be&amp;nbsp;reversed&amp;nbsp;or&lt;br&gt;
discarded&amp;nbsp;(usually&amp;nbsp;called&amp;nbsp;rollback).&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
if&amp;nbsp;two&amp;nbsp;database&amp;nbsp;tables&amp;nbsp;that&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other&amp;nbsp;must&amp;nbsp;be&amp;nbsp;updated,&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;second&amp;nbsp;update&amp;nbsp;fails,&amp;nbsp;the&amp;nbsp;transaction&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
rolled&amp;nbsp;back,&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;first&amp;nbsp;table&amp;nbsp;does&amp;nbsp;not&amp;nbsp;now&amp;nbsp;contain&lt;br&gt;
an&amp;nbsp;invalid&amp;nbsp;reference.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Provide&amp;nbsp;example&amp;nbsp;.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Uml&amp;nbsp;diagram&amp;nbsp;:&lt;br&gt;
(concrete&amp;nbsp;Aggregate&amp;nbsp;&amp;nbsp;-&amp;nbsp;is&amp;nbsp;just&amp;nbsp;java&amp;nbsp;collection(list,&amp;nbsp;set))&lt;br&gt;
(&amp;nbsp;iterator&amp;nbsp;interface&amp;nbsp;-&amp;nbsp;for&amp;nbsp;example&amp;nbsp;java&amp;nbsp;Iterable&amp;nbsp;interface&amp;nbsp;with&amp;nbsp;single&amp;nbsp;method&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iterator();)&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='400'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/iterator_implementation_-_uml_class_diagram.gif'/&gt;&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;object-oriented&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;iterator&amp;nbsp;pattern&amp;nbsp;is&lt;br&gt;
a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;in&amp;nbsp;which&amp;nbsp;an&amp;nbsp;iterator&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;traverse&amp;nbsp;a&lt;br&gt;
container&amp;nbsp;and&amp;nbsp;access&amp;nbsp;the&amp;nbsp;container's&amp;nbsp;elements.&lt;br&gt;
The&amp;nbsp;iterator&amp;nbsp;pattern&amp;nbsp;decouples&amp;nbsp;algorithms&amp;nbsp;from&amp;nbsp;containers;&lt;br&gt;
in&amp;nbsp;some&amp;nbsp;cases,&amp;nbsp;algorithms&amp;nbsp;are&amp;nbsp;necessarily&lt;br&gt;
container-specific&amp;nbsp;and&amp;nbsp;thus&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;decoupled.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;com.ap.behavioral.iterator;&lt;br&gt;
&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;Iterator&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;Object&amp;nbsp;First();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;Object&amp;nbsp;Next();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;boolean&amp;nbsp;IsDone();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;Object&amp;nbsp;CurrentItem();&lt;br&gt;
}&lt;br&gt;
==&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;Aggregate&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;Iterator&amp;nbsp;CreateIterator();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;abstract&amp;nbsp;int&amp;nbsp;count()&amp;nbsp;;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;Object&amp;nbsp;getThis(int&amp;nbsp;index);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;setThis(int&amp;nbsp;index,Object&amp;nbsp;object);&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
package&amp;nbsp;com.ap.behavioral.iterator;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ConcreteIterator&amp;nbsp;&amp;nbsp;extends&amp;nbsp;Iterator{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;&amp;nbsp;Aggregate&amp;nbsp;_aggregate;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;_current;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;ConcreteIterator(Aggregate&amp;nbsp;aggregate)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._aggregate&amp;nbsp;=&amp;nbsp;aggregate;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;First()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;_aggregate.getThis(0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;Next()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;ret&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(_current&amp;nbsp;&lt;&amp;nbsp;_aggregate.count()&amp;nbsp;-&amp;nbsp;1)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ret&amp;nbsp;=&amp;nbsp;_aggregate.getThis(_current++);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;ret;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;IsDone()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;_current&amp;nbsp;&gt;=&amp;nbsp;_aggregate.count();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;CurrentItem()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;_aggregate.getThis(_current);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
package&amp;nbsp;com.ap.behavioral.iterator;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ConcreteAggregate&amp;nbsp;extends&amp;nbsp;Aggregate&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//private&amp;nbsp;&amp;nbsp;ArrayList&amp;nbsp;_items&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;HashMap&lt;Object,&amp;nbsp;Object&gt;&amp;nbsp;_items&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;Object,&amp;nbsp;Object&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;CreateIterator()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;ConcreteIterator(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getThis(int&amp;nbsp;index)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;_items.get(index);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setThis(int&amp;nbsp;index,&amp;nbsp;Object&amp;nbsp;object)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//_items.set(index,&amp;nbsp;aggregate);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_items.put(index,&amp;nbsp;object);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;int&amp;nbsp;count()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;_items.size();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConcreteAggregate&amp;nbsp;a&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ConcreteAggregate();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.setThis(0,&amp;nbsp;&amp;quot;Item&amp;nbsp;A&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.setThis(1,&amp;nbsp;&amp;quot;Item&amp;nbsp;B&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.setThis(2,&amp;nbsp;&amp;quot;Item&amp;nbsp;C&amp;quot;);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Create&amp;nbsp;Iterator&amp;nbsp;and&amp;nbsp;provide&amp;nbsp;aggregate&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConcreteIterator&amp;nbsp;i&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ConcreteIterator(a);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Iterating&amp;nbsp;over&amp;nbsp;collection:&amp;quot;);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;item&amp;nbsp;=&amp;nbsp;i.First();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(item&amp;nbsp;!=&amp;nbsp;null)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;item&amp;nbsp;=&amp;nbsp;i.Next();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Behavioral&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Mediator,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;With&amp;nbsp;the&amp;nbsp;mediator&amp;nbsp;pattern,&amp;nbsp;communication&amp;nbsp;between&amp;nbsp;objects&lt;br&gt;
is&amp;nbsp;encapsulated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;mediator&amp;nbsp;object.&lt;br&gt;
Objects&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;communicate&amp;nbsp;directly&amp;nbsp;with&amp;nbsp;each&amp;nbsp;other,&lt;br&gt;
but&amp;nbsp;instead&amp;nbsp;communicate&amp;nbsp;through&amp;nbsp;the&amp;nbsp;mediator.&lt;br&gt;
This&amp;nbsp;reduces&amp;nbsp;the&amp;nbsp;dependencies&amp;nbsp;between&lt;br&gt;
communicating&amp;nbsp;objects,&amp;nbsp;thereby&amp;nbsp;lowering&amp;nbsp;the&amp;nbsp;coupling.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='400'&amp;nbsp;height='220'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/mediator.gif'/&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(in&amp;nbsp;this&amp;nbsp;example&amp;nbsp;we&amp;nbsp;also&amp;nbsp;use&amp;nbsp;Command&amp;nbsp;pattern):&lt;br&gt;
import&amp;nbsp;java.awt.Font;&lt;br&gt;
import&amp;nbsp;java.awt.event.ActionEvent;&lt;br&gt;
import&amp;nbsp;java.awt.event.ActionListener;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
import&amp;nbsp;javax.swing.JButton;&lt;br&gt;
import&amp;nbsp;javax.swing.JFrame;&lt;br&gt;
import&amp;nbsp;javax.swing.JLabel;&lt;br&gt;
import&amp;nbsp;javax.swing.JPanel;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//Colleague&amp;nbsp;interface&lt;br&gt;
interface&amp;nbsp;Command&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;execute();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//Abstract&amp;nbsp;Mediator&lt;br&gt;
interface&amp;nbsp;IMediator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;book();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;view();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;search();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerView(BtnView&amp;nbsp;v);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerSearch(BtnSearch&amp;nbsp;s);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerBook(BtnBook&amp;nbsp;b);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerDisplay(LblDisplay&amp;nbsp;d);&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//Concrete&amp;nbsp;mediator&lt;br&gt;
class&amp;nbsp;Mediator&amp;nbsp;implements&amp;nbsp;IMediator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnView&amp;nbsp;btnView;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnSearch&amp;nbsp;btnSearch;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnBook&amp;nbsp;btnBook;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LblDisplay&amp;nbsp;show;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//....&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerView(BtnView&amp;nbsp;v)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnView&amp;nbsp;=&amp;nbsp;v;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerSearch(BtnSearch&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnSearch&amp;nbsp;=&amp;nbsp;s;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerBook(BtnBook&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnBook&amp;nbsp;=&amp;nbsp;b;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;registerDisplay(LblDisplay&amp;nbsp;d)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;show&amp;nbsp;=&amp;nbsp;d;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;book()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnBook.setEnabled(false);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnView.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnSearch.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;show.setText(&amp;quot;booking...&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;view()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnView.setEnabled(false);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnSearch.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnBook.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;show.setText(&amp;quot;viewing...&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;search()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnSearch.setEnabled(false);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnView.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;btnBook.setEnabled(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;show.setText(&amp;quot;searching...&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//A&amp;nbsp;concrete&amp;nbsp;colleague&lt;br&gt;
class&amp;nbsp;BtnView&amp;nbsp;extends&amp;nbsp;JButton&amp;nbsp;implements&amp;nbsp;Command&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMediator&amp;nbsp;med;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnView(ActionListener&amp;nbsp;al,&amp;nbsp;IMediator&amp;nbsp;m)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(&amp;quot;View&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addActionListener(al);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med&amp;nbsp;=&amp;nbsp;m;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.registerView(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.view();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//A&amp;nbsp;concrete&amp;nbsp;colleague&lt;br&gt;
class&amp;nbsp;BtnSearch&amp;nbsp;extends&amp;nbsp;JButton&amp;nbsp;implements&amp;nbsp;Command&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMediator&amp;nbsp;med;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnSearch(ActionListener&amp;nbsp;al,&amp;nbsp;IMediator&amp;nbsp;m)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(&amp;quot;Search&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addActionListener(al);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med&amp;nbsp;=&amp;nbsp;m;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.registerSearch(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.search();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//A&amp;nbsp;concrete&amp;nbsp;colleague&lt;br&gt;
class&amp;nbsp;BtnBook&amp;nbsp;extends&amp;nbsp;JButton&amp;nbsp;implements&amp;nbsp;Command&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMediator&amp;nbsp;med;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BtnBook(ActionListener&amp;nbsp;al,&amp;nbsp;IMediator&amp;nbsp;m)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(&amp;quot;Book&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addActionListener(al);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med&amp;nbsp;=&amp;nbsp;m;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.registerBook(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.book();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;LblDisplay&amp;nbsp;extends&amp;nbsp;JLabel&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMediator&amp;nbsp;med;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LblDisplay(IMediator&amp;nbsp;m)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(&amp;quot;Just&amp;nbsp;start...&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med&amp;nbsp;=&amp;nbsp;m;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;med.registerDisplay(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setFont(new&amp;nbsp;Font(&amp;quot;Arial&amp;quot;,&amp;nbsp;Font.BOLD,&amp;nbsp;24));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;MediatorDemo&amp;nbsp;extends&amp;nbsp;JFrame&amp;nbsp;implements&amp;nbsp;ActionListener&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMediator&amp;nbsp;med&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Mediator();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MediatorDemo()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;JPanel&amp;nbsp;p&amp;nbsp;=&amp;nbsp;new&amp;nbsp;JPanel();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.add(new&amp;nbsp;BtnView(this,&amp;nbsp;med));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.add(new&amp;nbsp;BtnBook(this,&amp;nbsp;med));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;p.add(new&amp;nbsp;BtnSearch(this,&amp;nbsp;med));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getContentPane().add(new&amp;nbsp;LblDisplay(med),&amp;nbsp;&amp;quot;North&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getContentPane().add(p,&amp;nbsp;&amp;quot;South&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setSize(400,&amp;nbsp;200);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setVisible(true);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;actionPerformed(ActionEvent&amp;nbsp;ae)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;comd&amp;nbsp;=&amp;nbsp;(Command)&amp;nbsp;ae.getSource();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;comd.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;MediatorDemo();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;2&amp;nbsp;-&amp;nbsp;Chat&amp;nbsp;application&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;chat&amp;nbsp;application&amp;nbsp;is&amp;nbsp;another&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;mediator&lt;br&gt;
pattern.&amp;nbsp;In&amp;nbsp;a&amp;nbsp;chat&amp;nbsp;application&amp;nbsp;we&amp;nbsp;can&amp;nbsp;have&amp;nbsp;several&lt;br&gt;
participants.&amp;nbsp;It's&amp;nbsp;not&amp;nbsp;a&amp;nbsp;good&amp;nbsp;idea&amp;nbsp;to&amp;nbsp;connect&amp;nbsp;each&amp;nbsp;participant&amp;nbsp;to&lt;br&gt;
all&amp;nbsp;the&amp;nbsp;others&amp;nbsp;because&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;connections&amp;nbsp;would&lt;br&gt;
be&amp;nbsp;really&amp;nbsp;high,&amp;nbsp;there&amp;nbsp;would&amp;nbsp;be&amp;nbsp;technical&amp;nbsp;problems&amp;nbsp;due&amp;nbsp;to&amp;nbsp;proxies&lt;br&gt;
and&amp;nbsp;firewalls,&amp;nbsp;etc...&amp;nbsp;.&lt;br&gt;
The&amp;nbsp;most&amp;nbsp;appropriate&amp;nbsp;solution&amp;nbsp;is&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;hub&amp;nbsp;where&amp;nbsp;all&amp;nbsp;participants&lt;br&gt;
will&amp;nbsp;connect;&amp;nbsp;this&amp;nbsp;hub&amp;nbsp;is&amp;nbsp;just&amp;nbsp;the&amp;nbsp;mediator&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
Participants:&lt;br&gt;
-&amp;nbsp;Chatroom(Mediator)&amp;nbsp;-&amp;nbsp;Defines&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;interacting&amp;nbsp;with&amp;nbsp;participants&lt;br&gt;
-&amp;nbsp;ChatroomImpl&amp;nbsp;(ConcreteMediator)&amp;nbsp;-&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;operations&lt;br&gt;
defined&amp;nbsp;by&amp;nbsp;the&amp;nbsp;Chatroom&amp;nbsp;interface.&amp;nbsp;The&amp;nbsp;operations&amp;nbsp;are&lt;br&gt;
managing&amp;nbsp;the&amp;nbsp;interactions&amp;nbsp;between&amp;nbsp;the&amp;nbsp;objects:&amp;nbsp;when&amp;nbsp;one&lt;br&gt;
participant&amp;nbsp;sends&amp;nbsp;a&amp;nbsp;message,&amp;nbsp;the&amp;nbsp;message&amp;nbsp;is&amp;nbsp;sent&amp;nbsp;to&amp;nbsp;the&amp;nbsp;other&amp;nbsp;participants.&lt;br&gt;
-&amp;nbsp;Participant(Collegue)&amp;nbsp;-&amp;nbsp;defines&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;the&amp;nbsp;participants.&lt;br&gt;
-&amp;nbsp;HumanParticipant,&amp;nbsp;Bot&amp;nbsp;(ConcreteCollegue)&amp;nbsp;-&amp;nbsp;implements&amp;nbsp;participants;&lt;br&gt;
the&amp;nbsp;participant&amp;nbsp;can&amp;nbsp;be&amp;nbsp;a&amp;nbsp;human&amp;nbsp;or&amp;nbsp;a&amp;nbsp;bot,&lt;br&gt;
each&amp;nbsp;one&amp;nbsp;having&amp;nbsp;a&amp;nbsp;distinct&amp;nbsp;implementation&amp;nbsp;but&amp;nbsp;implementing&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;interface.&amp;nbsp;Each&amp;nbsp;participant&amp;nbsp;will&amp;nbsp;keep&amp;nbsp;only&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;mediator.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Memento&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example&amp;nbsp;.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simple&amp;nbsp;and&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
Uml&amp;nbsp;Diagram&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='600'&amp;nbsp;height='110'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/memento-design-pattern-implementation-uml-class-diagram.png'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;memento&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&amp;nbsp;provides&lt;br&gt;
the&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;restore&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;its&amp;nbsp;previous&amp;nbsp;state&amp;nbsp;(undo&amp;nbsp;via&amp;nbsp;rollback).&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;memento&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;with&amp;nbsp;three&amp;nbsp;objects:&lt;br&gt;
the&amp;nbsp;originator,&amp;nbsp;a&amp;nbsp;caretaker&amp;nbsp;and&amp;nbsp;a&amp;nbsp;memento.&lt;br&gt;
The&amp;nbsp;originator&amp;nbsp;is&amp;nbsp;some&amp;nbsp;object&amp;nbsp;that&amp;nbsp;has&amp;nbsp;an&amp;nbsp;internal&amp;nbsp;state.&amp;nbsp;The&amp;nbsp;caretaker&lt;br&gt;
is&amp;nbsp;going&amp;nbsp;to&amp;nbsp;do&amp;nbsp;something&amp;nbsp;to&amp;nbsp;the&amp;nbsp;originator,&amp;nbsp;but&amp;nbsp;wants&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&lt;br&gt;
to&amp;nbsp;undo&amp;nbsp;the&amp;nbsp;change.&amp;nbsp;The&amp;nbsp;caretaker&amp;nbsp;first&amp;nbsp;asks&amp;nbsp;the&amp;nbsp;originator&amp;nbsp;for&amp;nbsp;a&lt;br&gt;
memento&amp;nbsp;object.&amp;nbsp;Then&amp;nbsp;it&amp;nbsp;does&amp;nbsp;whatever&amp;nbsp;operation&amp;nbsp;(or&amp;nbsp;sequence&amp;nbsp;of&lt;br&gt;
operations)&amp;nbsp;it&amp;nbsp;was&amp;nbsp;going&amp;nbsp;to&amp;nbsp;do.&amp;nbsp;To&amp;nbsp;roll&amp;nbsp;back&amp;nbsp;to&amp;nbsp;the&amp;nbsp;state&amp;nbsp;before&amp;nbsp;the&lt;br&gt;
operations,&amp;nbsp;it&amp;nbsp;returns&amp;nbsp;the&amp;nbsp;memento&amp;nbsp;object&amp;nbsp;to&amp;nbsp;the&amp;nbsp;originator.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(simple):&lt;br&gt;
public&amp;nbsp;&amp;nbsp;class&amp;nbsp;Memento&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;state;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Memento(String&amp;nbsp;stateToSave)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;state&amp;nbsp;=&amp;nbsp;stateToSave;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getSavedState()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;state;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
class&amp;nbsp;TextEditor&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;state;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;The&amp;nbsp;class&amp;nbsp;could&amp;nbsp;also&amp;nbsp;contain&amp;nbsp;additional&amp;nbsp;data&amp;nbsp;that&amp;nbsp;is&amp;nbsp;not&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;state&amp;nbsp;saved&amp;nbsp;in&amp;nbsp;the&amp;nbsp;memento..&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;set(String&amp;nbsp;state)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Originator:&amp;nbsp;Setting&amp;nbsp;state&amp;nbsp;to&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;state);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.state&amp;nbsp;=&amp;nbsp;state;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Memento&amp;nbsp;saveToMemento()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Originator:&amp;nbsp;Saving&amp;nbsp;to&amp;nbsp;Memento.&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Memento(state);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;restoreFromMemento(Memento&amp;nbsp;memento)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;state&amp;nbsp;=&amp;nbsp;memento.getSavedState();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Originator:&amp;nbsp;State&amp;nbsp;after&amp;nbsp;restoring&amp;nbsp;from&amp;nbsp;Memento:&amp;nbsp;&amp;quot;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+&amp;nbsp;state);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Caretaker&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Memento&gt;&amp;nbsp;savedStates&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Memento&gt;();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TextEditor&amp;nbsp;originator&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TextEditor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;originator.set(&amp;quot;State1&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;originator.set(&amp;quot;State2&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;savedStates.add(originator.saveToMemento());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;originator.set(&amp;quot;State3&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;We&amp;nbsp;can&amp;nbsp;request&amp;nbsp;multiple&amp;nbsp;mementos,&amp;nbsp;and&amp;nbsp;choose&amp;nbsp;which&amp;nbsp;one&amp;nbsp;to&amp;nbsp;roll&amp;nbsp;back&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;savedStates.add(originator.saveToMemento());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;originator.set(&amp;quot;State4&amp;quot;);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;originator.restoreFromMemento(savedStates.get(1));&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Observer&amp;nbsp;pattern,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example.&lt;br&gt;
Is&amp;nbsp;java.util.Observable&amp;nbsp;thread&amp;nbsp;safe&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Very&amp;#160;USEFUL&amp;#160;pattern.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;nbsp;UML&amp;#160;diagram:&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='200'&amp;nbsp;alt='image'&amp;nbsp;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/500px-Observer.svg.png'/&gt;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Let's&amp;#160;assume&amp;#160;we&amp;#160;have&amp;#160;a&amp;#160;stock&amp;#160;system&amp;#160;which&amp;#160;provides&amp;#160;data&amp;#160;for&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;several&amp;#160;types&amp;#160;of&amp;#160;client.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;We&amp;#160;want&amp;#160;to&amp;#160;have&amp;#160;a&amp;#160;client&amp;#160;implemented&amp;#160;as&amp;#160;a&amp;#160;web&amp;#160;based&amp;#160;application&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;but&amp;#160;in&amp;#160;near&amp;#160;future&amp;#160;we&amp;#160;need&amp;#160;to&amp;#160;add&amp;#160;clients&amp;#160;for&amp;#160;mobile&amp;#160;devices,&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Palm&amp;#160;or&amp;#160;Pocket&amp;#160;PC,&amp;#160;or&amp;#160;to&amp;#160;have&amp;#160;a&amp;#160;system&amp;#160;to&amp;#160;notify&amp;#160;the&amp;#160;users&amp;#160;with&amp;#160;sms&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;alerts.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Now&amp;#160;it's&amp;#160;simple&amp;#160;to&amp;#160;see&amp;#160;what&amp;#160;we&amp;#160;need&amp;#160;from&amp;#160;the&amp;#160;observer&amp;#160;pattern:&amp;#160;we&amp;#160;need&amp;#160;to&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;separate&amp;#160;the&amp;#160;subject(stocks&amp;#160;server)&amp;#160;from&amp;#160;it's&amp;#160;observers(client&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;applications)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;in&amp;#160;such&amp;#160;a&amp;#160;way&amp;#160;that&amp;#160;adding&amp;#160;new&amp;#160;observer&amp;#160;will&amp;#160;be&amp;#160;transparent&amp;#160;for&amp;#160;the&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;server.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Below&amp;#160;is&amp;#160;an&amp;#160;example&amp;#160;written&amp;#160;in&amp;#160;Java&amp;#160;that&amp;#160;takes&amp;#160;keyboard&amp;#160;input&amp;#160;and&amp;#160;treats&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;nbsp;&amp;nbsp;each&amp;#160;input&amp;#160;line&amp;#160;as&amp;#160;an&amp;#160;event.&amp;#160;The&amp;#160;example&amp;#160;is&amp;#160;built&amp;#160;upon&amp;#160;the&amp;#160;library&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;classes&amp;#160;:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;___&amp;#160;&amp;#160;java.util.Observer&amp;#160;and&amp;#160;java.util.Observable&amp;#160;___&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;-&amp;#160;java.util.Observable&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;class&amp;#160;Observable&amp;nbsp;extends&amp;#160;Object&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Methods&amp;#160;:&amp;#160;addObserver(Observer&amp;#160;o),&amp;#160;clearChanged(),&amp;#160;countObservers(),&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;deleteObserver(Observer&amp;#160;o),&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;deleteObservers(),&amp;#160;hasChanged(),&amp;#160;notifyObservers(),&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;notifyObservers(Object&amp;#160;arg),&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;setChanged()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;This&amp;#160;class&amp;#160;represents&amp;#160;an&amp;#160;observable&amp;#160;object,&amp;#160;or&amp;#160;&amp;quot;data&amp;quot;&amp;#160;in&amp;#160;the&amp;#160;model-view&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;paradigm.&amp;#160;It&amp;#160;can&amp;#160;be&amp;#160;subclassed&amp;#160;to&amp;#160;represent&amp;#160;an&amp;#160;object&amp;#160;that&amp;#160;the&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;application&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;wants&amp;#160;to&amp;#160;have&amp;#160;observed.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;An&amp;#160;observable&amp;#160;object&amp;#160;can&amp;#160;have&amp;#160;one&amp;#160;or&amp;#160;more&amp;#160;observers.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;An&amp;#160;observer&amp;#160;may&amp;#160;be&amp;#160;any&amp;#160;object&amp;#160;that&amp;#160;implements&amp;#160;interface&amp;#160;Observer.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;After&amp;#160;an&amp;#160;observable&amp;#160;instance&amp;#160;changes,&amp;#160;an&amp;#160;application&amp;#160;calling&amp;#160;the&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Observable's&amp;#160;notifyObservers&amp;#160;method&amp;#160;causes&amp;#160;all&amp;#160;of&amp;#160;its&amp;#160;observers&amp;#160;to&amp;#160;be&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;notified&amp;#160;of&amp;#160;the&amp;#160;change&amp;#160;by&amp;#160;a&amp;#160;call&amp;#160;to&amp;#160;their&amp;#160;update&amp;#160;method.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;The&amp;#160;order&amp;#160;in&amp;#160;which&amp;#160;notifications&amp;#160;will&amp;#160;be&amp;#160;delivered&amp;#160;is&amp;#160;unspecified.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;The&amp;#160;default&amp;#160;implementation&amp;#160;provided&amp;#160;in&amp;#160;the&amp;#160;Observable&amp;#160;class&amp;#160;will&amp;#160;notify&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Observers&amp;#160;in&amp;#160;the&amp;#160;order&amp;#160;in&amp;#160;which&amp;#160;they&amp;#160;registered&amp;#160;interest,&amp;#160;but&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;subclasses&amp;#160;may&amp;#160;change&amp;#160;this&amp;#160;order,&amp;#160;use&amp;#160;no&amp;#160;guaranteed&amp;#160;order,&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;deliver&amp;#160;notifications&amp;#160;on&amp;#160;separate&amp;#160;threads,&amp;#160;or&amp;#160;may&amp;#160;guarantee&amp;#160;that&amp;#160;their&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;subclass&amp;#160;follows&amp;#160;this&amp;#160;order,&amp;#160;as&amp;#160;they&amp;#160;choose.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Note&amp;#160;that&amp;#160;this&amp;#160;notification&amp;#160;mechanism&amp;#160;is&amp;#160;has&amp;#160;nothing&amp;#160;to&amp;#160;do&amp;#160;with&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;threads&amp;#160;and&amp;#160;is&amp;#160;completely&amp;#160;separate&amp;#160;from&amp;#160;the&amp;#160;wait&amp;#160;and&amp;#160;notify&amp;#160;mechanism&amp;#160;of&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;class&amp;#160;Object.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;When&amp;#160;an&amp;#160;observable&amp;#160;object&amp;#160;is&amp;#160;newly&amp;#160;created,&amp;#160;its&amp;#160;set&amp;#160;of&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;observers&amp;#160;is&amp;#160;empty.&amp;#160;Two&amp;#160;observers&amp;#160;are&amp;#160;considered&amp;#160;the&amp;#160;same&amp;#160;if&amp;#160;and&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;only&amp;#160;if&amp;#160;the&amp;#160;equals&amp;#160;method&amp;#160;returns&amp;#160;true&amp;#160;for&amp;#160;them.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Since:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;JDK1.0&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;-&amp;#160;java.util.Observer&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;interface&amp;#160;Observer&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;A&amp;#160;class&amp;#160;can&amp;#160;implement&amp;#160;the&amp;#160;Observer&amp;#160;interface&amp;#160;when&amp;#160;it&amp;#160;wants&amp;#160;to&amp;#160;be&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;informed&amp;#160;of&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;changes&amp;#160;in&amp;#160;observable&amp;#160;objects.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Since:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;JDK1.0&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Methods&amp;#160;:&amp;#160;update(Observable&amp;#160;o,&amp;#160;Object&amp;#160;arg)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;====&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Example&amp;#160;(simple):&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.util.Observable;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//Observable&amp;#160;is&amp;#160;here&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.io.BufferedReader;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.io.IOException;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.io.InputStreamReader;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;class&amp;#160;EventSource&amp;#160;extends&amp;#160;Observable&amp;#160;implements&amp;#160;Runnable&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;@Override&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;void&amp;#160;run()&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;try&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;final&amp;#160;InputStreamReader&amp;#160;isr&amp;#160;=&amp;#160;new&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;InputStreamReader(System.in);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;final&amp;#160;BufferedReader&amp;#160;br&amp;#160;=&amp;#160;new&amp;#160;BufferedReader(isr);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;while&amp;#160;(true)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;String&amp;#160;response&amp;#160;=&amp;#160;br.readLine();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;if(response.equals(&amp;quot;exit&amp;quot;)){&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;break;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;setChanged();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;notifyObservers(response);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;catch&amp;#160;(IOException&amp;#160;e)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;e.printStackTrace();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;==&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.util.Observable;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;import&amp;#160;java.util.Observer;&amp;#160;&amp;#160;/*&amp;#160;this&amp;#160;is&amp;#160;Event&amp;#160;Handler&amp;#160;*/&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;class&amp;#160;ResponseHandler&amp;#160;implements&amp;#160;Observer&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;String&amp;#160;header;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;ResponseHandler(String&amp;#160;responseHeader){&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;this.header&amp;#160;=&amp;#160;responseHeader;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;private&amp;#160;String&amp;#160;resp;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;void&amp;#160;update(Observable&amp;#160;obj,&amp;#160;Object&amp;#160;arg)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;if&amp;#160;(arg&amp;#160;instanceof&amp;#160;String)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;resp&amp;#160;=&amp;#160;(String)&amp;#160;arg;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;System.out.println(&amp;quot;\n&amp;quot;+header&amp;#160;+&amp;quot;&amp;#160;:&amp;#160;Received&amp;#160;Response:&amp;#160;&amp;quot;&amp;#160;+&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;resp&amp;#160;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;==&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;public&amp;#160;static&amp;#160;void&amp;#160;main(String[]&amp;#160;args)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;System.out.println(&amp;quot;Enter&amp;#160;Text&amp;#160;&gt;&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;create&amp;#160;an&amp;#160;event&amp;#160;source&amp;#160;-&amp;#160;reads&amp;#160;from&amp;#160;stdin&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;final&amp;#160;EventSource&amp;#160;eventSource&amp;#160;=&amp;#160;new&amp;#160;EventSource();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;create&amp;#160;an&amp;#160;observer&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;final&amp;#160;ResponseHandler&amp;#160;responseHandler&amp;#160;=&amp;#160;new&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;ResponseHandler(&amp;quot;handler1&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;final&amp;#160;ResponseHandler&amp;#160;responseHandler2&amp;#160;=&amp;#160;new&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;ResponseHandler(&amp;quot;handler2&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;subscribe&amp;#160;the&amp;#160;observer&amp;#160;to&amp;#160;the&amp;#160;event&amp;#160;source&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;eventSource.addObserver(responseHandler);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;eventSource.addObserver(responseHandler2);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//&amp;#160;starts&amp;#160;the&amp;#160;event&amp;#160;thread&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Thread&amp;#160;thread&amp;#160;=&amp;#160;new&amp;#160;Thread(eventSource);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;thread.start();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;==&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Thread&amp;#160;safe:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;From&amp;#160;the&amp;#160;source&amp;#160;code&amp;#160;(I&amp;#160;have&amp;#160;Java&amp;#160;5&amp;#160;source,&amp;#160;but&amp;#160;it&amp;#160;should&amp;#160;be&amp;#160;the&amp;#160;same&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;for&amp;#160;Java&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;6&amp;#160;and&amp;#160;7)&amp;#160;it&amp;#160;seems&amp;#160;like&amp;#160;you&amp;#160;only&amp;#160;have&amp;#160;synchronization&amp;#160;on&amp;#160;the&amp;#160;Observable&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;itself.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;From&amp;#160;the&amp;#160;notifyObservers(...)&amp;#160;method&amp;#160;(in&amp;#160;Observable):&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;synchronized&amp;#160;(this)&amp;#160;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;//the&amp;#160;observers&amp;#160;are&amp;#160;notified&amp;#160;in&amp;#160;this&amp;#160;block,&amp;#160;with&amp;#160;no&amp;#160;additional&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;synchronization&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Thus&amp;#160;if&amp;#160;the&amp;#160;Observer&amp;#160;doesn't&amp;#160;change&amp;#160;any&amp;#160;shared&amp;#160;data&amp;#160;it&amp;#160;should&amp;#160;be&amp;#160;fine.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;If&amp;#160;it&amp;#160;does&amp;#160;-&amp;#160;you&amp;#160;could&amp;#160;have&amp;#160;multiple&amp;#160;calls&amp;#160;to&amp;#160;update(Observable,&amp;#160;Object)&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;with&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;different&amp;#160;Observables&amp;#160;-&amp;#160;you'd&amp;#160;need&amp;#160;to&amp;#160;add&amp;#160;synchronization&amp;#160;on&amp;#160;that&amp;#160;shared&amp;#160;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;data&amp;#160;yourself.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;State&amp;nbsp;pattern,&amp;nbsp;Describe.&amp;nbsp;&lt;br&gt;
Provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;

&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Url&amp;nbsp;diagram:&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='400'&amp;nbsp;height='200'&amp;nbsp;alt='image'&amp;nbsp;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/StatePattern.png'/&gt;&#xD;&lt;br&gt;
&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;state&amp;nbsp;design&amp;nbsp;pattern,&amp;nbsp;it&amp;nbsp;can&amp;nbsp;change&amp;nbsp;its&amp;nbsp;behaviour&amp;nbsp;by&amp;nbsp;switching&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;different&amp;nbsp;operations&amp;nbsp;and&amp;nbsp;we&amp;nbsp;achieved&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this&amp;nbsp;pattern&amp;nbsp;from&amp;nbsp;an&amp;nbsp;object&amp;nbsp;variable&amp;nbsp;changing&amp;nbsp;its&amp;nbsp;subclass,&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;within&amp;nbsp;a&amp;nbsp;hierarchy.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Allow&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;its&amp;nbsp;behaviour&amp;nbsp;when&amp;nbsp;its&amp;nbsp;internal&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;state&amp;nbsp;changes.&amp;nbsp;The&amp;nbsp;object&amp;nbsp;will&amp;nbsp;appear&amp;nbsp;to&amp;nbsp;change&amp;nbsp;its&amp;nbsp;class.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;(from&amp;nbsp;codeproject.com):&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;State&amp;nbsp;pattern&amp;nbsp;has&amp;nbsp;some&amp;nbsp;Mediator&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;aspects&amp;nbsp;to&amp;nbsp;it.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;To&amp;nbsp;understand&amp;nbsp;more&amp;nbsp;about&amp;nbsp;state&amp;nbsp;design&amp;nbsp;patterns,&amp;nbsp;let's&amp;nbsp;look&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;in&amp;nbsp;more&amp;nbsp;detail&amp;nbsp;of&amp;nbsp;an&amp;nbsp;example&amp;nbsp;that&amp;nbsp;has&amp;nbsp;been&amp;nbsp;mentioned&amp;nbsp;in&amp;nbsp;many&amp;nbsp;books&amp;nbsp;and&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;many&amp;nbsp;blogs&amp;nbsp;but&amp;nbsp;I&amp;nbsp;myself&amp;nbsp;could&amp;nbsp;not&amp;nbsp;find&amp;nbsp;its&amp;nbsp;actual&amp;nbsp;and&amp;nbsp;true&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation.&amp;nbsp;Assume&amp;nbsp;you&amp;nbsp;have&amp;nbsp;a&amp;nbsp;sales&amp;nbsp;order&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;in&amp;nbsp;several&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;different&amp;nbsp;states,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;&amp;quot;NewOrder,&amp;quot;&amp;nbsp;&amp;quot;Registered,&amp;quot;&amp;nbsp;&amp;quot;Granted,&amp;quot;&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;Shipped,&amp;quot;&amp;nbsp;&amp;quot;Invoiced,&amp;quot;&amp;nbsp;and&amp;nbsp;&amp;quot;Cancelled.&amp;quot;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;There&amp;nbsp;are&amp;nbsp;strict&amp;nbsp;rules&amp;nbsp;concerning&amp;nbsp;which&amp;nbsp;states&amp;nbsp;the&amp;nbsp;order&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;can&amp;nbsp;&amp;quot;go,&amp;quot;&amp;nbsp;and&amp;nbsp;from&amp;nbsp;which&amp;nbsp;states&amp;nbsp;it&amp;nbsp;can&amp;nbsp;&amp;quot;come.&amp;quot;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;my&amp;nbsp;example,&amp;nbsp;for&amp;nbsp;instance,&amp;nbsp;the&amp;nbsp;states&amp;nbsp;not&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;go&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;directly&amp;nbsp;are&amp;nbsp;from&amp;nbsp;Registered&amp;nbsp;to&amp;nbsp;Shipped.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This&amp;nbsp;example&amp;nbsp;is&amp;nbsp;from&amp;nbsp;Applying&amp;nbsp;Domain-Driven&amp;nbsp;Design&amp;nbsp;and&amp;nbsp;Patterns:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;With&amp;nbsp;examples&amp;nbsp;in&amp;nbsp;C#&amp;nbsp;and&amp;nbsp;.NET&amp;nbsp;[Addison-Wesley&amp;nbsp;Professional,&amp;nbsp;ISBN:&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0321268202]&amp;nbsp;by&amp;nbsp;Jimmy&amp;nbsp;Nilsson.&amp;nbsp;However&amp;nbsp;there&amp;nbsp;was&amp;nbsp;no&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;code&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;it.&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;IOrderState{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;NewOrderPlaced()&amp;nbsp;throws&amp;nbsp;Exception;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;Register()&amp;nbsp;throws&amp;nbsp;Exception;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;Dispatch()&amp;nbsp;throws&amp;nbsp;Exception;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;Approve()&amp;nbsp;throws&amp;nbsp;Exception;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;context(in&amp;nbsp;out&amp;nbsp;case&amp;nbsp;OrderState)&amp;nbsp;class&amp;nbsp;has&amp;nbsp;a&amp;nbsp;state&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;it&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instantiates&amp;nbsp;in&amp;nbsp;an&amp;nbsp;initial&amp;nbsp;state&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;OrderState&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;IOrderState&amp;nbsp;_CurrentState;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;OrderState(){&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;NewOrder(this);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Dispatch()&amp;nbsp;throws&amp;nbsp;Exception{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_CurrentState.Dispatch();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Register()&amp;nbsp;throws&amp;nbsp;Exception{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_CurrentState.Register();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Approve()&amp;nbsp;throws&amp;nbsp;Exception{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_CurrentState.Approve();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;NewOrder&amp;nbsp;implements&amp;nbsp;IOrderState&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;&amp;nbsp;OrderState&amp;nbsp;_Parent;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;NewOrder(OrderState&amp;nbsp;OrderState)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent&amp;nbsp;=&amp;nbsp;OrderState;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.NewOrderPlaced();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;IsDispatched;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isIsDispatched()&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;NewOrderPlaced()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;NewOrderPlaced&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Dispatch()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dispatched(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Register()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Registered(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Approve()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Approved(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Registered&amp;nbsp;implements&amp;nbsp;IOrderState&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;&amp;nbsp;OrderState&amp;nbsp;_Parent;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;NewOrderPlaced()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;placed&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Registered(OrderState&amp;nbsp;OrderState)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent&amp;nbsp;=&amp;nbsp;OrderState;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.Register();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Dispatch()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;not&amp;nbsp;been&amp;nbsp;registered&amp;nbsp;yet&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Register()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Registered&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Approve()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Approved(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Approved&amp;nbsp;implements&amp;nbsp;IOrderState&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;&amp;nbsp;OrderState&amp;nbsp;_Parent;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Approved(OrderState&amp;nbsp;OrderState)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent&amp;nbsp;=&amp;nbsp;OrderState;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.Approve();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;NewOrderPlaced()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;placed&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Dispatch()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Dispatched(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Register()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;registered&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Approve()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Approved&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Dispatched&amp;nbsp;implements&amp;nbsp;IOrderState&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;&amp;nbsp;OrderState&amp;nbsp;_Parent;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;NewOrderPlaced()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;placed&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Dispatched(OrderState&amp;nbsp;OrderState)&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent&amp;nbsp;=&amp;nbsp;OrderState;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.Dispatch();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Dispatch()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;dispatched&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Register()&amp;nbsp;throws&amp;nbsp;Exception&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(&amp;quot;OrderState&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;registered&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;Approve()&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_Parent._CurrentState&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Approved(_Parent);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Using&amp;nbsp;State&amp;nbsp;pattern&amp;quot;);&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;OrderState&amp;nbsp;order&amp;nbsp;=&amp;nbsp;new&amp;nbsp;OrderState();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;order.Register();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;order.Approve();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;order.Dispatch();&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Strategy&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example.&amp;nbsp;&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;State&amp;nbsp;and&amp;nbsp;Strategy&amp;nbsp;patterns&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simple&amp;nbsp;and&amp;nbsp;useful&amp;nbsp;pattern&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='260'&amp;nbsp;height='150'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Strategy_Pattern_in_UML.png'/&gt;&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;strategy&amp;nbsp;pattern&amp;nbsp;(also&amp;nbsp;known&lt;br&gt;
as&amp;nbsp;the&amp;nbsp;policy&amp;nbsp;pattern)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern,&amp;nbsp;whereby&amp;nbsp;an&lt;br&gt;
algorithm's&amp;nbsp;behaviour&amp;nbsp;can&amp;nbsp;be&amp;nbsp;selected&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
Formally&amp;nbsp;speaking,&amp;nbsp;the&amp;nbsp;strategy&amp;nbsp;pattern&amp;nbsp;defines&amp;nbsp;a&amp;nbsp;family&amp;nbsp;of&amp;nbsp;algorithms,&lt;br&gt;
encapsulates&amp;nbsp;each&amp;nbsp;one,&amp;nbsp;and&amp;nbsp;makes&amp;nbsp;them&amp;nbsp;interchangeable.&lt;br&gt;
Strategy&amp;nbsp;lets&amp;nbsp;the&amp;nbsp;algorithm&amp;nbsp;vary&amp;nbsp;independently&amp;nbsp;from&amp;nbsp;clients&amp;nbsp;that&amp;nbsp;use&amp;nbsp;it.&lt;br&gt;
Strategy&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;patterns&amp;nbsp;included&amp;nbsp;in&amp;nbsp;the&amp;nbsp;influential&amp;nbsp;book&amp;nbsp;&amp;quot;Design&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Patterns&amp;quot;&lt;br&gt;
by&amp;nbsp;Gamma&amp;nbsp;et&amp;nbsp;al.&amp;nbsp;that&amp;nbsp;popularized&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;using&amp;nbsp;patterns&amp;nbsp;in&amp;nbsp;software&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;design.&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;instance,&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;performs&amp;nbsp;validation&amp;nbsp;on&amp;nbsp;incoming&amp;nbsp;data&lt;br&gt;
may&amp;nbsp;use&amp;nbsp;a&amp;nbsp;strategy&amp;nbsp;pattern&amp;nbsp;to&amp;nbsp;select&amp;nbsp;a&amp;nbsp;validation&amp;nbsp;algorithm&amp;nbsp;based&lt;br&gt;
on&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;data,&amp;nbsp;the&amp;nbsp;source&amp;nbsp;of&amp;nbsp;the&amp;nbsp;data,&amp;nbsp;user&amp;nbsp;choice,&amp;nbsp;or&amp;nbsp;&lt;br&gt;
other&amp;nbsp;discriminating&amp;nbsp;factors.&amp;nbsp;These&amp;nbsp;factors&amp;nbsp;are&amp;nbsp;not&amp;nbsp;known&amp;nbsp;for&amp;nbsp;each&amp;nbsp;case&amp;nbsp;&lt;br&gt;
until&amp;nbsp;run-time,&amp;nbsp;and&amp;nbsp;may&amp;nbsp;require&amp;nbsp;radically&amp;nbsp;different&amp;nbsp;validation&amp;nbsp;&lt;br&gt;
to&amp;nbsp;be&amp;nbsp;performed.&amp;nbsp;The&amp;nbsp;validation&amp;nbsp;strategies,&amp;nbsp;encapsulated&amp;nbsp;separately&amp;nbsp;&lt;br&gt;
from&amp;nbsp;the&amp;nbsp;validating&amp;nbsp;object,&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;by&amp;nbsp;other&amp;nbsp;validating&amp;nbsp;&lt;br&gt;
objects&amp;nbsp;in&amp;nbsp;different&amp;nbsp;areas&amp;nbsp;of&amp;nbsp;the&amp;nbsp;system&amp;nbsp;&lt;br&gt;
(or&amp;nbsp;even&amp;nbsp;different&amp;nbsp;systems)&amp;nbsp;without&amp;nbsp;code&amp;nbsp;duplication.&lt;br&gt;
&lt;br&gt;
Simple&amp;nbsp;example&amp;nbsp;(from&amp;nbsp;wiki):&lt;br&gt;
/**&amp;nbsp;The&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;implement&amp;nbsp;a&amp;nbsp;concrete&amp;nbsp;strategy&amp;nbsp;should&amp;nbsp;implement&amp;nbsp;this.&lt;br&gt;
*&amp;nbsp;The&amp;nbsp;Context&amp;nbsp;class&amp;nbsp;uses&amp;nbsp;this&amp;nbsp;to&amp;nbsp;call&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;strategy.&amp;nbsp;*/&lt;br&gt;
interface&amp;nbsp;Strategy&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;execute(int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b);&amp;nbsp;&lt;br&gt;
};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;Implements&amp;nbsp;the&amp;nbsp;algorithm&amp;nbsp;using&amp;nbsp;the&amp;nbsp;strategy&amp;nbsp;interface&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;Add&amp;nbsp;implements&amp;nbsp;Strategy&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;execute(int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Called&amp;nbsp;Add's&amp;nbsp;execute()&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a&amp;nbsp;+&amp;nbsp;b;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Do&amp;nbsp;an&amp;nbsp;addition&amp;nbsp;with&amp;nbsp;a&amp;nbsp;and&amp;nbsp;b&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Subtract&amp;nbsp;implements&amp;nbsp;Strategy&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;execute(int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Called&amp;nbsp;Subtract's&amp;nbsp;execute()&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a&amp;nbsp;-&amp;nbsp;b;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Do&amp;nbsp;a&amp;nbsp;subtraction&amp;nbsp;with&amp;nbsp;a&amp;nbsp;and&amp;nbsp;b&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Multiply&amp;nbsp;implements&amp;nbsp;Strategy&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;execute(int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Called&amp;nbsp;Multiply's&amp;nbsp;execute()&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a&amp;nbsp;*&amp;nbsp;b;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Do&amp;nbsp;a&amp;nbsp;multiplication&amp;nbsp;with&amp;nbsp;a&amp;nbsp;and&amp;nbsp;b&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Configured&amp;nbsp;with&amp;nbsp;a&amp;nbsp;ConcreteStrategy&amp;nbsp;object&amp;nbsp;and&amp;nbsp;maintains&lt;br&gt;
//&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&amp;nbsp;Strategy&amp;nbsp;object&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Context&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Strategy&amp;nbsp;strategy;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Context(Strategy&amp;nbsp;strategy)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.strategy&amp;nbsp;=&amp;nbsp;strategy;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;executeStrategy(int&amp;nbsp;a,&amp;nbsp;int&amp;nbsp;b)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.strategy.execute(a,&amp;nbsp;b);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;Tests&amp;nbsp;the&amp;nbsp;pattern&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;StrategyExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Context&amp;nbsp;context;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Three&amp;nbsp;contexts&amp;nbsp;following&amp;nbsp;different&amp;nbsp;strategies&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Context(new&amp;nbsp;Add());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;resultA&amp;nbsp;=&amp;nbsp;context.executeStrategy(3,4);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Context(new&amp;nbsp;Subtract());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;resultB&amp;nbsp;=&amp;nbsp;context.executeStrategy(3,4);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Context(new&amp;nbsp;Multiply());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;resultC&amp;nbsp;=&amp;nbsp;context.executeStrategy(3,4);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Result&amp;nbsp;A&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;resultA&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Result&amp;nbsp;B&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;resultB&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Result&amp;nbsp;C&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;resultC&amp;nbsp;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
};&lt;br&gt;
===&lt;br&gt;
Difference&amp;nbsp;between&amp;nbsp;State&amp;nbsp;and&amp;nbsp;Strategy&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
1)Stackoverflow&lt;br&gt;
Honestly,&amp;nbsp;the&amp;nbsp;two&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;pretty&amp;nbsp;similar&amp;nbsp;in&amp;nbsp;practice,&amp;nbsp;&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;defining&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;them&amp;nbsp;tends&amp;nbsp;to&amp;nbsp;vary&lt;br&gt;
depending&amp;nbsp;on&amp;nbsp;who&amp;nbsp;you&amp;nbsp;ask.&amp;nbsp;Some&amp;nbsp;popular&amp;nbsp;choices&amp;nbsp;are:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;States&amp;nbsp;store&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;context&amp;nbsp;object&amp;nbsp;that&lt;br&gt;
contains&amp;nbsp;them.&amp;nbsp;Strategies&amp;nbsp;do&amp;nbsp;not.&lt;br&gt;
-&amp;nbsp;States&amp;nbsp;are&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;replace&amp;nbsp;themselves&amp;nbsp;(IE:&amp;nbsp;to&amp;nbsp;change&lt;br&gt;
the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;the&amp;nbsp;context&amp;nbsp;object&amp;nbsp;to&amp;nbsp;something&amp;nbsp;else),&amp;nbsp;&lt;br&gt;
while&amp;nbsp;Strategies&amp;nbsp;are&amp;nbsp;not.&lt;br&gt;
-&amp;nbsp;Strategies&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;context&amp;nbsp;object&amp;nbsp;as&amp;nbsp;&lt;br&gt;
parameters,&amp;nbsp;while&amp;nbsp;States&amp;nbsp;are&amp;nbsp;created&amp;nbsp;by&amp;nbsp;the&amp;nbsp;context&amp;nbsp;&lt;br&gt;
object&amp;nbsp;itself.&lt;br&gt;
-&amp;nbsp;Strategies&amp;nbsp;only&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;single,&amp;nbsp;specific&amp;nbsp;task,&amp;nbsp;&lt;br&gt;
while&amp;nbsp;States&amp;nbsp;provide&amp;nbsp;the&amp;nbsp;underlying&amp;nbsp;implementation&amp;nbsp;&lt;br&gt;
for&amp;nbsp;everything&amp;nbsp;(or&amp;nbsp;most&amp;nbsp;everything)&amp;nbsp;the&amp;nbsp;context&amp;nbsp;object&amp;nbsp;does.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Strategy&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;really&amp;nbsp;about&amp;nbsp;having&amp;nbsp;a&amp;nbsp;different&amp;nbsp;implementation&amp;nbsp;&lt;br&gt;
that&amp;nbsp;accomplishes&amp;nbsp;(basically)&amp;nbsp;the&amp;nbsp;same&amp;nbsp;thing,&amp;nbsp;&lt;br&gt;
so&amp;nbsp;that&amp;nbsp;one&amp;nbsp;implementation&amp;nbsp;can&amp;nbsp;replace&amp;nbsp;the&amp;nbsp;other&amp;nbsp;as&amp;nbsp;the&amp;nbsp;&lt;br&gt;
strategy&amp;nbsp;requires.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;you&amp;nbsp;might&amp;nbsp;have&amp;nbsp;different&amp;nbsp;&lt;br&gt;
sorting&amp;nbsp;algorithms&amp;nbsp;in&amp;nbsp;a&amp;nbsp;strategy&amp;nbsp;pattern.&amp;nbsp;The&amp;nbsp;callers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;&lt;br&gt;
object&amp;nbsp;does&amp;nbsp;not&amp;nbsp;change&amp;nbsp;based&amp;nbsp;on&amp;nbsp;which&amp;nbsp;strategy&amp;nbsp;is&amp;nbsp;being&amp;nbsp;&lt;br&gt;
employed,&amp;nbsp;but&amp;nbsp;regardless&amp;nbsp;of&amp;nbsp;strategy&amp;nbsp;the&amp;nbsp;goal&amp;nbsp;is&amp;nbsp;the&amp;nbsp;same&amp;nbsp;(sort&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collection).&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;State&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;about&amp;nbsp;doing&amp;nbsp;different&amp;nbsp;things&amp;nbsp;based&amp;nbsp;on&amp;nbsp;&lt;br&gt;
the&amp;nbsp;state,&amp;nbsp;while&amp;nbsp;leaving&amp;nbsp;the&amp;nbsp;caller&amp;nbsp;releaved&amp;nbsp;from&amp;nbsp;the&amp;nbsp;burden&amp;nbsp;&lt;br&gt;
of&amp;nbsp;accommodating&amp;nbsp;every&amp;nbsp;possible&amp;nbsp;state.&amp;nbsp;So&amp;nbsp;for&amp;nbsp;example&amp;nbsp;you&amp;nbsp;&lt;br&gt;
might&amp;nbsp;have&amp;nbsp;a&amp;nbsp;getStatus()&amp;nbsp;method&amp;nbsp;that&amp;nbsp;will&amp;nbsp;return&amp;nbsp;different&amp;nbsp;&lt;br&gt;
statuses&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;state&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;caller&amp;nbsp;&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;method&amp;nbsp;doesn't&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;coded&amp;nbsp;differently&amp;nbsp;to&amp;nbsp;&lt;br&gt;
account&amp;nbsp;for&amp;nbsp;each&amp;nbsp;potential&amp;nbsp;state.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
2)Codeproject&amp;nbsp;&lt;br&gt;
Strategy&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;the&amp;nbsp;State&amp;nbsp;Design&amp;nbsp;Pattern&amp;nbsp;from&amp;nbsp;an&amp;nbsp;architectural&lt;br&gt;
point&amp;nbsp;of&amp;nbsp;view&amp;nbsp;but&amp;nbsp;the&amp;nbsp;intent&amp;nbsp;is&amp;nbsp;entirely&amp;nbsp;different.&amp;nbsp;Unlike&amp;nbsp;the&amp;nbsp;State&amp;nbsp;pattern,&lt;br&gt;
the&amp;nbsp;Algorithm&amp;nbsp;class&amp;nbsp;doesn&amp;#8217;t&amp;nbsp;manage&amp;nbsp;state,&amp;nbsp;but&amp;nbsp;represents&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;&lt;br&gt;
that&amp;nbsp;uses&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;IStrategy&amp;nbsp;implementations.&amp;nbsp;The&amp;nbsp;IStrategy&amp;nbsp;&lt;br&gt;
implementation&amp;nbsp;isn&amp;#8217;t&amp;nbsp;managed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;Algorithm&amp;nbsp;class,&amp;nbsp;but&amp;nbsp;assigned&amp;nbsp;&lt;br&gt;
by&amp;nbsp;the&amp;nbsp;client&amp;nbsp;whereas&amp;nbsp;a&amp;nbsp;state&amp;nbsp;usually&amp;nbsp;selects&amp;nbsp;the&amp;nbsp;next&amp;nbsp;state&amp;nbsp;of&amp;nbsp;its&amp;nbsp;context.&amp;nbsp;&lt;br&gt;
A&amp;nbsp;state&amp;nbsp;tends&amp;nbsp;to&amp;nbsp;have&amp;nbsp;lots&amp;nbsp;of&amp;nbsp;unrelated&amp;nbsp;methods,&amp;nbsp;so&amp;nbsp;there&amp;nbsp;is&amp;nbsp;little&amp;nbsp;&lt;br&gt;
cohesion&amp;nbsp;between&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;a&amp;nbsp;state.&amp;nbsp;For&amp;nbsp;more&amp;nbsp;details,&amp;nbsp;&lt;br&gt;
please&amp;nbsp;read&amp;nbsp;my&amp;nbsp;post&amp;nbsp;on&amp;nbsp;Strategy&amp;nbsp;Design&amp;nbsp;Pattern.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:9" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Template&amp;nbsp;Method&amp;nbsp;pattern,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simple&amp;nbsp;and&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;=)&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='400'&amp;nbsp;height='270'&amp;nbsp;alt='image'&amp;nbsp;&#xD;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/template_method_uml.gif'/&gt;&#xD;&lt;br&gt;
&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If&amp;nbsp;we&amp;nbsp;take&amp;nbsp;a&amp;nbsp;look&amp;nbsp;at&amp;nbsp;the&amp;nbsp;dictionary&amp;nbsp;definition&amp;nbsp;of&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;template&amp;nbsp;we&amp;nbsp;can&amp;nbsp;see&amp;nbsp;that&amp;nbsp;a&amp;nbsp;template&amp;nbsp;is&amp;nbsp;a&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;preset&amp;nbsp;format,&amp;nbsp;used&amp;nbsp;as&amp;nbsp;a&amp;nbsp;starting&amp;nbsp;point&amp;nbsp;for&amp;nbsp;a&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;particular&amp;nbsp;application&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;format&amp;nbsp;does&amp;nbsp;not&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;recreated&amp;nbsp;each&amp;nbsp;time&amp;nbsp;it&amp;nbsp;is&amp;nbsp;used.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;On&amp;nbsp;the&amp;nbsp;same&amp;nbsp;idea&amp;nbsp;is&amp;nbsp;the&amp;nbsp;template&amp;nbsp;method&amp;nbsp;is&amp;nbsp;based.&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;template&amp;nbsp;method&amp;nbsp;defines&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;in&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;base&amp;nbsp;class&amp;nbsp;using&amp;nbsp;abstract&amp;nbsp;operations&amp;nbsp;that&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;subclasses&amp;nbsp;override&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;concrete&amp;nbsp;behavior.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!!!!!&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This&amp;nbsp;use&amp;nbsp;of&amp;nbsp;&amp;quot;template&amp;quot;&amp;nbsp;is&amp;nbsp;unrelated&amp;nbsp;to&amp;nbsp;C++&amp;nbsp;templates.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!!!&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Intent&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;Define&amp;nbsp;the&amp;nbsp;skeleton&amp;nbsp;of&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;in&amp;nbsp;an&amp;nbsp;operation,&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;deferring&amp;nbsp;some&amp;nbsp;steps&amp;nbsp;to&amp;nbsp;subclasses.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;Template&amp;nbsp;Method&amp;nbsp;lets&amp;nbsp;subclasses&amp;nbsp;redefine&amp;nbsp;certain&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;steps&amp;nbsp;of&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;without&amp;nbsp;letting&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;them&amp;nbsp;to&amp;nbsp;change&amp;nbsp;the&amp;nbsp;algorithm's&amp;nbsp;structure.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Usage&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;template&amp;nbsp;method&amp;nbsp;is&amp;nbsp;used&amp;nbsp;in&amp;nbsp;frameworks,&amp;nbsp;where&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;each&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;invariant&amp;nbsp;parts&amp;nbsp;of&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;domain's&amp;nbsp;architecture,&amp;nbsp;leaving&amp;nbsp;&amp;quot;placeholders&amp;quot;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;customisation&amp;nbsp;options.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;for&amp;nbsp;inversion&amp;nbsp;of&amp;nbsp;control,&amp;nbsp;also&amp;nbsp;called&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;Hollywood&amp;nbsp;principle.&amp;nbsp;Reasons&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&amp;nbsp;template&amp;nbsp;method&amp;nbsp;are&amp;nbsp;to:[4]&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Let&amp;nbsp;subclasses&amp;nbsp;implement&amp;nbsp;(through&amp;nbsp;method&amp;nbsp;overriding)&amp;nbsp;behavior&amp;nbsp;that&amp;nbsp;can&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;vary.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Avoid&amp;nbsp;duplication&amp;nbsp;in&amp;nbsp;the&amp;nbsp;code:&amp;nbsp;the&amp;nbsp;general&amp;nbsp;workflow&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;structure&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;once&amp;nbsp;in&amp;nbsp;the&amp;nbsp;abstract&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class's&amp;nbsp;algorithm,&amp;nbsp;and&amp;nbsp;necessary&amp;nbsp;variations&amp;nbsp;are&amp;nbsp;implemented&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;in&amp;nbsp;each&amp;nbsp;of&amp;nbsp;the&amp;nbsp;subclasses.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Control&amp;nbsp;at&amp;nbsp;what&amp;nbsp;point(s)&amp;nbsp;subclassing&amp;nbsp;is&amp;nbsp;allowed.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;As&amp;nbsp;opposed&amp;nbsp;to&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;polymorphic&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;override,&amp;nbsp;where&amp;nbsp;the&amp;nbsp;base&amp;nbsp;method&amp;nbsp;would&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;be&amp;nbsp;entirely&amp;nbsp;rewritten&amp;nbsp;allowing&amp;nbsp;radical&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;change&amp;nbsp;to&amp;nbsp;the&amp;nbsp;workflow,&amp;nbsp;only&amp;nbsp;the&amp;nbsp;specific&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;details&amp;nbsp;of&amp;nbsp;the&amp;nbsp;workflow&amp;nbsp;are&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;change.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;control&amp;nbsp;structure&amp;nbsp;(inversion&amp;nbsp;of&amp;nbsp;control)&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that&amp;nbsp;is&amp;nbsp;the&amp;nbsp;result&amp;nbsp;of&amp;nbsp;the&amp;nbsp;application&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;a&amp;nbsp;template&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;often&amp;nbsp;referred&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Hollywood&amp;nbsp;Principle:&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;Don't&amp;nbsp;call&amp;nbsp;us,&amp;nbsp;we'll&amp;nbsp;call&amp;nbsp;you.&amp;quot;&amp;nbsp;Using&amp;nbsp;this&amp;nbsp;principle,&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;template&amp;nbsp;method&amp;nbsp;in&amp;nbsp;a&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;controls&amp;nbsp;the&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;overall&amp;nbsp;process&amp;nbsp;by&amp;nbsp;calling&amp;nbsp;subclass&amp;nbsp;methods&amp;nbsp;as&amp;nbsp;required.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!!&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Template&amp;nbsp;method&amp;nbsp;can&amp;nbsp;not&amp;nbsp;be&amp;nbsp;overridden&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;template&amp;nbsp;method&amp;nbsp;implemented&amp;nbsp;by&amp;nbsp;the&amp;nbsp;base&amp;nbsp;class&amp;nbsp;should&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;not&amp;nbsp;be&amp;nbsp;overridden.&amp;nbsp;The&amp;nbsp;specific&amp;nbsp;programming&amp;nbsp;&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;language&amp;nbsp;modifiers&amp;nbsp;should&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;this.&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;(&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Trip&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;void&amp;nbsp;performTrip(){&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doComingTransport();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doDayA();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doDayB();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doDayC();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doReturningTransport();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;doComingTransport();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;doDayA();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;doDayB();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;doDayC();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;doReturningTransport();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;PackageA&amp;nbsp;extends&amp;nbsp;Trip&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doComingTransport()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;comming&amp;nbsp;by&amp;nbsp;air&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayA()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;visiting&amp;nbsp;the&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;aquarium&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayB()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;to&amp;nbsp;the&amp;nbsp;beach&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayC()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;to&amp;nbsp;mountains&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doReturningTransport()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;home&amp;nbsp;by&amp;nbsp;air&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;PackageB&amp;nbsp;extends&amp;nbsp;Trip&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doComingTransport()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;comming&amp;nbsp;by&amp;nbsp;train&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayA()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;visiting&amp;nbsp;the&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mountain&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayB()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;to&amp;nbsp;the&amp;nbsp;beach&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doDayC()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;to&amp;nbsp;zoo&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;doReturningTransport()&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;turists&amp;nbsp;are&amp;nbsp;going&amp;nbsp;home&amp;nbsp;by&amp;nbsp;train&amp;nbsp;&#xD;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;quot;);&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;TempateMethodProgram&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PackageA&amp;nbsp;trip&amp;nbsp;=&amp;nbsp;new&amp;nbsp;PackageA();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;trip.performTrip();&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;..&#xD;&lt;br&gt;

&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:10" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Is&amp;nbsp;there&amp;nbsp;similarities&amp;nbsp;between&amp;nbsp;template&amp;nbsp;method&amp;nbsp;pattern&amp;nbsp;and&amp;nbsp;strategy&amp;nbsp;pattern?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Template&amp;nbsp;method&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;use&amp;nbsp;some&lt;br&gt;
parent&amp;nbsp;class's&amp;nbsp;fields&amp;nbsp;and&amp;nbsp;when&amp;nbsp;your&amp;nbsp;implementation&amp;nbsp;is&amp;nbsp;not&amp;nbsp;really&amp;nbsp;a&amp;nbsp;whole&lt;br&gt;
algorithm&amp;nbsp;but&amp;nbsp;only&amp;nbsp;some&amp;nbsp;'logic'&amp;nbsp;very&amp;nbsp;specific&amp;nbsp;to&amp;nbsp;your&amp;nbsp;hierarchy&amp;nbsp;of&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
On&amp;nbsp;the&amp;nbsp;other&amp;nbsp;hand,&amp;nbsp;when&amp;nbsp;you&amp;nbsp;find&amp;nbsp;out&amp;nbsp;that&amp;nbsp;your&amp;nbsp;template&lt;br&gt;
methods&amp;nbsp;implementations&amp;nbsp;are&amp;nbsp;redundant&amp;nbsp;or&amp;nbsp;leads&amp;nbsp;to&amp;nbsp;duplication&lt;br&gt;
code&amp;nbsp;across&amp;nbsp;several&amp;nbsp;subclasses&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;tree,&amp;nbsp;prefer&amp;nbsp;Strategy&amp;nbsp;pattern&amp;nbsp;so&amp;nbsp;that&amp;nbsp;your&amp;nbsp;code&amp;nbsp;will&amp;nbsp;be&amp;nbsp;factorized.&lt;br&gt;
&lt;br&gt;
Also,&amp;nbsp;template&amp;nbsp;method&amp;nbsp;working&amp;nbsp;by&amp;nbsp;the&amp;nbsp;way&amp;nbsp;of&amp;nbsp;subclassing,&lt;br&gt;
you&amp;nbsp;can't&amp;nbsp;change&amp;nbsp;your&amp;nbsp;behaviour&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;whereas&amp;nbsp;with&amp;nbsp;Strategy&amp;nbsp;pattern,&lt;br&gt;
all&amp;nbsp;you&amp;nbsp;have&amp;nbsp;to&amp;nbsp;do&amp;nbsp;is&amp;nbsp;to&amp;nbsp;use&amp;nbsp;setter&amp;nbsp;to&amp;nbsp;change&amp;nbsp;your&amp;nbsp;behaviour&amp;nbsp;whenever&amp;nbsp;you&amp;nbsp;wish.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;all&amp;nbsp;other&amp;nbsp;cases,&amp;nbsp;those&amp;nbsp;two&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;__&amp;nbsp;very&amp;nbsp;similar&amp;nbsp;__&lt;br&gt;
and&amp;nbsp;you&amp;nbsp;can&amp;nbsp;often&amp;nbsp;choose&amp;nbsp;for&amp;nbsp;the&amp;nbsp;one&amp;nbsp;you&amp;nbsp;like.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
Another&amp;nbsp;answer&amp;nbsp;from&amp;nbsp;stackoverflow.com&lt;br&gt;
&lt;br&gt;
Yes&amp;nbsp;you&amp;nbsp;can&amp;nbsp;use&amp;nbsp;strategy&amp;nbsp;pattern&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;template&amp;nbsp;method&lt;br&gt;
but&amp;nbsp;in&amp;nbsp;special&amp;nbsp;case&amp;nbsp;you&amp;nbsp;will&amp;nbsp;repeat&amp;nbsp;algorithm&amp;nbsp;logic.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;best&amp;nbsp;use&amp;nbsp;case&amp;nbsp;for&amp;nbsp;template&amp;nbsp;method&amp;nbsp;to&amp;nbsp;replace&amp;nbsp;some&lt;br&gt;
abstract&amp;nbsp;method&amp;nbsp;by&amp;nbsp;specific&amp;nbsp;implementation.&lt;br&gt;
&lt;br&gt;
E.g.&amp;nbsp;You&amp;nbsp;want&amp;nbsp;to&amp;nbsp;cook&amp;nbsp;smth&amp;nbsp;and&amp;nbsp;your&amp;nbsp;recipe&amp;nbsp;is:&lt;br&gt;
&lt;br&gt;
take&amp;nbsp;ingridients&lt;br&gt;
put&amp;nbsp;them&amp;nbsp;into&lt;br&gt;
heat&lt;br&gt;
give&amp;nbsp;coocked&amp;nbsp;food&amp;nbsp;to&amp;nbsp;smbd&lt;br&gt;
In&amp;nbsp;java&amp;nbsp;recipe&amp;nbsp;is&amp;nbsp;just&amp;nbsp;method&amp;nbsp;in&amp;nbsp;some&amp;nbsp;Recipe&amp;nbsp;class&lt;br&gt;
&lt;br&gt;
void&amp;nbsp;cook(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;takeIngridients();&lt;br&gt;
&amp;nbsp;&amp;nbsp;putIt();&amp;nbsp;&amp;nbsp;//&amp;nbsp;abstract&lt;br&gt;
&amp;nbsp;&amp;nbsp;heat();&amp;nbsp;&amp;nbsp;//abstract&lt;br&gt;
&amp;nbsp;&amp;nbsp;giveFood();&lt;br&gt;
}&lt;br&gt;
You&amp;nbsp;create&amp;nbsp;PanRecipe&amp;nbsp;class&amp;nbsp;extends&amp;nbsp;Recipe&amp;nbsp;and&amp;nbsp;implement&amp;nbsp;abstract&lt;br&gt;
methods&amp;nbsp;to&amp;nbsp;use&amp;nbsp;pan.&amp;nbsp;Another&amp;nbsp;class&amp;nbsp;can&amp;nbsp;be&amp;nbsp;GrillRecipe&amp;nbsp;and&amp;nbsp;implement&lt;br&gt;
methods&amp;nbsp;to&amp;nbsp;use&amp;nbsp;grill.&lt;br&gt;
Now&amp;nbsp;you&amp;nbsp;can&amp;nbsp;just&amp;nbsp;call&amp;nbsp;it&amp;nbsp;by&amp;nbsp;grillRecipe.cook(),&amp;nbsp;and&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;strategy&lt;br&gt;
pattern&amp;nbsp;don't&amp;nbsp;need&amp;nbsp;to&amp;nbsp;copy&amp;nbsp;implementation&amp;nbsp;of&lt;br&gt;
repeated&amp;nbsp;methods&amp;nbsp;takeIngridients&amp;nbsp;and&amp;nbsp;giveFood.</questionanswer>
  </question>
</questions>
