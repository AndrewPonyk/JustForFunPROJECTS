<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_2" name="BehavioralPatterns" nofquestions="3" nofsubcategories="0" filename="behavioralpatterns2_6_5_2.xml">
  <question id="2_6_5_2:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Which&amp;nbsp;Behavioral&amp;nbsp;patterns&amp;nbsp;you&amp;nbsp;know&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>-&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility&lt;br&gt;
-&amp;nbsp;Command&lt;br&gt;
-&amp;nbsp;Interpreter&lt;br&gt;
-&amp;nbsp;Iterator&lt;br&gt;
-&amp;nbsp;Mediator&lt;br&gt;
-&amp;nbsp;Memento&lt;br&gt;
-&amp;nbsp;Observer&lt;br&gt;
-&amp;nbsp;State&lt;br&gt;
-&amp;nbsp;Strategy&lt;br&gt;
-&amp;nbsp;Template&amp;nbsp;Method&lt;br&gt;
-&amp;nbsp;Visitor&lt;br&gt;</questionanswer>
  </question>
  <question id="2_6_5_2:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Andrii&amp;nbsp;Budaj&amp;nbsp;Explanation&amp;nbsp;(cafe&amp;nbsp;example):&lt;br&gt;
&lt;br&gt;
Imagine&amp;nbsp;if&amp;nbsp;you&amp;nbsp;went&amp;nbsp;with&amp;nbsp;friends&amp;nbsp;in&amp;nbsp;a&amp;nbsp;cafe.&amp;nbsp;Cafe&lt;br&gt;
something&amp;nbsp;specific&amp;nbsp;-&amp;nbsp;a&amp;nbsp;small&amp;nbsp;place&amp;nbsp;,&amp;nbsp;and&amp;nbsp;when&amp;nbsp;you&amp;nbsp;bring&lt;br&gt;
a&amp;nbsp;dish&amp;nbsp;normally&amp;nbsp;have&amp;nbsp;to&amp;nbsp;pass&amp;nbsp;it&lt;br&gt;
the&amp;nbsp;next&amp;nbsp;person&amp;nbsp;at&amp;nbsp;the&amp;nbsp;table.&amp;nbsp;Your&amp;nbsp;best&amp;nbsp;friend&lt;br&gt;
sat&amp;nbsp;closest&amp;nbsp;to&amp;nbsp;the&amp;nbsp;edge&amp;nbsp;,&amp;nbsp;so&amp;nbsp;he&amp;nbsp;gets&amp;nbsp;the&amp;nbsp;first&lt;br&gt;
the&amp;nbsp;hands&amp;nbsp;of&amp;nbsp;the&amp;nbsp;order.&amp;nbsp;Since&amp;nbsp;he&amp;nbsp;had&amp;nbsp;slept&amp;nbsp;in&amp;nbsp;the&amp;nbsp;morning&amp;nbsp;and&lt;br&gt;
loves&amp;nbsp;to&amp;nbsp;eat&amp;nbsp;meal,&amp;nbsp;he&amp;nbsp;will&amp;nbsp;never&amp;nbsp;deliver&amp;nbsp;you&lt;br&gt;
meat&amp;nbsp;meal&amp;nbsp;or&amp;nbsp;coffee,&amp;nbsp;unless&amp;nbsp;he&amp;nbsp;is&amp;nbsp;not&amp;nbsp;satisfied&amp;nbsp;.&amp;nbsp;Following&amp;nbsp;the&amp;nbsp;second&lt;br&gt;
you&amp;nbsp;sit&amp;nbsp;,&amp;nbsp;and&amp;nbsp;then&amp;nbsp;your&amp;nbsp;girlfriend,&amp;nbsp;who&amp;nbsp;is&amp;nbsp;against&amp;nbsp;the&amp;nbsp;wall.&amp;nbsp;She&amp;nbsp;wants&amp;nbsp;only&lt;br&gt;
cappuccino&amp;nbsp;,&amp;nbsp;and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;send&amp;nbsp;to&amp;nbsp;anyone&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
!!&amp;nbsp;WIki&amp;nbsp;explanation:&lt;br&gt;
In&amp;nbsp;object-oriented&amp;nbsp;design,&amp;nbsp;the&amp;nbsp;chain-of-responsibility&amp;nbsp;pattern&lt;br&gt;
is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;consisting&amp;nbsp;of&amp;nbsp;a&amp;nbsp;source&amp;nbsp;of&amp;nbsp;command&lt;br&gt;
objects&amp;nbsp;and&amp;nbsp;a&amp;nbsp;series&amp;nbsp;of&amp;nbsp;processing&amp;nbsp;objects.&lt;br&gt;
Each&amp;nbsp;processing&amp;nbsp;object&amp;nbsp;contains&amp;nbsp;logic&amp;nbsp;that&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;types&lt;br&gt;
of&amp;nbsp;command&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;it&amp;nbsp;can&amp;nbsp;handle;&amp;nbsp;the&amp;nbsp;rest&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
next&amp;nbsp;processing&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;chain.&lt;br&gt;
A&amp;nbsp;mechanism&amp;nbsp;also&amp;nbsp;exists&amp;nbsp;for&amp;nbsp;adding&amp;nbsp;new&amp;nbsp;processing&lt;br&gt;
objects&amp;nbsp;to&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;chain.&lt;br&gt;
In&amp;nbsp;a&amp;nbsp;variation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;chain-of-responsibility&amp;nbsp;model,&lt;br&gt;
some&amp;nbsp;handlers&amp;nbsp;may&amp;nbsp;act&amp;nbsp;as&amp;nbsp;dispatchers,&amp;nbsp;capable&amp;nbsp;of&amp;nbsp;sending&amp;nbsp;&lt;br&gt;
commands&amp;nbsp;out&amp;nbsp;in&amp;nbsp;a&amp;nbsp;variety&amp;nbsp;of&amp;nbsp;directions,&amp;nbsp;forming&amp;nbsp;a&amp;nbsp;tree&amp;nbsp;of&amp;nbsp;responsibility.&amp;nbsp;&lt;br&gt;
In&amp;nbsp;some&amp;nbsp;cases,&amp;nbsp;this&amp;nbsp;can&amp;nbsp;occur&amp;nbsp;recursively,&amp;nbsp;with&amp;nbsp;processing&amp;nbsp;objects&amp;nbsp;&lt;br&gt;
calling&amp;nbsp;higher-up&amp;nbsp;processing&amp;nbsp;objects&amp;nbsp;with&amp;nbsp;commands&amp;nbsp;that&amp;nbsp;attempt&amp;nbsp;to&lt;br&gt;
solve&amp;nbsp;some&amp;nbsp;smaller&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;problem;&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case&amp;nbsp;recursion&amp;nbsp;continues&lt;br&gt;
until&amp;nbsp;the&amp;nbsp;command&amp;nbsp;is&amp;nbsp;processed,&amp;nbsp;or&amp;nbsp;the&amp;nbsp;entire&amp;nbsp;tree&amp;nbsp;has&amp;nbsp;been&amp;nbsp;explored.&lt;br&gt;
An&amp;nbsp;XML&amp;nbsp;interpreter&amp;nbsp;might&amp;nbsp;work&amp;nbsp;in&amp;nbsp;this&amp;nbsp;manner.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Would&amp;nbsp;I&amp;nbsp;Use&amp;nbsp;This&amp;nbsp;Pattern?&lt;br&gt;
This&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;recommended&amp;nbsp;when&amp;nbsp;either&amp;nbsp;of&amp;nbsp;the&amp;nbsp;following&amp;nbsp;scenarios&amp;nbsp;occur&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;your&amp;nbsp;application:&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Multiple&amp;nbsp;objects&amp;nbsp;can&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;request&amp;nbsp;and&amp;nbsp;the&lt;br&gt;
&amp;nbsp;handler&amp;nbsp;doesn't&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;object&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;set&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;a&amp;nbsp;request&lt;br&gt;
&amp;nbsp;with&amp;nbsp;the&amp;nbsp;handler&amp;nbsp;determined&amp;nbsp;at&amp;nbsp;runtime&lt;br&gt;
-&amp;nbsp;A&amp;nbsp;request&amp;nbsp;not&amp;nbsp;being&amp;nbsp;handled&amp;nbsp;is&amp;nbsp;an&amp;nbsp;acceptable&amp;nbsp;outcome.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;used&amp;nbsp;in&amp;nbsp;windows&amp;nbsp;systems&amp;nbsp;to&lt;br&gt;
handle&amp;nbsp;events&amp;nbsp;generated&amp;nbsp;from&amp;nbsp;the&amp;nbsp;keyboard&amp;nbsp;or&amp;nbsp;mouse.&lt;br&gt;
Exception&amp;nbsp;handling&amp;nbsp;systems&amp;nbsp;also&amp;nbsp;implement&amp;nbsp;this&amp;nbsp;pattern,&lt;br&gt;
with&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;checking&amp;nbsp;if&amp;nbsp;a&amp;nbsp;handler&amp;nbsp;is&amp;nbsp;provided&amp;nbsp;for&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;through&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;call&amp;nbsp;stack.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
In&amp;nbsp;__&amp;nbsp;JavaEE&amp;nbsp;__&amp;nbsp;,&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;Servlet&amp;nbsp;filters&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;&lt;br&gt;
Chain&amp;nbsp;of&amp;nbsp;Responsibility&amp;nbsp;pattern,&amp;nbsp;and&amp;nbsp;may&amp;nbsp;also&amp;nbsp;decorate&amp;nbsp;the&lt;br&gt;
request&amp;nbsp;to&amp;nbsp;add&amp;nbsp;extra&amp;nbsp;information&amp;nbsp;before&amp;nbsp;the&amp;nbsp;request&amp;nbsp;is&amp;nbsp;handled&amp;nbsp;by&amp;nbsp;a&amp;nbsp;servlet.&lt;br&gt;
If&amp;nbsp;no&amp;nbsp;handler&amp;nbsp;is&amp;nbsp;defined,&amp;nbsp;the&amp;nbsp;exception&amp;nbsp;will&lt;br&gt;
cause&amp;nbsp;a&amp;nbsp;crash&amp;nbsp;in&amp;nbsp;the&amp;nbsp;program,&amp;nbsp;as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;unhandled.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='430'&amp;nbsp;height='260'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/chain_of_resp_pattern.PNG'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(from&amp;nbsp;java.dzone.com):&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Email&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getText()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setText(String&amp;nbsp;text)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.text&amp;nbsp;=&amp;nbsp;text;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFrom()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setFrom(String&amp;nbsp;from)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.from&amp;nbsp;=&amp;nbsp;from;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
//Handler&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;next&amp;nbsp;handler&amp;nbsp;in&amp;nbsp;the&amp;nbsp;chain&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email);&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;GMailHandler&amp;nbsp;implements&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;next;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next&amp;nbsp;=&amp;nbsp;handler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(!email.getFrom().endsWith(&amp;quot;@gmail.com&amp;quot;)){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&amp;nbsp;(move&amp;nbsp;to&amp;nbsp;correct&amp;nbsp;folder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Gmail&amp;nbsp;handle&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BusinessMailHandler&amp;nbsp;implements&amp;nbsp;EmailHandler&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;next;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setNext(EmailHandler&amp;nbsp;handler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next&amp;nbsp;=&amp;nbsp;handler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(!email.getFrom().endsWith(&amp;quot;@businessaddress.com&amp;quot;)){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;next.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//handle&amp;nbsp;request&amp;nbsp;(move&amp;nbsp;to&amp;nbsp;correct&amp;nbsp;folder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Business&amp;nbsp;handler&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EmailProcessor&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;successor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailHandler&amp;nbsp;first;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;EmailProcessor(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addEmailHandler(EmailHandler&amp;nbsp;emailHandler){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(this.first&amp;nbsp;==&amp;nbsp;null){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.first&amp;nbsp;=&amp;nbsp;emailHandler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.successor.setNext(emailHandler);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.successor&amp;nbsp;=&amp;nbsp;emailHandler;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;handleRequest(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;first.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
//email&amp;nbsp;client&amp;nbsp;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChainOfResponsibilityProgram&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;EmailProcessor&amp;nbsp;processor;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ChainOfResponsibilityProgram(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createProcessor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;createProcessor(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor&amp;nbsp;=&amp;nbsp;new&amp;nbsp;EmailProcessor();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.addEmailHandler(new&amp;nbsp;BusinessMailHandler());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.addEmailHandler(new&amp;nbsp;GMailHandler());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;emailReceived(Email&amp;nbsp;email){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.handleRequest(email);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ChainOfResponsibilityProgram&amp;nbsp;client&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChainOfResponsibilityProgram();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Email&amp;nbsp;helloEmail&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Email();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;helloEmail.setFrom(&amp;quot;andrew9999@gmail.com&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.emailReceived(helloEmail);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_2:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;pattern,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
Provide&amp;nbsp;example.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;object-oriented&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;command&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
behavioral&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;in&amp;nbsp;which&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;used&amp;nbsp;&lt;br&gt;
to&amp;nbsp;represent&amp;nbsp;and&amp;nbsp;encapsulate&amp;nbsp;all&amp;nbsp;the&amp;nbsp;information&amp;nbsp;&lt;br&gt;
needed&amp;nbsp;to&amp;nbsp;call&amp;nbsp;a&amp;nbsp;method&amp;nbsp;at&amp;nbsp;a&amp;nbsp;later&amp;nbsp;time.&amp;nbsp;&lt;br&gt;
(to&amp;nbsp;understand&amp;nbsp;it&amp;nbsp;look&amp;nbsp;on&amp;nbsp;the&amp;nbsp;example)&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='400'&amp;nbsp;height='250'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/Command.gif'/&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(wiki)&lt;br&gt;
&lt;br&gt;
/*the&amp;nbsp;Invoker&amp;nbsp;class*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Switch&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Command&amp;nbsp;flipUpCommand;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Command&amp;nbsp;flipDownCommand;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Switch(Command&amp;nbsp;flipUpCmd,Command&amp;nbsp;flipDownCmd){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.flipUpCommand=flipUpCmd;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.flipDownCommand=flipDownCmd;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;flipUp(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flipUpCommand.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;flipDown(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flipDownCommand.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*Receiver&amp;nbsp;class*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Light{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Light(){&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;turnOn(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;light&amp;nbsp;is&amp;nbsp;on&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;turnOff(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;The&amp;nbsp;light&amp;nbsp;is&amp;nbsp;off&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;interface*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;execute();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;for&amp;nbsp;turning&amp;nbsp;on&amp;nbsp;the&amp;nbsp;light*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TurnOnLightCommand&amp;nbsp;implements&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Light&amp;nbsp;theLight;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TurnOnLightCommand(Light&amp;nbsp;light){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.theLight=light;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;theLight.turnOn();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*the&amp;nbsp;Command&amp;nbsp;for&amp;nbsp;turning&amp;nbsp;off&amp;nbsp;the&amp;nbsp;light*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TurnOffLightCommand&amp;nbsp;implements&amp;nbsp;Command{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Light&amp;nbsp;theLight;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;TurnOffLightCommand(Light&amp;nbsp;light){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.theLight=light;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;theLight.turnOff();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*The&amp;nbsp;test&amp;nbsp;class*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TestCommand{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Light&amp;nbsp;l=new&amp;nbsp;Light();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;switchUp=new&amp;nbsp;TurnOnLightCommand(l);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Command&amp;nbsp;switchDown=new&amp;nbsp;TurnOffLightCommand(l);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Switch&amp;nbsp;s=new&amp;nbsp;Switch(switchUp,switchDown);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.flipUp();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.flipDown();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
==&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;Uses&lt;br&gt;
-&amp;nbsp;GUI&amp;nbsp;buttons&amp;nbsp;and&amp;nbsp;menu&amp;nbsp;items&amp;nbsp;&lt;br&gt;
In&amp;nbsp;Swing&amp;nbsp;and&amp;nbsp;Borland&amp;nbsp;Delphi&amp;nbsp;programming,&amp;nbsp;&lt;br&gt;
an&amp;nbsp;Action&amp;nbsp;is&amp;nbsp;a&amp;nbsp;command&amp;nbsp;object.&amp;nbsp;In&amp;nbsp;addition&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
ability&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;the&amp;nbsp;desired&amp;nbsp;command,&amp;nbsp;an&amp;nbsp;Action&amp;nbsp;may&amp;nbsp;have&lt;br&gt;
an&amp;nbsp;associated&amp;nbsp;icon,&amp;nbsp;keyboard&amp;nbsp;shortcut,&amp;nbsp;tooltip&amp;nbsp;text,&amp;nbsp;and&amp;nbsp;so&amp;nbsp;on.&lt;br&gt;
A&amp;nbsp;toolbar&amp;nbsp;button&amp;nbsp;or&amp;nbsp;menu&amp;nbsp;item&amp;nbsp;component&amp;nbsp;may&amp;nbsp;be&amp;nbsp;completely&lt;br&gt;
initialized&amp;nbsp;using&amp;nbsp;only&amp;nbsp;the&amp;nbsp;Action&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Thread&amp;nbsp;pools&amp;nbsp;&lt;br&gt;
A&amp;nbsp;typical,&amp;nbsp;general-purpose&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;class&lt;br&gt;
might&amp;nbsp;have&amp;nbsp;a&amp;nbsp;public&amp;nbsp;addTask()&amp;nbsp;method&amp;nbsp;that&amp;nbsp;adds&amp;nbsp;a&amp;nbsp;work&lt;br&gt;
item&amp;nbsp;to&amp;nbsp;an&amp;nbsp;internal&amp;nbsp;queue&amp;nbsp;of&amp;nbsp;tasks&amp;nbsp;waiting&amp;nbsp;to&amp;nbsp;be&amp;nbsp;done.&lt;br&gt;
It&amp;nbsp;maintains&amp;nbsp;a&amp;nbsp;pool&amp;nbsp;of&amp;nbsp;threads&amp;nbsp;that&amp;nbsp;execute&amp;nbsp;commands&amp;nbsp;from&lt;br&gt;
the&amp;nbsp;queue.&amp;nbsp;The&amp;nbsp;items&amp;nbsp;in&amp;nbsp;the&amp;nbsp;queue&amp;nbsp;are&amp;nbsp;command&amp;nbsp;objects.&lt;br&gt;
Typically&amp;nbsp;these&amp;nbsp;objects&amp;nbsp;implement&amp;nbsp;a&amp;nbsp;common&amp;nbsp;interface&amp;nbsp;such&amp;nbsp;as&amp;nbsp;&lt;br&gt;
java.lang.Runnable&amp;nbsp;that&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;to&amp;nbsp;execute&amp;nbsp;the&amp;nbsp;command&lt;br&gt;
even&amp;nbsp;though&amp;nbsp;the&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;class&amp;nbsp;itself&amp;nbsp;was&amp;nbsp;written&amp;nbsp;without&lt;br&gt;
any&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;the&amp;nbsp;specific&amp;nbsp;tasks&amp;nbsp;for&amp;nbsp;which&amp;nbsp;it&amp;nbsp;would&amp;nbsp;be&amp;nbsp;used.&lt;br&gt;
-&amp;nbsp;Transactional&amp;nbsp;behavior&amp;nbsp;&lt;br&gt;
Similar&amp;nbsp;to&amp;nbsp;undo,&amp;nbsp;a&amp;nbsp;database&amp;nbsp;engine&amp;nbsp;or&amp;nbsp;software&amp;nbsp;installer&amp;nbsp;may&lt;br&gt;
keep&amp;nbsp;a&amp;nbsp;list&amp;nbsp;of&amp;nbsp;operations&amp;nbsp;that&amp;nbsp;have&amp;nbsp;been&amp;nbsp;or&amp;nbsp;will&amp;nbsp;be&amp;nbsp;performed.&lt;br&gt;
Should&amp;nbsp;one&amp;nbsp;of&amp;nbsp;them&amp;nbsp;fail,&amp;nbsp;all&amp;nbsp;others&amp;nbsp;can&amp;nbsp;be&amp;nbsp;reversed&amp;nbsp;or&lt;br&gt;
discarded&amp;nbsp;(usually&amp;nbsp;called&amp;nbsp;rollback).&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;
if&amp;nbsp;two&amp;nbsp;database&amp;nbsp;tables&amp;nbsp;that&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;each&amp;nbsp;other&amp;nbsp;must&amp;nbsp;be&amp;nbsp;updated,&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;second&amp;nbsp;update&amp;nbsp;fails,&amp;nbsp;the&amp;nbsp;transaction&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
rolled&amp;nbsp;back,&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;first&amp;nbsp;table&amp;nbsp;does&amp;nbsp;not&amp;nbsp;now&amp;nbsp;contain&lt;br&gt;
an&amp;nbsp;invalid&amp;nbsp;reference.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
</questions>
