<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_2_0" name="Generics_LearningJava4thEdition" nofquestions="9" nofsubcategories="0" filename="generics_learningjava4thedition1_0_0_2_0.xml">
  <question id="1_0_0_2_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics,&amp;nbsp;describe&amp;nbsp;(basic).&amp;nbsp;Provide&amp;nbsp;Hello&amp;nbsp;World&amp;nbsp;Example.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;'Erasure'&amp;nbsp;in&amp;nbsp;java&amp;nbsp;generics&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>It’s&amp;nbsp;been&amp;nbsp;over&amp;nbsp;15&amp;nbsp;years&amp;nbsp;since&amp;nbsp;the&amp;nbsp;introduction&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language&amp;nbsp;(and&lt;br&gt;
the&amp;nbsp;first&amp;nbsp;edition&amp;nbsp;of&amp;nbsp;this&amp;nbsp;book).&amp;nbsp;In&amp;nbsp;that&amp;nbsp;time,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&amp;nbsp;has&amp;nbsp;matured&amp;nbsp;and&lt;br&gt;
come&amp;nbsp;into&amp;nbsp;its&amp;nbsp;own.&amp;nbsp;But&amp;nbsp;it&amp;nbsp;wasn’t&amp;nbsp;until&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;the&amp;nbsp;sixth&amp;nbsp;major&amp;nbsp;release&amp;nbsp;of&amp;nbsp;Java,&lt;br&gt;
that&amp;nbsp;the&amp;nbsp;core&amp;nbsp;language&amp;nbsp;itself&amp;nbsp;changed&amp;nbsp;in&amp;nbsp;a&amp;nbsp;significant&amp;nbsp;way.&amp;nbsp;Yes,&amp;nbsp;there&amp;nbsp;were&amp;nbsp;subtle&lt;br&gt;
changes&amp;nbsp;and&amp;nbsp;dropins&amp;nbsp;over&amp;nbsp;the&amp;nbsp;years.&amp;nbsp;Inner&amp;nbsp;classes,&amp;nbsp;added&amp;nbsp;very&amp;nbsp;early&amp;nbsp;on,&amp;nbsp;were&lt;br&gt;
important.&amp;nbsp;But&amp;nbsp;no&amp;nbsp;language&amp;nbsp;improvements&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;that&amp;nbsp;point&amp;nbsp;affected&amp;nbsp;all&amp;nbsp;Java&lt;br&gt;
code&amp;nbsp;or&amp;nbsp;all&amp;nbsp;Java&amp;nbsp;developers&amp;nbsp;in&amp;nbsp;the&amp;nbsp;way&amp;nbsp;that&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;did&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;5.0&lt;br&gt;
&lt;br&gt;
Any&amp;nbsp;child&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;of&amp;nbsp;object&amp;nbsp;can&amp;nbsp;serve&lt;br&gt;
in&amp;nbsp;place&amp;nbsp;of&amp;nbsp;its&amp;nbsp;parent&amp;nbsp;type&amp;nbsp;and,&amp;nbsp;ultimately,&amp;nbsp;every&amp;nbsp;object&amp;nbsp;is&amp;nbsp;a&amp;nbsp;child&amp;nbsp;of&amp;nbsp;java.lang.Object,&lt;br&gt;
the&amp;nbsp;object-oriented&amp;nbsp;“Eve,”&amp;nbsp;so&amp;nbsp;to&amp;nbsp;speak.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;natural,&amp;nbsp;therefore,&amp;nbsp;for&amp;nbsp;the&amp;nbsp;most&amp;nbsp;general&amp;nbsp;types&lt;br&gt;
of&amp;nbsp;containers&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;the&amp;nbsp;type&amp;nbsp;Object&amp;nbsp;so&amp;nbsp;that&amp;nbsp;they&amp;nbsp;can&amp;nbsp;hold&amp;nbsp;just&amp;nbsp;about&lt;br&gt;
anything.&amp;nbsp;By&amp;nbsp;containers,&amp;nbsp;we&amp;nbsp;mean&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;hold&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;other&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;some&lt;br&gt;
way.&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;Collections&amp;nbsp;Framework&amp;nbsp;is&amp;nbsp;the&amp;nbsp;best&amp;nbsp;example&amp;nbsp;of&amp;nbsp;containers.&amp;nbsp;A&amp;nbsp;List,&amp;nbsp;for&lt;br&gt;
example,&amp;nbsp;holds&amp;nbsp;an&amp;nbsp;ordered&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;type&amp;nbsp;Object.&amp;nbsp;A&amp;nbsp;Map&amp;nbsp;holds&amp;nbsp;an&amp;nbsp;association&lt;br&gt;
of&amp;nbsp;key-value&amp;nbsp;pairs,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;keys&amp;nbsp;and&amp;nbsp;values&amp;nbsp;also&amp;nbsp;being&amp;nbsp;of&amp;nbsp;the&amp;nbsp;most&amp;nbsp;general&amp;nbsp;type,&lt;br&gt;
Object.&amp;nbsp;With&amp;nbsp;a&amp;nbsp;little&amp;nbsp;help&amp;nbsp;from&amp;nbsp;wrappers&amp;nbsp;for&amp;nbsp;primitive&amp;nbsp;types,&amp;nbsp;this&amp;nbsp;arrangement&amp;nbsp;has&amp;nbsp;served&lt;br&gt;
us&amp;nbsp;well.&amp;nbsp;But&amp;nbsp;(not&amp;nbsp;to&amp;nbsp;get&amp;nbsp;too&amp;nbsp;Zen&amp;nbsp;on&amp;nbsp;you)&amp;nbsp;in&amp;nbsp;a&amp;nbsp;sense,&amp;nbsp;a&amp;nbsp;“collection&amp;nbsp;of&amp;nbsp;any&amp;nbsp;type”&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&lt;br&gt;
“collection&amp;nbsp;of&amp;nbsp;no&amp;nbsp;type,”&amp;nbsp;and&amp;nbsp;working&amp;nbsp;with&amp;nbsp;Objects&amp;nbsp;pushes&amp;nbsp;a&amp;nbsp;great&amp;nbsp;deal&amp;nbsp;of&amp;nbsp;responsibility&lt;br&gt;
onto&amp;nbsp;the&amp;nbsp;user&amp;nbsp;of&amp;nbsp;the&amp;nbsp;container.&lt;br&gt;
&lt;br&gt;
Once&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;dressed&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Ob&lt;br&gt;
ject&amp;nbsp;type,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;can&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;see&amp;nbsp;the&amp;nbsp;real&amp;nbsp;types&amp;nbsp;and&amp;nbsp;loses&amp;nbsp;track&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;It’s&amp;nbsp;up&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;user&amp;nbsp;to&amp;nbsp;pierce&amp;nbsp;the&amp;nbsp;anonymity&amp;nbsp;of&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;later&amp;nbsp;by&amp;nbsp;using&amp;nbsp;a&amp;nbsp;type&amp;nbsp;cast.&amp;nbsp;And&amp;nbsp;like&lt;br&gt;
attempting&amp;nbsp;to&amp;nbsp;yank&amp;nbsp;off&amp;nbsp;a&amp;nbsp;party-goer’s&amp;nbsp;fake&amp;nbsp;beard,&amp;nbsp;you’d&amp;nbsp;better&amp;nbsp;have&amp;nbsp;the&amp;nbsp;cast&amp;nbsp;correct&amp;nbsp;or&lt;br&gt;
you’ll&amp;nbsp;get&amp;nbsp;an&amp;nbsp;unwelcome&amp;nbsp;surprise.&lt;br&gt;
&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&lt;br&gt;
&amp;nbsp;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
&amp;nbsp;list.add(&amp;nbsp;date&amp;nbsp;);&lt;br&gt;
&amp;nbsp;...&lt;br&gt;
&amp;nbsp;Date&amp;nbsp;firstElement&amp;nbsp;=&amp;nbsp;(Date)list.get(0);&amp;nbsp;//&amp;nbsp;Is&amp;nbsp;the&amp;nbsp;cast&amp;nbsp;correct?&amp;nbsp;Maybe.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Can&amp;nbsp;Containers&amp;nbsp;Be&amp;nbsp;Fixed?&lt;br&gt;
It’s&amp;nbsp;natural&amp;nbsp;to&amp;nbsp;ask&amp;nbsp;if&amp;nbsp;there&amp;nbsp;is&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;make&amp;nbsp;this&amp;nbsp;situation&amp;nbsp;better.&amp;nbsp;What&lt;br&gt;
if&amp;nbsp;we&amp;nbsp;know&amp;nbsp;that&amp;nbsp;we&amp;nbsp;are&amp;nbsp;only&amp;nbsp;going&amp;nbsp;to&amp;nbsp;put&amp;nbsp;Dates&amp;nbsp;into&amp;nbsp;our&amp;nbsp;list?&amp;nbsp;Can’t&lt;br&gt;
we&amp;nbsp;just&amp;nbsp;make&amp;nbsp;our&amp;nbsp;own&amp;nbsp;list&amp;nbsp;that&amp;nbsp;only&amp;nbsp;accept&amp;nbsp;Date&amp;nbsp;objects,&amp;nbsp;get&amp;nbsp;rid&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
cast,&amp;nbsp;and&amp;nbsp;let&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;help&amp;nbsp;us&amp;nbsp;again?&amp;nbsp;The&amp;nbsp;answer,&amp;nbsp;surprisingly&lt;br&gt;
perhaps,&amp;nbsp;is&amp;nbsp;no.&amp;nbsp;At&amp;nbsp;least,&amp;nbsp;not&amp;nbsp;in&amp;nbsp;a&amp;nbsp;very&amp;nbsp;satisfying&amp;nbsp;way.&lt;br&gt;
&lt;br&gt;
Our&amp;nbsp;first&amp;nbsp;instinct&amp;nbsp;may&amp;nbsp;be&amp;nbsp;to&amp;nbsp;try&amp;nbsp;to&amp;nbsp;“override”&amp;nbsp;the&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;ArrayList&amp;nbsp;in&amp;nbsp;a&amp;nbsp;subclass.&lt;br&gt;
But&amp;nbsp;of&amp;nbsp;course,&amp;nbsp;rewriting&amp;nbsp;the&amp;nbsp;add()&amp;nbsp;method&amp;nbsp;in&amp;nbsp;a&amp;nbsp;subclass&amp;nbsp;would&amp;nbsp;not&amp;nbsp;actually&amp;nbsp;override&lt;br&gt;
anything;&amp;nbsp;it&amp;nbsp;would&amp;nbsp;add&amp;nbsp;a&amp;nbsp;new&amp;nbsp;overloaded&amp;nbsp;method.&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(&amp;nbsp;Object&amp;nbsp;o&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(&amp;nbsp;Date&amp;nbsp;d&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&amp;nbsp;//&amp;nbsp;overloaded&amp;nbsp;method&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;resulting&amp;nbsp;object&amp;nbsp;still&amp;nbsp;accepts&amp;nbsp;any&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;object—it&amp;nbsp;just&amp;nbsp;invokes&amp;nbsp;different&amp;nbsp;methods&lt;br&gt;
to&amp;nbsp;get&amp;nbsp;there&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Enter&amp;nbsp;Generics&amp;nbsp;!!!!!&lt;br&gt;
Generics&amp;nbsp;are&amp;nbsp;an&amp;nbsp;enhancement&amp;nbsp;to&amp;nbsp;the&amp;nbsp;syntax&amp;nbsp;of&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;allow&amp;nbsp;us&amp;nbsp;to&lt;br&gt;
specialize&amp;nbsp;the&amp;nbsp;class&amp;nbsp;for&amp;nbsp;a&amp;nbsp;given&amp;nbsp;type&amp;nbsp;or&amp;nbsp;set&amp;nbsp;of&amp;nbsp;types.&amp;nbsp;A&amp;nbsp;generic&lt;br&gt;
class&amp;nbsp;requires&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;wherever&amp;nbsp;we&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;the&amp;nbsp;class&lt;br&gt;
type&amp;nbsp;and&amp;nbsp;uses&amp;nbsp;them&amp;nbsp;to&amp;nbsp;customize&amp;nbsp;itself.&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;look&amp;nbsp;at&amp;nbsp;the&amp;nbsp;source&amp;nbsp;or&amp;nbsp;Javadoc&amp;nbsp;for&amp;nbsp;the&amp;nbsp;List&amp;nbsp;class,&amp;nbsp;for&amp;nbsp;example,&amp;nbsp;you’ll&amp;nbsp;see&amp;nbsp;it&amp;nbsp;defined&lt;br&gt;
something&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;List&lt;&amp;nbsp;E&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;add(&amp;nbsp;E&amp;nbsp;element&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
public&amp;nbsp;E&amp;nbsp;get(&amp;nbsp;int&amp;nbsp;i&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;identifier&amp;nbsp;E&amp;nbsp;between&amp;nbsp;the&amp;nbsp;angle&amp;nbsp;brackets&amp;nbsp;(&lt;&gt;)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;type&amp;nbsp;variable.&amp;nbsp;It&amp;nbsp;indicates&amp;nbsp;that&amp;nbsp;the&lt;br&gt;
class&amp;nbsp;List&amp;nbsp;is&amp;nbsp;generic&amp;nbsp;and&amp;nbsp;requires&amp;nbsp;a&amp;nbsp;Java&amp;nbsp;type&amp;nbsp;as&amp;nbsp;an&amp;nbsp;argument&amp;nbsp;to&amp;nbsp;make&amp;nbsp;it&amp;nbsp;complete.&lt;br&gt;
The&amp;nbsp;name&amp;nbsp;E&amp;nbsp;is&amp;nbsp;arbitrary,&amp;nbsp;but&amp;nbsp;there&amp;nbsp;are&amp;nbsp;conventions&amp;nbsp;that&amp;nbsp;we’ll&amp;nbsp;see&amp;nbsp;as&amp;nbsp;we&amp;nbsp;go&amp;nbsp;on.&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;E&amp;nbsp;represents&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;elements&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;store&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;list.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;same&amp;nbsp;angle&amp;nbsp;bracket&amp;nbsp;syntax&amp;nbsp;supplies&amp;nbsp;the&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;when&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&lt;br&gt;
List&amp;nbsp;type:&lt;br&gt;
&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;listOfStrings;&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;snippet,&amp;nbsp;we&amp;nbsp;declared&amp;nbsp;a&amp;nbsp;variable&amp;nbsp;called&amp;nbsp;listOfStrings&amp;nbsp;using&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;List&lt;br&gt;
with&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;of&amp;nbsp;String.&amp;nbsp;String&amp;nbsp;refers&amp;nbsp;to&amp;nbsp;the&amp;nbsp;String&amp;nbsp;class,&amp;nbsp;but&amp;nbsp;we&amp;nbsp;could&amp;nbsp;have&lt;br&gt;
specialized&amp;nbsp;List&amp;nbsp;with&amp;nbsp;any&amp;nbsp;Java&amp;nbsp;class&amp;nbsp;type.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&amp;nbsp;List&lt;Date&gt;&amp;nbsp;dates;&lt;br&gt;
&amp;nbsp;List&lt;java.math.BigDecimal&gt;&amp;nbsp;decimals;&lt;br&gt;
&amp;nbsp;List&lt;Foo&gt;&amp;nbsp;foos;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Returning&amp;nbsp;to&amp;nbsp;our&amp;nbsp;listOfStrings,&amp;nbsp;what&amp;nbsp;we&amp;nbsp;have&amp;nbsp;now&amp;nbsp;is&amp;nbsp;effectively&amp;nbsp;a&amp;nbsp;List&amp;nbsp;in&amp;nbsp;which&amp;nbsp;the&lt;br&gt;
&amp;nbsp;type&amp;nbsp;String&amp;nbsp;has&amp;nbsp;been&amp;nbsp;substituted&amp;nbsp;for&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;E&amp;nbsp;in&amp;nbsp;the&amp;nbsp;class&amp;nbsp;body:&lt;br&gt;
&amp;nbsp;public&amp;nbsp;class&amp;nbsp;List&lt;&amp;nbsp;String&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;...&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(&amp;nbsp;String&amp;nbsp;element&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;get(&amp;nbsp;int&amp;nbsp;i&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br&gt;
We&amp;nbsp;have&amp;nbsp;specialized&amp;nbsp;the&amp;nbsp;List&amp;nbsp;class&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String&amp;nbsp;and&amp;nbsp;only&lt;br&gt;
elements&amp;nbsp;of&amp;nbsp;type&amp;nbsp;String.&amp;nbsp;This&amp;nbsp;method&amp;nbsp;signature&amp;nbsp;is&amp;nbsp;&amp;nbsp;___&amp;nbsp;no&amp;nbsp;longer&amp;nbsp;capable&amp;nbsp;of&amp;nbsp;accepting&amp;nbsp;an&lt;br&gt;
arbitrary&amp;nbsp;Object&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
List&amp;nbsp;is&amp;nbsp;just&amp;nbsp;an&amp;nbsp;interface.&amp;nbsp;To&amp;nbsp;use&amp;nbsp;the&amp;nbsp;variable,&amp;nbsp;we’ll&amp;nbsp;need&amp;nbsp;to&amp;nbsp;create&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;some&lt;br&gt;
actual&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;List.&amp;nbsp;As&amp;nbsp;we&amp;nbsp;did&amp;nbsp;in&amp;nbsp;our&amp;nbsp;introduction,&amp;nbsp;we’ll&amp;nbsp;use&amp;nbsp;ArrayList.&amp;nbsp;As&lt;br&gt;
before,&amp;nbsp;ArrayList&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&amp;nbsp;that&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;List&amp;nbsp;interface,&amp;nbsp;but&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;both&lt;br&gt;
List&amp;nbsp;and&amp;nbsp;ArrayList&amp;nbsp;are&amp;nbsp;generic&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
List&lt;String&gt;&amp;nbsp;listOfStrings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;&lt;br&gt;
List&lt;String&gt;&amp;nbsp;listOfStrings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&amp;nbsp;//&amp;nbsp;Or&amp;nbsp;shorthand&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;7.0&lt;br&gt;
//&amp;nbsp;and&amp;nbsp;later&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;can&amp;nbsp;now&amp;nbsp;use&amp;nbsp;our&amp;nbsp;specialized&amp;nbsp;List&amp;nbsp;with&amp;nbsp;strings.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;prevents&amp;nbsp;us&amp;nbsp;from&amp;nbsp;even&lt;br&gt;
trying&amp;nbsp;to&amp;nbsp;put&amp;nbsp;anything&amp;nbsp;other&amp;nbsp;than&amp;nbsp;a&amp;nbsp;String&amp;nbsp;object&amp;nbsp;(or&amp;nbsp;a&amp;nbsp;subtype&amp;nbsp;of&amp;nbsp;String&amp;nbsp;if&amp;nbsp;there&amp;nbsp;were&lt;br&gt;
any)&amp;nbsp;into&amp;nbsp;the&amp;nbsp;list&amp;nbsp;and&amp;nbsp;allows&amp;nbsp;us&amp;nbsp;to&amp;nbsp;fetch&amp;nbsp;them&amp;nbsp;with&amp;nbsp;the&amp;nbsp;get()&amp;nbsp;method&amp;nbsp;without&amp;nbsp;requiring&lt;br&gt;
any&amp;nbsp;cast:&lt;br&gt;
&amp;nbsp;List&lt;String&gt;&amp;nbsp;listOfStrings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;();&lt;br&gt;
&amp;nbsp;listOfStrings.add("eureka!&amp;nbsp;");&lt;br&gt;
&amp;nbsp;String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;listOfStrings.get(0);&amp;nbsp;//&amp;nbsp;"eureka!&amp;nbsp;"&lt;br&gt;
&amp;nbsp;listOfStrings.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;generic&amp;nbsp;Map&amp;nbsp;interface&amp;nbsp;requires&amp;nbsp;two&amp;nbsp;type&amp;nbsp;parameters:&lt;br&gt;
one&amp;nbsp;for&amp;nbsp;the&amp;nbsp;key&amp;nbsp;type&amp;nbsp;and&amp;nbsp;one&amp;nbsp;for&amp;nbsp;the&amp;nbsp;value&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;Javadoc&amp;nbsp;looks&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Map&lt;&amp;nbsp;K,&amp;nbsp;V&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
...&lt;br&gt;
public&amp;nbsp;V&amp;nbsp;put(&amp;nbsp;K&amp;nbsp;key,&amp;nbsp;V&amp;nbsp;value&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&amp;nbsp;//&amp;nbsp;returns&amp;nbsp;any&amp;nbsp;old&amp;nbsp;value&lt;br&gt;
public&amp;nbsp;V&amp;nbsp;get(&amp;nbsp;K&amp;nbsp;key&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;==============================&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;Erasure&amp;nbsp;?&lt;br&gt;
Erasure&amp;nbsp;-&amp;nbsp;means&amp;nbsp;'full&amp;nbsp;deletion'&lt;br&gt;
&lt;br&gt;
Java&amp;nbsp;Generic&amp;nbsp;Erasuer&amp;nbsp;is&amp;nbsp;like&amp;nbsp;two&amp;nbsp;pills&amp;nbsp;in&amp;nbsp;Matrix&amp;nbsp;(Take&amp;nbsp;the&amp;nbsp;blue&amp;nbsp;pill&amp;nbsp;and&amp;nbsp;remain&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;world&amp;nbsp;of&amp;nbsp;fantasy,&amp;nbsp;or&amp;nbsp;take&amp;nbsp;the&amp;nbsp;red&amp;nbsp;pill&amp;nbsp;and&amp;nbsp;see&amp;nbsp;things&amp;nbsp;as&amp;nbsp;they&amp;nbsp;really&amp;nbsp;are&amp;nbsp;in&amp;nbsp;java&lt;br&gt;
Generics&amp;nbsp;world.&lt;br&gt;
&lt;br&gt;
DEFINITION:&lt;br&gt;
The&amp;nbsp;compiler&amp;nbsp;generates&amp;nbsp;only&amp;nbsp;one&amp;nbsp;byte&amp;nbsp;code&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;or&lt;br&gt;
method&amp;nbsp;and&amp;nbsp;maps&amp;nbsp;all&amp;nbsp;the&amp;nbsp;instantiations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;or&amp;nbsp;method&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
unique&amp;nbsp;representation.&amp;nbsp;This&amp;nbsp;mapping&amp;nbsp;is&amp;nbsp;performed&amp;nbsp;by&amp;nbsp;type&amp;nbsp;erasure.&amp;nbsp;&amp;nbsp;The&amp;nbsp;essence&lt;br&gt;
of&amp;nbsp;type&amp;nbsp;erasure&amp;nbsp;is&amp;nbsp;the&amp;nbsp;removal&amp;nbsp;of&amp;nbsp;all&amp;nbsp;information&amp;nbsp;that&amp;nbsp;is&amp;nbsp;related&amp;nbsp;to&amp;nbsp;type&lt;br&gt;
parameters&amp;nbsp;and&amp;nbsp;type&amp;nbsp;arguments.&amp;nbsp;In&amp;nbsp;addition,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;adds&amp;nbsp;type&amp;nbsp;checks&amp;nbsp;and&lt;br&gt;
type&amp;nbsp;conversions&amp;nbsp;where&amp;nbsp;needed&amp;nbsp;and&amp;nbsp;inserts&amp;nbsp;synthetic&amp;nbsp;bridge&amp;nbsp;methods&amp;nbsp;if&amp;nbsp;necessary.&lt;br&gt;
It&amp;nbsp;is&amp;nbsp;important&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;type&amp;nbsp;erasure&amp;nbsp;because&amp;nbsp;certain&amp;nbsp;effects&amp;nbsp;related&lt;br&gt;
to&amp;nbsp;Java&amp;nbsp;generics&amp;nbsp;are&amp;nbsp;difficult&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;without&amp;nbsp;a&amp;nbsp;proper&amp;nbsp;understanding&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;translation&amp;nbsp;process.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;type&amp;nbsp;erasure&amp;nbsp;process&amp;nbsp;can&amp;nbsp;be&amp;nbsp;imagined&amp;nbsp;as&amp;nbsp;a&amp;nbsp;translation&amp;nbsp;from&amp;nbsp;generic&amp;nbsp;Java&amp;nbsp;source&lt;br&gt;
code&amp;nbsp;back&amp;nbsp;into&amp;nbsp;regular&amp;nbsp;Java&amp;nbsp;code.&amp;nbsp;&amp;nbsp;In&amp;nbsp;reality&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;is&amp;nbsp;more&amp;nbsp;efficient&amp;nbsp;and&amp;nbsp;translates&lt;br&gt;
directly&amp;nbsp;to&amp;nbsp;Java&amp;nbsp;byte&amp;nbsp;code.&amp;nbsp;&amp;nbsp;But&amp;nbsp;the&amp;nbsp;byte&amp;nbsp;code&amp;nbsp;created&amp;nbsp;is&amp;nbsp;equivalent&amp;nbsp;to&amp;nbsp;the&amp;nbsp;non-generic&lt;br&gt;
Java&amp;nbsp;code&amp;nbsp;you&amp;nbsp;will&amp;nbsp;be&amp;nbsp;seeing&amp;nbsp;in&amp;nbsp;the&amp;nbsp;subsequent&amp;nbsp;examples.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;steps&amp;nbsp;performed&amp;nbsp;during&amp;nbsp;type&amp;nbsp;erasure&amp;nbsp;include:&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Eliding&amp;nbsp;type&amp;nbsp;parameters.&amp;nbsp;&lt;br&gt;
&amp;nbsp;When&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;finds&amp;nbsp;the&amp;nbsp;definition&amp;nbsp;of&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;or&amp;nbsp;method,&amp;nbsp;it&amp;nbsp;removes&lt;br&gt;
all&amp;nbsp;occurrences&amp;nbsp;of&amp;nbsp;the&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;replaces&amp;nbsp;them&amp;nbsp;by&amp;nbsp;their&amp;nbsp;leftmost&lt;br&gt;
bound,&amp;nbsp;or&amp;nbsp;type&amp;nbsp;Object&amp;nbsp;if&amp;nbsp;no&amp;nbsp;bound&amp;nbsp;had&amp;nbsp;been&amp;nbsp;specified.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Eliding&amp;nbsp;type&amp;nbsp;arguments.&amp;nbsp;&lt;br&gt;
When&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;finds&amp;nbsp;a&amp;nbsp;paramterized&amp;nbsp;type,&amp;nbsp;i.e.&amp;nbsp;an&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;generic&lt;br&gt;
type,&amp;nbsp;then&amp;nbsp;it&amp;nbsp;removes&amp;nbsp;the&amp;nbsp;type&amp;nbsp;arguments.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;the&amp;nbsp;types&amp;nbsp;List&lt;String&gt;&amp;nbsp;,&lt;br&gt;
Set&lt;Long&gt;&amp;nbsp;,&amp;nbsp;and&amp;nbsp;Map&lt;String,?&gt;&amp;nbsp;are&amp;nbsp;translated&amp;nbsp;to&amp;nbsp;List&amp;nbsp;,&amp;nbsp;Set&amp;nbsp;and&amp;nbsp;Map&amp;nbsp;respectively.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(before&amp;nbsp;type&amp;nbsp;erasure):&amp;nbsp;&lt;br&gt;
&lt;br&gt;
interface&amp;nbsp;Comparable&amp;nbsp;&lt;A&gt;&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;compareTo(&amp;nbsp;A&amp;nbsp;that);&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
final&amp;nbsp;class&amp;nbsp;NumericValue&amp;nbsp;implements&amp;nbsp;Comparable&amp;nbsp;&lt;NumericValue&gt;&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;priva&amp;nbsp;te&amp;nbsp;byte&amp;nbsp;value;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;NumericValue&amp;nbsp;(byte&amp;nbsp;value)&amp;nbsp;{&amp;nbsp;this.value&amp;nbsp;=&amp;nbsp;value;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;byte&amp;nbsp;getValue()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;value;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;int&amp;nbsp;compareTo(&amp;nbsp;NumericValue&amp;nbsp;t&amp;nbsp;hat)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;this.value&amp;nbsp;-&amp;nbsp;that.value;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Collections&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;&lt;A&amp;nbsp;extends&amp;nbsp;Comparable&lt;A&gt;&gt;A&amp;nbsp;max(Collection&amp;nbsp;&lt;A&gt;&amp;nbsp;xs)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;&lt;A&gt;&amp;nbsp;xi&amp;nbsp;=&amp;nbsp;xs.iterator();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;w&amp;nbsp;=&amp;nbsp;xi.next();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(xi.hasNext())&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;x&amp;nbsp;=&amp;nbsp;xi.next();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(w.compareTo(x)&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;w&amp;nbsp;=&amp;nbsp;x;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;w;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
final&amp;nbsp;class&amp;nbsp;Test&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main&amp;nbsp;(String[&amp;nbsp;]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LinkedList&amp;nbsp;&lt;NumericValue&gt;&amp;nbsp;numberList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedList&amp;nbsp;&lt;NumericValue&gt;&amp;nbsp;();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numberList&amp;nbsp;.add(new&amp;nbsp;NumericValue((byte)0));&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numberList&amp;nbsp;.add(new&amp;nbsp;NumericValue((byte)1));&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NumericValue&amp;nbsp;y&amp;nbsp;=&amp;nbsp;Collections.max(&amp;nbsp;numberList&amp;nbsp;);&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
Example&amp;nbsp;(after&amp;nbsp;type&amp;nbsp;erasure):&amp;nbsp;&lt;br&gt;
&lt;br&gt;
interface&amp;nbsp;Comparable&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;compareTo(&amp;nbsp;Object&amp;nbsp;that);&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
final&amp;nbsp;class&amp;nbsp;NumericValue&amp;nbsp;implements&amp;nbsp;Comparable&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;priva&amp;nbsp;te&amp;nbsp;byte&amp;nbsp;value;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;NumericValue&amp;nbsp;(byte&amp;nbsp;value)&amp;nbsp;{&amp;nbsp;this.value&amp;nbsp;=&amp;nbsp;value;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;byte&amp;nbsp;getValue()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;value;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;int&amp;nbsp;compareTo(&amp;nbsp;NumericValue&amp;nbsp;t&amp;nbsp;hat)&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;return&amp;nbsp;this.value&amp;nbsp;-&amp;nbsp;that.value;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;int&amp;nbsp;compareTo(Object&amp;nbsp;that)&amp;nbsp;{&amp;nbsp;return&amp;nbsp;this.compareTo((NumericValue)that);&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Collections&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Comparable&amp;nbsp;max(Collection&amp;nbsp;xs)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iterator&amp;nbsp;xi&amp;nbsp;=&amp;nbsp;xs.iterator();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Comparable&amp;nbsp;w&amp;nbsp;=&amp;nbsp;(Comparable)&amp;nbsp;xi.next();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(xi.hasNext())&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Comparable&amp;nbsp;x&amp;nbsp;=&amp;nbsp;(Comparable)&amp;nbsp;xi.next();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(w.compareTo(x)&amp;nbsp;&lt;&amp;nbsp;0)&amp;nbsp;w&amp;nbsp;=&amp;nbsp;x;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;w;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
final&amp;nbsp;class&amp;nbsp;Test&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main&amp;nbsp;(String[&amp;nbsp;]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LinkedList&amp;nbsp;numberList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;LinkedList();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numberList&amp;nbsp;.add(new&amp;nbsp;NumericValue((byte)0));&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numberList&amp;nbsp;.add(new&amp;nbsp;NumericValue((byte)1));&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NumericValue&amp;nbsp;y&amp;nbsp;=&amp;nbsp;(NumericValue)&amp;nbsp;Collections.max(&amp;nbsp;numberList&amp;nbsp;);&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;generic&amp;nbsp;Comparable&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;translated&amp;nbsp;to&amp;nbsp;a&amp;nbsp;non-generic&amp;nbsp;interface&amp;nbsp;and&amp;nbsp;the&lt;br&gt;
unbounded&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;A&amp;nbsp;is&amp;nbsp;replaced&amp;nbsp;by&amp;nbsp;type&amp;nbsp;Object&amp;nbsp;.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;List&lt;Date&gt;&amp;nbsp;dateList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;nbsp;dateList&amp;nbsp;instanceof&amp;nbsp;List&amp;nbsp;);&amp;nbsp;//&amp;nbsp;true!&lt;br&gt;
But&amp;nbsp;our&amp;nbsp;generic&amp;nbsp;dateList&amp;nbsp;clearly&amp;nbsp;does&amp;nbsp;not&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;List&amp;nbsp;methods&amp;nbsp;just&amp;nbsp;discussed:&lt;br&gt;
&amp;nbsp;&amp;nbsp;dateList.add(&amp;nbsp;new&amp;nbsp;Object()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;illustrates&amp;nbsp;the&amp;nbsp;somewhat&amp;nbsp;&amp;nbsp;__&amp;nbsp;schizophrenic&amp;nbsp;nature&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;generics.&amp;nbsp;The&amp;nbsp;compiler&amp;nbsp;believes&lt;br&gt;
in&amp;nbsp;them,&amp;nbsp;but&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;says&amp;nbsp;they&amp;nbsp;are&amp;nbsp;an&amp;nbsp;illusion&amp;nbsp;=).&amp;nbsp;What&amp;nbsp;if&amp;nbsp;we&amp;nbsp;try&amp;nbsp;something&amp;nbsp;a&lt;br&gt;
little&amp;nbsp;more&amp;nbsp;sane&amp;nbsp;and&amp;nbsp;simply&amp;nbsp;check&amp;nbsp;that&amp;nbsp;our&amp;nbsp;dateList&amp;nbsp;is&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;:&lt;br&gt;
System.out.println(&amp;nbsp;dateList&amp;nbsp;instanceof&amp;nbsp;List&lt;Date&gt;&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
//&amp;nbsp;Illegal,&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;for&amp;nbsp;instanceof&lt;br&gt;
&lt;br&gt;
========&lt;br&gt;
!!!!!&lt;br&gt;
&lt;br&gt;
One&amp;nbsp;more&amp;nbsp;thing&amp;nbsp;about&amp;nbsp;erasure&amp;nbsp;before&amp;nbsp;we&amp;nbsp;move&amp;nbsp;on.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;previous&lt;br&gt;
examples,&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;were&amp;nbsp;replaced&amp;nbsp;by&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;type,&lt;br&gt;
which&amp;nbsp;could&amp;nbsp;represent&amp;nbsp;any&amp;nbsp;type&amp;nbsp;applicable&amp;nbsp;to&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;E.&lt;br&gt;
Later&amp;nbsp;we’ll&amp;nbsp;see&amp;nbsp;that&amp;nbsp;this&amp;nbsp;is&amp;nbsp;not&amp;nbsp;always&amp;nbsp;the&amp;nbsp;case.&amp;nbsp;We&amp;nbsp;can&amp;nbsp;place&lt;br&gt;
limitations&amp;nbsp;or&amp;nbsp;bounds&amp;nbsp;on&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;types,&amp;nbsp;and,&amp;nbsp;when&amp;nbsp;we&amp;nbsp;do,&lt;br&gt;
the&amp;nbsp;compiler&amp;nbsp;can&amp;nbsp;be&amp;nbsp;more&amp;nbsp;restrictive&amp;nbsp;about&amp;nbsp;the&amp;nbsp;erasure&amp;nbsp;of&amp;nbsp;the&amp;nbsp;type.&lt;br&gt;
We’ll&amp;nbsp;explain&amp;nbsp;in&amp;nbsp;more&amp;nbsp;detail&amp;nbsp;later&amp;nbsp;after&amp;nbsp;we&lt;br&gt;
discuss&amp;nbsp;bounds,&amp;nbsp;but,&amp;nbsp;for&amp;nbsp;example:&lt;br&gt;
&amp;nbsp;class&amp;nbsp;Bounded&lt;&amp;nbsp;E&amp;nbsp;extends&amp;nbsp;Date&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addElement(&amp;nbsp;E&amp;nbsp;element&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
This&amp;nbsp;parameter&amp;nbsp;type&amp;nbsp;declaration&amp;nbsp;says&amp;nbsp;that&amp;nbsp;the&amp;nbsp;element&amp;nbsp;type&amp;nbsp;E&amp;nbsp;must&amp;nbsp;be&amp;nbsp;a&amp;nbsp;subtype&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
Date&amp;nbsp;type.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;the&amp;nbsp;erasure&amp;nbsp;of&amp;nbsp;the&amp;nbsp;addElement()&amp;nbsp;method&amp;nbsp;is&amp;nbsp;therefore&amp;nbsp;more&amp;nbsp;restrictive&lt;br&gt;
than&amp;nbsp;Object,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;uses&amp;nbsp;Date:&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;addElement(&amp;nbsp;Date&amp;nbsp;element&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
========&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;erasure&amp;nbsp;is&amp;nbsp;really&amp;nbsp;funny&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;nbsp;nongeneric&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nongeneric.add(1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nongeneric.add("1");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;generic&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generic.add(10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(nongeneric.getClass()&amp;nbsp;==&amp;nbsp;generic.getClass());&amp;nbsp;//&amp;nbsp;true&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;we&amp;nbsp;can&amp;nbsp;compare&amp;nbsp;Class&amp;nbsp;types&amp;nbsp;with&amp;nbsp;==&amp;nbsp;,&amp;nbsp;because&amp;nbsp;Class&amp;nbsp;is&amp;nbsp;final&amp;nbsp;and&amp;nbsp;equals&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;this&amp;nbsp;type&amp;nbsp;using&amp;nbsp;==&amp;nbsp;,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;each&amp;nbsp;ClassLoader&amp;nbsp;can&amp;nbsp;only&amp;nbsp;load&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;class&amp;nbsp;once&amp;nbsp;and&amp;nbsp;will&amp;nbsp;always&amp;nbsp;give&amp;nbsp;you&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//same&amp;nbsp;Class&amp;nbsp;for&amp;nbsp;a&amp;nbsp;given&amp;nbsp;fully&amp;nbsp;qualified&amp;nbsp;name.&lt;br&gt;
===============================================&lt;br&gt;
&lt;br&gt;
Hello&amp;nbsp;World&amp;nbsp;generics&amp;nbsp;Example&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;genericsexamples;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;HelloGenerics&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("hello&amp;nbsp;Generics");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Box&lt;String&gt;&amp;nbsp;box&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Box&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;box.add("some&amp;nbsp;element");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(box.getT());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Box&amp;nbsp;&lt;T&gt;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;T&amp;nbsp;t;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(T&amp;nbsp;t){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.t&amp;nbsp;=&amp;nbsp;t;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;T&amp;nbsp;getT(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.t;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
======================</questionanswer>
  </question>
  <question id="1_0_0_2_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Casts,&amp;nbsp;describe.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;List&lt;TestB&gt;&amp;nbsp;to&amp;nbsp;List&lt;TestA&gt;&amp;nbsp;?&lt;br&gt;
(TestB&amp;nbsp;extends&amp;nbsp;TestA)&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>We’ve&amp;nbsp;now&amp;nbsp;talked&amp;nbsp;about&amp;nbsp;relationships&amp;nbsp;between&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;and&amp;nbsp;even&lt;br&gt;
between&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;and&amp;nbsp;raw&amp;nbsp;types.&amp;nbsp;But&amp;nbsp;we&amp;nbsp;haven’t&amp;nbsp;brought&amp;nbsp;up&amp;nbsp;the&lt;br&gt;
concept&amp;nbsp;of&amp;nbsp;a&amp;nbsp;cast&amp;nbsp;yet.&amp;nbsp;No&amp;nbsp;cast&amp;nbsp;was&amp;nbsp;necessary&amp;nbsp;when&amp;nbsp;we&amp;nbsp;interchanged&lt;br&gt;
generics&amp;nbsp;with&amp;nbsp;their&amp;nbsp;raw&amp;nbsp;types.&amp;nbsp;Instead,&amp;nbsp;we&amp;nbsp;just&amp;nbsp;crossed&lt;br&gt;
a&amp;nbsp;line&amp;nbsp;that&amp;nbsp;triggers&amp;nbsp;unchecked&amp;nbsp;warnings&amp;nbsp;from&amp;nbsp;the&amp;nbsp;compiler:&amp;nbsp;&lt;br&gt;
&amp;nbsp;List&amp;nbsp;list&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;List&lt;Date&gt;&amp;nbsp;dl&amp;nbsp;=&amp;nbsp;list;&amp;nbsp;//&amp;nbsp;unchecked&amp;nbsp;warning&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Normally,&amp;nbsp;we&amp;nbsp;use&amp;nbsp;a&amp;nbsp;cast&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;to&amp;nbsp;work&amp;nbsp;with&amp;nbsp;two&amp;nbsp;types&amp;nbsp;that&amp;nbsp;could&amp;nbsp;be&lt;br&gt;
assignable.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;we&amp;nbsp;could&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;to&lt;br&gt;
a&amp;nbsp;Date&amp;nbsp;because&amp;nbsp;it&amp;nbsp;is&amp;nbsp;plausible&amp;nbsp;that&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Date&amp;nbsp;value.&lt;br&gt;
The&amp;nbsp;cast&amp;nbsp;then&amp;nbsp;performs&amp;nbsp;the&amp;nbsp;check&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;to&amp;nbsp;see&amp;nbsp;if&amp;nbsp;we&amp;nbsp;are&lt;br&gt;
correct.&amp;nbsp;Casting&amp;nbsp;between&amp;nbsp;unrelated&amp;nbsp;types&amp;nbsp;is&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;we&amp;nbsp;can’t&amp;nbsp;even&amp;nbsp;try&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;an&amp;nbsp;Integer&amp;nbsp;to&amp;nbsp;a&amp;nbsp;String.&lt;br&gt;
Those&amp;nbsp;types&amp;nbsp;have&amp;nbsp;no&amp;nbsp;inheritance&amp;nbsp;relationship.&lt;br&gt;
What&amp;nbsp;about&amp;nbsp;casts&amp;nbsp;between&amp;nbsp;compatible&amp;nbsp;generic&amp;nbsp;types?&lt;br&gt;
&lt;br&gt;
Collection&lt;Date&gt;&amp;nbsp;cd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
List&lt;Date&gt;&amp;nbsp;ld&amp;nbsp;=&amp;nbsp;(List&lt;Date&gt;)cd;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Ok!&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;code&amp;nbsp;snippet&amp;nbsp;shows&amp;nbsp;a&amp;nbsp;valid&amp;nbsp;cast&amp;nbsp;from&amp;nbsp;a&amp;nbsp;more&amp;nbsp;general&lt;br&gt;
Collection&lt;Date&gt;&amp;nbsp;to&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;.&amp;nbsp;The&amp;nbsp;cast&amp;nbsp;is&amp;nbsp;plausible&amp;nbsp;here&amp;nbsp;because&lt;br&gt;
a&amp;nbsp;Collection&lt;Date&gt;&amp;nbsp;is&amp;nbsp;assignable&amp;nbsp;from&amp;nbsp;and&amp;nbsp;could&amp;nbsp;actually&amp;nbsp;be&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;.&lt;br&gt;
Similarly,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;cast&amp;nbsp;catches&amp;nbsp;our&amp;nbsp;mistake&amp;nbsp;where&amp;nbsp;we&amp;nbsp;have&lt;br&gt;
aliased&amp;nbsp;a&amp;nbsp;TreeSet&lt;Date&gt;&amp;nbsp;as&amp;nbsp;a&amp;nbsp;Collection&lt;Date&gt;&amp;nbsp;and&amp;nbsp;tried&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;it&amp;nbsp;to&amp;nbsp;a&lt;br&gt;
List&lt;Date&gt;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Collection&lt;Date&gt;&amp;nbsp;cd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;TreeSet&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Date&gt;&amp;nbsp;ld&amp;nbsp;=&amp;nbsp;(List&lt;Date&gt;)cd;&amp;nbsp;//&amp;nbsp;Runtime&amp;nbsp;ClassCastException!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ld.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
=========================================&lt;br&gt;
&amp;nbsp;Why&amp;nbsp;Isn’t&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;&amp;nbsp;a&amp;nbsp;List&lt;Object&gt;?&lt;br&gt;
&lt;br&gt;
It’s&amp;nbsp;a&amp;nbsp;reasonable&amp;nbsp;question.&amp;nbsp;Even&amp;nbsp;with&amp;nbsp;our&amp;nbsp;brains&amp;nbsp;thinking&amp;nbsp;of&amp;nbsp;arbitrary&lt;br&gt;
DateList&amp;nbsp;and&amp;nbsp;ObjectList&amp;nbsp;types,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;still&amp;nbsp;ask&amp;nbsp;why&amp;nbsp;they&amp;nbsp;couldn’t&amp;nbsp;be&lt;br&gt;
assignable.&amp;nbsp;Why&amp;nbsp;shouldn’t&amp;nbsp;we&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;our&amp;nbsp;List&lt;Date&gt;&amp;nbsp;to&lt;br&gt;
a&amp;nbsp;List&lt;Object&gt;&amp;nbsp;and&amp;nbsp;work&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Date&amp;nbsp;elements&amp;nbsp;as&amp;nbsp;Object&amp;nbsp;types?&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;We&amp;nbsp;could&amp;nbsp;alias&amp;nbsp;the&amp;nbsp;DateList&amp;nbsp;as&amp;nbsp;an&amp;nbsp;ObjectList&amp;nbsp;and&amp;nbsp;try&amp;nbsp;to&amp;nbsp;trick&amp;nbsp;it&amp;nbsp;into&lt;br&gt;
accepting&amp;nbsp;some&amp;nbsp;other&amp;nbsp;type:&lt;br&gt;
&amp;nbsp;&amp;nbsp;DateList&amp;nbsp;dateList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;DateList();&lt;br&gt;
&amp;nbsp;&amp;nbsp;ObjectList&amp;nbsp;objectList&amp;nbsp;=&amp;nbsp;dateList;&amp;nbsp;//&amp;nbsp;Can't&amp;nbsp;really&amp;nbsp;do&amp;nbsp;this&lt;br&gt;
&amp;nbsp;&amp;nbsp;objectList.add(&amp;nbsp;new&amp;nbsp;Foo()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;should&amp;nbsp;be&amp;nbsp;runtime&amp;nbsp;error!&lt;br&gt;
&lt;br&gt;
=================================&lt;br&gt;
TRICKY&amp;nbsp;CASTING&amp;nbsp;:&lt;br&gt;
Simply&amp;nbsp;casting&amp;nbsp;to&amp;nbsp;List&lt;TestB&gt;&amp;nbsp;almost&amp;nbsp;works;&amp;nbsp;but&amp;nbsp;it&amp;nbsp;doesn't&amp;nbsp;work&amp;nbsp;because&lt;br&gt;
you&amp;nbsp;can't&amp;nbsp;cast&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;of&amp;nbsp;one&amp;nbsp;parameter&amp;nbsp;to&amp;nbsp;another.&amp;nbsp;However,&lt;br&gt;
you&amp;nbsp;can&amp;nbsp;cast&amp;nbsp;through&amp;nbsp;an&amp;nbsp;intermediate&amp;nbsp;wildcard&amp;nbsp;type&amp;nbsp;and&amp;nbsp;it&amp;nbsp;will&amp;nbsp;be&lt;br&gt;
allowed&amp;nbsp;(since&amp;nbsp;you&amp;nbsp;can&amp;nbsp;cast&amp;nbsp;to&amp;nbsp;and&amp;nbsp;from&amp;nbsp;wildcard&amp;nbsp;types,&amp;nbsp;just&amp;nbsp;with&amp;nbsp;an&lt;br&gt;
unchecked&amp;nbsp;warning):&lt;br&gt;
List&lt;TestB&gt;&amp;nbsp;variable&amp;nbsp;=&amp;nbsp;(List&lt;TestB&gt;)(List&lt;?&gt;)&amp;nbsp;collectionOfListA;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;TestA&gt;&amp;nbsp;a&amp;nbsp;&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.add(new&amp;nbsp;TestB());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a.add(new&amp;nbsp;TestA());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;TestB&gt;&amp;nbsp;b&amp;nbsp;&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.add(new&amp;nbsp;TestB());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;=(List&lt;TestA&gt;)(List&lt;?&gt;)&amp;nbsp;b;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(TestA&amp;nbsp;item&amp;nbsp;:&amp;nbsp;a){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item.getClass());&amp;nbsp;//&amp;nbsp;work&amp;nbsp;nice&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&amp;nbsp;=(List&lt;TestB&gt;)(List&lt;?&gt;)&amp;nbsp;a;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(TestB&amp;nbsp;item&amp;nbsp;:&amp;nbsp;b){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item.getClass());&amp;nbsp;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;exception&amp;nbsp;if&amp;nbsp;item&amp;nbsp;isnt&amp;nbsp;TestB&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}*/&lt;br&gt;
&lt;br&gt;
=========================</questionanswer>
  </question>
  <question id="1_0_0_2_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Subclasing&amp;nbsp;generics,&amp;nbsp;&lt;br&gt;
Exceptions&amp;nbsp;and&amp;nbsp;Generics(throws&amp;nbsp;T&amp;nbsp;-&amp;nbsp;example)&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Subclassing&amp;nbsp;Generics&lt;br&gt;
&lt;br&gt;
Generic&amp;nbsp;types&amp;nbsp;can&amp;nbsp;be&amp;nbsp;subclassed&amp;nbsp;just&amp;nbsp;like&amp;nbsp;any&amp;nbsp;other&amp;nbsp;class&amp;nbsp;by&amp;nbsp;either&lt;br&gt;
generic&amp;nbsp;or&amp;nbsp;nongeneric&amp;nbsp;child&amp;nbsp;classes.&amp;nbsp;A&amp;nbsp;nongeneric&amp;nbsp;subclass&amp;nbsp;must&lt;br&gt;
extend&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;type,&amp;nbsp;filling&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
required&amp;nbsp;parameters&amp;nbsp;to&amp;nbsp;make&amp;nbsp;it&amp;nbsp;concrete:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;DateList&amp;nbsp;extends&amp;nbsp;ArrayList&lt;Date&gt;&amp;nbsp;{&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
DateList&amp;nbsp;dateList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;DateList();&lt;br&gt;
dateList.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&lt;br&gt;
List&lt;Date&gt;&amp;nbsp;ld&amp;nbsp;=&amp;nbsp;dateList;&lt;br&gt;
&lt;br&gt;
Here,&amp;nbsp;we&amp;nbsp;have&amp;nbsp;created&amp;nbsp;a&amp;nbsp;nongeneric&amp;nbsp;subclass,&amp;nbsp;DateList,&amp;nbsp;of&amp;nbsp;the&amp;nbsp;concrete&lt;br&gt;
generic&amp;nbsp;instantiation&amp;nbsp;ArrayList&lt;Date&gt;.&amp;nbsp;The&amp;nbsp;DateList&amp;nbsp;is&amp;nbsp;a&amp;nbsp;type&amp;nbsp;of&lt;br&gt;
ArrayList&lt;Date&gt;&amp;nbsp;and&amp;nbsp;inherits&amp;nbsp;the&amp;nbsp;particular&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
methods,&amp;nbsp;just&amp;nbsp;as&amp;nbsp;it&amp;nbsp;would&amp;nbsp;from&amp;nbsp;any&amp;nbsp;other&amp;nbsp;parent.&amp;nbsp;We&amp;nbsp;can&amp;nbsp;even&amp;nbsp;assign&lt;br&gt;
it&amp;nbsp;back&amp;nbsp;to&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;type&amp;nbsp;if&amp;nbsp;we&amp;nbsp;wish,&amp;nbsp;as&amp;nbsp;shown&amp;nbsp;in&amp;nbsp;this&amp;nbsp;example&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
A&amp;nbsp;generic&amp;nbsp;subtype&amp;nbsp;of&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;class&amp;nbsp;may&amp;nbsp;extend&amp;nbsp;either&amp;nbsp;a&amp;nbsp;concrete&lt;br&gt;
instantiation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class,&amp;nbsp;as&amp;nbsp;in&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;example,&amp;nbsp;or&amp;nbsp;it&amp;nbsp;may&amp;nbsp;share&lt;br&gt;
a&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;that&amp;nbsp;it&amp;nbsp;"passes&amp;nbsp;up"&amp;nbsp;to&amp;nbsp;the&amp;nbsp;parent&amp;nbsp;upon&amp;nbsp;instantiation:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;AdjustableTrap&lt;&amp;nbsp;T&amp;nbsp;&gt;&amp;nbsp;extends&amp;nbsp;Trap&lt;&amp;nbsp;T&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setSize(&amp;nbsp;int&amp;nbsp;i&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Here,&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;T&amp;nbsp;used&amp;nbsp;to&amp;nbsp;instantiate&amp;nbsp;the&amp;nbsp;AdjustableTrap&lt;br&gt;
class&amp;nbsp;is&amp;nbsp;passed&amp;nbsp;along&amp;nbsp;to&amp;nbsp;instantiate&amp;nbsp;the&amp;nbsp;base&amp;nbsp;class,&amp;nbsp;Trap.&amp;nbsp;When&amp;nbsp;the&lt;br&gt;
user&amp;nbsp;instantiates&amp;nbsp;the&amp;nbsp;AdjustableTrap&amp;nbsp;on&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;parameter&amp;nbsp;type,&lt;br&gt;
the&amp;nbsp;parent&amp;nbsp;class&amp;nbsp;is&amp;nbsp;instantiated&amp;nbsp;on&amp;nbsp;that&amp;nbsp;type&amp;nbsp;as&amp;nbsp;well.&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;
Exceptions&amp;nbsp;and&amp;nbsp;Generics&lt;br&gt;
&lt;br&gt;
Types&amp;nbsp;appear&amp;nbsp;in&amp;nbsp;the&amp;nbsp;body&amp;nbsp;of&amp;nbsp;classes&amp;nbsp;in&amp;nbsp;another&amp;nbsp;place—the&amp;nbsp;throws&lt;br&gt;
clauses&amp;nbsp;of&amp;nbsp;methods.&amp;nbsp;We&amp;nbsp;can&amp;nbsp;use&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;to&amp;nbsp;define&amp;nbsp;the&amp;nbsp;type&lt;br&gt;
of&amp;nbsp;exceptions&amp;nbsp;thrown&amp;nbsp;by&amp;nbsp;methods,&amp;nbsp;but&amp;nbsp;to&amp;nbsp;do&amp;nbsp;so&amp;nbsp;we&amp;nbsp;need&amp;nbsp;to&amp;nbsp;introduce&lt;br&gt;
the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;bounds.&amp;nbsp;We&amp;nbsp;cover&amp;nbsp;bounds&amp;nbsp;more&amp;nbsp;in&amp;nbsp;the&amp;nbsp;next&amp;nbsp;section.&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;the&amp;nbsp;usage&amp;nbsp;is&amp;nbsp;very&amp;nbsp;simple.&amp;nbsp;We&amp;nbsp;just&amp;nbsp;need&amp;nbsp;to&amp;nbsp;ensure&amp;nbsp;that&lt;br&gt;
the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;use&amp;nbsp;as&amp;nbsp;our&amp;nbsp;exception&amp;nbsp;type&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;a&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;Throwable.&amp;nbsp;We&amp;nbsp;can&amp;nbsp;do&amp;nbsp;that&amp;nbsp;by&amp;nbsp;adding&amp;nbsp;an&amp;nbsp;extends&amp;nbsp;clause&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
declaration&amp;nbsp;of&amp;nbsp;our&amp;nbsp;type&amp;nbsp;variable,&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
&lt;br&gt;
&lt;&amp;nbsp;T&amp;nbsp;extends&amp;nbsp;Throwable&amp;nbsp;&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Here&amp;nbsp;is&amp;nbsp;an&amp;nbsp;example&amp;nbsp;class,&amp;nbsp;parameterized&amp;nbsp;on&amp;nbsp;a&amp;nbsp;type&amp;nbsp;that&amp;nbsp;must&amp;nbsp;be&lt;br&gt;
a&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;Throwable.&amp;nbsp;Its&amp;nbsp;test()&amp;nbsp;method&amp;nbsp;accepts&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&lt;br&gt;
that&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;object&amp;nbsp;and&amp;nbsp;throws&amp;nbsp;it&amp;nbsp;as&amp;nbsp;a&amp;nbsp;checked&amp;nbsp;exception:&lt;br&gt;
&amp;nbsp;ExceptionTester&lt;&amp;nbsp;T&amp;nbsp;extends&amp;nbsp;Throwable&amp;nbsp;&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test(&amp;nbsp;T&amp;nbsp;exception&amp;nbsp;)&amp;nbsp;throws&amp;nbsp;T&amp;nbsp;{//&amp;nbsp;throw&amp;nbsp;type&amp;nbsp;is&amp;nbsp;generic&amp;nbsp;param&lt;br&gt;
&amp;nbsp;&amp;nbsp;throw&amp;nbsp;exception;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;new&amp;nbsp;ExceptionTester&lt;ClassNotFoundException&gt;().test(&lt;br&gt;
&amp;nbsp;new&amp;nbsp;ClassNotFoundException()&amp;nbsp;);&lt;br&gt;
}&amp;nbsp;catch&amp;nbsp;(&amp;nbsp;ClassNotFoundException&amp;nbsp;e&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;important&amp;nbsp;part&amp;nbsp;of&amp;nbsp;this&amp;nbsp;example&amp;nbsp;is&amp;nbsp;that&amp;nbsp;the&amp;nbsp;throws&amp;nbsp;clause&lt;br&gt;
of&amp;nbsp;our&amp;nbsp;test&amp;nbsp;method&amp;nbsp;is&amp;nbsp;defined&amp;nbsp;to&amp;nbsp;throw&amp;nbsp;T,&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;parameter&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;we&amp;nbsp;can&amp;nbsp;parameterize&amp;nbsp;the&amp;nbsp;type&lt;br&gt;
of&amp;nbsp;exceptions&amp;nbsp;thrown&amp;nbsp;by&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_2_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Parameter&amp;nbsp;Type&amp;nbsp;Limitations,&amp;nbsp;describe.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;Create&amp;nbsp;Instances&amp;nbsp;of&amp;nbsp;Generic&amp;nbsp;Type&amp;nbsp;Parameters&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1)&amp;nbsp;&amp;nbsp;Cannot&amp;nbsp;Instantiate&amp;nbsp;Generic&amp;nbsp;Types&amp;nbsp;with&amp;nbsp;Primitive&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
Consider&amp;nbsp;the&amp;nbsp;following&amp;nbsp;parameterized&amp;nbsp;type:&lt;br&gt;
class&amp;nbsp;Pair&lt;K,&amp;nbsp;V&gt;&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;K&amp;nbsp;key;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;V&amp;nbsp;value;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Pair(K&amp;nbsp;key,&amp;nbsp;V&amp;nbsp;value)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.key&amp;nbsp;=&amp;nbsp;key;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.value&amp;nbsp;=&amp;nbsp;value;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;Pair&amp;nbsp;object,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;substitute&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;type&amp;nbsp;for&amp;nbsp;the&lt;br&gt;
type&amp;nbsp;parameter&amp;nbsp;K&amp;nbsp;or&amp;nbsp;V:&lt;br&gt;
Pair&lt;int,&amp;nbsp;char&gt;&amp;nbsp;p&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Pair&lt;&gt;(8,&amp;nbsp;'a');&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;substitute&amp;nbsp;only&amp;nbsp;non-primitive&amp;nbsp;types&amp;nbsp;for&amp;nbsp;the&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;K&amp;nbsp;and&amp;nbsp;V:&lt;br&gt;
Pair&lt;Integer,&amp;nbsp;Character&gt;&amp;nbsp;p&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Pair&lt;&gt;(8,&amp;nbsp;'a');&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
SO&amp;nbsp;USE&amp;nbsp;ONLY&amp;nbsp;OBJECTS&amp;nbsp;IN&amp;nbsp;GENERICS!!!&lt;br&gt;
ArrayList&lt;int&gt;&amp;nbsp;list;&amp;nbsp;//&amp;nbsp;ERROR&amp;nbsp;,&amp;nbsp;only&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;allowed&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
2)&amp;nbsp;Cannot&amp;nbsp;Create&amp;nbsp;Instances&amp;nbsp;of&amp;nbsp;Type&amp;nbsp;Parameters&amp;nbsp;!!!!!!!&lt;br&gt;
You&amp;nbsp;cannot&amp;nbsp;create&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&lt;br&gt;
following&amp;nbsp;code&amp;nbsp;causes&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;&lt;E&gt;&amp;nbsp;void&amp;nbsp;append(List&lt;E&gt;&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E&amp;nbsp;elem&amp;nbsp;=&amp;nbsp;new&amp;nbsp;E();&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(elem);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;a&amp;nbsp;workaround,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;create&amp;nbsp;an&amp;nbsp;object&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;through&amp;nbsp;reflection:&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;&lt;E&gt;&amp;nbsp;void&amp;nbsp;append(List&lt;E&gt;&amp;nbsp;list,&amp;nbsp;Class&lt;E&gt;&amp;nbsp;cls)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E&amp;nbsp;elem&amp;nbsp;=&amp;nbsp;cls.newInstance();&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.add(elem);&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;can&amp;nbsp;invoke&amp;nbsp;the&amp;nbsp;append&amp;nbsp;method&amp;nbsp;as&amp;nbsp;follows:&lt;br&gt;
List&lt;String&gt;&amp;nbsp;ls&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
append(ls,&amp;nbsp;String.class);&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
T&amp;nbsp;element&amp;nbsp;=&amp;nbsp;new&amp;nbsp;T();&amp;nbsp;//&amp;nbsp;Error!&amp;nbsp;Invalid&amp;nbsp;syntax.&lt;br&gt;
Remember&amp;nbsp;that&amp;nbsp;all&amp;nbsp;type&amp;nbsp;information&amp;nbsp;is&amp;nbsp;erased&amp;nbsp;in&amp;nbsp;the&amp;nbsp;compiled&lt;br&gt;
class.&amp;nbsp;The&amp;nbsp;raw&amp;nbsp;type&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;any&amp;nbsp;way&amp;nbsp;of&amp;nbsp;knowing&amp;nbsp;the&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;object&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;construct&amp;nbsp;at&amp;nbsp;runtime.&amp;nbsp;Nor&lt;br&gt;
is&amp;nbsp;there&amp;nbsp;any&amp;nbsp;way&amp;nbsp;to&amp;nbsp;get&amp;nbsp;at&amp;nbsp;the&amp;nbsp;Class&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;type&amp;nbsp;through&lt;br&gt;
the&amp;nbsp;type&amp;nbsp;variable,&amp;nbsp;for&amp;nbsp;the&amp;nbsp;same&amp;nbsp;reason.&amp;nbsp;So&amp;nbsp;reflection&amp;nbsp;won’t&lt;br&gt;
help&amp;nbsp;us&amp;nbsp;here&amp;nbsp;either.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that,&amp;nbsp;in&amp;nbsp;general,&amp;nbsp;generics&amp;nbsp;are&lt;br&gt;
limited&amp;nbsp;to&amp;nbsp;working&amp;nbsp;with&amp;nbsp;parameter&amp;nbsp;types&amp;nbsp;in&amp;nbsp;relatively&amp;nbsp;hands-off&amp;nbsp;ways&lt;br&gt;
(by&amp;nbsp;reference&amp;nbsp;only).&amp;nbsp;This&amp;nbsp;is&amp;nbsp;one&amp;nbsp;reason&amp;nbsp;that&amp;nbsp;generics&amp;nbsp;are&amp;nbsp;more&lt;br&gt;
useful&amp;nbsp;for&amp;nbsp;containers&amp;nbsp;than&amp;nbsp;in&amp;nbsp;some&amp;nbsp;other&amp;nbsp;applications.&amp;nbsp;This&amp;nbsp;problem&lt;br&gt;
comes&amp;nbsp;up&amp;nbsp;often&amp;nbsp;and&amp;nbsp;there&amp;nbsp;is&amp;nbsp;a&amp;nbsp;solution,&amp;nbsp;although&amp;nbsp;it’s&amp;nbsp;not&amp;nbsp;quite&lt;br&gt;
as&amp;nbsp;elegant&amp;nbsp;as&amp;nbsp;we’d&amp;nbsp;like.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!!!!&lt;br&gt;
Instantiating&amp;nbsp;generics&amp;nbsp;type&amp;nbsp;in&amp;nbsp;java&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Abc&lt;T&gt;&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;T&amp;nbsp;getInstanceOfT(Class&lt;T&gt;&amp;nbsp;aClass)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;aClass.newInstance();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;br&gt;
}&amp;nbsp;&lt;br&gt;
&lt;br&gt;
==========================================&lt;br&gt;
3)&amp;nbsp;Cannot&amp;nbsp;Declare&amp;nbsp;Static&amp;nbsp;Fields&amp;nbsp;Whose&amp;nbsp;Types&amp;nbsp;are&amp;nbsp;Type&amp;nbsp;Parameters&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;class's&amp;nbsp;static&amp;nbsp;field&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class-level&amp;nbsp;variable&amp;nbsp;shared&amp;nbsp;by&amp;nbsp;all&amp;nbsp;non-static&amp;nbsp;objects&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;class.&amp;nbsp;Hence,&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed.&amp;nbsp;Consider&lt;br&gt;
the&amp;nbsp;following&amp;nbsp;class:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;MobileDevice&lt;T&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;T&amp;nbsp;os;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
}&lt;br&gt;
If&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;were&amp;nbsp;allowed,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;following&amp;nbsp;code&amp;nbsp;would&amp;nbsp;be&amp;nbsp;confused:&lt;br&gt;
&lt;br&gt;
MobileDevice&lt;Smartphone&gt;&amp;nbsp;phone&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MobileDevice&lt;&gt;();&lt;br&gt;
MobileDevice&lt;Pager&gt;&amp;nbsp;pager&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MobileDevice&lt;&gt;();&lt;br&gt;
MobileDevice&lt;TabletPC&gt;&amp;nbsp;pc&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MobileDevice&lt;&gt;();&lt;br&gt;
Because&amp;nbsp;the&amp;nbsp;static&amp;nbsp;field&amp;nbsp;os&amp;nbsp;is&amp;nbsp;shared&amp;nbsp;by&amp;nbsp;phone,&amp;nbsp;pager,&amp;nbsp;and&amp;nbsp;pc,&amp;nbsp;what&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
actual&amp;nbsp;type&amp;nbsp;of&amp;nbsp;os?&amp;nbsp;It&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;Smartphone,&amp;nbsp;Pager,&amp;nbsp;and&amp;nbsp;TabletPC&amp;nbsp;at&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;time.&amp;nbsp;You&amp;nbsp;cannot,&amp;nbsp;therefore,&amp;nbsp;create&amp;nbsp;static&amp;nbsp;fields&amp;nbsp;of&amp;nbsp;type&amp;nbsp;parameters.&lt;br&gt;
&lt;br&gt;
===============================================&lt;br&gt;
4)&amp;nbsp;&amp;nbsp;Cannot&amp;nbsp;Use&amp;nbsp;Casts&amp;nbsp;or&amp;nbsp;instanceof&amp;nbsp;with&amp;nbsp;Parameterized&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
Because&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;erases&amp;nbsp;all&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;in&amp;nbsp;generic&amp;nbsp;code,&amp;nbsp;you&lt;br&gt;
cannot&amp;nbsp;verify&amp;nbsp;which&amp;nbsp;parameterized&amp;nbsp;type&amp;nbsp;for&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;is&amp;nbsp;being&amp;nbsp;used&amp;nbsp;at&amp;nbsp;runtime:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;&lt;E&gt;&amp;nbsp;void&amp;nbsp;rtti(List&lt;E&gt;&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(list&amp;nbsp;instanceof&amp;nbsp;ArrayList&lt;Integer&gt;)&amp;nbsp;{&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;set&amp;nbsp;of&amp;nbsp;parameterized&amp;nbsp;types&amp;nbsp;passed&amp;nbsp;to&amp;nbsp;the&amp;nbsp;rtti&amp;nbsp;method&amp;nbsp;is:&lt;br&gt;
&lt;br&gt;
S&amp;nbsp;=&amp;nbsp;{&amp;nbsp;ArrayList&lt;Integer&gt;,&amp;nbsp;ArrayList&lt;String&gt;&amp;nbsp;LinkedList&lt;Character&gt;,&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
The&amp;nbsp;runtime&amp;nbsp;does&amp;nbsp;not&amp;nbsp;keep&amp;nbsp;track&amp;nbsp;of&amp;nbsp;type&amp;nbsp;parameters,&amp;nbsp;so&amp;nbsp;it&amp;nbsp;cannot&amp;nbsp;tell&amp;nbsp;the&amp;nbsp;difference&lt;br&gt;
between&amp;nbsp;an&amp;nbsp;ArrayList&lt;Integer&gt;&amp;nbsp;and&amp;nbsp;an&amp;nbsp;ArrayList&lt;String&gt;.&amp;nbsp;The&amp;nbsp;most&amp;nbsp;you&amp;nbsp;can&amp;nbsp;do&amp;nbsp;is&amp;nbsp;to&lt;br&gt;
use&amp;nbsp;an&amp;nbsp;unbounded&amp;nbsp;wildcard&amp;nbsp;to&amp;nbsp;verify&amp;nbsp;that&amp;nbsp;the&amp;nbsp;list&amp;nbsp;is&amp;nbsp;an&amp;nbsp;ArrayList:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;rtti(List&lt;?&gt;&amp;nbsp;list)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(list&amp;nbsp;instanceof&amp;nbsp;ArrayList&lt;?&gt;)&amp;nbsp;{&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK;&amp;nbsp;instanceof&amp;nbsp;requires&amp;nbsp;a&amp;nbsp;reifiable&amp;nbsp;type&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
Typically,&amp;nbsp;you&amp;nbsp;cannot&amp;nbsp;cast&amp;nbsp;to&amp;nbsp;a&amp;nbsp;parameterized&amp;nbsp;type&amp;nbsp;unless&amp;nbsp;it&amp;nbsp;is&amp;nbsp;parameterized&amp;nbsp;by&lt;br&gt;
unbounded&amp;nbsp;wildcards.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
List&lt;Integer&gt;&amp;nbsp;li&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
List&lt;Number&gt;&amp;nbsp;&amp;nbsp;ln&amp;nbsp;=&amp;nbsp;(List&lt;Number&gt;)&amp;nbsp;li;&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
However,&amp;nbsp;in&amp;nbsp;some&amp;nbsp;cases&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;knows&amp;nbsp;that&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;is&amp;nbsp;always&amp;nbsp;valid&lt;br&gt;
and&amp;nbsp;allows&amp;nbsp;the&amp;nbsp;cast.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
List&lt;String&gt;&amp;nbsp;l1&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
ArrayList&lt;String&gt;&amp;nbsp;l2&amp;nbsp;=&amp;nbsp;(ArrayList&lt;String&gt;)l1;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
================================================&lt;br&gt;
4)&amp;nbsp;&amp;nbsp;Cannot&amp;nbsp;Create&amp;nbsp;Arrays&amp;nbsp;of&amp;nbsp;Parameterized&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;cannot&amp;nbsp;create&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;parameterized&amp;nbsp;types.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
code&amp;nbsp;does&amp;nbsp;not&amp;nbsp;compile:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;[]&amp;nbsp;arrayOfLists&amp;nbsp;=&amp;nbsp;new&amp;nbsp;List&lt;Integer&gt;[2];&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;code&amp;nbsp;illustrates&amp;nbsp;what&amp;nbsp;happens&amp;nbsp;when&amp;nbsp;different&amp;nbsp;types&amp;nbsp;are&amp;nbsp;inserted&amp;nbsp;into&amp;nbsp;an&amp;nbsp;array:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object[]&amp;nbsp;strings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String[2];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strings[0]&amp;nbsp;=&amp;nbsp;"hi";&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strings[1]&amp;nbsp;=&amp;nbsp;100;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;An&amp;nbsp;ArrayStoreException&amp;nbsp;is&amp;nbsp;thrown.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;you&amp;nbsp;try&amp;nbsp;the&amp;nbsp;same&amp;nbsp;thing&amp;nbsp;with&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;list,&amp;nbsp;there&amp;nbsp;would&amp;nbsp;be&amp;nbsp;a&amp;nbsp;problem:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object[]&amp;nbsp;stringLists&amp;nbsp;=&amp;nbsp;new&amp;nbsp;List&lt;String&gt;[];&amp;nbsp;&amp;nbsp;//&amp;nbsp;compiler&amp;nbsp;error,&amp;nbsp;but&amp;nbsp;pretend&amp;nbsp;it's&amp;nbsp;allowed&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringLists[0]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stringLists[1]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Integer&gt;();&amp;nbsp;&amp;nbsp;//&amp;nbsp;An&amp;nbsp;ArrayStoreException&amp;nbsp;should&amp;nbsp;be&amp;nbsp;thrown,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;but&amp;nbsp;the&amp;nbsp;runtime&amp;nbsp;can't&amp;nbsp;detect&amp;nbsp;it.&lt;br&gt;
If&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;parameterized&amp;nbsp;lists&amp;nbsp;were&amp;nbsp;allowed,&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;code&amp;nbsp;would&amp;nbsp;fail&lt;br&gt;
to&amp;nbsp;throw&amp;nbsp;the&amp;nbsp;desired&amp;nbsp;ArrayStoreException.&lt;br&gt;
&lt;br&gt;
===============================================&lt;br&gt;
5)&amp;nbsp;Cannot&amp;nbsp;Create,&amp;nbsp;Catch,&amp;nbsp;or&amp;nbsp;Throw&amp;nbsp;Objects&amp;nbsp;of&amp;nbsp;Parameterized&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;generic&amp;nbsp;class&amp;nbsp;cannot&amp;nbsp;extend&amp;nbsp;the&amp;nbsp;Throwable&amp;nbsp;class&amp;nbsp;directly&amp;nbsp;or&amp;nbsp;indirectly.&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;following&amp;nbsp;classes&amp;nbsp;will&amp;nbsp;not&amp;nbsp;compile:&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;Extends&amp;nbsp;Throwable&amp;nbsp;indirectly&lt;br&gt;
class&amp;nbsp;MathException&lt;T&gt;&amp;nbsp;extends&amp;nbsp;Exception&amp;nbsp;{&amp;nbsp;/*&amp;nbsp;...&amp;nbsp;*/&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;Extends&amp;nbsp;Throwable&amp;nbsp;directly&lt;br&gt;
class&amp;nbsp;QueueFullException&lt;T&gt;&amp;nbsp;extends&amp;nbsp;Throwable&amp;nbsp;{&amp;nbsp;/*&amp;nbsp;...&amp;nbsp;*/&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
A&amp;nbsp;method&amp;nbsp;cannot&amp;nbsp;catch&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;&lt;T&amp;nbsp;extends&amp;nbsp;Exception,&amp;nbsp;J&gt;&amp;nbsp;void&amp;nbsp;execute(List&lt;J&gt;&amp;nbsp;jobs)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(J&amp;nbsp;job&amp;nbsp;:&amp;nbsp;jobs)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(T&amp;nbsp;e)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;compile-time&amp;nbsp;error&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
!!!!!!!!&lt;br&gt;
You&amp;nbsp;can,&amp;nbsp;however,&amp;nbsp;use&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;in&amp;nbsp;a&amp;nbsp;throws&amp;nbsp;clause:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;Parser&lt;T&amp;nbsp;extends&amp;nbsp;Exception&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;parse(File&amp;nbsp;file)&amp;nbsp;throws&amp;nbsp;T&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;OK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===========================================&lt;br&gt;
6)&amp;nbsp;Cannot&amp;nbsp;Overload&amp;nbsp;a&amp;nbsp;Method&amp;nbsp;Where&amp;nbsp;the&amp;nbsp;Formal&amp;nbsp;Parameter&amp;nbsp;Types&lt;br&gt;
of&amp;nbsp;Each&amp;nbsp;Overload&amp;nbsp;Erase&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Same&amp;nbsp;Raw&amp;nbsp;Type&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;class&amp;nbsp;cannot&amp;nbsp;have&amp;nbsp;two&amp;nbsp;overloaded&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;will&amp;nbsp;have&amp;nbsp;the&amp;nbsp;same&amp;nbsp;signature&amp;nbsp;after&amp;nbsp;type&amp;nbsp;erasure.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Example&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(Set&lt;String&gt;&amp;nbsp;strSet)&amp;nbsp;{&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print(Set&lt;Integer&gt;&amp;nbsp;intSet)&amp;nbsp;{&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
The&amp;nbsp;overloads&amp;nbsp;would&amp;nbsp;all&amp;nbsp;share&amp;nbsp;the&amp;nbsp;same&amp;nbsp;classfile&amp;nbsp;representation&amp;nbsp;and&amp;nbsp;will&lt;br&gt;
generate&amp;nbsp;a&amp;nbsp;compile-time&amp;nbsp;error.</questionanswer>
  </question>
  <question id="1_0_0_2_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Bounds,&amp;nbsp;describe;&amp;nbsp;Lower&amp;nbsp;Bounds,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;are&amp;nbsp;Wildcards&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;Generic&amp;nbsp;world&amp;nbsp;?&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;write&amp;nbsp;some&amp;nbsp;values&amp;nbsp;to&amp;nbsp;List&lt;?&gt;&amp;nbsp;(&amp;nbsp;or&amp;nbsp;to&amp;nbsp;List&lt;?&amp;nbsp;extends&amp;nbsp;Number&gt;)&amp;nbsp;?&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;write&amp;nbsp;some&amp;nbsp;values&amp;nbsp;to&amp;nbsp;List&lt;?&amp;nbsp;super&amp;nbsp;Number&gt;&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>A&amp;nbsp;&amp;nbsp;_&amp;nbsp;bound&amp;nbsp;_&amp;nbsp;is&amp;nbsp;a&amp;nbsp;constraint&amp;nbsp;on&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;parameter.&lt;br&gt;
&lt;br&gt;
Bounds&amp;nbsp;use&amp;nbsp;the&amp;nbsp;extends&amp;nbsp;keyword&amp;nbsp;and&amp;nbsp;some&amp;nbsp;new&amp;nbsp;syntax&amp;nbsp;to&amp;nbsp;limit&lt;br&gt;
the&amp;nbsp;parameter&amp;nbsp;types&amp;nbsp;that&amp;nbsp;may&amp;nbsp;be&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;type.&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;may&amp;nbsp;extend&amp;nbsp;a&amp;nbsp;class&amp;nbsp;or&amp;nbsp;interface&amp;nbsp;type,&amp;nbsp;meaning&lt;br&gt;
that&amp;nbsp;its&amp;nbsp;instantiation&amp;nbsp;must&amp;nbsp;be&amp;nbsp;of&amp;nbsp;that&amp;nbsp;type&amp;nbsp;or&amp;nbsp;a&amp;nbsp;subtype:&lt;br&gt;
&amp;nbsp;class&amp;nbsp;EmployeeList&lt;&amp;nbsp;T&amp;nbsp;extends&amp;nbsp;Employee&amp;nbsp;&gt;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
Here,&amp;nbsp;we&amp;nbsp;made&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;EmployeeList&amp;nbsp;type&amp;nbsp;that&amp;nbsp;can&amp;nbsp;be&amp;nbsp;instantiated&lt;br&gt;
only&amp;nbsp;with&amp;nbsp;Employ&amp;nbsp;ee&amp;nbsp;types.&amp;nbsp;We&amp;nbsp;could&amp;nbsp;further&amp;nbsp;require&amp;nbsp;that&lt;br&gt;
the&amp;nbsp;Employee&amp;nbsp;type&amp;nbsp;implement&amp;nbsp;one&amp;nbsp;or&amp;nbsp;more&amp;nbsp;interfaces&amp;nbsp;using&amp;nbsp;the&amp;nbsp;special&amp;nbsp;&amp;&amp;nbsp;syntax:&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;EmployeeList&lt;&amp;nbsp;T&amp;nbsp;extends&amp;nbsp;Employee&amp;nbsp;&amp;&amp;nbsp;Ranked&amp;nbsp;&amp;&amp;nbsp;Printable&amp;nbsp;&gt;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;order&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&amp;&amp;nbsp;interface&amp;nbsp;bounds&amp;nbsp;is&amp;nbsp;not&amp;nbsp;significant,&amp;nbsp;but&amp;nbsp;only&amp;nbsp;one&amp;nbsp;class&amp;nbsp;type&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
specified&amp;nbsp;and&amp;nbsp;if&amp;nbsp;there&amp;nbsp;is&amp;nbsp;one,&amp;nbsp;it&amp;nbsp;must&amp;nbsp;come&amp;nbsp;first.&lt;br&gt;
&lt;br&gt;
By&amp;nbsp;applying&amp;nbsp;bounds&amp;nbsp;to&amp;nbsp;our&amp;nbsp;type,&amp;nbsp;we&amp;nbsp;not&amp;nbsp;only&amp;nbsp;limit&amp;nbsp;the&amp;nbsp;instantiations&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;class,&amp;nbsp;but&amp;nbsp;we&amp;nbsp;make&amp;nbsp;the&amp;nbsp;type&amp;nbsp;arguments&amp;nbsp;more&amp;nbsp;useful.&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;EmployeeList&lt;&amp;nbsp;T&amp;nbsp;extends&amp;nbsp;Employee&amp;nbsp;&amp;&amp;nbsp;Ranked&amp;nbsp;&amp;&amp;nbsp;Printable&amp;nbsp;&gt;&lt;br&gt;
{&lt;br&gt;
Ranked&amp;nbsp;ranking;&lt;br&gt;
List&lt;Printable&gt;&amp;nbsp;printList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Printable&gt;();&lt;br&gt;
public&amp;nbsp;void&amp;nbsp;addEmployee(&amp;nbsp;T&amp;nbsp;employee&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
this.ranking&amp;nbsp;=&amp;nbsp;employee;&amp;nbsp;//&amp;nbsp;T&amp;nbsp;as&amp;nbsp;Ranked&lt;br&gt;
printList.add(&amp;nbsp;employee&amp;nbsp;);&amp;nbsp;//&amp;nbsp;T&amp;nbsp;as&amp;nbsp;Printable&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Type&amp;nbsp;variables&amp;nbsp;can&amp;nbsp;also&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;other&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;within&amp;nbsp;the&amp;nbsp;type&amp;nbsp;declaration:&lt;br&gt;
class&amp;nbsp;Foo&amp;nbsp;&lt;A,&amp;nbsp;B&amp;nbsp;extends&amp;nbsp;A&gt;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;type&amp;nbsp;after&amp;nbsp;erasure&amp;nbsp;used&amp;nbsp;for&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;type&amp;nbsp;of&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;class&amp;nbsp;is&lt;br&gt;
the&amp;nbsp;leftmost&amp;nbsp;bound;&amp;nbsp;that&amp;nbsp;is,&amp;nbsp;the&amp;nbsp;first&amp;nbsp;bound&amp;nbsp;specified&amp;nbsp;after&amp;nbsp;the&amp;nbsp;extends&lt;br&gt;
keyword&amp;nbsp;(literally&amp;nbsp;the&amp;nbsp;leftmost)&amp;nbsp;becomes&amp;nbsp;the&amp;nbsp;type&amp;nbsp;used&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
erasure.&amp;nbsp;This&amp;nbsp;implies&amp;nbsp;that&amp;nbsp;if&amp;nbsp;the&amp;nbsp;type&amp;nbsp;extends&amp;nbsp;a&amp;nbsp;class&amp;nbsp;type,&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;always&amp;nbsp;the&amp;nbsp;erased&amp;nbsp;type&amp;nbsp;because&amp;nbsp;it&amp;nbsp;must&amp;nbsp;always&amp;nbsp;come&amp;nbsp;first.&amp;nbsp;But&amp;nbsp;if&lt;br&gt;
the&amp;nbsp;type&amp;nbsp;extends&amp;nbsp;only&amp;nbsp;interface&amp;nbsp;types,&amp;nbsp;the&amp;nbsp;choice&amp;nbsp;is&amp;nbsp;up&amp;nbsp;to&amp;nbsp;us.&lt;br&gt;
This&amp;nbsp;fine&amp;nbsp;point&amp;nbsp;is&amp;nbsp;important&amp;nbsp;for&amp;nbsp;backward&amp;nbsp;compatibility&amp;nbsp;with&amp;nbsp;nongeneric&amp;nbsp;code.&lt;br&gt;
&lt;br&gt;
class&amp;nbsp;List&lt;&amp;nbsp;E&amp;nbsp;extends&amp;nbsp;Object&amp;nbsp;&amp;&amp;nbsp;Listable&amp;nbsp;&gt;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
Inserting&amp;nbsp;Object&amp;nbsp;doesn’t&amp;nbsp;change&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;bounds&amp;nbsp;of&amp;nbsp;the&amp;nbsp;generic&lt;br&gt;
class&amp;nbsp;but&amp;nbsp;does&amp;nbsp;change&amp;nbsp;the&amp;nbsp;erased&amp;nbsp;signature.&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;Wildcards&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;mentioned&amp;nbsp;earlier&amp;nbsp;that&amp;nbsp;the&amp;nbsp;kinds&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;instantiations&lt;br&gt;
discussed&amp;nbsp;so&amp;nbsp;far&amp;nbsp;in&amp;nbsp;this&amp;nbsp;chapter&amp;nbsp;have&amp;nbsp;all&amp;nbsp;been&amp;nbsp;concrete&amp;nbsp;type&amp;nbsp;instantiations.&lt;br&gt;
We&amp;nbsp;described&amp;nbsp;this&amp;nbsp;as&amp;nbsp;meaning&amp;nbsp;that&amp;nbsp;all&amp;nbsp;of&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;arguments&lt;br&gt;
are&amp;nbsp;real&amp;nbsp;Java&amp;nbsp;types.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;List&lt;String&gt;&amp;nbsp;and&amp;nbsp;List&lt;Date&gt;&amp;nbsp;are&lt;br&gt;
instantiations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;List&amp;nbsp;class&amp;nbsp;with&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;types&amp;nbsp;String&lt;br&gt;
and&amp;nbsp;Date.&amp;nbsp;Now&amp;nbsp;we’re&amp;nbsp;going&amp;nbsp;to&amp;nbsp;look&amp;nbsp;at&amp;nbsp;another&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;type&lt;br&gt;
instantiation:&amp;nbsp;&amp;nbsp;_____&amp;nbsp;wildcard&amp;nbsp;instantiation.&lt;br&gt;
&lt;br&gt;
As&amp;nbsp;we’ll&amp;nbsp;see&amp;nbsp;in&amp;nbsp;this&amp;nbsp;section,&amp;nbsp;wildcards&amp;nbsp;are&amp;nbsp;Java’s&amp;nbsp;way&amp;nbsp;of&amp;nbsp;introducing&lt;br&gt;
polymorphism&amp;nbsp;into&amp;nbsp;the&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;portion&amp;nbsp;of&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;equation.&lt;br&gt;
A&amp;nbsp;wildcard&amp;nbsp;instantiation&amp;nbsp;uses&amp;nbsp;a&amp;nbsp;question&amp;nbsp;mark&amp;nbsp;(?)&amp;nbsp;in&amp;nbsp;place&amp;nbsp;of&amp;nbsp;an&lt;br&gt;
actual&amp;nbsp;type&amp;nbsp;parameter&amp;nbsp;at&amp;nbsp;instantiation&amp;nbsp;time&amp;nbsp;and&amp;nbsp;denotes&amp;nbsp;that&amp;nbsp;the&amp;nbsp;type&lt;br&gt;
can&amp;nbsp;be&amp;nbsp;assigned&amp;nbsp;any&amp;nbsp;of&amp;nbsp;a&amp;nbsp;range&amp;nbsp;of&amp;nbsp;possible&amp;nbsp;instantiations&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
generic&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;?&amp;nbsp;wildcard&amp;nbsp;by&amp;nbsp;itself&amp;nbsp;is&amp;nbsp;called&amp;nbsp;the&amp;nbsp;unbounded&lt;br&gt;
wildcard&amp;nbsp;and&amp;nbsp;denotes&amp;nbsp;that&amp;nbsp;any&amp;nbsp;type&amp;nbsp;instantiation&amp;nbsp;is&amp;nbsp;acceptable&amp;nbsp;(assignable&amp;nbsp;to&amp;nbsp;the&amp;nbsp;type).&lt;br&gt;
&lt;br&gt;
&amp;nbsp;List&lt;?&gt;&amp;nbsp;anyInstantiationOfList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;anyInstantiationOfList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;();&amp;nbsp;//&amp;nbsp;another&amp;nbsp;instantiation&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;Supertype&amp;nbsp;of&amp;nbsp;All&amp;nbsp;Instantiations&lt;br&gt;
&lt;br&gt;
&amp;nbsp;The&amp;nbsp;unbounded&amp;nbsp;wildcard&amp;nbsp;instantiation&amp;nbsp;is&amp;nbsp;a&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;supertype&amp;nbsp;of&amp;nbsp;all&lt;br&gt;
of&amp;nbsp;these&amp;nbsp;concrete&amp;nbsp;instantiations.&amp;nbsp;In&amp;nbsp;contrast&amp;nbsp;to&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;type&lt;br&gt;
relationships&amp;nbsp;that&amp;nbsp;we&amp;nbsp;saw&amp;nbsp;earlier,&amp;nbsp;which&amp;nbsp;followed&amp;nbsp;only&amp;nbsp;raw,&amp;nbsp;“base”&lt;br&gt;
generic&amp;nbsp;types,&amp;nbsp;wildcards&amp;nbsp;let&amp;nbsp;us&amp;nbsp;implement&amp;nbsp;polymorphism&amp;nbsp;on&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;types.&lt;br&gt;
The&amp;nbsp;unbounded&amp;nbsp;wildcard&amp;nbsp;is&amp;nbsp;to&amp;nbsp;generic&amp;nbsp;type&amp;nbsp;parameters&amp;nbsp;what&amp;nbsp;the&lt;br&gt;
Object&amp;nbsp;type&amp;nbsp;is&amp;nbsp;to&amp;nbsp;regular&amp;nbsp;Java&amp;nbsp;types:&amp;nbsp;a&amp;nbsp;supertype&amp;nbsp;of&amp;nbsp;everything.&lt;br&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;A&amp;nbsp;List&lt;Object&gt;&amp;nbsp;is&amp;nbsp;not&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;!&lt;br&gt;
&amp;nbsp;&amp;nbsp;List&lt;Object&gt;&amp;nbsp;objectList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;()&amp;nbsp;//&amp;nbsp;Error!&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;//&amp;nbsp;A&amp;nbsp;List&lt;?&gt;&amp;nbsp;can&amp;nbsp;be&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;List&lt;?&gt;&amp;nbsp;anyList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&amp;nbsp;//&amp;nbsp;Yes!&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Bounded&amp;nbsp;Wildcards&lt;br&gt;
A&amp;nbsp;bounded&amp;nbsp;wildcard&amp;nbsp;is&amp;nbsp;a&amp;nbsp;wildcard&amp;nbsp;that&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;extends&amp;nbsp;keyword&amp;nbsp;just&amp;nbsp;as&amp;nbsp;a&amp;nbsp;type&amp;nbsp;variable&lt;br&gt;
would&amp;nbsp;to&amp;nbsp;limit&amp;nbsp;the&amp;nbsp;range&amp;nbsp;of&amp;nbsp;assignable&amp;nbsp;types.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;?&amp;nbsp;extends&amp;nbsp;Date&gt;&amp;nbsp;dateInstantiations&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;dateInstantiations&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;MyDate&gt;();&amp;nbsp;//&amp;nbsp;another&amp;nbsp;instantiation&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Lower&amp;nbsp;Bounds&lt;br&gt;
&lt;br&gt;
We&amp;nbsp;saw&amp;nbsp;the&amp;nbsp;extends&amp;nbsp;construct&amp;nbsp;used&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;an&amp;nbsp;upper&amp;nbsp;bound&amp;nbsp;for&lt;br&gt;
both&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;and&amp;nbsp;wildcard&amp;nbsp;instantiations.&amp;nbsp;It&amp;nbsp;implies&amp;nbsp;a&amp;nbsp;type&amp;nbsp;that&lt;br&gt;
is&amp;nbsp;“at&amp;nbsp;the&amp;nbsp;top”&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;hierarchy&amp;nbsp;for&amp;nbsp;the&amp;nbsp;bound.&amp;nbsp;Wildcard&lt;br&gt;
instantiations&amp;nbsp;actually&amp;nbsp;allow&amp;nbsp;another&amp;nbsp;type&amp;nbsp;of&amp;nbsp;bound&amp;nbsp;called&amp;nbsp;a&amp;nbsp;lower&lt;br&gt;
bound&amp;nbsp;as&amp;nbsp;well.&amp;nbsp;A&amp;nbsp;lower&amp;nbsp;bound&amp;nbsp;is&amp;nbsp;specified&amp;nbsp;with&amp;nbsp;the&amp;nbsp;keyword&amp;nbsp;super&amp;nbsp;and,&amp;nbsp;as&amp;nbsp;you&lt;br&gt;
might&amp;nbsp;guess,&amp;nbsp;requires&amp;nbsp;that&amp;nbsp;instantiations&amp;nbsp;be&amp;nbsp;of&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;type&amp;nbsp;or&amp;nbsp;any&amp;nbsp;of&amp;nbsp;its&lt;br&gt;
supertypes,&amp;nbsp;up&amp;nbsp;to&amp;nbsp;Object.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;List&lt;&amp;nbsp;?&amp;nbsp;super&amp;nbsp;MyDate&amp;nbsp;&gt;&amp;nbsp;listOfAssignableFromMyDate;&lt;br&gt;
&amp;nbsp;listOfAssignableFromMyDate&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;MyDate&gt;();&lt;br&gt;
&amp;nbsp;listOfAssignableFromMyDate&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
&amp;nbsp;listOfAssignableFromMyDate&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Object&gt;();&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;wildcard&amp;nbsp;instantiation&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;type&amp;nbsp;that&amp;nbsp;can&amp;nbsp;hold&amp;nbsp;any&amp;nbsp;instantiation&lt;br&gt;
of&amp;nbsp;List&amp;nbsp;on&amp;nbsp;the&amp;nbsp;type&amp;nbsp;MyDate&amp;nbsp;or&amp;nbsp;any&amp;nbsp;of&amp;nbsp;its&amp;nbsp;supertypes.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
List&lt;&amp;nbsp;?&amp;nbsp;super&amp;nbsp;MyDate&amp;nbsp;&gt;&amp;nbsp;listAssignableMyDate&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
listAssignableMyDate.add(&amp;nbsp;new&amp;nbsp;MyDate()&amp;nbsp;);&lt;br&gt;
listAssignableMyDate.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!&lt;br&gt;
One&amp;nbsp;last&amp;nbsp;thing&amp;nbsp;about&amp;nbsp;lower&amp;nbsp;bounds:&amp;nbsp;only&amp;nbsp;the&amp;nbsp;wildcard&amp;nbsp;instantiation&lt;br&gt;
syntax&amp;nbsp;can&amp;nbsp;use&amp;nbsp;the&amp;nbsp;super&amp;nbsp;keyword&amp;nbsp;to&amp;nbsp;refer&amp;nbsp;to&amp;nbsp;lower&amp;nbsp;bounds.&amp;nbsp;Bounds&lt;br&gt;
of&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;generic&amp;nbsp;class&amp;nbsp;declarations&amp;nbsp;cannot&amp;nbsp;have&amp;nbsp;lower&lt;br&gt;
bounds.&amp;nbsp;Erasure&amp;nbsp;replaces&amp;nbsp;all&amp;nbsp;references&amp;nbsp;to&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variables&lt;br&gt;
with&amp;nbsp;their&amp;nbsp;upper&amp;nbsp;bounds,&amp;nbsp;so&amp;nbsp;runtime&amp;nbsp;types&amp;nbsp;have&amp;nbsp;no&amp;nbsp;way&amp;nbsp;to&amp;nbsp;enforce&lt;br&gt;
the&amp;nbsp;contract.&lt;br&gt;
&lt;br&gt;
/*class&amp;nbsp;Super&amp;nbsp;&lt;?&amp;nbsp;super&amp;nbsp;T&gt;{&amp;nbsp;&amp;nbsp;//&amp;nbsp;COMPILE&amp;nbsp;ERROR&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}*/&lt;br&gt;
&lt;br&gt;
/*class&amp;nbsp;Super&amp;nbsp;&lt;T&amp;nbsp;super&amp;nbsp;Number&gt;{&amp;nbsp;&amp;nbsp;//&amp;nbsp;COMPILE&amp;nbsp;ERROR&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
}*/&lt;br&gt;
&lt;br&gt;
=====================================&lt;br&gt;
Reading,&amp;nbsp;Writing,&amp;nbsp;and&amp;nbsp;Arithmetic&lt;br&gt;
We’ve&amp;nbsp;glossed&amp;nbsp;over&amp;nbsp;an&amp;nbsp;important&amp;nbsp;issue&amp;nbsp;so&amp;nbsp;far&amp;nbsp;in&amp;nbsp;our&amp;nbsp;discussion&amp;nbsp;of&lt;br&gt;
wildcard&amp;nbsp;types:&amp;nbsp;namely,&amp;nbsp;how&amp;nbsp;can&amp;nbsp;we&amp;nbsp;use&amp;nbsp;them?&amp;nbsp;What&amp;nbsp;kinds&amp;nbsp;of&amp;nbsp;types&lt;br&gt;
does&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;enforce&amp;nbsp;for&amp;nbsp;variables&amp;nbsp;and&amp;nbsp;arguments&amp;nbsp;that&lt;br&gt;
referred&amp;nbsp;to&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;class?&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;we&lt;br&gt;
have&amp;nbsp;a&amp;nbsp;List&lt;?&gt;&amp;nbsp;list&amp;nbsp;of&amp;nbsp;any&amp;nbsp;instantiation&amp;nbsp;type,&amp;nbsp;what&amp;nbsp;are&amp;nbsp;the&amp;nbsp;rules&amp;nbsp;about&lt;br&gt;
putting&amp;nbsp;objects&amp;nbsp;into&amp;nbsp;it&amp;nbsp;and&amp;nbsp;getting&amp;nbsp;them&amp;nbsp;back&amp;nbsp;out?&amp;nbsp;What&amp;nbsp;is&amp;nbsp;their&amp;nbsp;type?&lt;br&gt;
&lt;br&gt;
To&amp;nbsp;be&amp;nbsp;more&amp;nbsp;precise,&amp;nbsp;though,&amp;nbsp;we&amp;nbsp;should&amp;nbsp;say&amp;nbsp;that&amp;nbsp;List&lt;Date&gt;&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
read&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Date&amp;nbsp;type,&amp;nbsp;but&amp;nbsp;can&amp;nbsp;be&amp;nbsp;written&amp;nbsp;as&amp;nbsp;any&amp;nbsp;subtype&amp;nbsp;of&amp;nbsp;Date.&lt;br&gt;
After&amp;nbsp;all,&amp;nbsp;we&amp;nbsp;could&amp;nbsp;add&amp;nbsp;a&amp;nbsp;MyDate&amp;nbsp;to&amp;nbsp;a&amp;nbsp;List&lt;Date&gt;.&amp;nbsp;Let’s&amp;nbsp;look&amp;nbsp;now&lt;br&gt;
at&amp;nbsp;the&amp;nbsp;wildcard&amp;nbsp;instantiation&amp;nbsp;List&lt;&amp;nbsp;?&amp;nbsp;extends&amp;nbsp;Date&amp;nbsp;&gt;.&amp;nbsp;We&amp;nbsp;know&amp;nbsp;it&amp;nbsp;holds&lt;br&gt;
an&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;List&amp;nbsp;type&amp;nbsp;on&amp;nbsp;some&amp;nbsp;type&amp;nbsp;of&amp;nbsp;Date.&amp;nbsp;What&amp;nbsp;more&amp;nbsp;can&lt;br&gt;
we&amp;nbsp;say&amp;nbsp;about&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;such&amp;nbsp;a&amp;nbsp;List,&amp;nbsp;which&amp;nbsp;could&amp;nbsp;hold&amp;nbsp;any&lt;br&gt;
instantiation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Date&amp;nbsp;type?&amp;nbsp;Well,&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;will&amp;nbsp;always&amp;nbsp;be&amp;nbsp;subtypes&lt;br&gt;
of&amp;nbsp;Date.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;at&amp;nbsp;a&amp;nbsp;minimum,&amp;nbsp;we&amp;nbsp;should&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;read&lt;br&gt;
the&amp;nbsp;object&amp;nbsp;through&amp;nbsp;our&amp;nbsp;wildcard&amp;nbsp;type&amp;nbsp;as&amp;nbsp;type&amp;nbsp;Date:&lt;br&gt;
&amp;nbsp;&amp;nbsp;List&lt;&amp;nbsp;?&amp;nbsp;extends&amp;nbsp;Date&amp;nbsp;&gt;&amp;nbsp;someDateList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;MyDate&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br&gt;
&amp;nbsp;&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;=&amp;nbsp;someDateList.get(&amp;nbsp;0&amp;nbsp;);&amp;nbsp;//&amp;nbsp;read&amp;nbsp;as&amp;nbsp;Date&lt;br&gt;
&lt;br&gt;
===============================&lt;br&gt;
But&amp;nbsp;what&amp;nbsp;about&amp;nbsp;going&amp;nbsp;the&amp;nbsp;other&amp;nbsp;way&amp;nbsp;and&amp;nbsp;writing?&amp;nbsp;If&amp;nbsp;someDatelist&amp;nbsp;could&lt;br&gt;
be&amp;nbsp;an&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;List&amp;nbsp;on&amp;nbsp;any&amp;nbsp;subclass&amp;nbsp;of&amp;nbsp;Date,&amp;nbsp;how&amp;nbsp;can&lt;br&gt;
we&amp;nbsp;know&amp;nbsp;what&amp;nbsp;type&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;write&amp;nbsp;to&amp;nbsp;it?&amp;nbsp;(How&amp;nbsp;can&amp;nbsp;we&amp;nbsp;safely&amp;nbsp;call&lt;br&gt;
its&amp;nbsp;add()&amp;nbsp;method?)&amp;nbsp;The&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;that&amp;nbsp;we&amp;nbsp;can’t.&amp;nbsp;Since&amp;nbsp;we&lt;br&gt;
don’t&amp;nbsp;know&amp;nbsp;the&amp;nbsp;correct&amp;nbsp;type,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;won’t&amp;nbsp;let&amp;nbsp;us&amp;nbsp;write&amp;nbsp;anything&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;List&amp;nbsp;through&amp;nbsp;our&amp;nbsp;wildcard&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;type:&lt;br&gt;
&lt;br&gt;
List&lt;&amp;nbsp;?&amp;nbsp;extends&amp;nbsp;Date&amp;nbsp;&gt;&amp;nbsp;someDateList&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;MyDate&gt;();&lt;br&gt;
someDatelist.add(&amp;nbsp;new&amp;nbsp;Date()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
someDatelist.add(&amp;nbsp;new&amp;nbsp;MyDate()&amp;nbsp;);&amp;nbsp;//&amp;nbsp;Compile-time&amp;nbsp;Error!&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&amp;nbsp;&lt;br&gt;
The&amp;nbsp;List&lt;?&gt;&amp;nbsp;can&amp;nbsp;only&amp;nbsp;be&amp;nbsp;read&amp;nbsp;(not&amp;nbsp;written)&amp;nbsp;and&amp;nbsp;only&amp;nbsp;read&amp;nbsp;as&amp;nbsp;Ob&lt;br&gt;
ject&amp;nbsp;in&amp;nbsp;a&amp;nbsp;degenerate&amp;nbsp;sense.&amp;nbsp;The&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;List&lt;?&gt;&amp;nbsp;are&amp;nbsp;actually&lt;br&gt;
all&amp;nbsp;of&amp;nbsp;some&amp;nbsp;unknown&amp;nbsp;type.&amp;nbsp;The&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;the&amp;nbsp;unknown&amp;nbsp;type&amp;nbsp;list&lt;br&gt;
all&amp;nbsp;have&amp;nbsp;a&amp;nbsp;common&amp;nbsp;supertype&amp;nbsp;that&amp;nbsp;could&amp;nbsp;be&amp;nbsp;Object&amp;nbsp;or&amp;nbsp;some&amp;nbsp;other&lt;br&gt;
common&amp;nbsp;type&amp;nbsp;that&amp;nbsp;is&amp;nbsp;more&amp;nbsp;restrictive&amp;nbsp;than&amp;nbsp;Object.&amp;nbsp;The&amp;nbsp;knowledge&lt;br&gt;
of&amp;nbsp;what&amp;nbsp;“could&amp;nbsp;be”&amp;nbsp;in&amp;nbsp;the&amp;nbsp;List&lt;?&gt;&amp;nbsp;doesn’t&amp;nbsp;do&amp;nbsp;much&amp;nbsp;for&amp;nbsp;us&amp;nbsp;in&amp;nbsp;practice,&amp;nbsp;but&lt;br&gt;
means&amp;nbsp;something&amp;nbsp;completely&amp;nbsp;different&amp;nbsp;from&amp;nbsp;List&lt;Object&gt;.&lt;br&gt;
&lt;br&gt;
List&lt;?&amp;nbsp;extends&amp;nbsp;Number&gt;&amp;nbsp;numbers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Integer&gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
//numbers.add(Integer.valueOf(100));&amp;nbsp;//Compiler&amp;nbsp;ERRRRRRRRRRRRRRROR&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
List&lt;Number&gt;&amp;nbsp;goodNumbers&amp;nbsp;=&amp;nbsp;(List&lt;Number&gt;)&amp;nbsp;numbers;&lt;br&gt;
goodNumbers.add(100);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
for(Number&amp;nbsp;item&amp;nbsp;:&amp;nbsp;goodNumbers){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(item);&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_2_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Generic&amp;nbsp;Methods,&amp;nbsp;describe.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Generic&amp;nbsp;Methods&amp;nbsp;Introduced&lt;br&gt;
&lt;br&gt;
Like&amp;nbsp;generic&amp;nbsp;classes,&amp;nbsp;generic&amp;nbsp;methods&amp;nbsp;have&amp;nbsp;a&amp;nbsp;parameter&amp;nbsp;type&lt;br&gt;
declaration&amp;nbsp;using&amp;nbsp;the&amp;nbsp;&lt;&gt;&amp;nbsp;syntax.&amp;nbsp;This&amp;nbsp;syntax&amp;nbsp;appears&amp;nbsp;before&lt;br&gt;
the&amp;nbsp;return&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;method:&lt;br&gt;
//&amp;nbsp;generic&amp;nbsp;method&lt;br&gt;
&lt;T&gt;&amp;nbsp;T&amp;nbsp;cache(&amp;nbsp;T&amp;nbsp;entry&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;scope&amp;nbsp;of&amp;nbsp;T&amp;nbsp;is&amp;nbsp;limited&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;method&amp;nbsp;cache()&amp;nbsp;and&amp;nbsp;hides&amp;nbsp;any&amp;nbsp;definition&amp;nbsp;of&amp;nbsp;T&amp;nbsp;in&amp;nbsp;any&amp;nbsp;enclosing&lt;br&gt;
generic&amp;nbsp;class.&amp;nbsp;As&amp;nbsp;with&amp;nbsp;generic&amp;nbsp;classes,&amp;nbsp;the&amp;nbsp;type&amp;nbsp;T&amp;nbsp;can&amp;nbsp;have&amp;nbsp;bounds:&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&lt;T&amp;nbsp;extends&amp;nbsp;Entry&amp;nbsp;&amp;&amp;nbsp;Cacheable&amp;nbsp;&gt;&amp;nbsp;T&amp;nbsp;cache(&amp;nbsp;T&amp;nbsp;entry&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Unlike&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;class,&amp;nbsp;it&amp;nbsp;does&amp;nbsp;not&amp;nbsp;have&amp;nbsp;to&amp;nbsp;be&amp;nbsp;instantiated&amp;nbsp;with&amp;nbsp;a&amp;nbsp;specific&lt;br&gt;
parameter&amp;nbsp;type&amp;nbsp;for&amp;nbsp;T&amp;nbsp;before&amp;nbsp;it&amp;nbsp;is&amp;nbsp;used.&amp;nbsp;Instead,&amp;nbsp;it&amp;nbsp;infers&amp;nbsp;the&amp;nbsp;parameter&lt;br&gt;
type&amp;nbsp;T&amp;nbsp;from&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;its&amp;nbsp;argument,&amp;nbsp;entry.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
BlogEntry&amp;nbsp;newBlogEntry&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
NewspaperEntry&amp;nbsp;newNewspaperEntry&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
BlogEntry&amp;nbsp;oldEntry&amp;nbsp;=&amp;nbsp;cache(&amp;nbsp;newBlogEntry&amp;nbsp;);&lt;br&gt;
NewspaperEntry&amp;nbsp;old&amp;nbsp;=&amp;nbsp;cache(&amp;nbsp;newNewspaperEntry&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
==================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Type&amp;nbsp;Inference&amp;nbsp;from&amp;nbsp;Arguments&lt;br&gt;
the&amp;nbsp;previous&amp;nbsp;section,&amp;nbsp;we&amp;nbsp;saw&amp;nbsp;a&amp;nbsp;method&amp;nbsp;infer&amp;nbsp;its&amp;nbsp;type&amp;nbsp;from&amp;nbsp;an&amp;nbsp;argument:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;T&gt;&amp;nbsp;T&amp;nbsp;cache(&amp;nbsp;T&amp;nbsp;entry&amp;nbsp;)&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
But&amp;nbsp;what&amp;nbsp;if&amp;nbsp;there&amp;nbsp;is&amp;nbsp;more&amp;nbsp;than&amp;nbsp;one&amp;nbsp;argument?&amp;nbsp;We&amp;nbsp;saw&amp;nbsp;just&amp;nbsp;that&amp;nbsp;situation&amp;nbsp;in&amp;nbsp;our&amp;nbsp;last&lt;br&gt;
snippet,&amp;nbsp;the&amp;nbsp;static&amp;nbsp;generic&amp;nbsp;method&amp;nbsp;max(&amp;nbsp;x,&amp;nbsp;y&amp;nbsp;).&amp;nbsp;All&amp;nbsp;looks&amp;nbsp;well&amp;nbsp;when&amp;nbsp;we&amp;nbsp;give&amp;nbsp;it&amp;nbsp;two&lt;br&gt;
identical&amp;nbsp;types:&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;max&amp;nbsp;=&amp;nbsp;MathUtils.max(&amp;nbsp;new&amp;nbsp;Integer(1),&amp;nbsp;new&amp;nbsp;Integer(&amp;nbsp;2&amp;nbsp;)&amp;nbsp;)&amp;nbsp;;&lt;br&gt;
But&amp;nbsp;what&amp;nbsp;does&amp;nbsp;it&amp;nbsp;make&amp;nbsp;of&amp;nbsp;the&amp;nbsp;arguments&amp;nbsp;in&amp;nbsp;this&amp;nbsp;invocation?&lt;br&gt;
MathUtils.max(&amp;nbsp;new&amp;nbsp;Integer(1),&amp;nbsp;new&amp;nbsp;Float(&amp;nbsp;2&amp;nbsp;)&amp;nbsp;)&amp;nbsp;;&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;does&amp;nbsp;something&amp;nbsp;really&amp;nbsp;smart.&amp;nbsp;It&amp;nbsp;climbs&amp;nbsp;up&amp;nbsp;the&amp;nbsp;argument&lt;br&gt;
type&amp;nbsp;parent&amp;nbsp;classes,&amp;nbsp;looking&amp;nbsp;for&amp;nbsp;the&amp;nbsp;nearest&amp;nbsp;common&amp;nbsp;supertype.&lt;br&gt;
&lt;br&gt;
=========&lt;br&gt;
Type&amp;nbsp;Inference&amp;nbsp;from&amp;nbsp;Assignment&amp;nbsp;Context&amp;nbsp;(Java&amp;nbsp;is&amp;nbsp;SMART&amp;nbsp;=))&lt;br&gt;
&lt;br&gt;
We’ve&amp;nbsp;seen&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;method&amp;nbsp;infer&amp;nbsp;its&amp;nbsp;parameter&amp;nbsp;type&amp;nbsp;from&amp;nbsp;its&lt;br&gt;
argument&amp;nbsp;types.&amp;nbsp;But&amp;nbsp;what&amp;nbsp;if&amp;nbsp;the&amp;nbsp;type&amp;nbsp;variable&amp;nbsp;isn’t&amp;nbsp;used&amp;nbsp;in&amp;nbsp;any&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;arguments&amp;nbsp;or&amp;nbsp;the&amp;nbsp;method&amp;nbsp;has&amp;nbsp;no&amp;nbsp;arguments?&lt;br&gt;
Suppose&amp;nbsp;the&amp;nbsp;method&amp;nbsp;only&amp;nbsp;has&amp;nbsp;a&amp;nbsp;parametric&amp;nbsp;return&amp;nbsp;type:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;T&gt;&amp;nbsp;T&amp;nbsp;foo()&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
You&amp;nbsp;might&amp;nbsp;guess&amp;nbsp;that&amp;nbsp;this&amp;nbsp;is&amp;nbsp;an&amp;nbsp;error&amp;nbsp;because&amp;nbsp;the&amp;nbsp;compiler&lt;br&gt;
would&amp;nbsp;appear&amp;nbsp;to&amp;nbsp;have&amp;nbsp;no&amp;nbsp;way&amp;nbsp;of&amp;nbsp;determining&amp;nbsp;what&amp;nbsp;type&amp;nbsp;we&amp;nbsp;want.&lt;br&gt;
But&amp;nbsp;it’s&amp;nbsp;not!&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;compiler&amp;nbsp;is&amp;nbsp;smart&amp;nbsp;enough&amp;nbsp;to&amp;nbsp;look&amp;nbsp;at&amp;nbsp;the&lt;br&gt;
context&amp;nbsp;in&amp;nbsp;which&amp;nbsp;the&amp;nbsp;method&amp;nbsp;is&amp;nbsp;called.&amp;nbsp;Specifically,&amp;nbsp;if&amp;nbsp;the&amp;nbsp;result&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;method&amp;nbsp;is&amp;nbsp;assigned&amp;nbsp;to&amp;nbsp;a&amp;nbsp;variable,&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;tries&amp;nbsp;to&lt;br&gt;
make&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;that&amp;nbsp;variable&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;type.&amp;nbsp;Here’s&amp;nbsp;an&lt;br&gt;
example.&amp;nbsp;We’ll&amp;nbsp;make&amp;nbsp;a&amp;nbsp;factory&amp;nbsp;for&amp;nbsp;our&amp;nbsp;Trap&amp;nbsp;objects:&lt;br&gt;
&lt;br&gt;
&lt;T&gt;&amp;nbsp;Trap&lt;T&gt;&amp;nbsp;makeTrap()&amp;nbsp;{&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Trap&lt;T&gt;();&amp;nbsp;}&lt;br&gt;
//&amp;nbsp;usage&lt;br&gt;
Trap&lt;Mouse&gt;&amp;nbsp;mouseTrap&amp;nbsp;=&amp;nbsp;makeTrap();&lt;br&gt;
Trap&lt;Bear&gt;&amp;nbsp;bearTrap&amp;nbsp;=&amp;nbsp;makeTrap();&lt;br&gt;
The&amp;nbsp;compiler&amp;nbsp;has,&amp;nbsp;as&amp;nbsp;if&amp;nbsp;by&amp;nbsp;magic,&amp;nbsp;determined&amp;nbsp;what&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;instantiation&lt;br&gt;
of&amp;nbsp;Trap&amp;nbsp;we&amp;nbsp;want&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;assignment&amp;nbsp;context.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Dummy&amp;nbsp;example&amp;nbsp;:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;GetTypeAssignmentContext&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static&amp;nbsp;&lt;T&gt;&amp;nbsp;List&lt;T&gt;&amp;nbsp;returnT(){&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList&lt;T&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result.add(null);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;nbsp;result;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("get&amp;nbsp;type&amp;nbsp;from&amp;nbsp;context");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Double&gt;&amp;nbsp;doubles&amp;nbsp;=&amp;nbsp;returnT();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//GetTypeAssignmentContext.&lt;String&gt;returnT();&amp;nbsp;//&amp;nbsp;CORRECT&amp;nbsp;=)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(doubles.size());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
============&lt;br&gt;
&lt;br&gt;
Explicit&amp;nbsp;Type&amp;nbsp;Invocation&lt;br&gt;
Although&amp;nbsp;it&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;needed&amp;nbsp;often,&amp;nbsp;a&amp;nbsp;syntax&amp;nbsp;does&lt;br&gt;
exist&amp;nbsp;for&amp;nbsp;invoking&amp;nbsp;a&amp;nbsp;generic&amp;nbsp;method&amp;nbsp;with&amp;nbsp;specific&lt;br&gt;
parameter&amp;nbsp;types.&amp;nbsp;The&amp;nbsp;syntax&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;awkward&amp;nbsp;and&amp;nbsp;involves&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
or&amp;nbsp;instance&amp;nbsp;object&amp;nbsp;prefix,&amp;nbsp;followed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;familiar&amp;nbsp;angle&amp;nbsp;bracket&lt;br&gt;
type&amp;nbsp;list,&amp;nbsp;placed&amp;nbsp;before&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;method&amp;nbsp;invocation.&lt;br&gt;
Here&amp;nbsp;are&amp;nbsp;some&amp;nbsp;examples:&lt;br&gt;
&lt;br&gt;
Integer&amp;nbsp;i&amp;nbsp;=&amp;nbsp;MathUtilities.&lt;Integer&gt;max(&amp;nbsp;42,&amp;nbsp;42&amp;nbsp;);&lt;br&gt;
String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;fooObject.&lt;String&gt;foo(&amp;nbsp;"foo"&amp;nbsp;);&lt;br&gt;
String&amp;nbsp;s&amp;nbsp;=&amp;nbsp;this.&lt;String&gt;foo(&amp;nbsp;"foo"&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
============================&lt;br&gt;
Wildcard&amp;nbsp;Capture&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
For&amp;nbsp;example,&amp;nbsp;suppose&amp;nbsp;we&amp;nbsp;wanted&amp;nbsp;to&amp;nbsp;write&amp;nbsp;a&amp;nbsp;utility&amp;nbsp;method&amp;nbsp;that&amp;nbsp;swaps&amp;nbsp;the&amp;nbsp;first&amp;nbsp;two&amp;nbsp;elements&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;list.&amp;nbsp;Using&amp;nbsp;wildcards,&amp;nbsp;we’d&amp;nbsp;like&amp;nbsp;to&amp;nbsp;write&amp;nbsp;something&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
//&amp;nbsp;Bad&amp;nbsp;implementation&lt;br&gt;
List&lt;?&gt;&amp;nbsp;swap(&amp;nbsp;List&lt;?&gt;&amp;nbsp;list&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
Object&amp;nbsp;tmp&amp;nbsp;=&amp;nbsp;list.get(0);&lt;br&gt;
list.set(&amp;nbsp;0,&amp;nbsp;list.get(1)&amp;nbsp;);&amp;nbsp;//&amp;nbsp;error,&amp;nbsp;can't&amp;nbsp;write&lt;br&gt;
list.set(&amp;nbsp;1,&amp;nbsp;tmp&amp;nbsp;);&amp;nbsp;//&amp;nbsp;error,&amp;nbsp;can't&amp;nbsp;write&lt;br&gt;
return&amp;nbsp;list;&lt;br&gt;
}&lt;br&gt;
But&amp;nbsp;we&amp;nbsp;are&amp;nbsp;not&amp;nbsp;allowed&amp;nbsp;to&amp;nbsp;call&amp;nbsp;the&amp;nbsp;set()&amp;nbsp;method&amp;nbsp;of&amp;nbsp;our&amp;nbsp;list&amp;nbsp;because&amp;nbsp;we&amp;nbsp;don’t&amp;nbsp;know&amp;nbsp;what&lt;br&gt;
type&amp;nbsp;it&amp;nbsp;actually&amp;nbsp;holds.&amp;nbsp;We&amp;nbsp;are&amp;nbsp;really&amp;nbsp;stuck&amp;nbsp;and&amp;nbsp;there&amp;nbsp;isn’t&amp;nbsp;much&amp;nbsp;we&amp;nbsp;can&amp;nbsp;do.&amp;nbsp;But&amp;nbsp;the&amp;nbsp;corresponding&lt;br&gt;
generic&amp;nbsp;method&amp;nbsp;gives&amp;nbsp;us&amp;nbsp;a&amp;nbsp;real&amp;nbsp;type&amp;nbsp;to&amp;nbsp;hang&amp;nbsp;our&amp;nbsp;hat:&lt;br&gt;
&lt;T&gt;&amp;nbsp;List&lt;T&gt;&amp;nbsp;swapGeneric(&amp;nbsp;List&lt;T&gt;&amp;nbsp;list&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
T&amp;nbsp;tmp&amp;nbsp;=&amp;nbsp;list.get(&amp;nbsp;0&amp;nbsp;);&lt;br&gt;
list.set(&amp;nbsp;0,&amp;nbsp;list.get(1)&amp;nbsp;);&lt;br&gt;
list.set(&amp;nbsp;1,&amp;nbsp;tmp&amp;nbsp;);&lt;br&gt;
return&amp;nbsp;list;&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_2_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;Arrays&amp;nbsp;of&amp;nbsp;Parameterized&amp;nbsp;Types&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>But&amp;nbsp;as&amp;nbsp;we'll&amp;nbsp;see,&amp;nbsp;Java&amp;nbsp;has&amp;nbsp;a&amp;nbsp;__&amp;nbsp;schizophrenic&amp;nbsp;__&amp;nbsp;relationship&amp;nbsp;with&lt;br&gt;
arrays&amp;nbsp;of&amp;nbsp;parameterized&amp;nbsp;types.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;first&amp;nbsp;thing&amp;nbsp;we&amp;nbsp;need&amp;nbsp;to&amp;nbsp;do&amp;nbsp;is&amp;nbsp;recall&amp;nbsp;how&amp;nbsp;arrays&amp;nbsp;work&amp;nbsp;for&amp;nbsp;regular&lt;br&gt;
Java&amp;nbsp;types.&amp;nbsp;An&amp;nbsp;array&amp;nbsp;is&amp;nbsp;a&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;built-in&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;some&amp;nbsp;base&lt;br&gt;
type&amp;nbsp;of&amp;nbsp;element.&amp;nbsp;Furthermore,&amp;nbsp;array&amp;nbsp;types&amp;nbsp;(including&amp;nbsp;all&lt;br&gt;
multidimensional&amp;nbsp;variations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array)&amp;nbsp;are&amp;nbsp;true&amp;nbsp;types&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;language&lt;br&gt;
and&amp;nbsp;are&amp;nbsp;represented&amp;nbsp;at&amp;nbsp;runtime&amp;nbsp;by&amp;nbsp;unique&amp;nbsp;class&amp;nbsp;types.&lt;br&gt;
!!!!!!!!!!!&amp;nbsp;This&amp;nbsp;is&amp;nbsp;where&amp;nbsp;the&amp;nbsp;trouble&amp;nbsp;begins.&lt;br&gt;
&lt;br&gt;
Although&amp;nbsp;arrays&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;act&amp;nbsp;a&amp;nbsp;lot&amp;nbsp;like&amp;nbsp;generic&amp;nbsp;collections&amp;nbsp;(they&lt;br&gt;
change&amp;nbsp;their&amp;nbsp;APIs&amp;nbsp;to&amp;nbsp;adopt&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;type&amp;nbsp;for&amp;nbsp;“reading”&amp;nbsp;and&lt;br&gt;
“writing”),&amp;nbsp;they&amp;nbsp;do&amp;nbsp;not&amp;nbsp;behave&amp;nbsp;like&amp;nbsp;Java&amp;nbsp;generics&amp;nbsp;with&amp;nbsp;respect&lt;br&gt;
to&amp;nbsp;their&amp;nbsp;type&amp;nbsp;relationships.&amp;nbsp;As&amp;nbsp;we&amp;nbsp;saw&amp;nbsp;in&amp;nbsp;Chapter&amp;nbsp;6,&amp;nbsp;arrays&amp;nbsp;exist&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;Java&amp;nbsp;class&amp;nbsp;hierarchy&amp;nbsp;stemming&amp;nbsp;from&amp;nbsp;Object&amp;nbsp;and&amp;nbsp;extending&lt;br&gt;
down&amp;nbsp;parallel&amp;nbsp;branches&amp;nbsp;with&amp;nbsp;the&amp;nbsp;plain&amp;nbsp;Java&amp;nbsp;objects.&lt;br&gt;
&lt;br&gt;
Arrays&amp;nbsp;are&amp;nbsp;covariant&amp;nbsp;subtypes&amp;nbsp;of&amp;nbsp;other&amp;nbsp;types&amp;nbsp;of&amp;nbsp;arrays,&amp;nbsp;which&lt;br&gt;
means&amp;nbsp;that,&amp;nbsp;unlike&amp;nbsp;concrete&amp;nbsp;generic&amp;nbsp;types,&amp;nbsp;although&amp;nbsp;they&lt;br&gt;
change&amp;nbsp;their&amp;nbsp;method&amp;nbsp;signatures,&amp;nbsp;they&amp;nbsp;are&amp;nbsp;still&amp;nbsp;related&amp;nbsp;to&amp;nbsp;their&lt;br&gt;
parents.&amp;nbsp;This&amp;nbsp;means&amp;nbsp;that&amp;nbsp;Strings&amp;nbsp;[]&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;is&amp;nbsp;a&amp;nbsp;subtype&amp;nbsp;of&amp;nbsp;Object&amp;nbsp;[].&lt;br&gt;
This&amp;nbsp;brings&amp;nbsp;up&amp;nbsp;the&amp;nbsp;aliasing&amp;nbsp;problem&amp;nbsp;that&amp;nbsp;we&amp;nbsp;mentioned&amp;nbsp;earlier.&lt;br&gt;
An&amp;nbsp;array&amp;nbsp;of&amp;nbsp;Strings&amp;nbsp;can&amp;nbsp;be&amp;nbsp;aliased&amp;nbsp;as&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;Objects&amp;nbsp;and&lt;br&gt;
we&amp;nbsp;can&amp;nbsp;attempt&amp;nbsp;to&amp;nbsp;put&amp;nbsp;things&amp;nbsp;into&amp;nbsp;it&amp;nbsp;illegally&amp;nbsp;that&amp;nbsp;won’t&amp;nbsp;be&amp;nbsp;noticed&lt;br&gt;
until&amp;nbsp;runtime:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;[]&amp;nbsp;strings&amp;nbsp;=&amp;nbsp;new&amp;nbsp;String[5];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;[]&amp;nbsp;objects&amp;nbsp;=&amp;nbsp;strings;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;objects[0]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&amp;nbsp;//&amp;nbsp;Runtime&amp;nbsp;ArrayStoreException!&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;To&amp;nbsp;prevent&amp;nbsp;disaster,&amp;nbsp;Java&amp;nbsp;must&amp;nbsp;check&amp;nbsp;every&amp;nbsp;array&amp;nbsp;assignment&amp;nbsp;for&lt;br&gt;
the&amp;nbsp;correct&amp;nbsp;type&amp;nbsp;at&amp;nbsp;runtime.&amp;nbsp;&amp;nbsp;!!!!&amp;nbsp;But&amp;nbsp;recall&amp;nbsp;that&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;do&amp;nbsp;__&amp;nbsp;not&lt;br&gt;
have&amp;nbsp;real&amp;nbsp;representations&amp;nbsp;at&amp;nbsp;_runtime;&amp;nbsp;there&amp;nbsp;is&lt;br&gt;
only&amp;nbsp;the&amp;nbsp;raw&amp;nbsp;type.&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br&gt;
So&amp;nbsp;Java&amp;nbsp;would&amp;nbsp;have&amp;nbsp;no&amp;nbsp;way&amp;nbsp;to&amp;nbsp;know&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;a&lt;br&gt;
Trap&lt;Mouse&gt;&amp;nbsp;and&amp;nbsp;a&amp;nbsp;Trap&lt;Bear&gt;&amp;nbsp;element&amp;nbsp;in&amp;nbsp;an&amp;nbsp;array&amp;nbsp;once&amp;nbsp;the&amp;nbsp;array&lt;br&gt;
was&amp;nbsp;aliased&amp;nbsp;as,&amp;nbsp;say,&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;[].&amp;nbsp;For&amp;nbsp;this&amp;nbsp;reason,&amp;nbsp;Java&amp;nbsp;does&lt;br&gt;
not&amp;nbsp;allow&amp;nbsp;you&amp;nbsp;to&amp;nbsp;create&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;types—&lt;br&gt;
at&amp;nbsp;least&amp;nbsp;not&amp;nbsp;concrete&amp;nbsp;ones.&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
Now,&amp;nbsp;because&amp;nbsp;we&amp;nbsp;just&amp;nbsp;said&amp;nbsp;that&amp;nbsp;Java&amp;nbsp;won’t&amp;nbsp;let&amp;nbsp;you&amp;nbsp;make&amp;nbsp;any&amp;nbsp;of&amp;nbsp;these&lt;br&gt;
arrays,&amp;nbsp;you’d&amp;nbsp;expect&amp;nbsp;that&amp;nbsp;would&amp;nbsp;be&amp;nbsp;pretty&amp;nbsp;much&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;the&amp;nbsp;story.&lt;br&gt;
&lt;br&gt;
But&amp;nbsp;no!&amp;nbsp;Even&amp;nbsp;though&amp;nbsp;we&amp;nbsp;don’t&amp;nbsp;have&amp;nbsp;real&lt;br&gt;
array&amp;nbsp;implementations&amp;nbsp;that&amp;nbsp;perform&amp;nbsp;the&amp;nbsp;needed&amp;nbsp;runtime&amp;nbsp;behavior,&lt;br&gt;
Java&amp;nbsp;allows&amp;nbsp;us&amp;nbsp;to&amp;nbsp;declare&amp;nbsp;the&amp;nbsp;array&amp;nbsp;type&amp;nbsp;anyway&lt;br&gt;
The&amp;nbsp;catch&amp;nbsp;is&amp;nbsp;that&amp;nbsp;you&amp;nbsp;must&amp;nbsp;__&amp;nbsp;break&amp;nbsp;type&amp;nbsp;safety&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&lt;br&gt;
use&amp;nbsp;them&amp;nbsp;by&amp;nbsp;using&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;the&amp;nbsp;raw&amp;nbsp;type&amp;nbsp;as&amp;nbsp;their&amp;nbsp;implementation:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Trap&lt;Mouse&gt;&amp;nbsp;[]&amp;nbsp;tma&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Trap[10];&amp;nbsp;//&amp;nbsp;unchecked&amp;nbsp;warning&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Trap&lt;Mouse&gt;&amp;nbsp;tm&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Trap&lt;Mouse&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tma[0]&amp;nbsp;=&amp;nbsp;tm;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Trap&lt;Mouse&gt;&amp;nbsp;again&amp;nbsp;=&amp;nbsp;tma[0];&lt;br&gt;
&lt;br&gt;
====================================&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;Good&amp;nbsp;Are&amp;nbsp;Arrays&amp;nbsp;of&amp;nbsp;Generic&amp;nbsp;Types?&lt;br&gt;
&lt;br&gt;
Why&amp;nbsp;does&amp;nbsp;Java&amp;nbsp;even&amp;nbsp;let&amp;nbsp;us&amp;nbsp;declare&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;types?&lt;br&gt;
One&amp;nbsp;important&amp;nbsp;usage&amp;nbsp;is&amp;nbsp;that&amp;nbsp;it&amp;nbsp;allows&amp;nbsp;generic&amp;nbsp;types&amp;nbsp;to&amp;nbsp;be&lt;br&gt;
used&amp;nbsp;in&amp;nbsp;variable-length&amp;nbsp;argument&amp;nbsp;methods.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
void&amp;nbsp;useLists(&amp;nbsp;List&lt;String&gt;&amp;nbsp;...&amp;nbsp;lists&amp;nbsp;)&amp;nbsp;{&lt;br&gt;
List&lt;String&gt;&amp;nbsp;ls0&amp;nbsp;=&amp;nbsp;lists[0];&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Another&amp;nbsp;answer&amp;nbsp;is&amp;nbsp;that&amp;nbsp;it’s&amp;nbsp;an&amp;nbsp;escape&amp;nbsp;hatch&amp;nbsp;to&amp;nbsp;preserve&lt;br&gt;
our&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;use&amp;nbsp;arrays&amp;nbsp;when&amp;nbsp;necessary.&amp;nbsp;You&amp;nbsp;might&amp;nbsp;want&lt;br&gt;
to&amp;nbsp;do&amp;nbsp;this&amp;nbsp;for&amp;nbsp;at&amp;nbsp;least&amp;nbsp;two&amp;nbsp;reasons.&amp;nbsp;First,&amp;nbsp;arrays&amp;nbsp;are&amp;nbsp;faster&amp;nbsp;than&lt;br&gt;
collections&amp;nbsp;in&amp;nbsp;many&amp;nbsp;cases.&amp;nbsp;The&amp;nbsp;Java&amp;nbsp;runtime&amp;nbsp;is&amp;nbsp;very&amp;nbsp;good&amp;nbsp;at&lt;br&gt;
optimizing&amp;nbsp;array&amp;nbsp;access,&amp;nbsp;and&amp;nbsp;sometimes&amp;nbsp;it&amp;nbsp;just&amp;nbsp;might&amp;nbsp;be&lt;br&gt;
worth&amp;nbsp;it&amp;nbsp;to&amp;nbsp;you&amp;nbsp;to&amp;nbsp;eat&amp;nbsp;the&amp;nbsp;compiler&amp;nbsp;warning&amp;nbsp;to&amp;nbsp;get&amp;nbsp;the&amp;nbsp;benefits.&lt;br&gt;
Second,&amp;nbsp;there&amp;nbsp;is&amp;nbsp;the&amp;nbsp;issue&amp;nbsp;of&amp;nbsp;interfacing&amp;nbsp;generic&amp;nbsp;code&amp;nbsp;to&lt;br&gt;
legacy&amp;nbsp;code&amp;nbsp;in&amp;nbsp;which&amp;nbsp;only&amp;nbsp;the&amp;nbsp;Javadoc&amp;nbsp;and&amp;nbsp;your&amp;nbsp;faith&lt;br&gt;
in&amp;nbsp;the&amp;nbsp;developer&amp;nbsp;are&amp;nbsp;your&amp;nbsp;guarantees&amp;nbsp;as&amp;nbsp;to&amp;nbsp;the&amp;nbsp;contents.&lt;br&gt;
By&amp;nbsp;assigning&amp;nbsp;raw&amp;nbsp;arrays&amp;nbsp;to&amp;nbsp;generic&amp;nbsp;instantiations,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;at&amp;nbsp;least&lt;br&gt;
ensure&amp;nbsp;that&amp;nbsp;in&amp;nbsp;simple&amp;nbsp;usage&amp;nbsp;we&amp;nbsp;don’t&amp;nbsp;abuse&amp;nbsp;the&amp;nbsp;types&amp;nbsp;in&amp;nbsp;the&amp;nbsp;new&amp;nbsp;code.&lt;br&gt;
&lt;br&gt;
=========================&lt;br&gt;
Wildcards&amp;nbsp;in&amp;nbsp;Array&amp;nbsp;Types&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;general,&amp;nbsp;wildcard&amp;nbsp;instantiations&amp;nbsp;of&amp;nbsp;generics&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;as&lt;br&gt;
the&amp;nbsp;base&amp;nbsp;type&amp;nbsp;for&amp;nbsp;arrays&amp;nbsp;in&amp;nbsp;the&amp;nbsp;same&amp;nbsp;way&amp;nbsp;that&amp;nbsp;concrete&amp;nbsp;instantiations&lt;br&gt;
can.&amp;nbsp;Let’s&amp;nbsp;look&amp;nbsp;at&amp;nbsp;an&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
ArrayList&lt;?&gt;[]&amp;nbsp;arrayOfArrayLists&amp;nbsp;=&amp;nbsp;...;&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;type&amp;nbsp;declaration&amp;nbsp;is&amp;nbsp;an&amp;nbsp;array&amp;nbsp;of&amp;nbsp;unbounded&amp;nbsp;wildcard&amp;nbsp;instantiations&lt;br&gt;
of&amp;nbsp;ArrayList.&amp;nbsp;Each&amp;nbsp;element&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array&amp;nbsp;can&amp;nbsp;hold&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
wildcard&amp;nbsp;type,&amp;nbsp;meaning&amp;nbsp;in&amp;nbsp;this&amp;nbsp;case&amp;nbsp;that&amp;nbsp;each&amp;nbsp;element&amp;nbsp;of&amp;nbsp;the&amp;nbsp;array&lt;br&gt;
could&amp;nbsp;hold&amp;nbsp;a&amp;nbsp;different&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;ArrayList.&amp;nbsp;For&amp;nbsp;example:&lt;br&gt;
&lt;br&gt;
arrayOfArrayLists[0]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();&lt;br&gt;
arrayOfArrayLists[1]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;String&gt;();&lt;br&gt;
&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;nbsp;secret&amp;nbsp;surprise&amp;nbsp;that&amp;nbsp;we&amp;nbsp;are&amp;nbsp;going&amp;nbsp;to&amp;nbsp;spring&amp;nbsp;on&amp;nbsp;you&lt;br&gt;
relating&amp;nbsp;to&amp;nbsp;wildcard&amp;nbsp;types&amp;nbsp;in&amp;nbsp;arrays.&amp;nbsp;Although&amp;nbsp;we&amp;nbsp;said&amp;nbsp;that&amp;nbsp;Java&amp;nbsp;won’t&lt;br&gt;
let&amp;nbsp;us&amp;nbsp;create&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;types,&amp;nbsp;there&amp;nbsp;is&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;to&lt;br&gt;
the&amp;nbsp;rule.&amp;nbsp;Java&amp;nbsp;does&amp;nbsp;allow&amp;nbsp;us&amp;nbsp;to&amp;nbsp;create&amp;nbsp;arrays&amp;nbsp;of&amp;nbsp;unbounded&lt;br&gt;
wildcard&amp;nbsp;instantiations.&amp;nbsp;Here&amp;nbsp;are&amp;nbsp;two&amp;nbsp;examples:&lt;br&gt;
&lt;br&gt;
ArrayList&lt;?&gt;[]&amp;nbsp;arrayOfArrayLists&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;?&gt;[10];&lt;br&gt;
arrayOfArrayLists[0]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Date&gt;();</questionanswer>
  </question>
  <question id="1_0_0_2_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;implement&amp;nbsp;Stack.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>GenericStack.java:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;genericsexamples;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Stack;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;GenericStack&lt;E&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;size;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;top;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;E[]&amp;nbsp;elements;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;GenericStack()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this(10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;GenericStack(int&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size&amp;nbsp;=&amp;nbsp;s&amp;nbsp;&gt;&amp;nbsp;0&amp;nbsp;?&amp;nbsp;s&amp;nbsp;:&amp;nbsp;10;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;=&amp;nbsp;-1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elements&amp;nbsp;=&amp;nbsp;(E[])&amp;nbsp;new&amp;nbsp;Object[size];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;push(E&amp;nbsp;pushValue)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(top&amp;nbsp;==&amp;nbsp;size&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;//&amp;nbsp;if&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;full&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception(String.format("Stack&amp;nbsp;is&amp;nbsp;full,&amp;nbsp;cannot&amp;nbsp;push&amp;nbsp;%s",&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pushValue));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;if&amp;nbsp;(top&amp;nbsp;==&amp;nbsp;size&amp;nbsp;-&amp;nbsp;1)&amp;nbsp;//&amp;nbsp;if&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;full&amp;nbsp;if&amp;nbsp;(top&amp;nbsp;==&amp;nbsp;elements.length&amp;nbsp;-&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;1)&amp;nbsp;resize(2&amp;nbsp;*&amp;nbsp;elements.length);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elements[++top]&amp;nbsp;=&amp;nbsp;pushValue;&amp;nbsp;//&amp;nbsp;place&amp;nbsp;pushValue&amp;nbsp;on&amp;nbsp;Stack&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;//&amp;nbsp;end&amp;nbsp;method&amp;nbsp;push&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;E&amp;nbsp;pop()&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(top&amp;nbsp;==&amp;nbsp;-1)&amp;nbsp;//&amp;nbsp;if&amp;nbsp;stack&amp;nbsp;is&amp;nbsp;empty&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;Exception("Stack&amp;nbsp;is&amp;nbsp;empty,&amp;nbsp;cannot&amp;nbsp;pop");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;elements[top--];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Boolean&amp;nbsp;isEmpty()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;top&amp;nbsp;==&amp;nbsp;-1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;resize(int&amp;nbsp;newSize)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E&amp;nbsp;t[]&amp;nbsp;=&amp;nbsp;(E[])&amp;nbsp;new&amp;nbsp;Object[newSize];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;=&amp;nbsp;top;&amp;nbsp;i++)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t[i]&amp;nbsp;=&amp;nbsp;elements[i];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elements&amp;nbsp;=&amp;nbsp;t;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;Exception&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Using&amp;nbsp;stack");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GenericStack&lt;Integer&gt;&amp;nbsp;stack&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GenericStack&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stack.push(10);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stack.push(100);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stack.push(1000);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&amp;nbsp;(!stack.isEmpty())&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(stack.pop());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_2_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;Generics&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&amp;quot;You&amp;nbsp;Cannot&amp;nbsp;Create&amp;nbsp;Arrays&amp;nbsp;of&amp;nbsp;Parameterized&amp;nbsp;Types&amp;quot;&amp;nbsp;,&amp;nbsp;&lt;br&gt;
what&amp;nbsp;is&amp;nbsp;solution&amp;nbsp;of&amp;nbsp;this&amp;nbsp;problem&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>checked:&amp;nbsp;strong&amp;nbsp;typing.&amp;nbsp;GenSet&amp;nbsp;knows&amp;nbsp;explicitly&amp;nbsp;what&amp;nbsp;type&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;it&lt;br&gt;
contains&amp;nbsp;(i.e.&amp;nbsp;its&amp;nbsp;constructor&amp;nbsp;was&amp;nbsp;explicitly&amp;nbsp;called&amp;nbsp;with&amp;nbsp;a&amp;nbsp;Class&lt;E&gt;&amp;nbsp;argument,&lt;br&gt;
and&amp;nbsp;methods&amp;nbsp;will&amp;nbsp;throw&amp;nbsp;an&amp;nbsp;exception&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;passed&amp;nbsp;arguments&lt;br&gt;
that&amp;nbsp;are&amp;nbsp;not&amp;nbsp;of&amp;nbsp;type&amp;nbsp;E.&amp;nbsp;See&amp;nbsp;Collections.checkedCollection.&lt;br&gt;
&lt;br&gt;
-&gt;&amp;nbsp;in&amp;nbsp;that&amp;nbsp;case,&amp;nbsp;you&amp;nbsp;should&amp;nbsp;write:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;GenSet&lt;E&gt;&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;E[]&amp;nbsp;a;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;GenSet(Class&lt;E&gt;&amp;nbsp;c,&amp;nbsp;int&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Use&amp;nbsp;Array&amp;nbsp;native&amp;nbsp;method&amp;nbsp;to&amp;nbsp;create&amp;nbsp;array&amp;nbsp;of&amp;nbsp;a&amp;nbsp;type&amp;nbsp;only&amp;nbsp;known&amp;nbsp;at&amp;nbsp;run&amp;nbsp;time&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@SuppressWarnings("unchecked")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;E[]&amp;nbsp;a&amp;nbsp;=&amp;nbsp;(E[])&amp;nbsp;Array.newInstance(c,&amp;nbsp;s);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.a&amp;nbsp;=&amp;nbsp;a;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E&amp;nbsp;get(int&amp;nbsp;i)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a[i];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
=======================================&lt;br&gt;
unchecked:&amp;nbsp;weak&amp;nbsp;typing.&amp;nbsp;No&amp;nbsp;type&amp;nbsp;checking&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;done&amp;nbsp;on&lt;br&gt;
any&amp;nbsp;of&amp;nbsp;the&amp;nbsp;objects&amp;nbsp;passed&amp;nbsp;as&amp;nbsp;argument.&lt;br&gt;
&lt;br&gt;
-&gt;&amp;nbsp;in&amp;nbsp;that&amp;nbsp;case,&amp;nbsp;you&amp;nbsp;should&amp;nbsp;write&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ArrTest&lt;E&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrTest&lt;String&gt;&amp;nbsp;t&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrTest&lt;String&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t.test("Hello&amp;nbsp;World");&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;test(E&amp;nbsp;a){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;E[]&amp;nbsp;b&amp;nbsp;=&amp;nbsp;(E[])new&amp;nbsp;Object[1];&amp;nbsp;//&amp;nbsp;here&amp;nbsp;it&amp;nbsp;works&amp;nbsp;,&amp;nbsp;BECAUSE&amp;nbsp;after&amp;nbsp;erasure&amp;nbsp;it&amp;nbsp;become&amp;nbsp;'Object[]&amp;nbsp;b&amp;nbsp;=&amp;nbsp;(Object[])new&amp;nbsp;Object[1];'&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b[0]&amp;nbsp;=&amp;nbsp;a;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(b[0]);&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
or&amp;nbsp;EXAMPLE&amp;nbsp;from&amp;nbsp;STACK&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;GenericStack(int&amp;nbsp;s)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size&amp;nbsp;=&amp;nbsp;s&amp;nbsp;&gt;&amp;nbsp;0&amp;nbsp;?&amp;nbsp;s&amp;nbsp;:&amp;nbsp;10;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;=&amp;nbsp;-1;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elements&amp;nbsp;=&amp;nbsp;(E[])&amp;nbsp;new&amp;nbsp;Object[size];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
No&amp;nbsp;warnings,&amp;nbsp;no&amp;nbsp;type&amp;nbsp;errors,&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;cast&amp;nbsp;the&amp;nbsp;array&amp;nbsp;repeatedly.&lt;br&gt;
HOWEVER&amp;nbsp;this&amp;nbsp;is&amp;nbsp;potentially&amp;nbsp;dangerous,&amp;nbsp;and&amp;nbsp;should&amp;nbsp;be&amp;nbsp;used&lt;br&gt;
with&amp;nbsp;caution.&amp;nbsp;As&amp;nbsp;detailed&amp;nbsp;in&amp;nbsp;the&amp;nbsp;comments,&amp;nbsp;this&amp;nbsp;Object[]&amp;nbsp;is&amp;nbsp;now&lt;br&gt;
masquerading&amp;nbsp;as&amp;nbsp;our&amp;nbsp;E[]&amp;nbsp;type,&amp;nbsp;and&amp;nbsp;can&amp;nbsp;cause&amp;nbsp;unexpected&amp;nbsp;errors&lt;br&gt;
or&amp;nbsp;ClassCastExceptions&amp;nbsp;if&amp;nbsp;used&amp;nbsp;unsafely.</questionanswer>
  </question>
</questions>
