<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_1" name="StructuralPatterns" nofquestions="8" nofsubcategories="0" filename="structuralpatterns2_6_5_1.xml">
  <question id="2_6_5_1:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Adapter,&amp;nbsp;describe&amp;nbsp;.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;My&amp;nbsp;opinion&amp;nbsp;:&amp;nbsp;Easy&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;.&amp;nbsp;There&amp;nbsp;are&amp;nbsp;two&amp;nbsp;types&amp;nbsp;:&amp;nbsp;object&amp;nbsp;adapter&amp;nbsp;&lt;br&gt;
and&amp;nbsp;class&amp;nbsp;pattern.&amp;nbsp;Look&amp;nbsp;on&amp;nbsp;examples&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;idea&amp;nbsp;of&amp;nbsp;adapter.&lt;br&gt;
It&amp;nbsp;consists&amp;nbsp;of&amp;nbsp;:&amp;nbsp;adaptee,&amp;nbsp;adapter,&amp;nbsp;and&amp;nbsp;client&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;adapter&amp;nbsp;pattern&amp;nbsp;(often&lt;br&gt;
referred&amp;nbsp;to&amp;nbsp;as&amp;nbsp;the&amp;nbsp;wrapper&amp;nbsp;pattern&amp;nbsp;or&amp;nbsp;simply&amp;nbsp;a&amp;nbsp;wrapper&amp;nbsp;-&amp;nbsp;an&amp;nbsp;&lt;br&gt;
alternative&amp;nbsp;naming&amp;nbsp;shared&amp;nbsp;with&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;pattern&amp;nbsp;according&amp;nbsp;to&amp;nbsp;the&amp;nbsp;GoF&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Design&lt;br&gt;
&amp;nbsp;Patterns&amp;nbsp;book&amp;nbsp;)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&amp;nbsp;translates&amp;nbsp;one&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;a&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;into&amp;nbsp;a&amp;nbsp;&lt;br&gt;
compatible&amp;nbsp;interface.&amp;nbsp;An&amp;nbsp;adapter&amp;nbsp;allows&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;that&amp;nbsp;normally&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;could&lt;br&gt;
not&amp;nbsp;because&amp;nbsp;of&amp;nbsp;incompatible&amp;nbsp;interfaces,&amp;nbsp;by&amp;nbsp;providing&amp;nbsp;its&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;clients&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while&lt;br&gt;
using&amp;nbsp;the&amp;nbsp;original&amp;nbsp;interface.&amp;nbsp;The&amp;nbsp;adapter&amp;nbsp;translates&amp;nbsp;calls&amp;nbsp;to&amp;nbsp;its&amp;nbsp;interface&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;into&amp;nbsp;calls&amp;nbsp;&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;original&amp;nbsp;interface,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;code&amp;nbsp;necessary&amp;nbsp;to&amp;nbsp;do&amp;nbsp;this&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typically&amp;nbsp;small.&lt;br&gt;
The&amp;nbsp;adapter&amp;nbsp;is&amp;nbsp;also&amp;nbsp;responsible&amp;nbsp;for&amp;nbsp;transforming&amp;nbsp;data&amp;nbsp;into&amp;nbsp;appropriate&amp;nbsp;&lt;br&gt;
forms.&amp;nbsp;For&amp;nbsp;instance,&amp;nbsp;if&amp;nbsp;multiple&amp;nbsp;boolean&amp;nbsp;values&amp;nbsp;are&amp;nbsp;stored&amp;nbsp;as&amp;nbsp;a&lt;br&gt;
single&amp;nbsp;integer&amp;nbsp;(i.e.&amp;nbsp;flags)&amp;nbsp;but&amp;nbsp;the&amp;nbsp;client&amp;nbsp;requires&amp;nbsp;individual&amp;nbsp;boolean&amp;nbsp;&lt;br&gt;
values,&amp;nbsp;the&amp;nbsp;adapter&amp;nbsp;would&amp;nbsp;be&amp;nbsp;responsible&amp;nbsp;for&amp;nbsp;extracting&amp;nbsp;the&amp;nbsp;appropriate&lt;br&gt;
values&amp;nbsp;from&amp;nbsp;the&amp;nbsp;integer&amp;nbsp;value.&amp;nbsp;Another&amp;nbsp;example&amp;nbsp;is&amp;nbsp;transforming&amp;nbsp;the&amp;nbsp;format&amp;nbsp;&lt;br&gt;
of&amp;nbsp;dates&amp;nbsp;(e.g.&amp;nbsp;YYYYMMDD&amp;nbsp;to&amp;nbsp;MM/DD/YYYY&amp;nbsp;or&amp;nbsp;DD/MM/YYYY&amp;nbsp;).&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;adapter&amp;nbsp;helps&amp;nbsp;two&amp;nbsp;incompatible&amp;nbsp;interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;the&amp;nbsp;real&amp;nbsp;world&amp;nbsp;definition&amp;nbsp;for&amp;nbsp;an&amp;nbsp;adapter.&amp;nbsp;Adapter&amp;nbsp;design&lt;br&gt;
pattern&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;two&amp;nbsp;different&amp;nbsp;classes&amp;nbsp;with&amp;nbsp;incompatible&lt;br&gt;
interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together.&amp;nbsp;Interfaces&amp;nbsp;may&amp;nbsp;be&amp;nbsp;incompatible&amp;nbsp;but&amp;nbsp;the&amp;nbsp;inner&lt;br&gt;
functionality&amp;nbsp;should&amp;nbsp;suit&amp;nbsp;the&amp;nbsp;need.&amp;nbsp;The&amp;nbsp;Adapter&amp;nbsp;pattern&amp;nbsp;allows&lt;br&gt;
otherwise&amp;nbsp;incompatible&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;by&amp;nbsp;converting&amp;nbsp;the&lt;br&gt;
interface&amp;nbsp;of&amp;nbsp;one&amp;nbsp;class&amp;nbsp;into&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;expected&amp;nbsp;by&amp;nbsp;the&amp;nbsp;clients.&lt;br&gt;
&lt;br&gt;
Uml&amp;nbsp;diagrams&amp;nbsp;:&lt;br&gt;
&amp;nbsp;Object&amp;nbsp;adapter&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='370'&amp;nbsp;height='290'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/ObjectAdapter.png'/&gt;&lt;br&gt;
&lt;br&gt;
Class&amp;nbsp;adapter&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='370'&amp;nbsp;height='290'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/ClassAdapter.png'/&gt;&lt;br&gt;
&lt;br&gt;
Examples&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
1)&amp;nbsp;Class&amp;nbsp;adapter:&lt;br&gt;
//&amp;nbsp;Target&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Chief&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast();&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeLunch();&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Adaptee&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Plumber&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getScrewNut()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getPipe()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getGasket()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Adapter&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChiefAdapter&amp;nbsp;extends&amp;nbsp;Plumber&amp;nbsp;implements&amp;nbsp;Chief&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getGasket();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeLunch()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getPipe();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner()&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;getScrewNut();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Client&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Client&lt;br&gt;
{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;eat(Object&amp;nbsp;dish)&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&amp;nbsp;...&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&lt;br&gt;
&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chief&amp;nbsp;ch&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChiefAdapter();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeBreakfast();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeLunch();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dish&amp;nbsp;=&amp;nbsp;ch.makeDinner();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eat(dish);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;callAmbulance();&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
2)&amp;nbsp;Object&amp;nbsp;adapter&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Chief.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Chief&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeSupper();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Plumber.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Plumber&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getPipe(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getKey(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;getScrewDriver(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Object();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;ChiefAdapter.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ChiefAdapter&amp;nbsp;implements&amp;nbsp;Chief{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Plumber&amp;nbsp;plumber&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Plumber();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeBreakfast()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getKey();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeDinner()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getScrewDriver();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Object&amp;nbsp;makeSupper()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;plumber.getPipe();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
package&amp;nbsp;com.designpatterns.objectadapter;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/*&amp;nbsp;&amp;#1060;&amp;#1072;&amp;#1081;&amp;#1083;&amp;nbsp;Client.java&lt;br&gt;
&amp;nbsp;*&amp;nbsp;&lt;br&gt;
&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Client&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main&amp;nbsp;(String&amp;nbsp;[]&amp;nbsp;args){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Chief&amp;nbsp;chief&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ChiefAdapter();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;key&amp;nbsp;=&amp;nbsp;chief.makeDinner();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Bridge,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;My&amp;nbsp;opinion&amp;nbsp;:&amp;nbsp;very&amp;nbsp;useful&amp;nbsp;pattern&amp;nbsp;(&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;understand&amp;nbsp;&amp;nbsp;,&amp;nbsp;realy&amp;nbsp;good&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;example&amp;nbsp;on&amp;nbsp;wiki)&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;bridge&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;used&amp;nbsp;in&amp;nbsp;software&lt;br&gt;
engineering&amp;nbsp;which&amp;nbsp;is&amp;nbsp;meant&amp;nbsp;to&amp;nbsp;&amp;quot;decouple&amp;nbsp;an&amp;nbsp;abstraction&amp;nbsp;from&lt;br&gt;
its&amp;nbsp;implementation&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;two&amp;nbsp;can&amp;nbsp;vary&amp;nbsp;independently&amp;quot;.&lt;br&gt;
&amp;nbsp;The&amp;nbsp;bridge&amp;nbsp;uses&amp;nbsp;encapsulation,&amp;nbsp;aggregation,&amp;nbsp;and&amp;nbsp;can&amp;nbsp;use&lt;br&gt;
inheritance&amp;nbsp;to&amp;nbsp;separate&amp;nbsp;responsibilities&amp;nbsp;into&amp;nbsp;different&amp;nbsp;classes.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='700'&amp;nbsp;height='350'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Bridge_UML_class_diagram.svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(wiki)&lt;br&gt;
&lt;br&gt;
/**&amp;nbsp;&amp;quot;Implementor&amp;quot;&amp;nbsp;*/&lt;br&gt;
interface&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius);&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;ConcreteImplementor&amp;quot;&amp;nbsp;&amp;nbsp;1/2&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;DrawingAPI1&amp;nbsp;implements&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;API1.circle&amp;nbsp;at&amp;nbsp;%f:%f&amp;nbsp;radius&amp;nbsp;%f\n&amp;quot;,&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;ConcreteImplementor&amp;quot;&amp;nbsp;2/2&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;DrawingAPI2&amp;nbsp;implements&amp;nbsp;DrawingAPI&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;drawCircle(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.printf(&amp;quot;API2.circle&amp;nbsp;at&amp;nbsp;%f:%f&amp;nbsp;radius&amp;nbsp;%f\n&amp;quot;,&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Abstraction&amp;quot;&amp;nbsp;*/&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;DrawingAPI&amp;nbsp;drawingAPI;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;Shape(DrawingAPI&amp;nbsp;drawingAPI){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.drawingAPI&amp;nbsp;=&amp;nbsp;drawingAPI;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;draw();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;low-level&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;abstract&amp;nbsp;void&amp;nbsp;resizeByPercentage(double&amp;nbsp;pct);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;high-level&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Refined&amp;nbsp;Abstraction&amp;quot;&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;CircleShape&amp;nbsp;extends&amp;nbsp;Shape&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;double&amp;nbsp;x,&amp;nbsp;y,&amp;nbsp;radius;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CircleShape(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;y,&amp;nbsp;double&amp;nbsp;radius,&amp;nbsp;DrawingAPI&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawingAPI)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(drawingAPI);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.x&amp;nbsp;=&amp;nbsp;x;&amp;nbsp;&amp;nbsp;this.y&amp;nbsp;=&amp;nbsp;y;&amp;nbsp;&amp;nbsp;this.radius&amp;nbsp;=&amp;nbsp;radius;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;low-level&amp;nbsp;i.e.&amp;nbsp;Implementation&amp;nbsp;specific&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawingAPI.drawCircle(x,&amp;nbsp;y,&amp;nbsp;radius);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;high-level&amp;nbsp;i.e.&amp;nbsp;Abstraction&amp;nbsp;specific&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;resizeByPercentage(double&amp;nbsp;pct)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;radius&amp;nbsp;*=&amp;nbsp;pct;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Client&amp;quot;&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;BridgePattern&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shape[]&amp;nbsp;shapes&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Shape[]&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;CircleShape(1,&amp;nbsp;2,&amp;nbsp;3,&amp;nbsp;new&amp;nbsp;DrawingAPI1()),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;CircleShape(5,&amp;nbsp;7,&amp;nbsp;11,&amp;nbsp;new&amp;nbsp;DrawingAPI2()),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Shape&amp;nbsp;shape&amp;nbsp;:&amp;nbsp;shapes)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shape.resizeByPercentage(2.5);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shape.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
From&amp;nbsp;stackoverflow.com&lt;br&gt;
BEFORE:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;________&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Car&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_________&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ForeignCar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
GoodNativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;BadNativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GoodForeignCar&amp;nbsp;&amp;nbsp;BadForeignCar&lt;br&gt;
&lt;br&gt;
After&amp;nbsp;using&amp;nbsp;Bridge&amp;nbsp;Pattern&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CarAbstraction&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CarAbstractionImpl-------------HAS-A-------&gt;&amp;nbsp;CarImplementor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NativeCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ForeignCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GoodCar&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BadCar&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Strucural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Composite&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;software&amp;nbsp;engineering,&amp;nbsp;the&amp;nbsp;composite&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&lt;br&gt;
partitioning&amp;nbsp;design&amp;nbsp;pattern.&amp;nbsp;The&amp;nbsp;composite&amp;nbsp;pattern&lt;br&gt;
describes&amp;nbsp;that&amp;nbsp;a&amp;nbsp;group&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;to&amp;nbsp;be&amp;nbsp;treated&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;same&amp;nbsp;way&amp;nbsp;as&amp;nbsp;a&amp;nbsp;single&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object.&lt;br&gt;
The&amp;nbsp;intent&amp;nbsp;of&amp;nbsp;a&amp;nbsp;composite&amp;nbsp;is&amp;nbsp;to&amp;nbsp;&amp;quot;compose&amp;quot;&amp;nbsp;objects&amp;nbsp;into&lt;br&gt;
tree&amp;nbsp;structures&amp;nbsp;to&amp;nbsp;represent&amp;nbsp;part-whole&amp;nbsp;hierarchies.&lt;br&gt;
Implementing&amp;nbsp;the&amp;nbsp;composite&amp;nbsp;pattern&amp;nbsp;lets&amp;nbsp;clients&amp;nbsp;treat&lt;br&gt;
individual&amp;nbsp;objects&amp;nbsp;and&amp;nbsp;compositions&amp;nbsp;uniformly&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;dealing&amp;nbsp;with&amp;nbsp;Tree-structured&amp;nbsp;data,&amp;nbsp;programmers&lt;br&gt;
often&amp;nbsp;have&amp;nbsp;to&amp;nbsp;discriminate&amp;nbsp;between&amp;nbsp;a&amp;nbsp;leaf-node&amp;nbsp;and&amp;nbsp;a&amp;nbsp;branch.&lt;br&gt;
This&amp;nbsp;makes&amp;nbsp;code&amp;nbsp;more&amp;nbsp;complex,&amp;nbsp;and&amp;nbsp;therefore,&amp;nbsp;error&amp;nbsp;prone.&lt;br&gt;
The&amp;nbsp;solution&amp;nbsp;is&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;that&amp;nbsp;allows&amp;nbsp;treating&amp;nbsp;complex&amp;nbsp;and&lt;br&gt;
primitive&amp;nbsp;objects&amp;nbsp;uniformly.&amp;nbsp;In&amp;nbsp;object-oriented&amp;nbsp;programming,&amp;nbsp;a&amp;nbsp;composite&lt;br&gt;
is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;designed&amp;nbsp;as&amp;nbsp;a&amp;nbsp;composition&amp;nbsp;of&amp;nbsp;one-or-more&amp;nbsp;similar&lt;br&gt;
objects,&amp;nbsp;all&amp;nbsp;exhibiting&amp;nbsp;similar&amp;nbsp;functionality.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;&amp;quot;has-a&amp;quot;&lt;br&gt;
relationship&amp;nbsp;between&amp;nbsp;objects.&lt;br&gt;
The&amp;nbsp;key&amp;nbsp;concept&amp;nbsp;is&amp;nbsp;that&amp;nbsp;you&amp;nbsp;can&amp;nbsp;manipulate&amp;nbsp;a&amp;nbsp;single&amp;nbsp;instance&lt;br&gt;
of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;just&amp;nbsp;as&amp;nbsp;you&amp;nbsp;would&amp;nbsp;manipulate&amp;nbsp;a&amp;nbsp;group&amp;nbsp;of&amp;nbsp;them.&lt;br&gt;
The&amp;nbsp;operations&amp;nbsp;you&amp;nbsp;can&amp;nbsp;perform&amp;nbsp;on&amp;nbsp;all&amp;nbsp;the&amp;nbsp;composite&amp;nbsp;objects&amp;nbsp;often&lt;br&gt;
have&amp;nbsp;a&amp;nbsp;least&amp;nbsp;common&amp;nbsp;denominator&amp;nbsp;relationship.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;if&amp;nbsp;defining&lt;br&gt;
a&amp;nbsp;system&amp;nbsp;to&amp;nbsp;portray&amp;nbsp;grouped&amp;nbsp;shapes&amp;nbsp;on&amp;nbsp;a&amp;nbsp;screen,&lt;br&gt;
it&amp;nbsp;would&amp;nbsp;be&amp;nbsp;useful&amp;nbsp;to&amp;nbsp;define&amp;nbsp;resizing&amp;nbsp;a&amp;nbsp;group&amp;nbsp;of&amp;nbsp;shapes&amp;nbsp;to&amp;nbsp;have&amp;nbsp;the&lt;br&gt;
same&amp;nbsp;effect&amp;nbsp;(in&amp;nbsp;some&amp;nbsp;sense)&amp;nbsp;as&amp;nbsp;resizing&amp;nbsp;a&amp;nbsp;single&amp;nbsp;shape.&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='350'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Composite_UML_class_diagram_(fixed).svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Exampe&amp;nbsp;(from&amp;nbsp;wiki,&amp;nbsp;good&amp;nbsp;example&amp;nbsp;)&amp;nbsp;:&lt;br&gt;
&lt;br&gt;
/**&amp;nbsp;&amp;quot;Component&amp;quot;&amp;nbsp;*/&lt;br&gt;
interface&amp;nbsp;Graphic&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Prints&amp;nbsp;the&amp;nbsp;graphic.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print();&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Composite&amp;quot;&amp;nbsp;*/&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
class&amp;nbsp;CompositeGraphic&amp;nbsp;implements&amp;nbsp;Graphic&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Collection&amp;nbsp;of&amp;nbsp;child&amp;nbsp;graphics.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;List&lt;Graphic&gt;&amp;nbsp;childGraphics&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;Graphic&gt;();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Prints&amp;nbsp;the&amp;nbsp;graphic.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Graphic&amp;nbsp;graphic&amp;nbsp;:&amp;nbsp;childGraphics)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic.print();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Adds&amp;nbsp;the&amp;nbsp;graphic&amp;nbsp;to&amp;nbsp;the&amp;nbsp;composition.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;add(Graphic&amp;nbsp;graphic)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;childGraphics.add(graphic);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Removes&amp;nbsp;the&amp;nbsp;graphic&amp;nbsp;from&amp;nbsp;the&amp;nbsp;composition.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;remove(Graphic&amp;nbsp;graphic)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;childGraphics.remove(graphic);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;&amp;quot;Leaf&amp;quot;&amp;nbsp;*/&lt;br&gt;
class&amp;nbsp;Ellipse&amp;nbsp;implements&amp;nbsp;Graphic&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Prints&amp;nbsp;the&amp;nbsp;graphic.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;print()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Ellipse&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
/**&amp;nbsp;Client&amp;nbsp;*/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Program&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Initialize&amp;nbsp;four&amp;nbsp;ellipses&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Ellipse&amp;nbsp;ellipse1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Ellipse();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Ellipse&amp;nbsp;ellipse2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Ellipse();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Ellipse&amp;nbsp;ellipse3&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Ellipse();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Ellipse&amp;nbsp;ellipse4&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Ellipse();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Initialize&amp;nbsp;three&amp;nbsp;composite&amp;nbsp;graphics&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CompositeGraphic&amp;nbsp;graphic&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CompositeGraphic();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CompositeGraphic&amp;nbsp;graphic1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CompositeGraphic();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CompositeGraphic&amp;nbsp;graphic2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CompositeGraphic();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Composes&amp;nbsp;the&amp;nbsp;graphics&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic1.add(ellipse1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic1.add(ellipse2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic1.add(ellipse3);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic2.add(ellipse4);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic.add(graphic1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic.add(graphic2);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Prints&amp;nbsp;the&amp;nbsp;complete&amp;nbsp;graphic&amp;nbsp;(four&amp;nbsp;times&amp;nbsp;the&amp;nbsp;string&amp;nbsp;&amp;quot;Ellipse&amp;quot;).&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;graphic.print();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Decorator,&amp;nbsp;describe.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;object-oriented&amp;nbsp;programming,&amp;nbsp;the&amp;nbsp;decorator&amp;nbsp;pattern&amp;nbsp;&lt;br&gt;
(also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;Wrapper,&amp;nbsp;an&amp;nbsp;alternative&amp;nbsp;naming&amp;nbsp;shared&amp;nbsp;with&lt;br&gt;
the&amp;nbsp;Adapter&amp;nbsp;pattern)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&amp;nbsp;allows&amp;nbsp;behavior&amp;nbsp;to&lt;br&gt;
be&amp;nbsp;added&amp;nbsp;to&amp;nbsp;an&amp;nbsp;individual&amp;nbsp;object,&amp;nbsp;either&amp;nbsp;statically&amp;nbsp;or&amp;nbsp;dynamically,&lt;br&gt;
without&amp;nbsp;affecting&amp;nbsp;the&amp;nbsp;behavior&amp;nbsp;of&amp;nbsp;other&amp;nbsp;objects&amp;nbsp;from&amp;nbsp;the&amp;nbsp;same&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;decorator&amp;nbsp;pattern&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;to&amp;nbsp;extend&amp;nbsp;(decorate)&amp;nbsp;the&amp;nbsp;functionality&lt;br&gt;
of&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;object&amp;nbsp;statically,&amp;nbsp;or&amp;nbsp;in&amp;nbsp;some&amp;nbsp;cases&lt;br&gt;
at&amp;nbsp;run-time,&amp;nbsp;independently&amp;nbsp;of&amp;nbsp;other&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;class,&lt;br&gt;
provided&amp;nbsp;some&amp;nbsp;groundwork&amp;nbsp;is&amp;nbsp;done&amp;nbsp;at&amp;nbsp;design&amp;nbsp;time.&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;achieved&amp;nbsp;by&amp;nbsp;designing&amp;nbsp;a&amp;nbsp;new&amp;nbsp;decorator&amp;nbsp;class&amp;nbsp;that&amp;nbsp;wraps&lt;br&gt;
the&amp;nbsp;original&amp;nbsp;class.&amp;nbsp;This&amp;nbsp;wrapping&amp;nbsp;could&amp;nbsp;be&amp;nbsp;achieved&amp;nbsp;by&amp;nbsp;the&amp;nbsp;following&lt;br&gt;
sequence&amp;nbsp;of&amp;nbsp;steps:&lt;br&gt;
-&amp;nbsp;Subclass&amp;nbsp;the&amp;nbsp;original&amp;nbsp;&amp;quot;Component&amp;quot;&amp;nbsp;class&amp;nbsp;into&amp;nbsp;a&amp;nbsp;&amp;quot;Decorator&amp;quot;&amp;nbsp;class&amp;nbsp;(see&amp;nbsp;UML&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;diagram);&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;class,&amp;nbsp;add&amp;nbsp;a&amp;nbsp;Component&amp;nbsp;pointer&amp;nbsp;as&amp;nbsp;a&amp;nbsp;field;&lt;br&gt;
-&amp;nbsp;Pass&amp;nbsp;a&amp;nbsp;Component&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;constructor&amp;nbsp;to&amp;nbsp;initialize&amp;nbsp;the&amp;nbsp;Component&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pointer;&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;class,&amp;nbsp;redirect&amp;nbsp;all&amp;nbsp;&amp;quot;Component&amp;quot;&amp;nbsp;methods&amp;nbsp;to&amp;nbsp;the&amp;nbsp;&amp;quot;Component&amp;quot;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pointer;&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;the&amp;nbsp;ConcreteDecorator&amp;nbsp;class,&amp;nbsp;override&amp;nbsp;any&amp;nbsp;Component&lt;br&gt;
&amp;nbsp;method(s)&amp;nbsp;whose&amp;nbsp;behavior&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;be&amp;nbsp;modified.&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;designed&amp;nbsp;so&amp;nbsp;that&amp;nbsp;multiple&amp;nbsp;decorators&amp;nbsp;can&amp;nbsp;be&amp;nbsp;stacked&lt;br&gt;
on&amp;nbsp;top&amp;nbsp;of&amp;nbsp;each&amp;nbsp;other,&amp;nbsp;each&amp;nbsp;time&amp;nbsp;adding&amp;nbsp;a&amp;nbsp;new&amp;nbsp;functionality&amp;nbsp;to&amp;nbsp;the&lt;br&gt;
overridden&amp;nbsp;method(s).&lt;br&gt;
Note&amp;nbsp;that&amp;nbsp;decorators&amp;nbsp;and&amp;nbsp;the&amp;nbsp;original&amp;nbsp;class&amp;nbsp;object&amp;nbsp;share&amp;nbsp;a&lt;br&gt;
common&amp;nbsp;set&amp;nbsp;of&amp;nbsp;features.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;previous&amp;nbsp;diagram,&amp;nbsp;the&amp;nbsp;&amp;quot;operation()&amp;quot;&lt;br&gt;
method&amp;nbsp;was&amp;nbsp;available&amp;nbsp;in&amp;nbsp;both&amp;nbsp;the&amp;nbsp;decorated&amp;nbsp;and&amp;nbsp;undecorated&amp;nbsp;versions.&lt;br&gt;
The&amp;nbsp;decoration&amp;nbsp;features&amp;nbsp;(e.g.,&amp;nbsp;methods,&amp;nbsp;properties,&amp;nbsp;or&amp;nbsp;other&amp;nbsp;members)&lt;br&gt;
are&amp;nbsp;usually&amp;nbsp;defined&amp;nbsp;by&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;mixin&amp;nbsp;(a.k.a.&amp;nbsp;&amp;quot;trait&amp;quot;)&amp;nbsp;or&amp;nbsp;class&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inheritance&lt;br&gt;
which&amp;nbsp;is&amp;nbsp;shared&amp;nbsp;by&amp;nbsp;the&amp;nbsp;decorators&amp;nbsp;and&amp;nbsp;the&amp;nbsp;decorated&amp;nbsp;object.&amp;nbsp;In&amp;nbsp;the&amp;nbsp;previous&lt;br&gt;
example&amp;nbsp;the&amp;nbsp;class&amp;nbsp;&amp;quot;Component&amp;quot;&amp;nbsp;is&amp;nbsp;inherited&amp;nbsp;by&amp;nbsp;both&amp;nbsp;the&lt;br&gt;
&amp;quot;ConcreteComponent&amp;quot;&amp;nbsp;and&amp;nbsp;the&amp;nbsp;subclasses&amp;nbsp;that&amp;nbsp;descend&amp;nbsp;from&amp;nbsp;&amp;quot;Decorator&amp;quot;.&lt;br&gt;
The&amp;nbsp;decorator&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;an&amp;nbsp;alternative&amp;nbsp;to&amp;nbsp;subclassing.&lt;br&gt;
Subclassing&amp;nbsp;adds&amp;nbsp;behavior&amp;nbsp;at&amp;nbsp;compile&amp;nbsp;time,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;change&lt;br&gt;
affects&amp;nbsp;all&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;original&amp;nbsp;class;&amp;nbsp;decorating&amp;nbsp;can&amp;nbsp;provide&amp;nbsp;&lt;br&gt;
new&amp;nbsp;behavior&amp;nbsp;at&amp;nbsp;run-time&amp;nbsp;for&amp;nbsp;individual&amp;nbsp;objects.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='600'&amp;nbsp;height='500'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Decorator_UML_class_diagram.svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(wiki)&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='700'&amp;nbsp;height='300'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Decorator_Pattern_Example.png'/&gt;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;Window&amp;nbsp;interface&amp;nbsp;class&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw();&amp;nbsp;//&amp;nbsp;draws&amp;nbsp;the&amp;nbsp;Window&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription();&amp;nbsp;//&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;description&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Window&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;extension&amp;nbsp;of&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;Window&amp;nbsp;without&amp;nbsp;any&amp;nbsp;scrollbars&lt;br&gt;
class&amp;nbsp;SimpleWindow&amp;nbsp;implements&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;window&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;simple&amp;nbsp;window&amp;quot;;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;abstract&amp;nbsp;decorator&amp;nbsp;class&amp;nbsp;-&amp;nbsp;note&amp;nbsp;that&amp;nbsp;it&amp;nbsp;implements&amp;nbsp;Window&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;WindowDecorator&amp;nbsp;implements&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;Window&amp;nbsp;decoratedWindow;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;Window&amp;nbsp;being&amp;nbsp;decorated&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;WindowDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.decoratedWindow&amp;nbsp;=&amp;nbsp;decoratedWindow;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;decoratedWindow.draw();&amp;nbsp;//delegation&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;decoratedWindow.getDescription();&amp;nbsp;//delegation&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;first&amp;nbsp;concrete&amp;nbsp;decorator&amp;nbsp;which&amp;nbsp;adds&amp;nbsp;vertical&amp;nbsp;scrollbar&amp;nbsp;functionality&lt;br&gt;
class&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;extends&amp;nbsp;WindowDecorator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(decoratedWindow);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawVerticalScrollBar();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;drawVerticalScrollBar()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;the&amp;nbsp;vertical&amp;nbsp;scrollbar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;super.getDescription()&amp;nbsp;+&amp;nbsp;&amp;quot;,&amp;nbsp;including&amp;nbsp;vertical&amp;nbsp;scrollbars&amp;quot;;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;second&amp;nbsp;concrete&amp;nbsp;decorator&amp;nbsp;which&amp;nbsp;adds&amp;nbsp;horizontal&amp;nbsp;scrollbar&amp;nbsp;functionality&lt;br&gt;
class&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;extends&amp;nbsp;WindowDecorator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(decoratedWindow);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawHorizontalScrollBar();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;drawHorizontalScrollBar()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;the&amp;nbsp;horizontal&amp;nbsp;scrollbar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;super.getDescription()&amp;nbsp;+&amp;nbsp;&amp;quot;,&amp;nbsp;including&amp;nbsp;horizontal&amp;nbsp;scrollbars&amp;quot;;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;DecoratedWindowTest&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;a&amp;nbsp;decorated&amp;nbsp;Window&amp;nbsp;with&amp;nbsp;horizontal&amp;nbsp;and&amp;nbsp;vertical&amp;nbsp;scrollbars&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Window&amp;nbsp;decoratedWindow&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;(new&amp;nbsp;SimpleWindow()));&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;print&amp;nbsp;the&amp;nbsp;Window's&amp;nbsp;description&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(decoratedWindow.getDescription());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;are&amp;nbsp;the&amp;nbsp;differences&amp;nbsp;between&amp;nbsp;the&amp;nbsp;Decorator&amp;nbsp;and&amp;nbsp;Adapter&amp;nbsp;patterns?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Adapter&amp;nbsp;adapts&amp;nbsp;a&amp;nbsp;given&amp;nbsp;class/object&amp;nbsp;to&amp;nbsp;a&amp;nbsp;new&amp;nbsp;interface.&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;case&amp;nbsp;of&amp;nbsp;the&amp;nbsp;former,&amp;nbsp;multiple&amp;nbsp;inheritance&amp;nbsp;is&amp;nbsp;typically&amp;nbsp;employed.&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;latter&amp;nbsp;case,&amp;nbsp;the&amp;nbsp;object&amp;nbsp;is&amp;nbsp;wrapped&amp;nbsp;by&amp;nbsp;a&amp;nbsp;conforming&lt;br&gt;
adapter&amp;nbsp;object&amp;nbsp;and&amp;nbsp;passed&amp;nbsp;around.&lt;br&gt;
The&amp;nbsp;problem&amp;nbsp;we&amp;nbsp;are&amp;nbsp;solving&amp;nbsp;here&amp;nbsp;is&amp;nbsp;that&amp;nbsp;of&amp;nbsp;non-compatible&amp;nbsp;interfaces.&lt;br&gt;
&lt;br&gt;
Facade&amp;nbsp;is&amp;nbsp;more&amp;nbsp;like&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;gateway&amp;nbsp;to&amp;nbsp;a&amp;nbsp;complicated&lt;br&gt;
set&amp;nbsp;of&amp;nbsp;functionality.&lt;br&gt;
You&amp;nbsp;make&amp;nbsp;a&amp;nbsp;black-box&amp;nbsp;for&amp;nbsp;your&amp;nbsp;clients&amp;nbsp;to&amp;nbsp;worry&amp;nbsp;less&amp;nbsp;i.e.&amp;nbsp;make&amp;nbsp;interfaces&amp;nbsp;simpler.&lt;br&gt;
&lt;br&gt;
Proxy&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;same&amp;nbsp;interface&amp;nbsp;as&amp;nbsp;the&amp;nbsp;proxied-for&amp;nbsp;class&lt;br&gt;
and&amp;nbsp;typically&amp;nbsp;does&amp;nbsp;some&amp;nbsp;housekeeping&amp;nbsp;stuff&amp;nbsp;on&amp;nbsp;its&amp;nbsp;own.&lt;br&gt;
(So&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;making&amp;nbsp;multiple&amp;nbsp;copies&amp;nbsp;of&amp;nbsp;a&amp;nbsp;heavy&amp;nbsp;object&amp;nbsp;X&amp;nbsp;you&lt;br&gt;
make&amp;nbsp;copies&amp;nbsp;of&amp;nbsp;a&amp;nbsp;lightweight&amp;nbsp;proxy&amp;nbsp;P&amp;nbsp;which&amp;nbsp;in&amp;nbsp;turn&amp;nbsp;manages&amp;nbsp;X&amp;nbsp;and&lt;br&gt;
translates&amp;nbsp;your&amp;nbsp;calls&amp;nbsp;as&amp;nbsp;required.)&amp;nbsp;You&amp;nbsp;are&amp;nbsp;solving&amp;nbsp;the&lt;br&gt;
problem&amp;nbsp;of&amp;nbsp;the&amp;nbsp;client&amp;nbsp;from&amp;nbsp;having&amp;nbsp;to&amp;nbsp;manage&amp;nbsp;a&amp;nbsp;heavy&amp;nbsp;and/or&amp;nbsp;complex&amp;nbsp;object.&lt;br&gt;
&lt;br&gt;
Decorator&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;add&amp;nbsp;more&amp;nbsp;gunpowder&amp;nbsp;to&amp;nbsp;your&lt;br&gt;
objects&amp;nbsp;(note&amp;nbsp;the&amp;nbsp;term&amp;nbsp;objects&amp;nbsp;--&amp;nbsp;you&amp;nbsp;typically&amp;nbsp;decorate&lt;br&gt;
objects&amp;nbsp;dynamically&amp;nbsp;at&amp;nbsp;runtime).&amp;nbsp;You&amp;nbsp;do&amp;nbsp;not&amp;nbsp;hide/impair&amp;nbsp;the&lt;br&gt;
existing&amp;nbsp;interfaces&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;but&amp;nbsp;simply&amp;nbsp;extend&amp;nbsp;it&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
&lt;br&gt;
http://mostly-about-java.blogspot.com/2013/04/difference-between-adapter-decorator.html&lt;br&gt;
&lt;br&gt;
Another&amp;nbsp;explanation&lt;br&gt;
Proxy,&amp;nbsp;Decorator,&amp;nbsp;Adapter,&amp;nbsp;and&amp;nbsp;Bridge&amp;nbsp;are&amp;nbsp;all&amp;nbsp;variations&amp;nbsp;on&amp;nbsp;"wrapping"&amp;nbsp;a&amp;nbsp;class.&lt;br&gt;
But&amp;nbsp;their&amp;nbsp;uses&amp;nbsp;are&amp;nbsp;different.&lt;br&gt;
-&amp;nbsp;Proxy&amp;nbsp;could&amp;nbsp;be&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;lazy-instantiate&amp;nbsp;an&amp;nbsp;object,&lt;br&gt;
&amp;nbsp;or&amp;nbsp;hide&amp;nbsp;the&amp;nbsp;fact&amp;nbsp;that&amp;nbsp;you're&amp;nbsp;calling&amp;nbsp;a&amp;nbsp;remote&amp;nbsp;service,&amp;nbsp;or&amp;nbsp;control&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;Decorator&amp;nbsp;is&amp;nbsp;also&amp;nbsp;called&amp;nbsp;"Smart&amp;nbsp;Proxy."&amp;nbsp;This&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&lt;br&gt;
&amp;nbsp;add&amp;nbsp;functionality&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;!!!&amp;nbsp;but&amp;nbsp;not&amp;nbsp;by&amp;nbsp;extending&amp;nbsp;that&lt;br&gt;
&amp;nbsp;object's&amp;nbsp;type.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;do&amp;nbsp;so&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
-&amp;nbsp;Adapter&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;have&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;interface,&lt;br&gt;
&amp;nbsp;and&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;map&amp;nbsp;that&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;another&amp;nbsp;object&amp;nbsp;which&lt;br&gt;
&amp;nbsp;has&amp;nbsp;similar&amp;nbsp;functional&amp;nbsp;role,&amp;nbsp;but&amp;nbsp;a&amp;nbsp;different&amp;nbsp;interface.&lt;br&gt;
-&amp;nbsp;Bridge&amp;nbsp;is&amp;nbsp;very&amp;nbsp;similar&amp;nbsp;to&amp;nbsp;Adapter,&amp;nbsp;but&amp;nbsp;we&amp;nbsp;call&amp;nbsp;it&amp;nbsp;Bridge&amp;nbsp;when&lt;br&gt;
&amp;nbsp;you&amp;nbsp;define&amp;nbsp;both&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;interface&amp;nbsp;and&amp;nbsp;the&amp;nbsp;underlying&lt;br&gt;
&amp;nbsp;implementation.&amp;nbsp;I.e.&amp;nbsp;you're&amp;nbsp;not&amp;nbsp;adapting&amp;nbsp;to&amp;nbsp;some&amp;nbsp;legacy&amp;nbsp;or&lt;br&gt;
&amp;nbsp;third-party&amp;nbsp;code,&amp;nbsp;you're&amp;nbsp;the&amp;nbsp;designer&amp;nbsp;of&amp;nbsp;all&amp;nbsp;the&amp;nbsp;code&amp;nbsp;but&amp;nbsp;you&amp;nbsp;need&lt;br&gt;
&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;swap&amp;nbsp;out&amp;nbsp;different&amp;nbsp;implementations.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(&amp;nbsp;decorator&amp;nbsp;):&lt;br&gt;
&amp;nbsp;(This&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&lt;br&gt;
&amp;nbsp;add&amp;nbsp;functionality&amp;nbsp;to&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;!!!&amp;nbsp;but&amp;nbsp;not&amp;nbsp;by&amp;nbsp;extending&amp;nbsp;that&lt;br&gt;
&amp;nbsp;object's&amp;nbsp;type.&amp;nbsp;This&amp;nbsp;allows&amp;nbsp;you&amp;nbsp;to&amp;nbsp;do&amp;nbsp;so&amp;nbsp;at&amp;nbsp;runtime.)&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;Window&amp;nbsp;interface&amp;nbsp;class&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw();&amp;nbsp;//&amp;nbsp;draws&amp;nbsp;the&amp;nbsp;Window&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription();&amp;nbsp;//&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;description&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Window&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;extension&amp;nbsp;of&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;Window&amp;nbsp;without&amp;nbsp;any&amp;nbsp;scrollbars&lt;br&gt;
class&amp;nbsp;SimpleWindow&amp;nbsp;implements&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;window&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"simple&amp;nbsp;window";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;abstract&amp;nbsp;decorator&amp;nbsp;class&amp;nbsp;-&amp;nbsp;note&amp;nbsp;that&amp;nbsp;it&amp;nbsp;implements&amp;nbsp;Window&lt;br&gt;
abstract&amp;nbsp;class&amp;nbsp;WindowDecorator&amp;nbsp;implements&amp;nbsp;Window&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;Window&amp;nbsp;decoratedWindow;&amp;nbsp;//&amp;nbsp;the&amp;nbsp;Window&amp;nbsp;being&amp;nbsp;decorated&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;WindowDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.decoratedWindow&amp;nbsp;=&amp;nbsp;decoratedWindow;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;decoratedWindow.draw();&amp;nbsp;//delegation&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;decoratedWindow.getDescription();&amp;nbsp;//delegation&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;first&amp;nbsp;concrete&amp;nbsp;decorator&amp;nbsp;which&amp;nbsp;adds&amp;nbsp;vertical&amp;nbsp;scrollbar&amp;nbsp;functionality&lt;br&gt;
class&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;extends&amp;nbsp;WindowDecorator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(decoratedWindow);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawVerticalScrollBar();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;drawVerticalScrollBar()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;the&amp;nbsp;vertical&amp;nbsp;scrollbar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;super.getDescription()&amp;nbsp;+&amp;nbsp;",&amp;nbsp;including&amp;nbsp;vertical&amp;nbsp;scrollbars";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;the&amp;nbsp;second&amp;nbsp;concrete&amp;nbsp;decorator&amp;nbsp;which&amp;nbsp;adds&amp;nbsp;horizontal&amp;nbsp;scrollbar&amp;nbsp;functionality&lt;br&gt;
class&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;extends&amp;nbsp;WindowDecorator&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;(Window&amp;nbsp;decoratedWindow)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(decoratedWindow);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;draw()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.draw();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawHorizontalScrollBar();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;drawHorizontalScrollBar()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;draw&amp;nbsp;the&amp;nbsp;horizontal&amp;nbsp;scrollbar&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getDescription()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;super.getDescription()&amp;nbsp;+&amp;nbsp;",&amp;nbsp;including&amp;nbsp;horizontal&amp;nbsp;scrollbars";&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;DecoratedWindowTest&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;create&amp;nbsp;a&amp;nbsp;decorated&amp;nbsp;Window&amp;nbsp;with&amp;nbsp;horizontal&amp;nbsp;and&amp;nbsp;vertical&amp;nbsp;scrollbars&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Window&amp;nbsp;decoratedWindow&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HorizontalScrollBarDecorator&amp;nbsp;(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new&amp;nbsp;VerticalScrollBarDecorator&amp;nbsp;(new&amp;nbsp;SimpleWindow()));&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;print&amp;nbsp;the&amp;nbsp;Window's&amp;nbsp;description&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(decoratedWindow.getDescription());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;</questionanswer>
  </question>
  <question id="2_6_5_1:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Structural&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Facade&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;examples.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;facade&amp;nbsp;pattern&amp;nbsp;(or&amp;nbsp;fa&amp;#231;ade&amp;nbsp;pattern)&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;commonly&amp;nbsp;used&amp;nbsp;with&amp;nbsp;object-oriented&amp;nbsp;programming.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;name&amp;nbsp;is&amp;nbsp;by&amp;nbsp;analogy&amp;nbsp;to&amp;nbsp;an&amp;nbsp;architectural&amp;nbsp;facade.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;facade&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;simplified&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;a&amp;nbsp;larger&amp;nbsp;body&amp;nbsp;of&amp;nbsp;code,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;library.&amp;nbsp;A&amp;nbsp;facade&amp;nbsp;can:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;make&amp;nbsp;a&amp;nbsp;software&amp;nbsp;library&amp;nbsp;easier&amp;nbsp;to&amp;nbsp;use,&amp;nbsp;understand&amp;nbsp;and&amp;nbsp;test,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;since&amp;nbsp;the&amp;nbsp;facade&amp;nbsp;has&amp;nbsp;convenient&amp;nbsp;methods&amp;nbsp;for&amp;nbsp;common&amp;nbsp;tasks;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;make&amp;nbsp;the&amp;nbsp;library&amp;nbsp;more&amp;nbsp;readable,&amp;nbsp;for&amp;nbsp;the&amp;nbsp;same&amp;nbsp;reason;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;reduce&amp;nbsp;dependencies&amp;nbsp;of&amp;nbsp;outside&amp;nbsp;code&amp;nbsp;on&amp;nbsp;the&amp;nbsp;inner&amp;nbsp;workings&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;a&amp;nbsp;library,&amp;nbsp;since&amp;nbsp;most&amp;nbsp;code&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;facade,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thus&amp;nbsp;allowing&amp;nbsp;more&amp;nbsp;flexibility&amp;nbsp;in&amp;nbsp;developing&amp;nbsp;the&amp;nbsp;system;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;wrap&amp;nbsp;a&amp;nbsp;poorly&amp;nbsp;designed&amp;nbsp;collection&amp;nbsp;of&amp;nbsp;APIs&amp;nbsp;with&amp;nbsp;a&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;single&amp;nbsp;well-designed&amp;nbsp;API&amp;nbsp;(as&amp;nbsp;per&amp;nbsp;task&amp;nbsp;needs).&amp;nbsp;!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UML&amp;nbsp;diagram:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='380'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/FacadeDesignPattern.png'/&gt;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;:&amp;nbsp;wiki&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;Complex&amp;nbsp;parts&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;CPU&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;freeze()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;freeze&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;jump(long&amp;nbsp;position)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;jump&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;execute&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;Memory&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;load(long&amp;nbsp;position,&amp;nbsp;byte[]&amp;nbsp;data)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;loading&amp;nbsp;...&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;HardDrive&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;byte[]&amp;nbsp;read(long&amp;nbsp;lba,&amp;nbsp;int&amp;nbsp;size)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;load&amp;nbsp;hard&amp;nbsp;drive&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;Facade&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;ComputerFacade&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;CPU&amp;nbsp;processor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Memory&amp;nbsp;ram;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;HardDrive&amp;nbsp;hd;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;int&amp;nbsp;BOOT_ADDRESS&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;int&amp;nbsp;SECTOR_SIZE&amp;nbsp;=&amp;nbsp;128;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;int&amp;nbsp;BOOT_SECTOR&amp;nbsp;=&amp;nbsp;800;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ComputerFacade()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.processor&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CPU();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.ram&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Memory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.hd&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HardDrive();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;start()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.freeze();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ram.load(BOOT_ADDRESS,&amp;nbsp;hd.read(BOOT_SECTOR,&amp;nbsp;SECTOR_SIZE));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.jump(BOOT_ADDRESS);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processor.execute();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;Client&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;You&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ComputerFacade&amp;nbsp;computer&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ComputerFacade();&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;computer.start();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Flyweight&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;useful&amp;nbsp;pattern&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;computer&amp;nbsp;programming,&amp;nbsp;flyweight&amp;nbsp;is&amp;nbsp;a&amp;nbsp;software&amp;nbsp;design&lt;br&gt;
pattern.&amp;nbsp;A&amp;nbsp;flyweight&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;minimizes&amp;nbsp;memory&amp;nbsp;use&lt;br&gt;
by&amp;nbsp;sharing&amp;nbsp;as&amp;nbsp;much&amp;nbsp;data&amp;nbsp;as&amp;nbsp;possible&amp;nbsp;with&amp;nbsp;other&amp;nbsp;similar&amp;nbsp;objects;&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;use&amp;nbsp;objects&amp;nbsp;in&amp;nbsp;large&amp;nbsp;numbers&amp;nbsp;when&amp;nbsp;a&amp;nbsp;simple&lt;br&gt;
repeated&amp;nbsp;representation&amp;nbsp;would&amp;nbsp;use&amp;nbsp;an&amp;nbsp;unacceptable&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;memory.&lt;br&gt;
Often&amp;nbsp;some&amp;nbsp;parts&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;state&amp;nbsp;can&amp;nbsp;be&amp;nbsp;shared,&lt;br&gt;
and&amp;nbsp;it&amp;nbsp;is&amp;nbsp;common&amp;nbsp;practice&amp;nbsp;to&amp;nbsp;hold&amp;nbsp;them&amp;nbsp;in&amp;nbsp;external&amp;nbsp;data&amp;nbsp;structures&lt;br&gt;
and&amp;nbsp;pass&amp;nbsp;them&amp;nbsp;to&amp;nbsp;the&amp;nbsp;flyweight&amp;nbsp;objects&amp;nbsp;temporarily&amp;nbsp;when&amp;nbsp;they&amp;nbsp;are&amp;nbsp;used.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
UML&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='460'&amp;nbsp;height='290'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/flyweight.gif'/&gt;&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;classic&amp;nbsp;example&amp;nbsp;usage&amp;nbsp;of&amp;nbsp;the&amp;nbsp;flyweight&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;the&amp;nbsp;data&lt;br&gt;
structures&amp;nbsp;for&amp;nbsp;graphical&amp;nbsp;representation&amp;nbsp;of&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;a&lt;br&gt;
word&amp;nbsp;processor.&amp;nbsp;It&amp;nbsp;might&amp;nbsp;be&amp;nbsp;desirable&amp;nbsp;to&amp;nbsp;have,&amp;nbsp;for&amp;nbsp;each&amp;nbsp;character&lt;br&gt;
in&amp;nbsp;a&amp;nbsp;document,&amp;nbsp;a&amp;nbsp;glyph&amp;nbsp;object&amp;nbsp;containing&amp;nbsp;its&amp;nbsp;font&amp;nbsp;outline,&amp;nbsp;font&amp;nbsp;metrics,&lt;br&gt;
and&amp;nbsp;other&amp;nbsp;formatting&amp;nbsp;data,&amp;nbsp;but&amp;nbsp;this&amp;nbsp;would&amp;nbsp;amount&amp;nbsp;to&lt;br&gt;
hundreds&amp;nbsp;or&amp;nbsp;thousands&amp;nbsp;of&amp;nbsp;bytes&amp;nbsp;for&amp;nbsp;each&amp;nbsp;character.&lt;br&gt;
Instead,&amp;nbsp;for&amp;nbsp;every&amp;nbsp;character&amp;nbsp;there&amp;nbsp;might&amp;nbsp;be&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;a&amp;nbsp;flyweight&lt;br&gt;
glyph&amp;nbsp;object&amp;nbsp;shared&amp;nbsp;by&amp;nbsp;every&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;character&amp;nbsp;in&amp;nbsp;the&lt;br&gt;
document;&amp;nbsp;only&amp;nbsp;the&amp;nbsp;position&amp;nbsp;of&amp;nbsp;each&amp;nbsp;character&amp;nbsp;(in&amp;nbsp;the&amp;nbsp;document&amp;nbsp;&lt;br&gt;
and/or&amp;nbsp;the&amp;nbsp;page)&amp;nbsp;would&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;internally.&lt;br&gt;
&lt;br&gt;
Another&amp;nbsp;example&amp;nbsp;is&amp;nbsp;string&amp;nbsp;interning.&lt;br&gt;
In&amp;nbsp;other&amp;nbsp;contexts&amp;nbsp;the&amp;nbsp;idea&amp;nbsp;of&amp;nbsp;sharing&amp;nbsp;identical&amp;nbsp;data&amp;nbsp;structures&amp;nbsp;is&amp;nbsp;called&amp;nbsp;hash&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;consing.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&lt;br&gt;
To&amp;nbsp;enable&amp;nbsp;safe&amp;nbsp;sharing,&amp;nbsp;between&amp;nbsp;clients&amp;nbsp;and&amp;nbsp;threads,&amp;nbsp;Flyweight&lt;br&gt;
objects&amp;nbsp;must&amp;nbsp;be&amp;nbsp;__&amp;nbsp;immutable&amp;nbsp;__.&amp;nbsp;Flyweight&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;by&amp;nbsp;definition&lt;br&gt;
value&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;identity&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;of&amp;nbsp;no&lt;br&gt;
consequence&amp;nbsp;therefore&amp;nbsp;two&amp;nbsp;Flyweight&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&lt;br&gt;
value&amp;nbsp;are&amp;nbsp;considered&amp;nbsp;equal.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(good&amp;nbsp;example):&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;Flyweight&amp;nbsp;object&amp;nbsp;interface&lt;br&gt;
interface&amp;nbsp;CoffeeOrder&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;serveCoffee(CoffeeOrderContext&amp;nbsp;context);&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//&amp;nbsp;ConcreteFlyweight&amp;nbsp;object&amp;nbsp;that&amp;nbsp;creates&amp;nbsp;ConcreteFlyweight&amp;nbsp;&lt;br&gt;
class&amp;nbsp;CoffeeFlavor&amp;nbsp;implements&amp;nbsp;CoffeeOrder&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;flavor;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CoffeeFlavor(String&amp;nbsp;newFlavor)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.flavor&amp;nbsp;=&amp;nbsp;newFlavor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFlavor()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.flavor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;serveCoffee(CoffeeOrderContext&amp;nbsp;context)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Serving&amp;nbsp;Coffee&amp;nbsp;flavor&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;flavor&amp;nbsp;+&amp;nbsp;&amp;quot;&amp;nbsp;to&amp;nbsp;table&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;number&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;context.getTable());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;CoffeeOrderContext&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;tableNumber;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CoffeeOrderContext(int&amp;nbsp;tableNumber)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.tableNumber&amp;nbsp;=&amp;nbsp;tableNumber;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getTable()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.tableNumber;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
//FlyweightFactory&amp;nbsp;object&lt;br&gt;
class&amp;nbsp;CoffeeFlavorFactory&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&lt;String,&amp;nbsp;CoffeeFlavor&gt;&amp;nbsp;flavors&amp;nbsp;=&amp;nbsp;new&amp;nbsp;HashMap&lt;String,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CoffeeFlavor&gt;();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CoffeeFlavor&amp;nbsp;getCoffeeFlavor(String&amp;nbsp;flavorName)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CoffeeFlavor&amp;nbsp;flavor&amp;nbsp;=&amp;nbsp;flavors.get(flavorName);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(flavor&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavor&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoffeeFlavor(flavorName);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavors.put(flavorName,&amp;nbsp;flavor);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;flavor;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getTotalCoffeeFlavorsMade()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;flavors.size();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
class&amp;nbsp;TestFlyweight&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&amp;nbsp;The&amp;nbsp;flavors&amp;nbsp;ordered.&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;CoffeeFlavor[]&amp;nbsp;flavors&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoffeeFlavor[100];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&amp;nbsp;The&amp;nbsp;tables&amp;nbsp;for&amp;nbsp;the&amp;nbsp;orders.&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;CoffeeOrderContext[]&amp;nbsp;tables&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoffeeOrderContext[100];&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;int&amp;nbsp;ordersMade&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;CoffeeFlavorFactory&amp;nbsp;flavorFactory;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;takeOrders(String&amp;nbsp;flavorIn,&amp;nbsp;int&amp;nbsp;table)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavors[ordersMade]&amp;nbsp;=&amp;nbsp;flavorFactory.getCoffeeFlavor(flavorIn);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tables[ordersMade++]&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoffeeOrderContext(table);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavorFactory&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoffeeFlavorFactory();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;2);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Frappe&amp;quot;,&amp;nbsp;1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Frappe&amp;quot;,&amp;nbsp;1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Espresso&amp;quot;,&amp;nbsp;1);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Frappe&amp;quot;,&amp;nbsp;897);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;97);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;97);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Frappe&amp;quot;,&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Espresso&amp;quot;,&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;3);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Espresso&amp;quot;,&amp;nbsp;96);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Frappe&amp;quot;,&amp;nbsp;552);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Cappuccino&amp;quot;,&amp;nbsp;121);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;takeOrders(&amp;quot;Espresso&amp;quot;,&amp;nbsp;121);&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;ordersMade;&amp;nbsp;++i)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavors[i].serveCoffee(tables[i]);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;&amp;nbsp;&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;total&amp;nbsp;CoffeeFlavor&amp;nbsp;objects&amp;nbsp;made:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flavorFactory.getTotalCoffeeFlavorsMade());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_1:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Proxy&amp;nbsp;pattern,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;proxy,&amp;nbsp;in&amp;nbsp;its&amp;nbsp;most&amp;nbsp;general&amp;nbsp;form,&amp;nbsp;is&amp;nbsp;a&amp;nbsp;class&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;functioning&amp;nbsp;as&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;something&amp;nbsp;else.&amp;nbsp;The&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;proxy&amp;nbsp;could&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;anything:&amp;nbsp;a&amp;nbsp;network&amp;nbsp;connection,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a&amp;nbsp;large&amp;nbsp;object&amp;nbsp;in&amp;nbsp;memory,&amp;nbsp;a&amp;nbsp;file,&amp;nbsp;or&amp;nbsp;some&amp;nbsp;other&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resource&amp;nbsp;that&amp;nbsp;is&amp;nbsp;expensive&amp;nbsp;or&amp;nbsp;impossible&amp;nbsp;to&amp;nbsp;duplicate.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A&amp;nbsp;well-known&amp;nbsp;example&amp;nbsp;of&amp;nbsp;the&amp;nbsp;proxy&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;reference&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;counting&amp;nbsp;pointer&amp;nbsp;object.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;situations&amp;nbsp;where&amp;nbsp;multiple&amp;nbsp;copies&amp;nbsp;of&amp;nbsp;a&amp;nbsp;complex&amp;nbsp;object&amp;nbsp;must&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;exist,&amp;nbsp;the&amp;nbsp;proxy&amp;nbsp;pattern&amp;nbsp;can&amp;nbsp;be&amp;nbsp;adapted&amp;nbsp;to&amp;nbsp;incorporate&amp;nbsp;the&amp;nbsp;flyweight&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pattern&amp;nbsp;in&amp;nbsp;order&amp;nbsp;to&amp;nbsp;reduce&amp;nbsp;the&amp;nbsp;application's&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;memory&amp;nbsp;footprint.&amp;nbsp;Typically,&amp;nbsp;one&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;complex&amp;nbsp;object&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&amp;nbsp;multiple&amp;nbsp;proxy&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;created,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;all&amp;nbsp;of&amp;nbsp;which&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;the&amp;nbsp;single&amp;nbsp;original&amp;nbsp;complex&amp;nbsp;object.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Any&amp;nbsp;operations&amp;nbsp;performed&amp;nbsp;on&amp;nbsp;the&amp;nbsp;proxies&amp;nbsp;are&amp;nbsp;forwarded&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to&amp;nbsp;the&amp;nbsp;original&amp;nbsp;object.&amp;nbsp;Once&amp;nbsp;all&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;the&amp;nbsp;proxy&amp;nbsp;are&amp;nbsp;out&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;scope,&amp;nbsp;the&amp;nbsp;complex&amp;nbsp;object's&amp;nbsp;memory&amp;nbsp;may&amp;nbsp;be&amp;nbsp;deallocated.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UML&amp;nbsp;diagram&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&lt;img&amp;nbsp;width='430'&amp;nbsp;height='260'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/439px-Proxy_pattern_diagram.svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;following&amp;nbsp;Java&amp;nbsp;example&amp;nbsp;illustrates&amp;nbsp;the&amp;nbsp;&amp;quot;virtual&amp;nbsp;proxy&amp;quot;&amp;nbsp;pattern.&lt;br&gt;
The&amp;nbsp;ProxyImage&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to&amp;nbsp;access&amp;nbsp;a&amp;nbsp;remote&amp;nbsp;method.&lt;br&gt;
The&amp;nbsp;example&amp;nbsp;creates&amp;nbsp;first&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;against&amp;nbsp;which&lt;br&gt;
&amp;nbsp;the&amp;nbsp;pattern&amp;nbsp;creates&amp;nbsp;the&amp;nbsp;classes.&lt;br&gt;
This&amp;nbsp;interface&amp;nbsp;contains&amp;nbsp;only&amp;nbsp;one&amp;nbsp;method&amp;nbsp;to&amp;nbsp;display&amp;nbsp;the&amp;nbsp;image,&lt;br&gt;
called&amp;nbsp;displayImage(),&amp;nbsp;that&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;coded&amp;nbsp;by&amp;nbsp;all&amp;nbsp;classes&amp;nbsp;implementing&amp;nbsp;it.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interface&amp;nbsp;Image&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;displayImage();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//on&amp;nbsp;System&amp;nbsp;A&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;RealImage&amp;nbsp;implements&amp;nbsp;Image&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Constructor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;FILENAME&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RealImage(final&amp;nbsp;String&amp;nbsp;FILENAME)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;FILENAME;&amp;nbsp;&amp;nbsp;//TO&amp;nbsp;DO&amp;nbsp;real&amp;nbsp;image&amp;nbsp;can&amp;nbsp;be&amp;nbsp;a&amp;nbsp;singleton&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;loadImageFromDisk();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Loads&amp;nbsp;the&amp;nbsp;image&amp;nbsp;from&amp;nbsp;the&amp;nbsp;disk&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;loadImageFromDisk()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Loading&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;filename);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Displays&amp;nbsp;the&amp;nbsp;image&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;displayImage()&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Displaying&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;filename);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//on&amp;nbsp;System&amp;nbsp;B&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;ProxyImage&amp;nbsp;implements&amp;nbsp;Image&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;RealImage&amp;nbsp;image&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Constructor&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;@param&amp;nbsp;FILENAME&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ProxyImage(final&amp;nbsp;String&amp;nbsp;FILENAME)&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filename&amp;nbsp;=&amp;nbsp;FILENAME;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Displays&amp;nbsp;the&amp;nbsp;image&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;displayImage()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(image&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RealImage(filename);&amp;nbsp;&amp;nbsp;//RealImage&amp;nbsp;should&amp;nbsp;be&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;singleton&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image.displayImage();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class&amp;nbsp;ProxyExample&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Test&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Image&amp;nbsp;IMAGE1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ProxyImage(&amp;quot;HiRes_10MB_Photo1&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final&amp;nbsp;Image&amp;nbsp;IMAGE2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ProxyImage(&amp;quot;HiRes_10MB_Photo2&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMAGE1.displayImage();&amp;nbsp;//&amp;nbsp;loading&amp;nbsp;necessary&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMAGE1.displayImage();&amp;nbsp;//&amp;nbsp;loading&amp;nbsp;unnecessary&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMAGE2.displayImage();&amp;nbsp;//&amp;nbsp;loading&amp;nbsp;necessary&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMAGE2.displayImage();&amp;nbsp;//&amp;nbsp;loading&amp;nbsp;unnecessary&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IMAGE1.displayImage();&amp;nbsp;//&amp;nbsp;loading&amp;nbsp;unnecessary&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;==!!!!!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;There&amp;nbsp;are&amp;nbsp;different&amp;nbsp;types&amp;nbsp;of&amp;nbsp;proxy&amp;nbsp;patterns.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Virtual&amp;nbsp;Proxy&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;them.&amp;nbsp;Others&amp;nbsp;(from&amp;nbsp;GOF)&amp;nbsp;are&amp;nbsp;Protection&amp;nbsp;Proxy,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Remote&amp;nbsp;Proxy,&amp;nbsp;Smart&amp;nbsp;Reference.&amp;nbsp;From&amp;nbsp;GOF:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;A&amp;nbsp;remote&amp;nbsp;proxy&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;local&amp;nbsp;representative&amp;nbsp;for&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;in&amp;nbsp;a&amp;nbsp;different&amp;nbsp;address&amp;nbsp;space.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;A&amp;nbsp;virtual&amp;nbsp;proxy&amp;nbsp;creates&amp;nbsp;expensive&amp;nbsp;objects&amp;nbsp;on&amp;nbsp;demand.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;A&amp;nbsp;protection&amp;nbsp;proxy&amp;nbsp;controls&amp;nbsp;access&amp;nbsp;to&amp;nbsp;the&amp;nbsp;original&amp;nbsp;object.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Protection&amp;nbsp;proxies&amp;nbsp;are&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;objects&amp;nbsp;should&amp;nbsp;have&amp;nbsp;different&amp;nbsp;access&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rights.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;A&amp;nbsp;smart&amp;nbsp;reference&amp;nbsp;is&amp;nbsp;a&amp;nbsp;replacement&amp;nbsp;for&amp;nbsp;a&amp;nbsp;bare&amp;nbsp;pointer&amp;nbsp;that&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;performs&amp;nbsp;additional&amp;nbsp;actions&amp;nbsp;when&amp;nbsp;an&amp;nbsp;object&amp;nbsp;is&amp;nbsp;accessed&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
</questions>
