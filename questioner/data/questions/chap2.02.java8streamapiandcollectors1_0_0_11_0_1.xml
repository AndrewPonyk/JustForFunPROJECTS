<?xml version="1.0" encoding="UTF-8"?>
<questions id="1_0_0_11_0_1" name="chap2.02.Java8StreamAPIandCollectors" nofquestions="8" nofsubcategories="0" filename="chap2.02.java8streamapiandcollectors1_0_0_11_0_1.xml">
  <question id="1_0_0_11_0_1:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;Stream&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8.&lt;br&gt;
Using&amp;nbsp;stream&amp;nbsp;display&amp;nbsp;all&amp;nbsp;values&amp;nbsp;from&amp;nbsp;List&amp;nbsp;of&amp;nbsp;String.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>What&amp;nbsp;are&amp;nbsp;streams?&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;Stream&amp;nbsp;is&amp;nbsp;a&amp;nbsp;free&amp;nbsp;flowing&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;elements.&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;hold&amp;nbsp;any&amp;nbsp;storage&amp;nbsp;as&amp;nbsp;that&lt;br&gt;
responsibility&amp;nbsp;lies&amp;nbsp;with&amp;nbsp;collections&amp;nbsp;such&amp;nbsp;as&amp;nbsp;arrays,&amp;nbsp;lists&amp;nbsp;and&amp;nbsp;sets.&amp;nbsp;Every&amp;nbsp;stream&amp;nbsp;starts&amp;nbsp;with&lt;br&gt;
a&amp;nbsp;source&amp;nbsp;of&amp;nbsp;data,&amp;nbsp;sets&amp;nbsp;up&amp;nbsp;a&amp;nbsp;pipeline,&amp;nbsp;processes&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;through&amp;nbsp;a&amp;nbsp;pipeline&lt;br&gt;
and&amp;nbsp;finishes&amp;nbsp;with&amp;nbsp;a&amp;nbsp;TERMINAL&amp;nbsp;operation.&amp;nbsp;They&amp;nbsp;allow&amp;nbsp;us&amp;nbsp;to&amp;nbsp;parallelize&amp;nbsp;the&amp;nbsp;load&amp;nbsp;that&amp;nbsp;comes&lt;br&gt;
with&amp;nbsp;heavy&amp;nbsp;operations&amp;nbsp;without&amp;nbsp;having&amp;nbsp;to&amp;nbsp;write&amp;nbsp;any&amp;nbsp;parallel&amp;nbsp;code.&lt;br&gt;
A&amp;nbsp;new&amp;nbsp;package&amp;nbsp;java.util.stream&amp;nbsp;was&amp;nbsp;introduced&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;to&amp;nbsp;deal&amp;nbsp;with&amp;nbsp;this&amp;nbsp;feature.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;Streams&amp;nbsp;can&amp;nbsp;be&amp;nbsp;obtained&amp;nbsp;in&amp;nbsp;a&amp;nbsp;number&amp;nbsp;of&amp;nbsp;ways.&amp;nbsp;Some&amp;nbsp;examples&amp;nbsp;include:&lt;br&gt;
-&amp;nbsp;From&amp;nbsp;a&amp;nbsp;Collection&amp;nbsp;via&amp;nbsp;the&amp;nbsp;stream()&amp;nbsp;and&amp;nbsp;parallelStream()&amp;nbsp;methods;&lt;br&gt;
-&amp;nbsp;From&amp;nbsp;an&amp;nbsp;array&amp;nbsp;via&amp;nbsp;Arrays.stream(Object[]);&lt;br&gt;
-&amp;nbsp;From&amp;nbsp;static&amp;nbsp;factory&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;the&amp;nbsp;stream&amp;nbsp;classes,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;Stream.of(Object[]),&amp;nbsp;IntStream.range(int,&amp;nbsp;int)&amp;nbsp;or&amp;nbsp;Stream.iterate(Object,&amp;nbsp;UnaryOperator);&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;lines&amp;nbsp;of&amp;nbsp;a&amp;nbsp;file&amp;nbsp;can&amp;nbsp;be&amp;nbsp;obtained&amp;nbsp;from&amp;nbsp;BufferedReader.lines();&lt;br&gt;
-&amp;nbsp;Streams&amp;nbsp;of&amp;nbsp;file&amp;nbsp;paths&amp;nbsp;can&amp;nbsp;be&amp;nbsp;obtained&amp;nbsp;from&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;Files;&lt;br&gt;
-&amp;nbsp;Streams&amp;nbsp;of&amp;nbsp;random&amp;nbsp;numbers&amp;nbsp;can&amp;nbsp;be&amp;nbsp;obtained&amp;nbsp;from&amp;nbsp;Random.ints();&lt;br&gt;
-&amp;nbsp;Numerous&amp;nbsp;other&amp;nbsp;stream-bearing&amp;nbsp;methods&amp;nbsp;in&amp;nbsp;the&amp;nbsp;JDK,&amp;nbsp;including&amp;nbsp;BitSet.stream(),&amp;nbsp;Pattern.splitAsStream(java.lang.CharSequence),&amp;nbsp;and&amp;nbsp;JarFile.stream().&lt;br&gt;
&lt;br&gt;
-------------------------------&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Package&amp;nbsp;java.util.stream&lt;br&gt;
&lt;br&gt;
Classes&amp;nbsp;to&amp;nbsp;support&amp;nbsp;functional-style&amp;nbsp;operations&amp;nbsp;on&amp;nbsp;streams&amp;nbsp;of&amp;nbsp;elements,&amp;nbsp;such&amp;nbsp;as&lt;br&gt;
MAP-REDUCE&amp;nbsp;transformations&amp;nbsp;on&amp;nbsp;collections.&lt;br&gt;
&lt;br&gt;
https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&lt;br&gt;
===============================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Display&amp;nbsp;all&amp;nbsp;values&amp;nbsp;from&amp;nbsp;List&amp;nbsp;using&amp;nbsp;Stream&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.HashMap;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FirstStreamExample&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;[]arg){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("First&amp;nbsp;STREAM&amp;nbsp;example");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;cities&amp;nbsp;=&amp;nbsp;Arrays.asList("Lviv",&amp;nbsp;"Poltava",&amp;nbsp;"Kyiv",&amp;nbsp;"Odesa");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.replaceAll(e&amp;nbsp;-&gt;&amp;nbsp;e.replaceAll("v",&amp;nbsp;"V"));//&amp;nbsp;great&amp;nbsp;thing&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cities.forEach(System.out::println);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&lt;br&gt;
First&amp;nbsp;STREAM&amp;nbsp;example&lt;br&gt;
LViV&lt;br&gt;
PoltaVa&lt;br&gt;
KyiV&lt;br&gt;
Odesa&lt;br&gt;
===============================================</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Streams&amp;nbsp;:&amp;nbsp;map&amp;nbsp;vs&amp;nbsp;flatMap,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>http://stackoverflow.com/questions/26684562/java-8-map-and-flatmap-methods&lt;br&gt;
=================================&lt;br&gt;
!!!!&lt;br&gt;
The&amp;nbsp;function&amp;nbsp;you&amp;nbsp;pass&amp;nbsp;to&amp;nbsp;stream.map&amp;nbsp;has&amp;nbsp;to&amp;nbsp;return&amp;nbsp;ONE&amp;nbsp;object.&amp;nbsp;That&amp;nbsp;means&amp;nbsp;each&amp;nbsp;object&amp;nbsp;in&lt;br&gt;
the&amp;nbsp;input&amp;nbsp;stream&amp;nbsp;results&amp;nbsp;in&amp;nbsp;exactly&amp;nbsp;one&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;output&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;function&amp;nbsp;you&amp;nbsp;pass&amp;nbsp;to&amp;nbsp;stream.flatMap&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;STREAM&amp;nbsp;for&amp;nbsp;each&amp;nbsp;object.&amp;nbsp;That&amp;nbsp;means&amp;nbsp;the&amp;nbsp;function&lt;br&gt;
can&amp;nbsp;return&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;for&amp;nbsp;each&amp;nbsp;input&amp;nbsp;object&amp;nbsp;(including&amp;nbsp;none).&amp;nbsp;The&amp;nbsp;resulting&lt;br&gt;
streams&amp;nbsp;are&amp;nbsp;then&amp;nbsp;concatenated&amp;nbsp;to&amp;nbsp;one&amp;nbsp;output&amp;nbsp;stream.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
==============================================&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;MapAndFlatMap&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Map&amp;nbsp;and&amp;nbsp;FlatMap");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;numb3rs&amp;nbsp;=&amp;nbsp;Arrays.asList(1,&amp;nbsp;2,&amp;nbsp;3,&amp;nbsp;4,&amp;nbsp;5);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;numb3rs2&amp;nbsp;=&amp;nbsp;Arrays.asList(22,33,44,55,66);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;List&lt;Integer&gt;&gt;&amp;nbsp;twoLevelList=&amp;nbsp;Arrays.asList(numb3rs,&amp;nbsp;numb3rs2);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;twoLevelList.stream().flatMap(l-&gt;l.stream()).map(e-&gt;e).forEach(System.out::println);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;To&amp;nbsp;do&amp;nbsp;this&amp;nbsp;pre-Java&amp;nbsp;8&amp;nbsp;you&amp;nbsp;just&amp;nbsp;need&amp;nbsp;a&amp;nbsp;loops:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;List&lt;Integer&gt;&gt;&amp;nbsp;integerLists&amp;nbsp;=&amp;nbsp;Arrays.asList(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.asList(1,&amp;nbsp;2),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.asList(3,&amp;nbsp;4),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Arrays.asList(5)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Integer&gt;&amp;nbsp;flattened&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(List&lt;Integer&gt;&amp;nbsp;integerList&amp;nbsp;:&amp;nbsp;integerLists)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flattened.addAll(integerList);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(Integer&amp;nbsp;i&amp;nbsp;:&amp;nbsp;flattened)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util.Optional&amp;nbsp;class&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;8,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&lt;br&gt;
&lt;br&gt;
A&amp;nbsp;container&amp;nbsp;object&amp;nbsp;which&amp;nbsp;may&amp;nbsp;or&amp;nbsp;may&amp;nbsp;not&amp;nbsp;contain&amp;nbsp;a&amp;nbsp;non-null&amp;nbsp;value.&amp;nbsp;If&amp;nbsp;a&amp;nbsp;value&amp;nbsp;is&amp;nbsp;present,&lt;br&gt;
isPresent()&amp;nbsp;will&amp;nbsp;return&amp;nbsp;true&amp;nbsp;and&amp;nbsp;get()&amp;nbsp;will&amp;nbsp;return&amp;nbsp;the&amp;nbsp;value.&lt;br&gt;
&lt;br&gt;
Additional&amp;nbsp;methods&amp;nbsp;that&amp;nbsp;depend&amp;nbsp;on&amp;nbsp;the&amp;nbsp;presence&amp;nbsp;or&amp;nbsp;absence&amp;nbsp;of&amp;nbsp;a&amp;nbsp;contained&amp;nbsp;value&amp;nbsp;are&amp;nbsp;provided,&lt;br&gt;
such&amp;nbsp;as&amp;nbsp;orElse()&amp;nbsp;(return&amp;nbsp;a&amp;nbsp;default&amp;nbsp;value&amp;nbsp;if&amp;nbsp;value&amp;nbsp;not&amp;nbsp;present)&amp;nbsp;and&amp;nbsp;ifPresent()&amp;nbsp;&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;value-based&amp;nbsp;class;&amp;nbsp;use&amp;nbsp;of&amp;nbsp;identity-sensitive&amp;nbsp;operations&amp;nbsp;(including&amp;nbsp;reference&amp;nbsp;equality&amp;nbsp;(==),&lt;br&gt;
identity&amp;nbsp;hash&amp;nbsp;code,&amp;nbsp;or&amp;nbsp;synchronization)&amp;nbsp;on&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;Optional&amp;nbsp;may&amp;nbsp;have&amp;nbsp;unpredictable&lt;br&gt;
results&amp;nbsp;and&amp;nbsp;should&amp;nbsp;be&amp;nbsp;avoided.&lt;br&gt;
&lt;br&gt;
==============================================&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;:&amp;nbsp;package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Optional;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ReductionsAndOPTIONALS&amp;nbsp;{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Optional&lt;Integer&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;Optional.of(11);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Optional&lt;Integer&gt;&amp;nbsp;empty&amp;nbsp;=&amp;nbsp;Optional.empty();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Get&amp;nbsp;Integer&amp;nbsp;from&amp;nbsp;Optional&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;i.get());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//System.out.println(empty.get());&amp;nbsp;//&amp;nbsp;NoSuchElementException&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i.ifPresent(System.out::println);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(i.orElse(0));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i.filter(e-&gt;e&gt;4).ifPresent(e&amp;nbsp;-&gt;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("I&amp;nbsp;is&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;4");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;===========================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Long&gt;&amp;nbsp;longList&amp;nbsp;=&amp;nbsp;Arrays.asList(1L,100L,33L);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//get&amp;nbsp;'max'&amp;nbsp;from&amp;nbsp;longList,&amp;nbsp;we&amp;nbsp;define&amp;nbsp;own&amp;nbsp;comparator&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;longList.stream().max((o1,&amp;nbsp;o2)&amp;nbsp;-&gt;&amp;nbsp;{return&amp;nbsp;(int)(o1%7&amp;nbsp;-&amp;nbsp;o2%7);&amp;nbsp;}).ifPresent(System.out::println);&amp;nbsp;//&amp;nbsp;result&amp;nbsp;is&amp;nbsp;33&amp;nbsp;!!&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;because&amp;nbsp;1L%7=1,&amp;nbsp;100L%7=2,&amp;nbsp;33L%7&amp;nbsp;=&amp;nbsp;5&amp;nbsp;,&amp;nbsp;so&amp;nbsp;max=5&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;============================================&amp;nbsp;Reductiooooooon&amp;nbsp;example&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Get&amp;nbsp;Integer&amp;nbsp;from&amp;nbsp;Optional&amp;nbsp;=&amp;nbsp;11&lt;br&gt;
11&lt;br&gt;
11&lt;br&gt;
I&amp;nbsp;is&amp;nbsp;greater&amp;nbsp;than&amp;nbsp;4&lt;br&gt;
33</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Streams&amp;nbsp;:&amp;nbsp;terminal&amp;nbsp;and&amp;nbsp;Intermediary&amp;nbsp;operations,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pipelines&amp;nbsp;and&amp;nbsp;Streams&lt;br&gt;
/*&lt;br&gt;
A&amp;nbsp;pipeline&amp;nbsp;is&amp;nbsp;a&amp;nbsp;sequence&amp;nbsp;of&amp;nbsp;aggregate&amp;nbsp;operations.&amp;nbsp;The&amp;nbsp;following&amp;nbsp;example&amp;nbsp;prints&amp;nbsp;the&lt;br&gt;
male&amp;nbsp;members&amp;nbsp;contained&amp;nbsp;in&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;roster&amp;nbsp;with&amp;nbsp;a&amp;nbsp;pipeline&amp;nbsp;that&amp;nbsp;consists&amp;nbsp;of&lt;br&gt;
the&amp;nbsp;aggregate&amp;nbsp;operations&amp;nbsp;filter&amp;nbsp;and&amp;nbsp;forEach:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;roster&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.stream()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.filter(e&amp;nbsp;-&gt;&amp;nbsp;e.getGender()&amp;nbsp;==&amp;nbsp;Person.Sex.MALE)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.forEach(e&amp;nbsp;-&gt;&amp;nbsp;System.out.println(e.getName()));&lt;br&gt;
*/&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;&amp;nbsp;A&amp;nbsp;pipeline&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;following&amp;nbsp;components:&lt;br&gt;
//&amp;nbsp;1)A&amp;nbsp;source:&amp;nbsp;This&amp;nbsp;could&amp;nbsp;be&amp;nbsp;a&amp;nbsp;collection,&amp;nbsp;an&amp;nbsp;array,&amp;nbsp;a&amp;nbsp;generator&amp;nbsp;function,&amp;nbsp;or&lt;br&gt;
//&amp;nbsp;an&amp;nbsp;I/O&amp;nbsp;channel.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;source&amp;nbsp;is&amp;nbsp;the&amp;nbsp;collection&amp;nbsp;roster.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//2)Zero&amp;nbsp;or&amp;nbsp;more&amp;nbsp;intermediate&amp;nbsp;operations.&amp;nbsp;An&amp;nbsp;intermediate&amp;nbsp;operation,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;filter,&amp;nbsp;produces&amp;nbsp;a&amp;nbsp;new&amp;nbsp;stream&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//3)A&amp;nbsp;terminal&amp;nbsp;operation.&amp;nbsp;A&amp;nbsp;terminal&amp;nbsp;operation,&amp;nbsp;such&amp;nbsp;as&amp;nbsp;forEach,&amp;nbsp;produces&amp;nbsp;a&amp;nbsp;non-stream&amp;nbsp;result,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;such&amp;nbsp;as&amp;nbsp;a&amp;nbsp;primitive&amp;nbsp;value&amp;nbsp;(like&amp;nbsp;a&amp;nbsp;double&amp;nbsp;value),&amp;nbsp;a&amp;nbsp;collection,&amp;nbsp;or&amp;nbsp;in&amp;nbsp;the&amp;nbsp;case&amp;nbsp;of&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;forEach,&amp;nbsp;no&amp;nbsp;value&amp;nbsp;at&amp;nbsp;all.&amp;nbsp;In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;parameter&amp;nbsp;of&amp;nbsp;the&amp;nbsp;forEach&amp;nbsp;operation&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;lambda&amp;nbsp;expression&amp;nbsp;e&amp;nbsp;-&gt;&amp;nbsp;System.out.println(e.getName()),&amp;nbsp;which&amp;nbsp;invokes&amp;nbsp;the&amp;nbsp;method&amp;nbsp;getName&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;on&amp;nbsp;the&amp;nbsp;object&amp;nbsp;e.&amp;nbsp;(The&amp;nbsp;Java&amp;nbsp;runtime&amp;nbsp;and&amp;nbsp;compiler&amp;nbsp;infer&amp;nbsp;that&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;e&amp;nbsp;is&amp;nbsp;Person.)&lt;br&gt;
==========================================&lt;br&gt;
Example&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.stream.Stream;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;https://docs.oracle.com/javase/tutorial/collections/streams/&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;IntermediaryAndTerminalOperations&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Intermediary&amp;nbsp;And&amp;nbsp;Terminal&amp;nbsp;Operations");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;numbers&amp;nbsp;=&amp;nbsp;Arrays.asList("one",&amp;nbsp;"two",&amp;nbsp;"three",&amp;nbsp;"four",&amp;nbsp;"five");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("count&amp;nbsp;=&amp;nbsp;"&amp;nbsp;+&amp;nbsp;numbers.stream().peek(System.out::println).count());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT:&amp;nbsp;&lt;br&gt;
Intermediary&amp;nbsp;And&amp;nbsp;Terminal&amp;nbsp;Operations&lt;br&gt;
one&lt;br&gt;
two&lt;br&gt;
three&lt;br&gt;
four&lt;br&gt;
five&lt;br&gt;
k&amp;nbsp;=&amp;nbsp;5</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;We&amp;nbsp;have&amp;nbsp;code&amp;nbsp;&lt;br&gt;
List&lt;String&gt;&amp;nbsp;numbers&amp;nbsp;=&amp;nbsp;Arrays.asList(&amp;quot;one&amp;quot;,&amp;nbsp;&amp;quot;two&amp;quot;,&amp;nbsp;&amp;quot;three&amp;quot;,&amp;nbsp;&amp;quot;four&amp;quot;,&amp;nbsp;&amp;quot;five&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;k&amp;nbsp;=&amp;nbsp;numbers.stream().peek(System.out::println).count();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;k&amp;nbsp;=&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;k);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numbers.stream().peek(System.out::println);&lt;br&gt;
&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;output&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
Intermediary&amp;nbsp;And&amp;nbsp;Terminal&amp;nbsp;Operations&lt;br&gt;
one&lt;br&gt;
two&lt;br&gt;
three&lt;br&gt;
four&lt;br&gt;
five&lt;br&gt;
k&amp;nbsp;=&amp;nbsp;5&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;List&amp;nbsp;is&amp;nbsp;printed&amp;nbsp;only&amp;nbsp;once,&amp;nbsp;because&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;executed&amp;nbsp;only&amp;nbsp;after&amp;nbsp;TERMINAL&amp;nbsp;operation.&lt;br&gt;
Only&amp;nbsp;terminal&amp;nbsp;operatrion&amp;nbsp;is&amp;nbsp;count(),&amp;nbsp;so&amp;nbsp;this&amp;nbsp;line&amp;nbsp;prints&amp;nbsp;list&amp;nbsp;&amp;nbsp;&amp;nbsp;long&amp;nbsp;k&amp;nbsp;=&amp;nbsp;numbers.stream().peek(System.out::println).count();&lt;br&gt;
and&amp;nbsp;this&amp;nbsp;line&amp;nbsp;does&amp;nbsp;nothing&amp;nbsp;numbers.stream().peek(System.out::println);</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;Stream&amp;nbsp;Collectors,&amp;nbsp;describe.&lt;br&gt;
How&amp;nbsp;to&amp;nbsp;create&amp;nbsp;Map&amp;nbsp;from&amp;nbsp;List&amp;nbsp;using&amp;nbsp;'group&amp;nbsp;by'&amp;nbsp;?&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;:&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;com.my.java8.Person;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Map;&lt;br&gt;
import&amp;nbsp;java.util.Set;&lt;br&gt;
&lt;br&gt;
//&amp;nbsp;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Collectors&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;listToCollect&amp;nbsp;=&amp;nbsp;Arrays.asList("Abc",&amp;nbsp;"def",&amp;nbsp;"ghi",&amp;nbsp;"jkl");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;joined&amp;nbsp;=&amp;nbsp;listToCollect.stream().map(e-&gt;e).collect(java.util.stream.Collectors.joining(","));&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(joined);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;Anna&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Person&amp;nbsp;(24,&amp;nbsp;"Anna");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;John&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Person(21,&amp;nbsp;"John");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Person&amp;nbsp;Roger&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Person(24,&amp;nbsp;"Roger");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;Person&gt;&amp;nbsp;people&amp;nbsp;=&amp;nbsp;Arrays.asList(Anna,&amp;nbsp;John,&amp;nbsp;Roger);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//===&amp;nbsp;Simple&amp;nbsp;collect&amp;nbsp;ages&amp;nbsp;to&amp;nbsp;set&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Set&lt;Integer&gt;&amp;nbsp;collectSet&amp;nbsp;=&amp;nbsp;people.stream().collect(java.util.stream.Collectors.mapping(e&amp;nbsp;-&gt;&amp;nbsp;e.getAge(),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util.stream.Collectors.toSet()));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(collectSet);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;===&amp;nbsp;Interesgin&amp;nbsp;collecting&amp;nbsp;Group&amp;nbsp;By&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&lt;Integer,&amp;nbsp;List&lt;Person&gt;&gt;&amp;nbsp;collectGroupBy&amp;nbsp;=&amp;nbsp;people.stream().collect(java.util.stream.Collectors.groupingBy(Person::getAge));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(collectGroupBy);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Abc,def,ghi,jkl&lt;br&gt;
[21,&amp;nbsp;24]&lt;br&gt;
{21=[Person:&amp;nbsp;John&amp;nbsp;21],&amp;nbsp;24=[Person:&amp;nbsp;Anna&amp;nbsp;24,&amp;nbsp;Person:&amp;nbsp;Roger&amp;nbsp;24]}&lt;br&gt;
&lt;br&gt;
===============================================&lt;br&gt;
Class&amp;nbsp;Person&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Person&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Integer&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;name;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Person(Integer&amp;nbsp;age,&amp;nbsp;String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Integer&amp;nbsp;getAge()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setAge(Integer&amp;nbsp;age)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setName(String&amp;nbsp;name)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.name&amp;nbsp;=&amp;nbsp;name;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;toString()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;"Person:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;this.name&amp;nbsp;+&amp;nbsp;"&amp;nbsp;"&amp;nbsp;+&amp;nbsp;this.getAge();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Print&amp;nbsp;every&amp;nbsp;3th&amp;nbsp;element&amp;nbsp;of&amp;nbsp;list&amp;nbsp;using&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;streams.&lt;br&gt;
Print&amp;nbsp;every&amp;nbsp;first&amp;nbsp;4&amp;nbsp;&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;list&amp;nbsp;using&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;streams.&amp;nbsp;(Tip:&amp;nbsp;rang*)&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Example&amp;nbsp;:&amp;nbsp;&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.stream.*;&lt;br&gt;
import&amp;nbsp;java.util.stream.Collectors;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;NTHElementFromCOLLECTIONEXAMPLE&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Get&amp;nbsp;N-th&amp;nbsp;element&amp;nbsp;from&amp;nbsp;collection");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;countries&amp;nbsp;=&amp;nbsp;Arrays.asList("Ukraine",&amp;nbsp;"Georgia",&amp;nbsp;"Sweden",&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"Slovakia",&amp;nbsp;"Chech",&amp;nbsp;"Spain");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;nThCountries&amp;nbsp;=&amp;nbsp;IntStream.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;range(0,&amp;nbsp;countries.size()).&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;filter(n&amp;nbsp;-&gt;&amp;nbsp;n&amp;nbsp;%&amp;nbsp;3&amp;nbsp;==&amp;nbsp;0).&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mapToObj(countries::get).collect(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collectors.toList()&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nThCountries.forEach(System.out::println);&amp;nbsp;//&amp;nbsp;every&amp;nbsp;3th&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IntStream.range(0,&amp;nbsp;4).forEach(e-&gt;{System.out.println(countries.get(e));});&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
Get&amp;nbsp;N-th&amp;nbsp;element&amp;nbsp;from&amp;nbsp;collection&lt;br&gt;
Ukraine&lt;br&gt;
Slovakia&lt;br&gt;
&lt;br&gt;
Ukraine&lt;br&gt;
Georgia&lt;br&gt;
Sweden&lt;br&gt;
Slovakia</questionanswer>
  </question>
  <question id="1_0_0_11_0_1:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Java&amp;nbsp;8&amp;nbsp;parallel&amp;nbsp;streams,&amp;nbsp;describe.&lt;br&gt;
Show&amp;nbsp;we&amp;nbsp;use&amp;nbsp;parallel&amp;nbsp;streams.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
//&amp;nbsp;http://www.slideshare.net/dgomezg/parallel-streams-en-java-8&amp;nbsp;presentation&lt;br&gt;
//&amp;nbsp;http://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible&lt;br&gt;
//&amp;nbsp;https://dzone.com/articles/think-twice-using-java-8&lt;br&gt;
================================================&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Should&amp;nbsp;I&amp;nbsp;always&amp;nbsp;use&amp;nbsp;a&amp;nbsp;parallel&amp;nbsp;stream&amp;nbsp;when&amp;nbsp;possible?&lt;br&gt;
A&amp;nbsp;parallel&amp;nbsp;stream&amp;nbsp;has&amp;nbsp;a&amp;nbsp;much&amp;nbsp;higher&amp;nbsp;overhead&amp;nbsp;compared&amp;nbsp;to&amp;nbsp;a&amp;nbsp;sequential&amp;nbsp;one.&lt;br&gt;
Coordinating&amp;nbsp;the&amp;nbsp;threads&amp;nbsp;takes&amp;nbsp;a&amp;nbsp;significant&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;time.&amp;nbsp;I&amp;nbsp;would&amp;nbsp;use&amp;nbsp;sequential&lt;br&gt;
streams&amp;nbsp;by&amp;nbsp;default&amp;nbsp;and&amp;nbsp;only&amp;nbsp;consider&amp;nbsp;parallel&amp;nbsp;ones&amp;nbsp;if&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;I&amp;nbsp;have&amp;nbsp;a&amp;nbsp;massive&amp;nbsp;amount&amp;nbsp;of&amp;nbsp;items&amp;nbsp;to&amp;nbsp;process&amp;nbsp;(or&amp;nbsp;the&amp;nbsp;processing&amp;nbsp;of&amp;nbsp;each&amp;nbsp;item&amp;nbsp;takes&amp;nbsp;time&amp;nbsp;and&amp;nbsp;is&amp;nbsp;parallelizable)&lt;br&gt;
-&amp;nbsp;I&amp;nbsp;have&amp;nbsp;a&amp;nbsp;performance&amp;nbsp;problem&amp;nbsp;in&amp;nbsp;the&amp;nbsp;first&amp;nbsp;place&lt;br&gt;
-&amp;nbsp;I&amp;nbsp;don't&amp;nbsp;already&amp;nbsp;run&amp;nbsp;the&amp;nbsp;process&amp;nbsp;in&amp;nbsp;a&amp;nbsp;multi-thread&amp;nbsp;environment&amp;nbsp;(for&amp;nbsp;example:&amp;nbsp;in&amp;nbsp;a&amp;nbsp;web&amp;nbsp;container,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;I&amp;nbsp;already&amp;nbsp;have&amp;nbsp;many&amp;nbsp;requests&amp;nbsp;to&amp;nbsp;process&amp;nbsp;in&amp;nbsp;parallel,&amp;nbsp;adding&amp;nbsp;an&amp;nbsp;additional&amp;nbsp;layer&amp;nbsp;of&amp;nbsp;parallelism&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inside&amp;nbsp;each&amp;nbsp;request&amp;nbsp;could&amp;nbsp;have&amp;nbsp;more&amp;nbsp;negative&amp;nbsp;than&amp;nbsp;positive&amp;nbsp;effects)&lt;br&gt;
-&amp;nbsp;In&amp;nbsp;your&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;performance&amp;nbsp;will&amp;nbsp;anyway&amp;nbsp;be&amp;nbsp;driven&amp;nbsp;by&amp;nbsp;the&amp;nbsp;synchronized&amp;nbsp;access&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to&amp;nbsp;System.out.println(),&amp;nbsp;and&amp;nbsp;making&amp;nbsp;this&amp;nbsp;process&amp;nbsp;parallel&amp;nbsp;will&amp;nbsp;have&amp;nbsp;no&amp;nbsp;effect,&amp;nbsp;or&amp;nbsp;even&amp;nbsp;a&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;negative&amp;nbsp;one.&amp;nbsp;Moreover,&amp;nbsp;remember&amp;nbsp;that&amp;nbsp;parallel&amp;nbsp;streams&amp;nbsp;don't&amp;nbsp;magically&amp;nbsp;solve&amp;nbsp;all&amp;nbsp;the&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronization&amp;nbsp;problems.&amp;nbsp;If&amp;nbsp;a&amp;nbsp;shared&amp;nbsp;resource&amp;nbsp;is&amp;nbsp;used&amp;nbsp;by&amp;nbsp;the&amp;nbsp;predicates&amp;nbsp;and&amp;nbsp;functions&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;used&amp;nbsp;in&amp;nbsp;the&amp;nbsp;process,&amp;nbsp;you'll&amp;nbsp;have&amp;nbsp;to&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;everything&amp;nbsp;is&amp;nbsp;thread-safe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;particular,&amp;nbsp;side&amp;nbsp;effects&amp;nbsp;are&amp;nbsp;tings&amp;nbsp;you&amp;nbsp;really&amp;nbsp;have&amp;nbsp;to&amp;nbsp;worry&amp;nbsp;about&amp;nbsp;if&amp;nbsp;you&amp;nbsp;go&amp;nbsp;parallel.&lt;br&gt;
&lt;br&gt;
In&amp;nbsp;any&amp;nbsp;case,&amp;nbsp;measure,&amp;nbsp;don't&amp;nbsp;guess!&amp;nbsp;Only&amp;nbsp;a&amp;nbsp;measurement&amp;nbsp;will&amp;nbsp;tell&amp;nbsp;you&amp;nbsp;if&amp;nbsp;the&amp;nbsp;parallelism&amp;nbsp;is&amp;nbsp;worth&amp;nbsp;it&amp;nbsp;or&amp;nbsp;not.*/&lt;br&gt;
&lt;br&gt;
=========&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;And&amp;nbsp;SOME&amp;nbsp;disadvantages&amp;nbsp;of&amp;nbsp;parallel&amp;nbsp;streams&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;a&amp;nbsp;big&amp;nbsp;error.&amp;nbsp;Do&amp;nbsp;you&amp;nbsp;see&amp;nbsp;it?&amp;nbsp;The&amp;nbsp;problem&amp;nbsp;is&amp;nbsp;that&amp;nbsp;all&amp;nbsp;parallel&amp;nbsp;streams&amp;nbsp;use&amp;nbsp;common&lt;br&gt;
FORK-JOIN&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;and&amp;nbsp;if&amp;nbsp;you&amp;nbsp;submit&amp;nbsp;a&amp;nbsp;long-running&amp;nbsp;task,&amp;nbsp;you&amp;nbsp;effectively&amp;nbsp;block&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;in&amp;nbsp;the&amp;nbsp;pool.&lt;br&gt;
Consequently&amp;nbsp;you&amp;nbsp;block&amp;nbsp;all&amp;nbsp;other&amp;nbsp;tasks&amp;nbsp;that&amp;nbsp;are&amp;nbsp;using&amp;nbsp;parallel&amp;nbsp;streams.&lt;br&gt;
Imagine&amp;nbsp;a&amp;nbsp;servlet&amp;nbsp;environment,&amp;nbsp;when&amp;nbsp;one&amp;nbsp;request&amp;nbsp;calls&amp;nbsp;getStockInfo()&amp;nbsp;and&amp;nbsp;another&amp;nbsp;one&amp;nbsp;countPrimes().&lt;br&gt;
One&amp;nbsp;will&amp;nbsp;block&amp;nbsp;the&amp;nbsp;other&amp;nbsp;one&amp;nbsp;even&amp;nbsp;though&amp;nbsp;each&amp;nbsp;of&amp;nbsp;them&amp;nbsp;requires&amp;nbsp;different&amp;nbsp;resources.&lt;br&gt;
What's&amp;nbsp;worse,&amp;nbsp;you&amp;nbsp;can&amp;nbsp;not&amp;nbsp;specify&amp;nbsp;thread&amp;nbsp;pool&amp;nbsp;for&amp;nbsp;parallel&amp;nbsp;streams,&amp;nbsp;the&lt;br&gt;
whole&amp;nbsp;class&amp;nbsp;loader&amp;nbsp;has&amp;nbsp;to&amp;nbsp;use&amp;nbsp;the&amp;nbsp;same&amp;nbsp;one.&lt;br&gt;
=============================================&lt;br&gt;
Example1&amp;nbsp;Prime&amp;nbsp;numbers&amp;nbsp;&lt;br&gt;
&lt;br&gt;
//P.S&amp;nbsp;Better&amp;nbsp;result&amp;nbsp;from&amp;nbsp;parallelStream&amp;nbsp;at&amp;nbsp;big&amp;nbsp;numbers&amp;nbsp;of&amp;nbsp;N&amp;nbsp;,&amp;nbsp;for&amp;nbsp;example&amp;nbsp;10_000_000&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.time.Duration;&lt;br&gt;
import&amp;nbsp;java.time.Instant;&lt;br&gt;
import&amp;nbsp;java.util.stream.IntStream;&lt;br&gt;
import&amp;nbsp;java.util.stream.LongStream;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FFFFFindPrimesUsingParallel&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Find&amp;nbsp;prime&amp;nbsp;numbers&amp;nbsp;in&amp;nbsp;range&amp;nbsp;from&amp;nbsp;0&amp;nbsp;to&amp;nbsp;N");&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;begin&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(FFFFFindPrimesUsingParallel.countPrimes(10_000_000));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Instant&amp;nbsp;end&amp;nbsp;=&amp;nbsp;Instant.now();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Operation&amp;nbsp;takes&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Duration.between(begin,&amp;nbsp;end).toMillis());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;long&amp;nbsp;countPrimes(int&amp;nbsp;max)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;40&amp;nbsp;seconds,&amp;nbsp;when&amp;nbsp;(0&amp;nbsp;10_000_000)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//return&amp;nbsp;LongStream.range(1,&amp;nbsp;max).filter(FFFFFindPrimesUsingParallel::isPrime).count();&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;24&amp;nbsp;seconds,&amp;nbsp;when&amp;nbsp;(0&amp;nbsp;10_000_000)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;LongStream.range(1,&amp;nbsp;max).parallel().filter(FFFFFindPrimesUsingParallel::isPrime).count();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;boolean&amp;nbsp;isPrime(long&amp;nbsp;n)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;n&amp;nbsp;&gt;&amp;nbsp;1&amp;nbsp;&amp;&amp;&amp;nbsp;LongStream.rangeClosed(2,&amp;nbsp;(long)&amp;nbsp;Math.sqrt(n)).noneMatch(divisor&amp;nbsp;-&gt;&amp;nbsp;n&amp;nbsp;%&amp;nbsp;divisor&amp;nbsp;==&amp;nbsp;0);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
=======================================&lt;br&gt;
&amp;nbsp;Example&amp;nbsp;2&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;part2StreamsAndCollectors;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
import&amp;nbsp;java.util.ArrayList;&lt;br&gt;
import&amp;nbsp;java.util.Arrays;&lt;br&gt;
import&amp;nbsp;java.util.List;&lt;br&gt;
import&amp;nbsp;java.util.Random;&lt;br&gt;
import&amp;nbsp;java.util.stream.IntStream;&lt;br&gt;
&lt;br&gt;
//http://www.slideshare.net/dgomezg/parallel-streams-en-java-8&amp;nbsp;presentation&lt;br&gt;
//&amp;nbsp;http://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;ParallelStream&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;throws&amp;nbsp;IllegalAccessException,&amp;nbsp;InstantiationException&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println("Example&amp;nbsp;of&amp;nbsp;parallel&amp;nbsp;stream");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;values&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i&amp;nbsp;=0;i&lt;100000;i++){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values.add(Random.class.newInstance().nextInt(100)+"");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&lt;String&gt;&amp;nbsp;result&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&lt;&gt;();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Long&amp;nbsp;start&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values.stream().map(e-&gt;e.substring(1)).forEach(result::add);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//values.parallelStream().map(e-&gt;e.substring(1)).forEach(result::add);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Long&amp;nbsp;end&amp;nbsp;=&amp;nbsp;System.currentTimeMillis();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IntStream.range(0,100000).forEach(e-&gt;{System.out.println(e&amp;nbsp;+&amp;nbsp;&amp;nbsp;"&amp;nbsp;:&amp;nbsp;"&amp;nbsp;+&amp;nbsp;result.get(e));});&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(values.size()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;elements&amp;nbsp;computed&amp;nbsp;in&amp;nbsp;"&amp;nbsp;+&amp;nbsp;(end&amp;nbsp;-&amp;nbsp;start)&amp;nbsp;+&amp;nbsp;"&amp;nbsp;miliseconds."&amp;nbsp;+&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"\n&amp;nbsp;Using&amp;nbsp;"&amp;nbsp;+&amp;nbsp;Thread.activeCount()&amp;nbsp;+&amp;nbsp;"&amp;nbsp;threads");&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
OUTPUT&amp;nbsp;:&amp;nbsp;&lt;br&gt;
when&amp;nbsp;using&amp;nbsp;usual&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;about&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;100000&amp;nbsp;elements&amp;nbsp;computed&amp;nbsp;in&amp;nbsp;363&amp;nbsp;miliseconds.&lt;br&gt;
when&amp;nbsp;using&amp;nbsp;parallel&amp;nbsp;stream&amp;nbsp;is&amp;nbsp;about&amp;nbsp;:&lt;br&gt;
&amp;nbsp;100000&amp;nbsp;elements&amp;nbsp;computed&amp;nbsp;in&amp;nbsp;288&amp;nbsp;miliseconds.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;But&amp;nbsp;this&amp;nbsp;data&amp;nbsp;is&amp;nbsp;not&amp;nbsp;stable,&amp;nbsp;sometimes&amp;nbsp;parallel&amp;nbsp;is&amp;nbsp;slower</questionanswer>
  </question>
</questions>
