<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_0" name="CreationalPatterns" nofquestions="4" nofsubcategories="0" filename="creationalpatterns2_6_5_0.xml">
  <question id="2_6_5_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;GOF&amp;nbsp;&amp;nbsp;patterns,&amp;nbsp;&amp;nbsp;you&amp;nbsp;know&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>-&amp;nbsp;Creational&lt;br&gt;
Creational&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;ones&amp;nbsp;that&amp;nbsp;create&amp;nbsp;objects&amp;nbsp;for&amp;nbsp;you,&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;having&amp;nbsp;you&amp;nbsp;instantiate&amp;nbsp;objects&amp;nbsp;directly.&amp;nbsp;This&amp;nbsp;gives&amp;nbsp;your&amp;nbsp;program&amp;nbsp;more&amp;nbsp;flexibility&amp;nbsp;in&amp;nbsp;deciding&amp;nbsp;which&amp;nbsp;objects&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;created&amp;nbsp;for&amp;nbsp;a&amp;nbsp;given&amp;nbsp;case.&lt;br&gt;
*&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;groups&amp;nbsp;object&amp;nbsp;factories&amp;nbsp;that&amp;nbsp;have&amp;nbsp;a&amp;nbsp;common&amp;nbsp;theme.&lt;br&gt;
*&amp;nbsp;Builder&amp;nbsp;constructs&amp;nbsp;complex&amp;nbsp;objects&amp;nbsp;by&amp;nbsp;separating&amp;nbsp;construction&amp;nbsp;and&amp;nbsp;representation.&lt;br&gt;
*&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;without&amp;nbsp;specifying&amp;nbsp;the&amp;nbsp;exact&amp;nbsp;class&amp;nbsp;to&amp;nbsp;create.&lt;br&gt;
*&amp;nbsp;Prototype&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;by&amp;nbsp;cloning&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Singleton&amp;nbsp;restricts&amp;nbsp;object&amp;nbsp;creation&amp;nbsp;for&amp;nbsp;a&amp;nbsp;class&amp;nbsp;to&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Structural&lt;br&gt;
These&amp;nbsp;concern&amp;nbsp;class&amp;nbsp;and&amp;nbsp;object&amp;nbsp;composition.&amp;nbsp;They&amp;nbsp;use&amp;nbsp;inheritance&amp;nbsp;to&amp;nbsp;compose&amp;nbsp;interfaces&amp;nbsp;and&amp;nbsp;define&amp;nbsp;ways&amp;nbsp;to&amp;nbsp;compose&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;obtain&amp;nbsp;new&amp;nbsp;functionality.&lt;br&gt;
*&amp;nbsp;Adapter&amp;nbsp;allows&amp;nbsp;classes&amp;nbsp;with&amp;nbsp;incompatible&amp;nbsp;interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;by&amp;nbsp;wrapping&amp;nbsp;its&amp;nbsp;own&amp;nbsp;interface&amp;nbsp;around&amp;nbsp;that&amp;nbsp;of&amp;nbsp;an&amp;nbsp;already&amp;nbsp;existing&amp;nbsp;class.&lt;br&gt;
*&amp;nbsp;Bridge&amp;nbsp;decouples&amp;nbsp;an&amp;nbsp;abstraction&amp;nbsp;from&amp;nbsp;its&amp;nbsp;implementation&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;two&amp;nbsp;can&amp;nbsp;vary&amp;nbsp;independently.&lt;br&gt;
*&amp;nbsp;Composite&amp;nbsp;composes&amp;nbsp;zero-or-more&amp;nbsp;similar&amp;nbsp;objects&amp;nbsp;so&amp;nbsp;that&amp;nbsp;they&amp;nbsp;can&amp;nbsp;be&amp;nbsp;manipulated&amp;nbsp;as&amp;nbsp;one&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Decorator&amp;nbsp;dynamically&amp;nbsp;adds/overrides&amp;nbsp;behaviour&amp;nbsp;in&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;method&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Facade&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;simplified&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;a&amp;nbsp;large&amp;nbsp;body&amp;nbsp;of&amp;nbsp;code.&lt;br&gt;
*&amp;nbsp;Flyweight&amp;nbsp;reduces&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;and&amp;nbsp;manipulating&amp;nbsp;a&amp;nbsp;large&amp;nbsp;number&amp;nbsp;of&amp;nbsp;similar&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Proxy&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;placeholder&amp;nbsp;for&amp;nbsp;another&amp;nbsp;object&amp;nbsp;to&amp;nbsp;control&amp;nbsp;access,&amp;nbsp;reduce&amp;nbsp;cost,&amp;nbsp;and&amp;nbsp;reduce&amp;nbsp;complexity.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Behavioral&lt;br&gt;
Most&amp;nbsp;of&amp;nbsp;these&amp;nbsp;design&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;specifically&amp;nbsp;concerned&amp;nbsp;with&amp;nbsp;communication&amp;nbsp;between&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility&amp;nbsp;delegates&amp;nbsp;commands&amp;nbsp;to&amp;nbsp;a&amp;nbsp;chain&amp;nbsp;of&amp;nbsp;processing&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Command&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;which&amp;nbsp;encapsulate&amp;nbsp;actions&amp;nbsp;and&amp;nbsp;parameters.&lt;br&gt;
*&amp;nbsp;Interpreter&amp;nbsp;implements&amp;nbsp;a&amp;nbsp;specialized&amp;nbsp;language.&lt;br&gt;
*&amp;nbsp;Iterator&amp;nbsp;accesses&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object&amp;nbsp;sequentially&amp;nbsp;without&amp;nbsp;exposing&amp;nbsp;its&amp;nbsp;underlying&amp;nbsp;representation.&lt;br&gt;
*&amp;nbsp;Mediator&amp;nbsp;allows&amp;nbsp;loose&amp;nbsp;coupling&amp;nbsp;between&amp;nbsp;classes&amp;nbsp;by&amp;nbsp;being&amp;nbsp;the&amp;nbsp;only&amp;nbsp;class&amp;nbsp;that&amp;nbsp;has&amp;nbsp;detailed&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;their&amp;nbsp;methods.&lt;br&gt;
*&amp;nbsp;Memento&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;restore&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;its&amp;nbsp;previous&amp;nbsp;state&amp;nbsp;(undo).&lt;br&gt;
*&amp;nbsp;Observer&amp;nbsp;is&amp;nbsp;a&amp;nbsp;publish/subscribe&amp;nbsp;pattern&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;number&amp;nbsp;of&amp;nbsp;observer&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;see&amp;nbsp;an&amp;nbsp;event.&lt;br&gt;
*&amp;nbsp;State&amp;nbsp;allows&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;its&amp;nbsp;behavior&amp;nbsp;when&amp;nbsp;its&amp;nbsp;internal&amp;nbsp;state&amp;nbsp;changes.&lt;br&gt;
*&amp;nbsp;Strategy&amp;nbsp;allows&amp;nbsp;one&amp;nbsp;of&amp;nbsp;a&amp;nbsp;family&amp;nbsp;of&amp;nbsp;algorithms&amp;nbsp;to&amp;nbsp;be&amp;nbsp;selected&amp;nbsp;on-the-fly&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
*&amp;nbsp;Template&amp;nbsp;method&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;skeleton&amp;nbsp;of&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;as&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;class,&amp;nbsp;allowing&amp;nbsp;its&amp;nbsp;subclasses&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;concrete&amp;nbsp;behavior.&lt;br&gt;
*&amp;nbsp;Visitor&amp;nbsp;separates&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;from&amp;nbsp;an&amp;nbsp;object&amp;nbsp;structure&amp;nbsp;by&amp;nbsp;moving&amp;nbsp;the&amp;nbsp;hierarchy&amp;nbsp;of&amp;nbsp;methods&amp;nbsp;into&amp;nbsp;one&amp;nbsp;object.</questionanswer>
  </question>
  <question id="2_6_5_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe&amp;nbsp;.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;Singleton&amp;nbsp;in&amp;nbsp;Math&amp;nbsp;?&lt;br&gt;
Provide&amp;nbsp;example&amp;nbsp;of&amp;nbsp;using&amp;nbsp;Singleton.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>In&amp;nbsp;software&amp;nbsp;engineering,&amp;nbsp;the&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&lt;br&gt;
&amp;nbsp;restricts&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;to&amp;nbsp;one&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;exactly&amp;nbsp;one&lt;br&gt;
&amp;nbsp;object&amp;nbsp;is&amp;nbsp;needed&amp;nbsp;to&amp;nbsp;coordinate&amp;nbsp;actions&amp;nbsp;across&amp;nbsp;the&amp;nbsp;system.&amp;nbsp;The&amp;nbsp;concept&amp;nbsp;is&amp;nbsp;&lt;br&gt;
sometimes&amp;nbsp;generalized&amp;nbsp;to&amp;nbsp;systems&amp;nbsp;that&amp;nbsp;operate&amp;nbsp;more&amp;nbsp;efficiently&amp;nbsp;when&amp;nbsp;only&amp;nbsp;one&amp;nbsp;object&amp;nbsp;exists,&lt;br&gt;
&amp;nbsp;or&amp;nbsp;that&amp;nbsp;restrict&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;to&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;number&amp;nbsp;of&amp;nbsp;objects.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;term&amp;nbsp;comes&amp;nbsp;from&amp;nbsp;the&amp;nbsp;mathematical&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
In&amp;nbsp;mathematics,&amp;nbsp;a&amp;nbsp;singleton,&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;unit&amp;nbsp;set,&amp;nbsp;is&amp;nbsp;a&amp;nbsp;set&amp;nbsp;with&amp;nbsp;exactly&amp;nbsp;one&amp;nbsp;element.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;set&amp;nbsp;{0}&amp;nbsp;is&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
&lt;br&gt;
Common&amp;nbsp;uses:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Abstract&amp;nbsp;Factory,&amp;nbsp;Builder,&amp;nbsp;and&amp;nbsp;Prototype&amp;nbsp;patterns&amp;nbsp;can&amp;nbsp;use&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;their&amp;nbsp;implementation.&lt;br&gt;
-&amp;nbsp;Facade&amp;nbsp;Objects&amp;nbsp;are&amp;nbsp;often&amp;nbsp;Singletons&amp;nbsp;because&amp;nbsp;only&amp;nbsp;one&amp;nbsp;Facade&amp;nbsp;object&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
-&amp;nbsp;State&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;often&amp;nbsp;Singletons.&lt;br&gt;
-&amp;nbsp;Singletons&amp;nbsp;are&amp;nbsp;often&amp;nbsp;preferred&amp;nbsp;to&amp;nbsp;global&amp;nbsp;variables&amp;nbsp;because:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;pollute&amp;nbsp;the&amp;nbsp;global&amp;nbsp;name&amp;nbsp;space&amp;nbsp;(or,&amp;nbsp;in&amp;nbsp;languages&amp;nbsp;with&amp;nbsp;namespaces,&amp;nbsp;their&amp;nbsp;containing&amp;nbsp;namespace)&amp;nbsp;with&amp;nbsp;unnecessary&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;variables.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;They&amp;nbsp;permit&amp;nbsp;lazy&amp;nbsp;allocation&amp;nbsp;and&amp;nbsp;initialization,&amp;nbsp;whereas&amp;nbsp;global&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;many&amp;nbsp;languages&amp;nbsp;will&amp;nbsp;always&amp;nbsp;consume&amp;nbsp;resources.&lt;br&gt;
&lt;br&gt;
Implementation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;must&amp;nbsp;satisfy&amp;nbsp;the&amp;nbsp;single&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;global&amp;nbsp;access&amp;nbsp;principles.&lt;br&gt;
&amp;nbsp;It&amp;nbsp;requires&amp;nbsp;a&amp;nbsp;mechanism&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&amp;nbsp;singleton&amp;nbsp;class&amp;nbsp;member&amp;nbsp;without&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;class&amp;nbsp;object&amp;nbsp;&lt;br&gt;
and&amp;nbsp;a&amp;nbsp;mechanism&amp;nbsp;to&amp;nbsp;persist&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;class&amp;nbsp;members&amp;nbsp;among&amp;nbsp;class&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;&lt;br&gt;
is&amp;nbsp;implemented&amp;nbsp;by&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;class&amp;nbsp;with&amp;nbsp;a&amp;nbsp;method&amp;nbsp;that&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;if&lt;br&gt;
&amp;nbsp;one&amp;nbsp;does&amp;nbsp;not&amp;nbsp;exist.&amp;nbsp;If&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;already&amp;nbsp;exists,&amp;nbsp;it&amp;nbsp;simply&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;that&amp;nbsp;object.&amp;nbsp;To&amp;nbsp;make&amp;nbsp;&lt;br&gt;
sure&amp;nbsp;that&amp;nbsp;the&amp;nbsp;object&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;instantiated&amp;nbsp;any&amp;nbsp;other&amp;nbsp;way,&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;is&amp;nbsp;made&amp;nbsp;private.&amp;nbsp;Note&amp;nbsp;the&amp;nbsp;&lt;br&gt;
distinction&amp;nbsp;between&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;static&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;and&amp;nbsp;a&amp;nbsp;singleton:&amp;nbsp;although&amp;nbsp;a&amp;nbsp;singleton&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
&amp;nbsp;implemented&amp;nbsp;as&amp;nbsp;a&amp;nbsp;static&amp;nbsp;instance,&amp;nbsp;it&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;lazily&amp;nbsp;constructed,&amp;nbsp;requiring&amp;nbsp;no&amp;nbsp;memory&amp;nbsp;or&amp;nbsp;resources&lt;br&gt;
&amp;nbsp;until&amp;nbsp;needed.&amp;nbsp;Another&amp;nbsp;notable&amp;nbsp;difference&amp;nbsp;is&amp;nbsp;that&amp;nbsp;static&amp;nbsp;member&amp;nbsp;classes&amp;nbsp;cannot&amp;nbsp;implement&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;&lt;br&gt;
unless&amp;nbsp;that&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;simply&amp;nbsp;a&amp;nbsp;marker.&amp;nbsp;So&amp;nbsp;if&amp;nbsp;the&amp;nbsp;class&amp;nbsp;has&amp;nbsp;to&amp;nbsp;realize&amp;nbsp;a&amp;nbsp;contract&amp;nbsp;expressed&amp;nbsp;&lt;br&gt;
by&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;it&amp;nbsp;really&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
The&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language&amp;nbsp;solutions&amp;nbsp;provided&amp;nbsp;here&amp;nbsp;are&amp;nbsp;all&amp;nbsp;thread-safe&amp;nbsp;but&amp;nbsp;differ&amp;nbsp;in&amp;nbsp;&lt;br&gt;
supported&amp;nbsp;language&amp;nbsp;versions&amp;nbsp;and&amp;nbsp;lazy-loading.&amp;nbsp;Since&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;the&amp;nbsp;easiest&amp;nbsp;way&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&lt;br&gt;
Singleton&amp;nbsp;is&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;approach,&amp;nbsp;given&amp;nbsp;at&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;section.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Enum&amp;nbsp;way&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;second&amp;nbsp;edition&amp;nbsp;of&amp;nbsp;his&amp;nbsp;book&amp;nbsp;Effective&amp;nbsp;Java,&amp;nbsp;Joshua&amp;nbsp;Bloch&amp;nbsp;claims&amp;nbsp;that&amp;nbsp;"a&amp;nbsp;single-element&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;is&lt;br&gt;
&amp;nbsp;the&amp;nbsp;best&amp;nbsp;way&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;a&amp;nbsp;singleton"[11]&amp;nbsp;for&amp;nbsp;any&amp;nbsp;Java&amp;nbsp;that&amp;nbsp;supports&amp;nbsp;enums.&amp;nbsp;The&amp;nbsp;use&amp;nbsp;of&amp;nbsp;an&lt;br&gt;
enum&amp;nbsp;is&amp;nbsp;very&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;and&amp;nbsp;has&amp;nbsp;no&amp;nbsp;drawbacks&amp;nbsp;regarding&amp;nbsp;serializable&amp;nbsp;objects,&amp;nbsp;which&amp;nbsp;have&amp;nbsp;to&amp;nbsp;&lt;br&gt;
be&amp;nbsp;circumvented&amp;nbsp;in&amp;nbsp;the&amp;nbsp;other&amp;nbsp;ways.&lt;br&gt;
&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute&amp;nbsp;(String&amp;nbsp;arg)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;perform&amp;nbsp;operation&amp;nbsp;here&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
-------------------------------&lt;br&gt;
-&amp;nbsp;Eager&amp;nbsp;initialization&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;program&amp;nbsp;will&amp;nbsp;always&amp;nbsp;need&amp;nbsp;an&amp;nbsp;instance,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;&lt;br&gt;
not&amp;nbsp;too&amp;nbsp;large&amp;nbsp;in&amp;nbsp;terms&amp;nbsp;of&amp;nbsp;time/resources,&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;can&amp;nbsp;switch&amp;nbsp;to&amp;nbsp;eager&amp;nbsp;initialization,&amp;nbsp;&lt;br&gt;
which&amp;nbsp;always&amp;nbsp;creates&amp;nbsp;an&amp;nbsp;instance:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
Advantages&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;not&amp;nbsp;constructed&amp;nbsp;until&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used.&lt;br&gt;
-&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;the&amp;nbsp;getInstance()&amp;nbsp;method,&amp;nbsp;meaning&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;will&amp;nbsp;see&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;no&amp;nbsp;(expensive)&amp;nbsp;locking&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;final&amp;nbsp;keyword&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;redefined,&amp;nbsp;ensuring&amp;nbsp;that&amp;nbsp;one&amp;nbsp;(and&amp;nbsp;only&amp;nbsp;one)&amp;nbsp;instance&amp;nbsp;ever&amp;nbsp;exists.&lt;br&gt;
&lt;br&gt;
---------------&lt;br&gt;
&lt;br&gt;
Lazy&amp;nbsp;initialization&amp;nbsp;(3&amp;nbsp;types):&lt;br&gt;
-&amp;nbsp;This&amp;nbsp;method&amp;nbsp;uses&amp;nbsp;double-checked&amp;nbsp;locking,&amp;nbsp;which&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;used&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;J2SE&amp;nbsp;5.0,&amp;nbsp;as&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;vulnerable&amp;nbsp;to&amp;nbsp;subtle&amp;nbsp;bugs.&amp;nbsp;The&amp;nbsp;problem&amp;nbsp;is&amp;nbsp;that&amp;nbsp;an&amp;nbsp;out-of-order&amp;nbsp;write&amp;nbsp;may&amp;nbsp;allow&amp;nbsp;the&lt;br&gt;
instance&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;be&amp;nbsp;returned&amp;nbsp;before&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;constructor&amp;nbsp;is&amp;nbsp;executed.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;volatile&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(SingletonDemo&amp;nbsp;.class){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;alternate&amp;nbsp;simpler&amp;nbsp;and&amp;nbsp;cleaner&amp;nbsp;version&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;at&amp;nbsp;the&amp;nbsp;expense&amp;nbsp;of&amp;nbsp;&lt;br&gt;
potentially&amp;nbsp;lower&amp;nbsp;amounts&amp;nbsp;of&amp;nbsp;concurrency&amp;nbsp;in&amp;nbsp;a&amp;nbsp;multithreaded&amp;nbsp;environment:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;synchronized&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
-----------------------------------&lt;br&gt;
Eager&amp;nbsp;initialization&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;program&amp;nbsp;will&amp;nbsp;always&amp;nbsp;need&amp;nbsp;an&amp;nbsp;instance,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;&lt;br&gt;
is&amp;nbsp;not&amp;nbsp;too&amp;nbsp;large&amp;nbsp;in&amp;nbsp;terms&amp;nbsp;of&amp;nbsp;time/resources,&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;can&amp;nbsp;switch&amp;nbsp;to&amp;nbsp;eager&lt;br&gt;
initialization,&amp;nbsp;which&amp;nbsp;always&amp;nbsp;creates&amp;nbsp;an&amp;nbsp;instance:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;has&amp;nbsp;a&amp;nbsp;number&amp;nbsp;of&amp;nbsp;advantages:&lt;br&gt;
The&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;not&amp;nbsp;constructed&amp;nbsp;until&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used.&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;the&amp;nbsp;getInstance()&amp;nbsp;method,&amp;nbsp;meaning&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;will&amp;nbsp;see&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;no&amp;nbsp;(expensive)&amp;nbsp;locking&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
The&amp;nbsp;final&amp;nbsp;keyword&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;redefined,&amp;nbsp;ensuring&amp;nbsp;that&amp;nbsp;one&amp;nbsp;(and&amp;nbsp;only&amp;nbsp;one)&amp;nbsp;instance&amp;nbsp;ever&amp;nbsp;exists.&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Static&amp;nbsp;block&amp;nbsp;initialization&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;RuntimeException("Darn,&amp;nbsp;an&amp;nbsp;error&amp;nbsp;occurred!",&amp;nbsp;e);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;....&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
---------------------------------------&lt;br&gt;
!!!!&amp;nbsp;Initialization&amp;nbsp;On&amp;nbsp;Demand&amp;nbsp;Holder&amp;nbsp;Idiom&lt;br&gt;
University&amp;nbsp;of&amp;nbsp;Maryland&amp;nbsp;Computer&amp;nbsp;Science&amp;nbsp;researcher&amp;nbsp;Bill&amp;nbsp;Pugh&amp;nbsp;has&amp;nbsp;written&amp;nbsp;about&amp;nbsp;the&amp;nbsp;code&amp;nbsp;issues&lt;br&gt;
underlying&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;implemented&amp;nbsp;in&amp;nbsp;Java.[10]&amp;nbsp;Pugh's&amp;nbsp;efforts&amp;nbsp;on&amp;nbsp;the&amp;nbsp;"Double-checked&amp;nbsp;locking"&lt;br&gt;
&amp;nbsp;idiom&amp;nbsp;led&amp;nbsp;to&amp;nbsp;changes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;memory&amp;nbsp;model&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;and&amp;nbsp;to&amp;nbsp;what&amp;nbsp;is&amp;nbsp;generally&amp;nbsp;regarded&lt;br&gt;
as&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;method&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;Java.&amp;nbsp;The&amp;nbsp;technique&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;on&lt;br&gt;
demand&amp;nbsp;holder&amp;nbsp;idiom,&amp;nbsp;is&amp;nbsp;as&amp;nbsp;lazy&amp;nbsp;as&amp;nbsp;possible,&amp;nbsp;and&amp;nbsp;works&amp;nbsp;in&amp;nbsp;all&amp;nbsp;known&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;Java.&amp;nbsp;It&amp;nbsp;takes&amp;nbsp;advantage&lt;br&gt;
of&amp;nbsp;language&amp;nbsp;guarantees&amp;nbsp;about&amp;nbsp;class&amp;nbsp;initialization,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;therefore&amp;nbsp;work&amp;nbsp;correctly&amp;nbsp;in&amp;nbsp;all&amp;nbsp;Java-compliant&amp;nbsp;&lt;br&gt;
compilers&amp;nbsp;and&amp;nbsp;virtual&amp;nbsp;machines.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Private&amp;nbsp;constructor&amp;nbsp;prevents&amp;nbsp;instantiation&amp;nbsp;from&amp;nbsp;other&amp;nbsp;classes&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;SingletonHolder&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;on&amp;nbsp;the&amp;nbsp;first&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;Singleton.getInstance()&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;or&amp;nbsp;the&amp;nbsp;first&amp;nbsp;access&amp;nbsp;to&amp;nbsp;SingletonHolder.INSTANCE,&amp;nbsp;not&amp;nbsp;before.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;class&amp;nbsp;SingletonHolder&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;SingletonHolder.INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="2_6_5_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;#160;pattern,&amp;#160;&lt;br&gt;
double&amp;#160;checking&amp;#160;VS&amp;#160;Initialization&amp;#160;on&amp;#160;demand&amp;#160;idiom,&amp;#160;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Double&amp;nbsp;checking&amp;nbsp;:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;volatile&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(SingletonDemo&amp;nbsp;.class){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
======&lt;br&gt;
Initialization&amp;nbsp;on&amp;nbsp;Demand:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
private&amp;nbsp;Singleton()&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
private&amp;nbsp;static&amp;nbsp;class&amp;nbsp;LazyHolder&amp;nbsp;{&lt;br&gt;
private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;LazyHolder.INSTANCE;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Read&amp;nbsp;more:&amp;nbsp;http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz2rux0dBCF&lt;br&gt;
&lt;br&gt;
WIKI:&lt;br&gt;
University&amp;nbsp;of&amp;nbsp;Maryland&amp;nbsp;Computer&amp;nbsp;Science&amp;nbsp;researcher&amp;nbsp;Bill&amp;nbsp;Pugh&amp;nbsp;has&amp;nbsp;written&amp;nbsp;about&amp;nbsp;the&amp;nbsp;code&lt;br&gt;
&amp;nbsp;issues&amp;nbsp;underlying&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;implemented&amp;nbsp;in&amp;nbsp;Java.[10]&amp;nbsp;Pugh's&amp;nbsp;efforts&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
&amp;nbsp;"Double-checked&amp;nbsp;locking"&amp;nbsp;idiom&amp;nbsp;led&amp;nbsp;to&amp;nbsp;changes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;memory&amp;nbsp;model&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;and&amp;nbsp;to&amp;nbsp;what&amp;nbsp;is&lt;br&gt;
&amp;nbsp;generally&amp;nbsp;regarded&amp;nbsp;as&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;method&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;Java.&amp;nbsp;The&amp;nbsp;technique&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&lt;br&gt;
&amp;nbsp;initialization&amp;nbsp;on&amp;nbsp;demand&amp;nbsp;holder&amp;nbsp;idiom,&amp;nbsp;is&amp;nbsp;as&amp;nbsp;lazy&amp;nbsp;as&amp;nbsp;possible,&amp;nbsp;and&amp;nbsp;works&amp;nbsp;in&amp;nbsp;all&amp;nbsp;known&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;Java.&lt;br&gt;
It&amp;nbsp;takes&amp;nbsp;advantage&amp;nbsp;of&amp;nbsp;language&amp;nbsp;guarantees&amp;nbsp;about&amp;nbsp;class&amp;nbsp;initialization,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;therefore&amp;nbsp;work&amp;nbsp;correctly&amp;nbsp;in&lt;br&gt;
all&amp;nbsp;Java-compliant&amp;nbsp;compilers&amp;nbsp;and&amp;nbsp;virtual&amp;nbsp;machines.&lt;br&gt;
The&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;referenced&amp;nbsp;no&amp;nbsp;earlier&amp;nbsp;(and&amp;nbsp;therefore&amp;nbsp;loaded&amp;nbsp;no&amp;nbsp;earlier&amp;nbsp;by&amp;nbsp;the&amp;nbsp;class&amp;nbsp;loader)&amp;nbsp;than&amp;nbsp;the&amp;nbsp;moment&lt;br&gt;
that&amp;nbsp;getInstance()&amp;nbsp;is&amp;nbsp;called.&amp;nbsp;Thus,&amp;nbsp;this&amp;nbsp;solution&amp;nbsp;is&amp;nbsp;thread-safe&amp;nbsp;without&amp;nbsp;requiring&amp;nbsp;special&amp;nbsp;language&amp;nbsp;constructs&amp;nbsp;&lt;br&gt;
(i.e.&amp;nbsp;volatile&amp;nbsp;or&amp;nbsp;synchronized).&lt;br&gt;
&lt;br&gt;
Initialization&amp;nbsp;on&amp;nbsp;Demand&amp;nbsp;is&amp;nbsp;Thread-Safe:&lt;br&gt;
The&amp;nbsp;implementation&amp;nbsp;relies&amp;nbsp;on&amp;nbsp;the&amp;nbsp;well-specified&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;of&amp;nbsp;execution&amp;nbsp;within&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;&lt;br&gt;
Machine&amp;nbsp;(JVM);&amp;nbsp;see&amp;nbsp;section&amp;nbsp;12.4&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;Language&amp;nbsp;Specification&amp;nbsp;(JLS)&amp;nbsp;for&amp;nbsp;details.&lt;br&gt;
When&amp;nbsp;the&amp;nbsp;class&amp;nbsp;Something&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM,&amp;nbsp;the&amp;nbsp;class&amp;nbsp;goes&amp;nbsp;through&amp;nbsp;initialization.&amp;nbsp;Since&amp;nbsp;the&amp;nbsp;class&amp;nbsp;does&lt;br&gt;
&amp;nbsp;not&amp;nbsp;have&amp;nbsp;any&amp;nbsp;static&amp;nbsp;variables&amp;nbsp;to&amp;nbsp;initialize,&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;completes&amp;nbsp;trivially.&amp;nbsp;The&amp;nbsp;static&amp;nbsp;class&amp;nbsp;definition&amp;nbsp;LazyHolder&amp;nbsp;&lt;br&gt;
within&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;initialized&amp;nbsp;until&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;determines&amp;nbsp;that&amp;nbsp;LazyHolder&amp;nbsp;must&amp;nbsp;be&amp;nbsp;executed.&lt;br&gt;
The&amp;nbsp;static&amp;nbsp;class&amp;nbsp;LazyHolder&amp;nbsp;is&amp;nbsp;only&amp;nbsp;executed&amp;nbsp;when&amp;nbsp;the&amp;nbsp;static&amp;nbsp;method&amp;nbsp;getInstance&amp;nbsp;is&amp;nbsp;invoked&amp;nbsp;on&amp;nbsp;the&amp;nbsp;class&amp;nbsp;Something,&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;first&amp;nbsp;time&amp;nbsp;this&amp;nbsp;happens&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;will&amp;nbsp;load&amp;nbsp;and&amp;nbsp;initialize&amp;nbsp;the&amp;nbsp;LazyHolder&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;the&amp;nbsp;LazyHolder&lt;br&gt;
class&amp;nbsp;results&amp;nbsp;in&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;INSTANCE&amp;nbsp;being&amp;nbsp;initialized&amp;nbsp;by&amp;nbsp;executing&amp;nbsp;the&amp;nbsp;(private)&amp;nbsp;constructor&amp;nbsp;for&amp;nbsp;the&amp;nbsp;outer&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Something.&amp;nbsp;Since&amp;nbsp;the&amp;nbsp;class&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;is&amp;nbsp;guaranteed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JLS&amp;nbsp;to&amp;nbsp;be&amp;nbsp;serial,&amp;nbsp;i.e.,&amp;nbsp;non-concurrent,&amp;nbsp;&lt;br&gt;
no&amp;nbsp;further&amp;nbsp;synchronization&amp;nbsp;is&amp;nbsp;required&amp;nbsp;in&amp;nbsp;the&amp;nbsp;static&amp;nbsp;getInstance&amp;nbsp;method&amp;nbsp;during&amp;nbsp;loading&amp;nbsp;and&amp;nbsp;initialization.&amp;nbsp;And&amp;nbsp;since&amp;nbsp;&lt;br&gt;
the&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;writes&amp;nbsp;the&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;INSTANCE&amp;nbsp;in&amp;nbsp;a&amp;nbsp;serial&amp;nbsp;operation,&amp;nbsp;all&amp;nbsp;subsequent&amp;nbsp;concurrent&amp;nbsp;invocations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;getInstance&amp;nbsp;will&amp;nbsp;return&amp;nbsp;the&amp;nbsp;same&amp;nbsp;correctly&amp;nbsp;initialized&amp;nbsp;INSTANCE&amp;nbsp;without&amp;nbsp;incurring&amp;nbsp;any&amp;nbsp;additional&amp;nbsp;synchronization&amp;nbsp;overhead.&lt;br&gt;
&lt;br&gt;
Read&amp;nbsp;more:&amp;nbsp;http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz2ruwrxJRo</questionanswer>
  </question>
</questions>
