<?xml version="1.0" encoding="UTF-8"?>
<questions id="2_6_5_0" name="CreationalPatterns" nofquestions="10" nofsubcategories="0" filename="creationalpatterns2_6_5_0.xml">
  <question id="2_6_5_0:0" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;GOF&amp;nbsp;&amp;nbsp;patterns,&amp;nbsp;&amp;nbsp;you&amp;nbsp;know&amp;nbsp;?&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>-&amp;nbsp;Creational&lt;br&gt;
Creational&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;ones&amp;nbsp;that&amp;nbsp;create&amp;nbsp;objects&amp;nbsp;for&amp;nbsp;you,&amp;nbsp;rather&amp;nbsp;than&amp;nbsp;having&amp;nbsp;you&amp;nbsp;instantiate&amp;nbsp;objects&amp;nbsp;directly.&amp;nbsp;This&amp;nbsp;gives&amp;nbsp;your&amp;nbsp;program&amp;nbsp;more&amp;nbsp;flexibility&amp;nbsp;in&amp;nbsp;deciding&amp;nbsp;which&amp;nbsp;objects&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;created&amp;nbsp;for&amp;nbsp;a&amp;nbsp;given&amp;nbsp;case.&lt;br&gt;
*&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;groups&amp;nbsp;object&amp;nbsp;factories&amp;nbsp;that&amp;nbsp;have&amp;nbsp;a&amp;nbsp;common&amp;nbsp;theme.&lt;br&gt;
*&amp;nbsp;Builder&amp;nbsp;constructs&amp;nbsp;complex&amp;nbsp;objects&amp;nbsp;by&amp;nbsp;separating&amp;nbsp;construction&amp;nbsp;and&amp;nbsp;representation.&lt;br&gt;
*&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;without&amp;nbsp;specifying&amp;nbsp;the&amp;nbsp;exact&amp;nbsp;class&amp;nbsp;to&amp;nbsp;create.&lt;br&gt;
*&amp;nbsp;Prototype&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;by&amp;nbsp;cloning&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Singleton&amp;nbsp;restricts&amp;nbsp;object&amp;nbsp;creation&amp;nbsp;for&amp;nbsp;a&amp;nbsp;class&amp;nbsp;to&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Structural&lt;br&gt;
These&amp;nbsp;concern&amp;nbsp;class&amp;nbsp;and&amp;nbsp;object&amp;nbsp;composition.&amp;nbsp;They&amp;nbsp;use&amp;nbsp;inheritance&amp;nbsp;to&amp;nbsp;compose&amp;nbsp;interfaces&amp;nbsp;and&amp;nbsp;define&amp;nbsp;ways&amp;nbsp;to&amp;nbsp;compose&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;obtain&amp;nbsp;new&amp;nbsp;functionality.&lt;br&gt;
*&amp;nbsp;Adapter&amp;nbsp;allows&amp;nbsp;classes&amp;nbsp;with&amp;nbsp;incompatible&amp;nbsp;interfaces&amp;nbsp;to&amp;nbsp;work&amp;nbsp;together&amp;nbsp;by&amp;nbsp;wrapping&amp;nbsp;its&amp;nbsp;own&amp;nbsp;interface&amp;nbsp;around&amp;nbsp;that&amp;nbsp;of&amp;nbsp;an&amp;nbsp;already&amp;nbsp;existing&amp;nbsp;class.&lt;br&gt;
*&amp;nbsp;Bridge&amp;nbsp;decouples&amp;nbsp;an&amp;nbsp;abstraction&amp;nbsp;from&amp;nbsp;its&amp;nbsp;implementation&amp;nbsp;so&amp;nbsp;that&amp;nbsp;the&amp;nbsp;two&amp;nbsp;can&amp;nbsp;vary&amp;nbsp;independently.&lt;br&gt;
*&amp;nbsp;Composite&amp;nbsp;composes&amp;nbsp;zero-or-more&amp;nbsp;similar&amp;nbsp;objects&amp;nbsp;so&amp;nbsp;that&amp;nbsp;they&amp;nbsp;can&amp;nbsp;be&amp;nbsp;manipulated&amp;nbsp;as&amp;nbsp;one&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Decorator&amp;nbsp;dynamically&amp;nbsp;adds/overrides&amp;nbsp;behaviour&amp;nbsp;in&amp;nbsp;an&amp;nbsp;existing&amp;nbsp;method&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object.&lt;br&gt;
*&amp;nbsp;Facade&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;simplified&amp;nbsp;interface&amp;nbsp;to&amp;nbsp;a&amp;nbsp;large&amp;nbsp;body&amp;nbsp;of&amp;nbsp;code.&lt;br&gt;
*&amp;nbsp;Flyweight&amp;nbsp;reduces&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;and&amp;nbsp;manipulating&amp;nbsp;a&amp;nbsp;large&amp;nbsp;number&amp;nbsp;of&amp;nbsp;similar&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Proxy&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;placeholder&amp;nbsp;for&amp;nbsp;another&amp;nbsp;object&amp;nbsp;to&amp;nbsp;control&amp;nbsp;access,&amp;nbsp;reduce&amp;nbsp;cost,&amp;nbsp;and&amp;nbsp;reduce&amp;nbsp;complexity.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;Behavioral&lt;br&gt;
Most&amp;nbsp;of&amp;nbsp;these&amp;nbsp;design&amp;nbsp;patterns&amp;nbsp;are&amp;nbsp;specifically&amp;nbsp;concerned&amp;nbsp;with&amp;nbsp;communication&amp;nbsp;between&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Chain&amp;nbsp;of&amp;nbsp;responsibility&amp;nbsp;delegates&amp;nbsp;commands&amp;nbsp;to&amp;nbsp;a&amp;nbsp;chain&amp;nbsp;of&amp;nbsp;processing&amp;nbsp;objects.&lt;br&gt;
*&amp;nbsp;Command&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;which&amp;nbsp;encapsulate&amp;nbsp;actions&amp;nbsp;and&amp;nbsp;parameters.&lt;br&gt;
*&amp;nbsp;Interpreter&amp;nbsp;implements&amp;nbsp;a&amp;nbsp;specialized&amp;nbsp;language.&lt;br&gt;
*&amp;nbsp;Iterator&amp;nbsp;accesses&amp;nbsp;the&amp;nbsp;elements&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object&amp;nbsp;sequentially&amp;nbsp;without&amp;nbsp;exposing&amp;nbsp;its&amp;nbsp;underlying&amp;nbsp;representation.&lt;br&gt;
*&amp;nbsp;Mediator&amp;nbsp;allows&amp;nbsp;loose&amp;nbsp;coupling&amp;nbsp;between&amp;nbsp;classes&amp;nbsp;by&amp;nbsp;being&amp;nbsp;the&amp;nbsp;only&amp;nbsp;class&amp;nbsp;that&amp;nbsp;has&amp;nbsp;detailed&amp;nbsp;knowledge&amp;nbsp;of&amp;nbsp;their&amp;nbsp;methods.&lt;br&gt;
*&amp;nbsp;Memento&amp;nbsp;provides&amp;nbsp;the&amp;nbsp;ability&amp;nbsp;to&amp;nbsp;restore&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;its&amp;nbsp;previous&amp;nbsp;state&amp;nbsp;(undo).&lt;br&gt;
*&amp;nbsp;Observer&amp;nbsp;is&amp;nbsp;a&amp;nbsp;publish/subscribe&amp;nbsp;pattern&amp;nbsp;which&amp;nbsp;allows&amp;nbsp;a&amp;nbsp;number&amp;nbsp;of&amp;nbsp;observer&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;see&amp;nbsp;an&amp;nbsp;event.&lt;br&gt;
*&amp;nbsp;State&amp;nbsp;allows&amp;nbsp;an&amp;nbsp;object&amp;nbsp;to&amp;nbsp;alter&amp;nbsp;its&amp;nbsp;behavior&amp;nbsp;when&amp;nbsp;its&amp;nbsp;internal&amp;nbsp;state&amp;nbsp;changes.&lt;br&gt;
*&amp;nbsp;Strategy&amp;nbsp;allows&amp;nbsp;one&amp;nbsp;of&amp;nbsp;a&amp;nbsp;family&amp;nbsp;of&amp;nbsp;algorithms&amp;nbsp;to&amp;nbsp;be&amp;nbsp;selected&amp;nbsp;on-the-fly&amp;nbsp;at&amp;nbsp;runtime.&lt;br&gt;
*&amp;nbsp;Template&amp;nbsp;method&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;skeleton&amp;nbsp;of&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;as&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;class,&amp;nbsp;allowing&amp;nbsp;its&amp;nbsp;subclasses&amp;nbsp;to&amp;nbsp;provide&amp;nbsp;concrete&amp;nbsp;behavior.&lt;br&gt;
*&amp;nbsp;Visitor&amp;nbsp;separates&amp;nbsp;an&amp;nbsp;algorithm&amp;nbsp;from&amp;nbsp;an&amp;nbsp;object&amp;nbsp;structure&amp;nbsp;by&amp;nbsp;moving&amp;nbsp;the&amp;nbsp;hierarchy&amp;nbsp;of&amp;nbsp;methods&amp;nbsp;into&amp;nbsp;one&amp;nbsp;object.</questionanswer>
  </question>
  <question id="2_6_5_0:1" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe&amp;nbsp;.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;Singleton&amp;nbsp;in&amp;nbsp;Math&amp;nbsp;?&lt;br&gt;
Provide&amp;nbsp;example&amp;nbsp;of&amp;nbsp;using&amp;nbsp;Singleton.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>In&amp;nbsp;software&amp;nbsp;engineering,&amp;nbsp;the&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;that&lt;br&gt;
&amp;nbsp;restricts&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;to&amp;nbsp;one&amp;nbsp;object.&amp;nbsp;This&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;when&amp;nbsp;exactly&amp;nbsp;one&lt;br&gt;
&amp;nbsp;object&amp;nbsp;is&amp;nbsp;needed&amp;nbsp;to&amp;nbsp;coordinate&amp;nbsp;actions&amp;nbsp;across&amp;nbsp;the&amp;nbsp;system.&amp;nbsp;The&amp;nbsp;concept&amp;nbsp;is&amp;nbsp;&lt;br&gt;
sometimes&amp;nbsp;generalized&amp;nbsp;to&amp;nbsp;systems&amp;nbsp;that&amp;nbsp;operate&amp;nbsp;more&amp;nbsp;efficiently&amp;nbsp;when&amp;nbsp;only&amp;nbsp;one&amp;nbsp;object&amp;nbsp;exists,&lt;br&gt;
&amp;nbsp;or&amp;nbsp;that&amp;nbsp;restrict&amp;nbsp;the&amp;nbsp;instantiation&amp;nbsp;to&amp;nbsp;a&amp;nbsp;certain&amp;nbsp;number&amp;nbsp;of&amp;nbsp;objects.&amp;nbsp;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;term&amp;nbsp;comes&amp;nbsp;from&amp;nbsp;the&amp;nbsp;mathematical&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
In&amp;nbsp;mathematics,&amp;nbsp;a&amp;nbsp;singleton,&amp;nbsp;also&amp;nbsp;known&amp;nbsp;as&amp;nbsp;a&amp;nbsp;unit&amp;nbsp;set,&amp;nbsp;is&amp;nbsp;a&amp;nbsp;set&amp;nbsp;with&amp;nbsp;exactly&amp;nbsp;one&amp;nbsp;element.&amp;nbsp;For&amp;nbsp;example,&amp;nbsp;the&amp;nbsp;set&amp;nbsp;{0}&amp;nbsp;is&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
&lt;br&gt;
Common&amp;nbsp;uses:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Abstract&amp;nbsp;Factory,&amp;nbsp;Builder,&amp;nbsp;and&amp;nbsp;Prototype&amp;nbsp;patterns&amp;nbsp;can&amp;nbsp;use&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;their&amp;nbsp;implementation.&lt;br&gt;
-&amp;nbsp;Facade&amp;nbsp;Objects&amp;nbsp;are&amp;nbsp;often&amp;nbsp;Singletons&amp;nbsp;because&amp;nbsp;only&amp;nbsp;one&amp;nbsp;Facade&amp;nbsp;object&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
-&amp;nbsp;State&amp;nbsp;objects&amp;nbsp;are&amp;nbsp;often&amp;nbsp;Singletons.&lt;br&gt;
-&amp;nbsp;Singletons&amp;nbsp;are&amp;nbsp;often&amp;nbsp;preferred&amp;nbsp;to&amp;nbsp;global&amp;nbsp;variables&amp;nbsp;because:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;They&amp;nbsp;do&amp;nbsp;not&amp;nbsp;pollute&amp;nbsp;the&amp;nbsp;global&amp;nbsp;name&amp;nbsp;space&amp;nbsp;(or,&amp;nbsp;in&amp;nbsp;languages&amp;nbsp;with&amp;nbsp;namespaces,&amp;nbsp;their&amp;nbsp;containing&amp;nbsp;namespace)&amp;nbsp;with&amp;nbsp;unnecessary&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;variables.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;They&amp;nbsp;permit&amp;nbsp;lazy&amp;nbsp;allocation&amp;nbsp;and&amp;nbsp;initialization,&amp;nbsp;whereas&amp;nbsp;global&amp;nbsp;variables&amp;nbsp;in&amp;nbsp;many&amp;nbsp;languages&amp;nbsp;will&amp;nbsp;always&amp;nbsp;consume&amp;nbsp;resources.&lt;br&gt;
&lt;br&gt;
Implementation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;must&amp;nbsp;satisfy&amp;nbsp;the&amp;nbsp;single&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;global&amp;nbsp;access&amp;nbsp;principles.&lt;br&gt;
&amp;nbsp;It&amp;nbsp;requires&amp;nbsp;a&amp;nbsp;mechanism&amp;nbsp;to&amp;nbsp;access&amp;nbsp;the&amp;nbsp;singleton&amp;nbsp;class&amp;nbsp;member&amp;nbsp;without&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;class&amp;nbsp;object&amp;nbsp;&lt;br&gt;
and&amp;nbsp;a&amp;nbsp;mechanism&amp;nbsp;to&amp;nbsp;persist&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;class&amp;nbsp;members&amp;nbsp;among&amp;nbsp;class&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;singleton&amp;nbsp;pattern&amp;nbsp;&lt;br&gt;
is&amp;nbsp;implemented&amp;nbsp;by&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;class&amp;nbsp;with&amp;nbsp;a&amp;nbsp;method&amp;nbsp;that&amp;nbsp;creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;class&amp;nbsp;if&lt;br&gt;
&amp;nbsp;one&amp;nbsp;does&amp;nbsp;not&amp;nbsp;exist.&amp;nbsp;If&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;already&amp;nbsp;exists,&amp;nbsp;it&amp;nbsp;simply&amp;nbsp;returns&amp;nbsp;a&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;that&amp;nbsp;object.&amp;nbsp;To&amp;nbsp;make&amp;nbsp;&lt;br&gt;
sure&amp;nbsp;that&amp;nbsp;the&amp;nbsp;object&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;instantiated&amp;nbsp;any&amp;nbsp;other&amp;nbsp;way,&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;is&amp;nbsp;made&amp;nbsp;private.&amp;nbsp;Note&amp;nbsp;the&amp;nbsp;&lt;br&gt;
distinction&amp;nbsp;between&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;static&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;a&amp;nbsp;class&amp;nbsp;and&amp;nbsp;a&amp;nbsp;singleton:&amp;nbsp;although&amp;nbsp;a&amp;nbsp;singleton&amp;nbsp;can&amp;nbsp;be&lt;br&gt;
&amp;nbsp;implemented&amp;nbsp;as&amp;nbsp;a&amp;nbsp;static&amp;nbsp;instance,&amp;nbsp;it&amp;nbsp;can&amp;nbsp;also&amp;nbsp;be&amp;nbsp;lazily&amp;nbsp;constructed,&amp;nbsp;requiring&amp;nbsp;no&amp;nbsp;memory&amp;nbsp;or&amp;nbsp;resources&lt;br&gt;
&amp;nbsp;until&amp;nbsp;needed.&amp;nbsp;Another&amp;nbsp;notable&amp;nbsp;difference&amp;nbsp;is&amp;nbsp;that&amp;nbsp;static&amp;nbsp;member&amp;nbsp;classes&amp;nbsp;cannot&amp;nbsp;implement&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;&lt;br&gt;
unless&amp;nbsp;that&amp;nbsp;interface&amp;nbsp;is&amp;nbsp;simply&amp;nbsp;a&amp;nbsp;marker.&amp;nbsp;So&amp;nbsp;if&amp;nbsp;the&amp;nbsp;class&amp;nbsp;has&amp;nbsp;to&amp;nbsp;realize&amp;nbsp;a&amp;nbsp;contract&amp;nbsp;expressed&amp;nbsp;&lt;br&gt;
by&amp;nbsp;an&amp;nbsp;interface,&amp;nbsp;it&amp;nbsp;really&amp;nbsp;has&amp;nbsp;to&amp;nbsp;be&amp;nbsp;a&amp;nbsp;singleton.&lt;br&gt;
&lt;br&gt;
!!!&lt;br&gt;
The&amp;nbsp;Java&amp;nbsp;programming&amp;nbsp;language&amp;nbsp;solutions&amp;nbsp;provided&amp;nbsp;here&amp;nbsp;are&amp;nbsp;all&amp;nbsp;thread-safe&amp;nbsp;but&amp;nbsp;differ&amp;nbsp;in&amp;nbsp;&lt;br&gt;
supported&amp;nbsp;language&amp;nbsp;versions&amp;nbsp;and&amp;nbsp;lazy-loading.&amp;nbsp;Since&amp;nbsp;Java&amp;nbsp;5.0,&amp;nbsp;the&amp;nbsp;easiest&amp;nbsp;way&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&lt;br&gt;
Singleton&amp;nbsp;is&amp;nbsp;the&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;approach,&amp;nbsp;given&amp;nbsp;at&amp;nbsp;the&amp;nbsp;end&amp;nbsp;of&amp;nbsp;this&amp;nbsp;section.&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Enum&amp;nbsp;way&lt;br&gt;
In&amp;nbsp;the&amp;nbsp;second&amp;nbsp;edition&amp;nbsp;of&amp;nbsp;his&amp;nbsp;book&amp;nbsp;Effective&amp;nbsp;Java,&amp;nbsp;Joshua&amp;nbsp;Bloch&amp;nbsp;claims&amp;nbsp;that&amp;nbsp;"a&amp;nbsp;single-element&amp;nbsp;enum&amp;nbsp;type&amp;nbsp;is&lt;br&gt;
&amp;nbsp;the&amp;nbsp;best&amp;nbsp;way&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;a&amp;nbsp;singleton"[11]&amp;nbsp;for&amp;nbsp;any&amp;nbsp;Java&amp;nbsp;that&amp;nbsp;supports&amp;nbsp;enums.&amp;nbsp;The&amp;nbsp;use&amp;nbsp;of&amp;nbsp;an&lt;br&gt;
enum&amp;nbsp;is&amp;nbsp;very&amp;nbsp;easy&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;and&amp;nbsp;has&amp;nbsp;no&amp;nbsp;drawbacks&amp;nbsp;regarding&amp;nbsp;serializable&amp;nbsp;objects,&amp;nbsp;which&amp;nbsp;have&amp;nbsp;to&amp;nbsp;&lt;br&gt;
be&amp;nbsp;circumvented&amp;nbsp;in&amp;nbsp;the&amp;nbsp;other&amp;nbsp;ways.&lt;br&gt;
&amp;nbsp;public&amp;nbsp;enum&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;execute&amp;nbsp;(String&amp;nbsp;arg)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;perform&amp;nbsp;operation&amp;nbsp;here&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
-------------------------------&lt;br&gt;
-&amp;nbsp;Eager&amp;nbsp;initialization&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;program&amp;nbsp;will&amp;nbsp;always&amp;nbsp;need&amp;nbsp;an&amp;nbsp;instance,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;&lt;br&gt;
not&amp;nbsp;too&amp;nbsp;large&amp;nbsp;in&amp;nbsp;terms&amp;nbsp;of&amp;nbsp;time/resources,&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;can&amp;nbsp;switch&amp;nbsp;to&amp;nbsp;eager&amp;nbsp;initialization,&amp;nbsp;&lt;br&gt;
which&amp;nbsp;always&amp;nbsp;creates&amp;nbsp;an&amp;nbsp;instance:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
Advantages&amp;nbsp;:&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;not&amp;nbsp;constructed&amp;nbsp;until&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used.&lt;br&gt;
-&amp;nbsp;There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;the&amp;nbsp;getInstance()&amp;nbsp;method,&amp;nbsp;meaning&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;will&amp;nbsp;see&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;no&amp;nbsp;(expensive)&amp;nbsp;locking&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;final&amp;nbsp;keyword&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;redefined,&amp;nbsp;ensuring&amp;nbsp;that&amp;nbsp;one&amp;nbsp;(and&amp;nbsp;only&amp;nbsp;one)&amp;nbsp;instance&amp;nbsp;ever&amp;nbsp;exists.&lt;br&gt;
&lt;br&gt;
---------------&lt;br&gt;
&lt;br&gt;
Lazy&amp;nbsp;initialization&amp;nbsp;(3&amp;nbsp;types):&lt;br&gt;
-&amp;nbsp;This&amp;nbsp;method&amp;nbsp;uses&amp;nbsp;double-checked&amp;nbsp;locking,&amp;nbsp;which&amp;nbsp;should&amp;nbsp;not&amp;nbsp;be&amp;nbsp;used&amp;nbsp;prior&amp;nbsp;to&amp;nbsp;J2SE&amp;nbsp;5.0,&amp;nbsp;as&lt;br&gt;
it&amp;nbsp;is&amp;nbsp;vulnerable&amp;nbsp;to&amp;nbsp;subtle&amp;nbsp;bugs.&amp;nbsp;The&amp;nbsp;problem&amp;nbsp;is&amp;nbsp;that&amp;nbsp;an&amp;nbsp;out-of-order&amp;nbsp;write&amp;nbsp;may&amp;nbsp;allow&amp;nbsp;the&lt;br&gt;
instance&amp;nbsp;reference&amp;nbsp;to&amp;nbsp;be&amp;nbsp;returned&amp;nbsp;before&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;constructor&amp;nbsp;is&amp;nbsp;executed.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;volatile&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(SingletonDemo&amp;nbsp;.class){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;An&amp;nbsp;alternate&amp;nbsp;simpler&amp;nbsp;and&amp;nbsp;cleaner&amp;nbsp;version&amp;nbsp;may&amp;nbsp;be&amp;nbsp;used&amp;nbsp;at&amp;nbsp;the&amp;nbsp;expense&amp;nbsp;of&amp;nbsp;&lt;br&gt;
potentially&amp;nbsp;lower&amp;nbsp;amounts&amp;nbsp;of&amp;nbsp;concurrency&amp;nbsp;in&amp;nbsp;a&amp;nbsp;multithreaded&amp;nbsp;environment:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;synchronized&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
-----------------------------------&lt;br&gt;
Eager&amp;nbsp;initialization&lt;br&gt;
If&amp;nbsp;the&amp;nbsp;program&amp;nbsp;will&amp;nbsp;always&amp;nbsp;need&amp;nbsp;an&amp;nbsp;instance,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;the&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;&lt;br&gt;
is&amp;nbsp;not&amp;nbsp;too&amp;nbsp;large&amp;nbsp;in&amp;nbsp;terms&amp;nbsp;of&amp;nbsp;time/resources,&amp;nbsp;the&amp;nbsp;programmer&amp;nbsp;can&amp;nbsp;switch&amp;nbsp;to&amp;nbsp;eager&lt;br&gt;
initialization,&amp;nbsp;which&amp;nbsp;always&amp;nbsp;creates&amp;nbsp;an&amp;nbsp;instance:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;method&amp;nbsp;has&amp;nbsp;a&amp;nbsp;number&amp;nbsp;of&amp;nbsp;advantages:&lt;br&gt;
The&amp;nbsp;instance&amp;nbsp;is&amp;nbsp;not&amp;nbsp;constructed&amp;nbsp;until&amp;nbsp;the&amp;nbsp;class&amp;nbsp;is&amp;nbsp;used.&lt;br&gt;
There&amp;nbsp;is&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;synchronize&amp;nbsp;the&amp;nbsp;getInstance()&amp;nbsp;method,&amp;nbsp;meaning&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;will&amp;nbsp;see&amp;nbsp;the&amp;nbsp;same&amp;nbsp;instance&amp;nbsp;and&amp;nbsp;no&amp;nbsp;(expensive)&amp;nbsp;locking&amp;nbsp;is&amp;nbsp;required.&lt;br&gt;
The&amp;nbsp;final&amp;nbsp;keyword&amp;nbsp;means&amp;nbsp;that&amp;nbsp;the&amp;nbsp;instance&amp;nbsp;cannot&amp;nbsp;be&amp;nbsp;redefined,&amp;nbsp;ensuring&amp;nbsp;that&amp;nbsp;one&amp;nbsp;(and&amp;nbsp;only&amp;nbsp;one)&amp;nbsp;instance&amp;nbsp;ever&amp;nbsp;exists.&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Static&amp;nbsp;block&amp;nbsp;initialization&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;static&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;catch&amp;nbsp;(Exception&amp;nbsp;e)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw&amp;nbsp;new&amp;nbsp;RuntimeException("Darn,&amp;nbsp;an&amp;nbsp;error&amp;nbsp;occurred!",&amp;nbsp;e);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;....&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
---------------------------------------&lt;br&gt;
!!!!&amp;nbsp;Initialization&amp;nbsp;On&amp;nbsp;Demand&amp;nbsp;Holder&amp;nbsp;Idiom&lt;br&gt;
University&amp;nbsp;of&amp;nbsp;Maryland&amp;nbsp;Computer&amp;nbsp;Science&amp;nbsp;researcher&amp;nbsp;Bill&amp;nbsp;Pugh&amp;nbsp;has&amp;nbsp;written&amp;nbsp;about&amp;nbsp;the&amp;nbsp;code&amp;nbsp;issues&lt;br&gt;
underlying&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;implemented&amp;nbsp;in&amp;nbsp;Java.[10]&amp;nbsp;Pugh's&amp;nbsp;efforts&amp;nbsp;on&amp;nbsp;the&amp;nbsp;"Double-checked&amp;nbsp;locking"&lt;br&gt;
&amp;nbsp;idiom&amp;nbsp;led&amp;nbsp;to&amp;nbsp;changes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;memory&amp;nbsp;model&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;and&amp;nbsp;to&amp;nbsp;what&amp;nbsp;is&amp;nbsp;generally&amp;nbsp;regarded&lt;br&gt;
as&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;method&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;Java.&amp;nbsp;The&amp;nbsp;technique&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;on&lt;br&gt;
demand&amp;nbsp;holder&amp;nbsp;idiom,&amp;nbsp;is&amp;nbsp;as&amp;nbsp;lazy&amp;nbsp;as&amp;nbsp;possible,&amp;nbsp;and&amp;nbsp;works&amp;nbsp;in&amp;nbsp;all&amp;nbsp;known&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;Java.&amp;nbsp;It&amp;nbsp;takes&amp;nbsp;advantage&lt;br&gt;
of&amp;nbsp;language&amp;nbsp;guarantees&amp;nbsp;about&amp;nbsp;class&amp;nbsp;initialization,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;therefore&amp;nbsp;work&amp;nbsp;correctly&amp;nbsp;in&amp;nbsp;all&amp;nbsp;Java-compliant&amp;nbsp;&lt;br&gt;
compilers&amp;nbsp;and&amp;nbsp;virtual&amp;nbsp;machines.&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Private&amp;nbsp;constructor&amp;nbsp;prevents&amp;nbsp;instantiation&amp;nbsp;from&amp;nbsp;other&amp;nbsp;classes&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Singleton()&amp;nbsp;{&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;SingletonHolder&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;on&amp;nbsp;the&amp;nbsp;first&amp;nbsp;execution&amp;nbsp;of&amp;nbsp;Singleton.getInstance()&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;or&amp;nbsp;the&amp;nbsp;first&amp;nbsp;access&amp;nbsp;to&amp;nbsp;SingletonHolder.INSTANCE,&amp;nbsp;not&amp;nbsp;before.&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;class&amp;nbsp;SingletonHolder&amp;nbsp;{&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;SingletonHolder.INSTANCE;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;</questionanswer>
  </question>
  <question id="2_6_5_0:2" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;#160;pattern,&amp;#160;&lt;br&gt;
double&amp;#160;checking&amp;#160;VS&amp;#160;Initialization&amp;#160;on&amp;#160;demand&amp;#160;idiom,&amp;#160;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Double&amp;nbsp;checking&amp;nbsp;:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;SingletonDemo&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;volatile&amp;nbsp;SingletonDemo&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;SingletonDemo()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;SingletonDemo&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized&amp;nbsp;(SingletonDemo&amp;nbsp;.class){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(instance&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instance&amp;nbsp;=&amp;nbsp;new&amp;nbsp;SingletonDemo&amp;nbsp;();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;instance;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
======&lt;br&gt;
Initialization&amp;nbsp;on&amp;nbsp;Demand:&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Singleton&amp;nbsp;{&lt;br&gt;
private&amp;nbsp;Singleton()&amp;nbsp;{&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
private&amp;nbsp;static&amp;nbsp;class&amp;nbsp;LazyHolder&amp;nbsp;{&lt;br&gt;
private&amp;nbsp;static&amp;nbsp;final&amp;nbsp;Singleton&amp;nbsp;INSTANCE&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Singleton();&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;static&amp;nbsp;Singleton&amp;nbsp;getInstance()&amp;nbsp;{&lt;br&gt;
return&amp;nbsp;LazyHolder.INSTANCE;&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Read&amp;nbsp;more:&amp;nbsp;http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz2rux0dBCF&lt;br&gt;
&lt;br&gt;
WIKI:&lt;br&gt;
University&amp;nbsp;of&amp;nbsp;Maryland&amp;nbsp;Computer&amp;nbsp;Science&amp;nbsp;researcher&amp;nbsp;Bill&amp;nbsp;Pugh&amp;nbsp;has&amp;nbsp;written&amp;nbsp;about&amp;nbsp;the&amp;nbsp;code&lt;br&gt;
&amp;nbsp;issues&amp;nbsp;underlying&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;implemented&amp;nbsp;in&amp;nbsp;Java.[10]&amp;nbsp;Pugh's&amp;nbsp;efforts&amp;nbsp;on&amp;nbsp;the&lt;br&gt;
&amp;nbsp;"Double-checked&amp;nbsp;locking"&amp;nbsp;idiom&amp;nbsp;led&amp;nbsp;to&amp;nbsp;changes&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;memory&amp;nbsp;model&amp;nbsp;in&amp;nbsp;Java&amp;nbsp;5&amp;nbsp;and&amp;nbsp;to&amp;nbsp;what&amp;nbsp;is&lt;br&gt;
&amp;nbsp;generally&amp;nbsp;regarded&amp;nbsp;as&amp;nbsp;the&amp;nbsp;standard&amp;nbsp;method&amp;nbsp;to&amp;nbsp;implement&amp;nbsp;Singletons&amp;nbsp;in&amp;nbsp;Java.&amp;nbsp;The&amp;nbsp;technique&amp;nbsp;known&amp;nbsp;as&amp;nbsp;the&lt;br&gt;
&amp;nbsp;initialization&amp;nbsp;on&amp;nbsp;demand&amp;nbsp;holder&amp;nbsp;idiom,&amp;nbsp;is&amp;nbsp;as&amp;nbsp;lazy&amp;nbsp;as&amp;nbsp;possible,&amp;nbsp;and&amp;nbsp;works&amp;nbsp;in&amp;nbsp;all&amp;nbsp;known&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;Java.&lt;br&gt;
It&amp;nbsp;takes&amp;nbsp;advantage&amp;nbsp;of&amp;nbsp;language&amp;nbsp;guarantees&amp;nbsp;about&amp;nbsp;class&amp;nbsp;initialization,&amp;nbsp;and&amp;nbsp;will&amp;nbsp;therefore&amp;nbsp;work&amp;nbsp;correctly&amp;nbsp;in&lt;br&gt;
all&amp;nbsp;Java-compliant&amp;nbsp;compilers&amp;nbsp;and&amp;nbsp;virtual&amp;nbsp;machines.&lt;br&gt;
The&amp;nbsp;nested&amp;nbsp;class&amp;nbsp;is&amp;nbsp;referenced&amp;nbsp;no&amp;nbsp;earlier&amp;nbsp;(and&amp;nbsp;therefore&amp;nbsp;loaded&amp;nbsp;no&amp;nbsp;earlier&amp;nbsp;by&amp;nbsp;the&amp;nbsp;class&amp;nbsp;loader)&amp;nbsp;than&amp;nbsp;the&amp;nbsp;moment&lt;br&gt;
that&amp;nbsp;getInstance()&amp;nbsp;is&amp;nbsp;called.&amp;nbsp;Thus,&amp;nbsp;this&amp;nbsp;solution&amp;nbsp;is&amp;nbsp;thread-safe&amp;nbsp;without&amp;nbsp;requiring&amp;nbsp;special&amp;nbsp;language&amp;nbsp;constructs&amp;nbsp;&lt;br&gt;
(i.e.&amp;nbsp;volatile&amp;nbsp;or&amp;nbsp;synchronized).&lt;br&gt;
&lt;br&gt;
Initialization&amp;nbsp;on&amp;nbsp;Demand&amp;nbsp;is&amp;nbsp;Thread-Safe:&lt;br&gt;
The&amp;nbsp;implementation&amp;nbsp;relies&amp;nbsp;on&amp;nbsp;the&amp;nbsp;well-specified&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;of&amp;nbsp;execution&amp;nbsp;within&amp;nbsp;the&amp;nbsp;Java&amp;nbsp;Virtual&amp;nbsp;&lt;br&gt;
Machine&amp;nbsp;(JVM);&amp;nbsp;see&amp;nbsp;section&amp;nbsp;12.4&amp;nbsp;of&amp;nbsp;Java&amp;nbsp;Language&amp;nbsp;Specification&amp;nbsp;(JLS)&amp;nbsp;for&amp;nbsp;details.&lt;br&gt;
When&amp;nbsp;the&amp;nbsp;class&amp;nbsp;Something&amp;nbsp;is&amp;nbsp;loaded&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JVM,&amp;nbsp;the&amp;nbsp;class&amp;nbsp;goes&amp;nbsp;through&amp;nbsp;initialization.&amp;nbsp;Since&amp;nbsp;the&amp;nbsp;class&amp;nbsp;does&lt;br&gt;
&amp;nbsp;not&amp;nbsp;have&amp;nbsp;any&amp;nbsp;static&amp;nbsp;variables&amp;nbsp;to&amp;nbsp;initialize,&amp;nbsp;the&amp;nbsp;initialization&amp;nbsp;completes&amp;nbsp;trivially.&amp;nbsp;The&amp;nbsp;static&amp;nbsp;class&amp;nbsp;definition&amp;nbsp;LazyHolder&amp;nbsp;&lt;br&gt;
within&amp;nbsp;it&amp;nbsp;is&amp;nbsp;not&amp;nbsp;initialized&amp;nbsp;until&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;determines&amp;nbsp;that&amp;nbsp;LazyHolder&amp;nbsp;must&amp;nbsp;be&amp;nbsp;executed.&lt;br&gt;
The&amp;nbsp;static&amp;nbsp;class&amp;nbsp;LazyHolder&amp;nbsp;is&amp;nbsp;only&amp;nbsp;executed&amp;nbsp;when&amp;nbsp;the&amp;nbsp;static&amp;nbsp;method&amp;nbsp;getInstance&amp;nbsp;is&amp;nbsp;invoked&amp;nbsp;on&amp;nbsp;the&amp;nbsp;class&amp;nbsp;Something,&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;first&amp;nbsp;time&amp;nbsp;this&amp;nbsp;happens&amp;nbsp;the&amp;nbsp;JVM&amp;nbsp;will&amp;nbsp;load&amp;nbsp;and&amp;nbsp;initialize&amp;nbsp;the&amp;nbsp;LazyHolder&amp;nbsp;class.&amp;nbsp;The&amp;nbsp;initialization&amp;nbsp;of&amp;nbsp;the&amp;nbsp;LazyHolder&lt;br&gt;
class&amp;nbsp;results&amp;nbsp;in&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;INSTANCE&amp;nbsp;being&amp;nbsp;initialized&amp;nbsp;by&amp;nbsp;executing&amp;nbsp;the&amp;nbsp;(private)&amp;nbsp;constructor&amp;nbsp;for&amp;nbsp;the&amp;nbsp;outer&amp;nbsp;&lt;br&gt;
class&amp;nbsp;Something.&amp;nbsp;Since&amp;nbsp;the&amp;nbsp;class&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;is&amp;nbsp;guaranteed&amp;nbsp;by&amp;nbsp;the&amp;nbsp;JLS&amp;nbsp;to&amp;nbsp;be&amp;nbsp;serial,&amp;nbsp;i.e.,&amp;nbsp;non-concurrent,&amp;nbsp;&lt;br&gt;
no&amp;nbsp;further&amp;nbsp;synchronization&amp;nbsp;is&amp;nbsp;required&amp;nbsp;in&amp;nbsp;the&amp;nbsp;static&amp;nbsp;getInstance&amp;nbsp;method&amp;nbsp;during&amp;nbsp;loading&amp;nbsp;and&amp;nbsp;initialization.&amp;nbsp;And&amp;nbsp;since&amp;nbsp;&lt;br&gt;
the&amp;nbsp;initialization&amp;nbsp;phase&amp;nbsp;writes&amp;nbsp;the&amp;nbsp;static&amp;nbsp;variable&amp;nbsp;INSTANCE&amp;nbsp;in&amp;nbsp;a&amp;nbsp;serial&amp;nbsp;operation,&amp;nbsp;all&amp;nbsp;subsequent&amp;nbsp;concurrent&amp;nbsp;invocations&amp;nbsp;of&amp;nbsp;the&amp;nbsp;getInstance&amp;nbsp;will&amp;nbsp;return&amp;nbsp;the&amp;nbsp;same&amp;nbsp;correctly&amp;nbsp;initialized&amp;nbsp;INSTANCE&amp;nbsp;without&amp;nbsp;incurring&amp;nbsp;any&amp;nbsp;additional&amp;nbsp;synchronization&amp;nbsp;overhead.&lt;br&gt;
&lt;br&gt;
Read&amp;nbsp;more:&amp;nbsp;http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz2ruwrxJRo</questionanswer>
  </question>
  <question id="2_6_5_0:3" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;pattern,&amp;nbsp;describe.&amp;nbsp;Provide&amp;nbsp;example.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;

&lt;img&amp;nbsp;width='670'&amp;nbsp;height='450'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/Abstract_factory_UML.svg.png'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;pattern&amp;nbsp;provides&amp;nbsp;a&amp;nbsp;way&amp;nbsp;to&amp;nbsp;encapsulate&amp;nbsp;a&amp;nbsp;group&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;individual&amp;nbsp;factories&amp;nbsp;that&amp;nbsp;have&amp;nbsp;a&lt;br&gt;
&amp;nbsp;common&amp;nbsp;theme&amp;nbsp;without&amp;nbsp;specifying&amp;nbsp;their&amp;nbsp;concrete&amp;nbsp;classes.[1]&amp;nbsp;In&amp;nbsp;normal&amp;nbsp;usage,&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;client&amp;nbsp;software&amp;nbsp;creates&amp;nbsp;a&lt;br&gt;
concrete&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;and&amp;nbsp;then&amp;nbsp;uses&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;interface&amp;nbsp;of&amp;nbsp;the&amp;nbsp;factory&amp;nbsp;to&amp;nbsp;create&amp;nbsp;the&amp;nbsp;&lt;br&gt;
concrete&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;are&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;theme.&amp;nbsp;The&amp;nbsp;client&amp;nbsp;doesn't&amp;nbsp;know&amp;nbsp;(or&amp;nbsp;care)&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;which&amp;nbsp;concrete&amp;nbsp;&lt;br&gt;
objects&amp;nbsp;it&amp;nbsp;gets&amp;nbsp;from&amp;nbsp;each&amp;nbsp;of&amp;nbsp;these&amp;nbsp;internal&amp;nbsp;factories,&amp;nbsp;since&amp;nbsp;it&amp;nbsp;uses&amp;nbsp;only&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generic&amp;nbsp;interfaces&amp;nbsp;of&amp;nbsp;their&amp;nbsp;products.&lt;br&gt;
This&amp;nbsp;pattern&amp;nbsp;separates&amp;nbsp;the&amp;nbsp;details&amp;nbsp;of&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;a&amp;nbsp;set&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;from&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;their&amp;nbsp;general&amp;nbsp;usage&amp;nbsp;and&amp;nbsp;relies&amp;nbsp;on&amp;nbsp;&lt;br&gt;
object&amp;nbsp;composition,&amp;nbsp;as&amp;nbsp;object&amp;nbsp;creation&amp;nbsp;is&amp;nbsp;implemented&amp;nbsp;in&amp;nbsp;methods&amp;nbsp;exposed&amp;nbsp;in&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;factory&amp;nbsp;interface.&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;example&amp;nbsp;of&amp;nbsp;this&amp;nbsp;would&amp;nbsp;be&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;class&amp;nbsp;DocumentCreator&amp;nbsp;that&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides&amp;nbsp;interfaces&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;number&lt;br&gt;
&amp;nbsp;of&amp;nbsp;products&amp;nbsp;(e.g.&amp;nbsp;createLetter()&amp;nbsp;and&amp;nbsp;createResume()).&amp;nbsp;The&amp;nbsp;system&amp;nbsp;would&amp;nbsp;have&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;any&amp;nbsp;number&amp;nbsp;of&amp;nbsp;derived&amp;nbsp;concrete&amp;nbsp;versions&amp;nbsp;of&amp;nbsp;the&lt;br&gt;
DocumentCreator&amp;nbsp;class&amp;nbsp;like&amp;nbsp;FancyDocumentCreator&amp;nbsp;or&amp;nbsp;ModernDocumentCreator,&amp;nbsp;each&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with&amp;nbsp;a&amp;nbsp;different&amp;nbsp;&lt;br&gt;
implementation&amp;nbsp;of&amp;nbsp;createLetter()&amp;nbsp;and&amp;nbsp;createResume()&amp;nbsp;that&amp;nbsp;would&amp;nbsp;create&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;corresponding&amp;nbsp;object&amp;nbsp;like&amp;nbsp;FancyLetter&amp;nbsp;or&amp;nbsp;ModernResume.&lt;br&gt;
Each&amp;nbsp;of&amp;nbsp;these&amp;nbsp;products&amp;nbsp;is&amp;nbsp;derived&amp;nbsp;from&amp;nbsp;a&amp;nbsp;simple&amp;nbsp;abstract&amp;nbsp;class&amp;nbsp;like&amp;nbsp;Letter&amp;nbsp;or&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Resume&amp;nbsp;of&amp;nbsp;which&amp;nbsp;the&amp;nbsp;client&amp;nbsp;is&amp;nbsp;aware.&lt;br&gt;
The&amp;nbsp;client&amp;nbsp;code&amp;nbsp;would&amp;nbsp;get&amp;nbsp;an&amp;nbsp;appropriate&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;DocumentCreator&amp;nbsp;and&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;call&amp;nbsp;its&amp;nbsp;factory&amp;nbsp;methods.&lt;br&gt;
&lt;br&gt;
From&amp;nbsp;stackoverflow&lt;br&gt;
Abstract&amp;nbsp;factory&amp;nbsp;is&amp;nbsp;normally&amp;nbsp;used&amp;nbsp;for&amp;nbsp;things&amp;nbsp;like&amp;nbsp;dependency&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;injection/strategy,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;create&lt;br&gt;
&amp;nbsp;a&amp;nbsp;whole&amp;nbsp;family&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;of&amp;nbsp;&amp;quot;the&amp;nbsp;same&amp;nbsp;kind&amp;quot;,&amp;nbsp;yet&amp;nbsp;have&amp;nbsp;some&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;common&amp;nbsp;base&amp;nbsp;classes.&amp;nbsp;&lt;br&gt;
Here's&amp;nbsp;a&amp;nbsp;vaguely&amp;nbsp;fruit-related&amp;nbsp;example.&amp;nbsp;The&amp;nbsp;use&amp;nbsp;case&amp;nbsp;here&amp;nbsp;is&amp;nbsp;that&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;we&amp;nbsp;don't&amp;nbsp;accidentally&amp;nbsp;use&amp;nbsp;an&lt;br&gt;
OrangePicker&amp;nbsp;on&amp;nbsp;an&amp;nbsp;Apple.&amp;nbsp;As&amp;nbsp;long&amp;nbsp;at&amp;nbsp;we&amp;nbsp;get&amp;nbsp;our&amp;nbsp;Fruit&amp;nbsp;and&amp;nbsp;Picker&amp;nbsp;from&amp;nbsp;the&amp;nbsp;same&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;factory,&amp;nbsp;they&amp;nbsp;will&amp;nbsp;match.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
EXAMPLE:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//AbstractFactory&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;AbstractWidgetFactory{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Window&amp;nbsp;createWindow();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
//ConcreteFactory2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MacOSXWidgetFactory&amp;nbsp;implements&amp;nbsp;AbstractWidgetFactory{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//create&amp;nbsp;a&amp;nbsp;MacOSXWindow&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Window&amp;nbsp;createWindow(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MacOSXWindow&amp;nbsp;window&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MacOSXWindow();&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Creating&amp;nbsp;Mac&amp;nbsp;OS&amp;nbsp;window&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;window;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
//ConcreteFactory1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MsWindowsWidgetFactory&amp;nbsp;implements&amp;nbsp;AbstractWidgetFactory{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//create&amp;nbsp;an&amp;nbsp;MSWindow&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Window&amp;nbsp;createWindow(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MSWindow&amp;nbsp;window&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MSWindow();&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Creating&amp;nbsp;windows&amp;nbsp;window&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;window;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Our&amp;nbsp;AbstractProduct&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;interface&amp;nbsp;Window{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setTitle(String&amp;nbsp;text);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;repaint();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
//ConcreteProductA2&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MacOSXWindow&amp;nbsp;implements&amp;nbsp;Window{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setTitle(String&amp;nbsp;arg){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Mac&amp;nbsp;OSX&amp;nbsp;specific&amp;nbsp;behaviour&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;repaint(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//Mac&amp;nbsp;OSX&amp;nbsp;specific&amp;nbsp;behaviour&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Mac&amp;nbsp;OS&amp;nbsp;window&amp;nbsp;repainted&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
//ConcreteProductA1&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;MSWindow&amp;nbsp;implements&amp;nbsp;Window{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setTitle(String&amp;nbsp;text){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//MS&amp;nbsp;Windows&amp;nbsp;specific&amp;nbsp;behaviour&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;repaint(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//MS&amp;nbsp;Windows&amp;nbsp;specific&amp;nbsp;behaviour&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Windows&amp;nbsp;window&amp;nbsp;painted&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
//Client&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;GUIBuilder{&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildWindow(AbstractWidgetFactory&amp;nbsp;widgetFactory){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Window&amp;nbsp;window&amp;nbsp;=&amp;nbsp;widgetFactory.createWindow();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;window.setTitle(&amp;quot;New&amp;nbsp;Window&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;window.repaint();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;AbstractFactoryProgram&amp;nbsp;{&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GUIBuilder&amp;nbsp;builder&amp;nbsp;=&amp;nbsp;new&amp;nbsp;GUIBuilder();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AbstractWidgetFactory&amp;nbsp;widgetFactory&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;platform&amp;nbsp;=&amp;nbsp;System.getProperty(&amp;quot;os.name&amp;quot;).toLowerCase();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//check&amp;nbsp;what&amp;nbsp;platform&amp;nbsp;we're&amp;nbsp;on&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(platform.contains(&amp;quot;MACOSX&amp;quot;))&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widgetFactory&amp;nbsp;&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MacOSXWidgetFactory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;widgetFactory&amp;nbsp;&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MsWindowsWidgetFactory();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;builder.buildWindow(widgetFactory);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;on&amp;nbsp;UML&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='660'&amp;nbsp;height='430'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/abstract_factory_impl.PNG'/&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_0:4" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Design&amp;nbsp;Patterns:&amp;nbsp;Factory,&amp;nbsp;Factory&amp;nbsp;method,&amp;nbsp;Abstract&amp;nbsp;Factory.&amp;nbsp;&lt;br&gt;
Describe&amp;nbsp;differnce.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>Factory&amp;nbsp;is&amp;nbsp;"fixed",&amp;nbsp;in&amp;nbsp;that&amp;nbsp;you&amp;nbsp;have&amp;nbsp;just&amp;nbsp;one&amp;nbsp;implementation&amp;nbsp;with&amp;nbsp;no&amp;nbsp;subclassing.&lt;br&gt;
In&amp;nbsp;this&amp;nbsp;case,&amp;nbsp;you&amp;nbsp;will&amp;nbsp;have&amp;nbsp;a&amp;nbsp;class&amp;nbsp;like&amp;nbsp;this:&lt;br&gt;
class&amp;nbsp;FruitFactory&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Apple&amp;nbsp;makeApple()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Code&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;an&amp;nbsp;Apple&amp;nbsp;here.&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;public&amp;nbsp;Orange&amp;nbsp;makeOrange()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;Code&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;an&amp;nbsp;orange&amp;nbsp;here.&lt;br&gt;
&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Factory&amp;nbsp;method&amp;nbsp;is&amp;nbsp;generally&amp;nbsp;used&amp;nbsp;when&amp;nbsp;you&amp;nbsp;have&amp;nbsp;some&amp;nbsp;generic&amp;nbsp;processing&amp;nbsp;in&amp;nbsp;a&amp;nbsp;class,&lt;br&gt;
but&amp;nbsp;want&amp;nbsp;to&amp;nbsp;vary&amp;nbsp;which&amp;nbsp;kind&amp;nbsp;of&amp;nbsp;fruit&amp;nbsp;you&amp;nbsp;actually&amp;nbsp;use.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;-&amp;nbsp;Instead&amp;nbsp;of&amp;nbsp;whole&amp;nbsp;separate&amp;nbsp;class&amp;nbsp;for&amp;nbsp;factory,&amp;nbsp;just&amp;nbsp;add&amp;nbsp;one&amp;nbsp;method&amp;nbsp;in&amp;nbsp;that&amp;nbsp;class&amp;nbsp;itself&amp;nbsp;as&amp;nbsp;a&amp;nbsp;factory.&lt;br&gt;
&lt;br&gt;
Abstract&amp;nbsp;factory&amp;nbsp;is&amp;nbsp;normally&amp;nbsp;used&amp;nbsp;for&amp;nbsp;things&amp;nbsp;like&amp;nbsp;dependency&amp;nbsp;injection/strategy,&amp;nbsp;or&amp;nbsp;if&amp;nbsp;you&lt;br&gt;
&amp;nbsp;want&amp;nbsp;to&amp;nbsp;be&amp;nbsp;able&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;whole&amp;nbsp;family&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;need&amp;nbsp;to&amp;nbsp;be&amp;nbsp;of&amp;nbsp;"the&amp;nbsp;same&amp;nbsp;kind",&lt;br&gt;
&amp;nbsp;yet&amp;nbsp;have&amp;nbsp;some&amp;nbsp;common&amp;nbsp;base&amp;nbsp;classes.&amp;nbsp;Here's&amp;nbsp;a&amp;nbsp;vaguely&amp;nbsp;fruit-related&amp;nbsp;example.&amp;nbsp;The&amp;nbsp;use&amp;nbsp;&lt;br&gt;
case&amp;nbsp;here&amp;nbsp;is&amp;nbsp;that&amp;nbsp;we&amp;nbsp;want&amp;nbsp;to&amp;nbsp;make&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;we&amp;nbsp;don't&amp;nbsp;accidentally&amp;nbsp;use&amp;nbsp;an&amp;nbsp;OrangePicker&amp;nbsp;on&amp;nbsp;an&amp;nbsp;&lt;br&gt;
Apple.&amp;nbsp;As&amp;nbsp;long&amp;nbsp;at&amp;nbsp;we&amp;nbsp;get&amp;nbsp;our&amp;nbsp;Fruit&amp;nbsp;and&amp;nbsp;Picker&amp;nbsp;from&amp;nbsp;the&amp;nbsp;same&amp;nbsp;factory,&amp;nbsp;they&amp;nbsp;will&amp;nbsp;match.&lt;br&gt;
====&lt;br&gt;
&lt;br&gt;
Abstract&amp;nbsp;Factory&amp;nbsp;vs.&amp;nbsp;Factory&amp;nbsp;Method&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;methods&amp;nbsp;of&amp;nbsp;an&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;are&amp;nbsp;implemented&amp;nbsp;as&amp;nbsp;Factory&amp;nbsp;Methods.&amp;nbsp;Both&lt;br&gt;
the&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&amp;nbsp;and&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;Pattern&amp;nbsp;decouples&amp;nbsp;the&amp;nbsp;client&lt;br&gt;
system&amp;nbsp;from&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;implementation&amp;nbsp;classes&amp;nbsp;through&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;types&amp;nbsp;and&amp;nbsp;factories.&lt;br&gt;
The&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;creates&amp;nbsp;objects&amp;nbsp;through&amp;nbsp;inheritance&amp;nbsp;where&amp;nbsp;the&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;creates&lt;br&gt;
objects&amp;nbsp;through&amp;nbsp;composition.&lt;br&gt;
&lt;br&gt;
!!!!!&lt;br&gt;
The&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&amp;nbsp;consists&amp;nbsp;of&amp;nbsp;an&amp;nbsp;AbstractFactory,&amp;nbsp;ConcreteFactory,&amp;nbsp;AbstractProduct,&lt;br&gt;
ConcreteProduct&amp;nbsp;and&amp;nbsp;Client.&lt;br&gt;
&lt;br&gt;
!!!&amp;nbsp;How&amp;nbsp;to&amp;nbsp;implement&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;The&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&amp;nbsp;can&amp;nbsp;be&amp;nbsp;implemented&amp;nbsp;using&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;Pattern,&lt;br&gt;
Prototype&amp;nbsp;Pattern&amp;nbsp;or&amp;nbsp;the&amp;nbsp;Singleton&amp;nbsp;Pattern.&amp;nbsp;The&amp;nbsp;ConcreteFactory&amp;nbsp;object&amp;nbsp;can&amp;nbsp;be&amp;nbsp;implemented&lt;br&gt;
as&amp;nbsp;a&amp;nbsp;Singleton&amp;nbsp;as&amp;nbsp;only&amp;nbsp;one&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;the&amp;nbsp;ConcreteFactory&amp;nbsp;object&amp;nbsp;is&amp;nbsp;needed.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;-&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;simplified&amp;nbsp;version&amp;nbsp;of&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;pattern.&amp;nbsp;Factory&amp;nbsp;Method&lt;br&gt;
pattern&amp;nbsp;is&amp;nbsp;responsible&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;products&amp;nbsp;that&amp;nbsp;belong&amp;nbsp;to&amp;nbsp;one&amp;nbsp;family,&amp;nbsp;while&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;pattern&lt;br&gt;
deals&amp;nbsp;with&amp;nbsp;multiple&amp;nbsp;families&amp;nbsp;of&amp;nbsp;products.&lt;br&gt;
&lt;br&gt;
&amp;nbsp;-&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;uses&amp;nbsp;interfaces&amp;nbsp;and&amp;nbsp;abstract&amp;nbsp;classes&amp;nbsp;to&amp;nbsp;decouple&amp;nbsp;the&amp;nbsp;client&amp;nbsp;from&amp;nbsp;the&amp;nbsp;generator&amp;nbsp;class&lt;br&gt;
and&amp;nbsp;the&amp;nbsp;resulting&amp;nbsp;products.&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;has&amp;nbsp;a&amp;nbsp;generator&amp;nbsp;that&amp;nbsp;is&amp;nbsp;a&amp;nbsp;container&amp;nbsp;for&amp;nbsp;several&amp;nbsp;factory&amp;nbsp;methods,&lt;br&gt;
along&amp;nbsp;with&amp;nbsp;interfaces&amp;nbsp;decoupling&amp;nbsp;the&amp;nbsp;client&amp;nbsp;from&amp;nbsp;the&amp;nbsp;generator&amp;nbsp;and&amp;nbsp;the&amp;nbsp;products.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;to&amp;nbsp;Use&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;Pattern&lt;br&gt;
Use&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;there&amp;nbsp;is&amp;nbsp;a&amp;nbsp;need&amp;nbsp;to&amp;nbsp;decouple&amp;nbsp;a&amp;nbsp;client&amp;nbsp;from&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;product&amp;nbsp;that&amp;nbsp;it&amp;nbsp;&lt;br&gt;
uses.&amp;nbsp;Use&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;to&amp;nbsp;relieve&amp;nbsp;a&amp;nbsp;client&amp;nbsp;of&amp;nbsp;responsibility&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;and&amp;nbsp;configuring&amp;nbsp;&lt;br&gt;
instances&amp;nbsp;of&amp;nbsp;a&amp;nbsp;product.&lt;br&gt;
&lt;br&gt;
When&amp;nbsp;to&amp;nbsp;Use&amp;nbsp;the&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&lt;br&gt;
Use&amp;nbsp;the&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;pattern&amp;nbsp;when&amp;nbsp;clients&amp;nbsp;must&amp;nbsp;be&amp;nbsp;decoupled&amp;nbsp;from&amp;nbsp;product&lt;br&gt;
classes.&amp;nbsp;Especially&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;program&amp;nbsp;configuration&amp;nbsp;and&amp;nbsp;modification.&amp;nbsp;The&amp;nbsp;Abstract&amp;nbsp;Factory&lt;br&gt;
pattern&amp;nbsp;can&amp;nbsp;also&amp;nbsp;enforce&amp;nbsp;constraints&amp;nbsp;about&amp;nbsp;which&amp;nbsp;classes&amp;nbsp;must&amp;nbsp;be&amp;nbsp;used&amp;nbsp;with&amp;nbsp;others.&lt;br&gt;
It&amp;nbsp;may&amp;nbsp;be&amp;nbsp;a&amp;nbsp;lot&amp;nbsp;of&amp;nbsp;work&amp;nbsp;to&amp;nbsp;make&amp;nbsp;new&amp;nbsp;concrete&amp;nbsp;factories.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Examples:&lt;br&gt;
Abstract&amp;nbsp;Factory&amp;nbsp;Example&amp;nbsp;1&lt;br&gt;
&lt;br&gt;
This&amp;nbsp;specification&amp;nbsp;for&amp;nbsp;the&amp;nbsp;disks&amp;nbsp;to&amp;nbsp;prepare&amp;nbsp;different&amp;nbsp;types&amp;nbsp;of&amp;nbsp;pasta&amp;nbsp;in&amp;nbsp;a&amp;nbsp;pasta&amp;nbsp;maker&amp;nbsp;&lt;br&gt;
is&amp;nbsp;the&amp;nbsp;Abstract&amp;nbsp;Factory,&amp;nbsp;and&amp;nbsp;each&amp;nbsp;specific&amp;nbsp;disk&amp;nbsp;is&amp;nbsp;a&amp;nbsp;Factory.&amp;nbsp;all&amp;nbsp;Factories&amp;nbsp;(pasta&amp;nbsp;maker&amp;nbsp;disks)&lt;br&gt;
inherit&amp;nbsp;their&amp;nbsp;properties&amp;nbsp;from&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;Factory.&amp;nbsp;Each&amp;nbsp;individual&amp;nbsp;disk&amp;nbsp;contains&amp;nbsp;the&amp;nbsp;&lt;br&gt;
information&amp;nbsp;of&amp;nbsp;how&amp;nbsp;to&amp;nbsp;create&amp;nbsp;the&amp;nbsp;pasta,&amp;nbsp;and&amp;nbsp;the&amp;nbsp;pasta&amp;nbsp;maker&amp;nbsp;does&amp;nbsp;not.&lt;br&gt;
&lt;br&gt;
Abstract&amp;nbsp;Factory&amp;nbsp;Example&amp;nbsp;2:&lt;br&gt;
The&amp;nbsp;Stamping&amp;nbsp;Equipment&amp;nbsp;corresponds&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Abstract&amp;nbsp;Factory,&amp;nbsp;as&amp;nbsp;it&amp;nbsp;is&amp;nbsp;an&amp;nbsp;interface&lt;br&gt;
for&amp;nbsp;operations&amp;nbsp;that&amp;nbsp;create&amp;nbsp;abstract&amp;nbsp;product&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;dies&amp;nbsp;correspond&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Concrete&amp;nbsp;Factory,&lt;br&gt;
as&amp;nbsp;they&amp;nbsp;create&amp;nbsp;a&amp;nbsp;concrete&amp;nbsp;product.&amp;nbsp;Each&amp;nbsp;part&amp;nbsp;category&amp;nbsp;(Hood,&amp;nbsp;Door,&amp;nbsp;etc.)&amp;nbsp;corresponds&amp;nbsp;&lt;br&gt;
to&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;product.&amp;nbsp;Specific&amp;nbsp;parts&amp;nbsp;(i.e.,&amp;nbsp;driver&amp;nbsp;side&amp;nbsp;door&amp;nbsp;for&amp;nbsp;99&amp;nbsp;camry)&amp;nbsp;corresponds&amp;nbsp;to&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;products.&lt;br&gt;
&lt;br&gt;
Factory&amp;nbsp;Method&amp;nbsp;Example:&lt;br&gt;
The&amp;nbsp;toy&amp;nbsp;company&amp;nbsp;corresponds&amp;nbsp;to&amp;nbsp;the&amp;nbsp;Creator,&amp;nbsp;since&amp;nbsp;it&amp;nbsp;may&amp;nbsp;use&amp;nbsp;the&amp;nbsp;factory&lt;br&gt;
to&amp;nbsp;create&amp;nbsp;product&amp;nbsp;objects.&amp;nbsp;The&amp;nbsp;division&amp;nbsp;of&amp;nbsp;the&amp;nbsp;toy&amp;nbsp;company&amp;nbsp;that&amp;nbsp;manufactures&amp;nbsp;a&amp;nbsp;specific&amp;nbsp;type&amp;nbsp;of&amp;nbsp;toy&amp;nbsp;&lt;br&gt;
(horse&amp;nbsp;or&amp;nbsp;car)&amp;nbsp;corresponds&amp;nbsp;to&amp;nbsp;the&amp;nbsp;ConcreteCreator.</questionanswer>
  </question>
  <question id="2_6_5_0:5" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Builder&amp;nbsp;pattern&amp;nbsp;,&amp;nbsp;describe.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UML&amp;nbsp;diagram:&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='170'&amp;nbsp;alt='image'&amp;nbsp;src='/data/images/Builder.gif'/&gt;&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;builder&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;creation&amp;nbsp;software&amp;nbsp;design&amp;nbsp;pattern.&amp;nbsp;Unlike&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;abstract&amp;nbsp;factory&lt;br&gt;
pattern&amp;nbsp;and&amp;nbsp;the&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;pattern&amp;nbsp;whose&amp;nbsp;intention&amp;nbsp;is&amp;nbsp;to&amp;nbsp;enable&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;polymorphism,&lt;br&gt;
the&amp;nbsp;intention&amp;nbsp;of&amp;nbsp;the&amp;nbsp;builder&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;to&amp;nbsp;find&amp;nbsp;a&amp;nbsp;solution&amp;nbsp;to&amp;nbsp;&amp;nbsp;!!!!&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;telescoping&amp;nbsp;&lt;br&gt;
constructor&amp;nbsp;anti-pattern.&amp;nbsp;!!!!&amp;nbsp;The&amp;nbsp;telescoping&amp;nbsp;constructor&amp;nbsp;anti-pattern&amp;nbsp;occurs&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;when&amp;nbsp;&lt;br&gt;
the&amp;nbsp;increase&amp;nbsp;of&amp;nbsp;object&amp;nbsp;constructor&amp;nbsp;parameter&amp;nbsp;combination&amp;nbsp;leads&amp;nbsp;to&amp;nbsp;an&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;exponential&amp;nbsp;list&amp;nbsp;&lt;br&gt;
of&amp;nbsp;constructors.&amp;nbsp;Instead&amp;nbsp;of&amp;nbsp;using&amp;nbsp;numerous&amp;nbsp;constructors,&amp;nbsp;the&amp;nbsp;builder&amp;nbsp;pattern&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;uses&amp;nbsp;another&amp;nbsp;&lt;br&gt;
object,&amp;nbsp;a&amp;nbsp;builder,&amp;nbsp;that&amp;nbsp;receives&amp;nbsp;each&amp;nbsp;initialization&amp;nbsp;parameter&amp;nbsp;step&amp;nbsp;by&amp;nbsp;step&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&amp;nbsp;then&amp;nbsp;returns&amp;nbsp;&lt;br&gt;
the&amp;nbsp;resulting&amp;nbsp;constructed&amp;nbsp;object&amp;nbsp;at&amp;nbsp;once.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;builder&amp;nbsp;pattern&amp;nbsp;has&amp;nbsp;another&amp;nbsp;benefit.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;contain&lt;br&gt;
flat&amp;nbsp;data&amp;nbsp;(html&amp;nbsp;code,&amp;nbsp;SQL&amp;nbsp;query,&amp;nbsp;X.509&amp;nbsp;certificate...),&amp;nbsp;that&amp;nbsp;is&amp;nbsp;to&amp;nbsp;say,&amp;nbsp;data&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that&amp;nbsp;can't&amp;nbsp;be&amp;nbsp;easily&amp;nbsp;edited.&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;(from&amp;nbsp;wiki):&lt;br&gt;
&lt;br&gt;
However,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;worth&amp;nbsp;mentioning&amp;nbsp;that&amp;nbsp;this&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bit&amp;nbsp;different&amp;nbsp;to&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;one&amp;nbsp;presented&amp;nbsp;in&amp;nbsp;the&amp;nbsp;Gang&lt;br&gt;
of&amp;nbsp;Four&amp;nbsp;book.&amp;nbsp;While&amp;nbsp;the&amp;nbsp;original&amp;nbsp;pattern&amp;nbsp;focuses&amp;nbsp;on&amp;nbsp;abstracting&amp;nbsp;the&amp;nbsp;steps&amp;nbsp;of&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;construction&amp;nbsp;so&amp;nbsp;that&amp;nbsp;by&lt;br&gt;
varying&amp;nbsp;the&amp;nbsp;builder&amp;nbsp;implementation&amp;nbsp;used&amp;nbsp;we&amp;nbsp;can&amp;nbsp;get&amp;nbsp;a&amp;nbsp;different&amp;nbsp;result,&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pattern&amp;nbsp;explained&amp;nbsp;in&amp;nbsp;&lt;br&gt;
this&amp;nbsp;post&amp;nbsp;deals&amp;nbsp;with&amp;nbsp;removing&amp;nbsp;the&amp;nbsp;unnecessary&amp;nbsp;complexity&amp;nbsp;that&amp;nbsp;stems&amp;nbsp;from&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;multiple&amp;nbsp;constructors,&lt;br&gt;
multiple&amp;nbsp;optional&amp;nbsp;parameters&amp;nbsp;and&amp;nbsp;overuse&amp;nbsp;of&amp;nbsp;setters.&lt;br&gt;
&lt;br&gt;
package&amp;nbsp;com.ap.creational.builder;&lt;br&gt;
&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;User&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;firstName;&amp;nbsp;//&amp;nbsp;required&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;lastName;&amp;nbsp;//&amp;nbsp;required&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;int&amp;nbsp;age;&amp;nbsp;//&amp;nbsp;optional&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;phone;&amp;nbsp;//&amp;nbsp;optional&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;address;&amp;nbsp;//&amp;nbsp;optional&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getFirstName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;firstName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getLastName()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lastName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;getAge()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getPhone()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;phone;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;String&amp;nbsp;getAddress()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;address;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;User(UserBuilder&amp;nbsp;builder){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.firstName&amp;nbsp;=&amp;nbsp;builder.firstName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.lastName&amp;nbsp;=&amp;nbsp;builder.lastName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;builder.age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.phone&amp;nbsp;=&amp;nbsp;builder.phone;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.address&amp;nbsp;=&amp;nbsp;builder.address;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;class&amp;nbsp;UserBuilder{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;firstName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;final&amp;nbsp;String&amp;nbsp;lastName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;int&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;phone;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;String&amp;nbsp;address;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;UserBuilder(String&amp;nbsp;firstName,&amp;nbsp;String&amp;nbsp;lastName)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.firstName&amp;nbsp;=&amp;nbsp;firstName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.lastName&amp;nbsp;=&amp;nbsp;lastName;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;UserBuilder&amp;nbsp;age(int&amp;nbsp;age){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.age&amp;nbsp;=&amp;nbsp;age;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;UserBuilder&amp;nbsp;phone(String&amp;nbsp;phone){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.phone&amp;nbsp;=&amp;nbsp;phone;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;UserBuilder&amp;nbsp;address(String&amp;nbsp;address){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.address&amp;nbsp;=&amp;nbsp;address;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;this;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;User&amp;nbsp;build(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;User(this);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;

}&lt;br&gt;
&lt;br&gt;
==&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BuilderProgram&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Using&amp;nbsp;Builder&amp;nbsp;pattern&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;User&amp;nbsp;andrew&amp;nbsp;=&amp;nbsp;new&amp;nbsp;&amp;nbsp;User.UserBuilder(&amp;quot;andrew&amp;quot;,&amp;quot;lastname&amp;quot;).age(21).build();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(andrew.getFirstName()&amp;nbsp;+&amp;nbsp;&amp;quot;&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;andrew.getAge());&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
========&lt;br&gt;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br&gt;
BUT&amp;nbsp;,&amp;nbsp;on&amp;nbsp;some&amp;nbsp;sites&amp;nbsp;there&amp;nbsp;is&amp;nbsp;another&amp;nbsp;(longer&amp;nbsp;)&amp;nbsp;implementation.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;Builder&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;allows&amp;nbsp;to&amp;nbsp;create&amp;nbsp;a&amp;nbsp;complex&amp;nbsp;object&amp;nbsp;&lt;b&gt;step&amp;nbsp;by&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;step&lt;/b&gt;&amp;nbsp;and&amp;nbsp;also&amp;nbsp;enforces&amp;nbsp;a&lt;br&gt;
process&amp;nbsp;to&amp;nbsp;create&amp;nbsp;an&amp;nbsp;object&amp;nbsp;as&amp;nbsp;a&amp;nbsp;finished&amp;nbsp;product.&amp;nbsp;The&amp;nbsp;construction&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object&amp;nbsp;should&amp;nbsp;be&amp;nbsp;&lt;br&gt;
such&amp;nbsp;that&amp;nbsp;the&amp;nbsp;same&amp;nbsp;construction&amp;nbsp;process&amp;nbsp;can&amp;nbsp;create&amp;nbsp;different&amp;nbsp;representations.&amp;nbsp;&lt;br&gt;
Director&amp;nbsp;controls&amp;nbsp;the&amp;nbsp;construction&amp;nbsp;of&amp;nbsp;the&amp;nbsp;object&amp;nbsp;and&amp;nbsp;only&amp;nbsp;the&amp;nbsp;director&amp;nbsp;knows&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;what&amp;nbsp;type&amp;nbsp;&lt;br&gt;
of&amp;nbsp;object&amp;nbsp;to&amp;nbsp;create.&lt;br&gt;
&lt;br&gt;
Elements:&lt;br&gt;
-&amp;nbsp;Builder&amp;nbsp;-&amp;nbsp;Specifies&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;parts&amp;nbsp;of&amp;nbsp;a&amp;nbsp;product&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object.&amp;nbsp;&lt;br&gt;
It&amp;nbsp;defines&amp;nbsp;steps&amp;nbsp;for&amp;nbsp;the&amp;nbsp;construction&amp;nbsp;of&amp;nbsp;the&amp;nbsp;product&amp;nbsp;object.&lt;br&gt;
-&amp;nbsp;ConcreteBuilder&amp;nbsp;-&amp;nbsp;Constructs&amp;nbsp;and&amp;nbsp;assembles&amp;nbsp;parts&amp;nbsp;of&amp;nbsp;the&amp;nbsp;product&amp;nbsp;by&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementing&amp;nbsp;the&amp;nbsp;builder&amp;nbsp;interface.&lt;br&gt;
&amp;nbsp;Provides&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;retrieving&amp;nbsp;the&amp;nbsp;product.&lt;br&gt;
-&amp;nbsp;Director&amp;nbsp;-&amp;nbsp;Constructs&amp;nbsp;an&amp;nbsp;object&amp;nbsp;using&amp;nbsp;builder&amp;nbsp;interface.&amp;nbsp;&lt;br&gt;
-&amp;nbsp;Product&amp;nbsp;-&amp;nbsp;Represents&amp;nbsp;the&amp;nbsp;complex&amp;nbsp;object&amp;nbsp;under&amp;nbsp;construction.&amp;nbsp;ConcreteBuilder&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;builds&amp;nbsp;the&amp;nbsp;&lt;br&gt;
product's&amp;nbsp;internal&amp;nbsp;representation&amp;nbsp;and&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;process&amp;nbsp;by&amp;nbsp;which&amp;nbsp;it&amp;nbsp;is&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assembled.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;builder&amp;nbsp;pattern&amp;nbsp;has&amp;nbsp;another&amp;nbsp;benefit.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;be&amp;nbsp;used&amp;nbsp;for&amp;nbsp;objects&amp;nbsp;that&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;contain&amp;nbsp;flat&amp;nbsp;data&amp;nbsp;(html&amp;nbsp;code,&amp;nbsp;SQL&amp;nbsp;query,&amp;nbsp;X.509&amp;nbsp;certificate...),&amp;nbsp;that&amp;nbsp;is&amp;nbsp;to&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;say,&amp;nbsp;data&amp;nbsp;that&amp;nbsp;can't&amp;nbsp;be&amp;nbsp;easily&amp;nbsp;edited.Comparing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;generic&amp;nbsp;UML&amp;nbsp;diagram&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;of&amp;nbsp;builder&amp;nbsp;pattern:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;BookBuilder&amp;nbsp;(Builder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;TechnicalBookBuilder&amp;nbsp;(ConcreteBuilder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;FictionalBookBuilder&amp;nbsp;(ConcreteBuilder)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;BookWriter&amp;nbsp;(Director)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;Book&amp;nbsp;(Product)&lt;br&gt;
&lt;br&gt;
Book.java&amp;nbsp;(Product):&lt;br&gt;
package&amp;nbsp;org.arpit.javapostsforlearning.designpatterns;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Book&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;introduction;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;tableOfContent;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;preface;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;chapters;&lt;br&gt;
&amp;nbsp;String&amp;nbsp;glossary;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setIntroduction(String&amp;nbsp;introduction)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.introduction&amp;nbsp;=&amp;nbsp;introduction;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setTableOfContent(String&amp;nbsp;tableOfContent)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.tableOfContent&amp;nbsp;=&amp;nbsp;tableOfContent;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setPreface(String&amp;nbsp;preface)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.preface&amp;nbsp;=&amp;nbsp;preface;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setChapters(String&amp;nbsp;chapters)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.chapters&amp;nbsp;=&amp;nbsp;chapters;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;setGlossary(String&amp;nbsp;glossary)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.glossary&amp;nbsp;=&amp;nbsp;glossary;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
BookBuilder.java&amp;nbsp;(Builder):&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;BookBuilder&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildTableOfContent();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildPreface();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildIntroduction();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildChapters();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildGlossary();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Book&amp;nbsp;getBook();&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
TechnicalBookBuilder.java(ConcreteBuilder):&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;TechnicalBookBuilder&amp;nbsp;implements&amp;nbsp;BookBuilder{&lt;br&gt;
&amp;nbsp;private&amp;nbsp;Book&amp;nbsp;book;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;TechnicalBookBuilder()&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;book=new&amp;nbsp;Book();&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildTableOfContent()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;technical&amp;nbsp;table&amp;nbsp;of&amp;nbsp;content&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;technical&amp;nbsp;table&amp;nbsp;of&amp;nbsp;content&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildPreface()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;preface&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;preface&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildIntroduction()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;technical&amp;nbsp;introduction&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;technical&amp;nbsp;introduction&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildChapters()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;technical&amp;nbsp;chapters&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setChapters(&amp;quot;technical&amp;nbsp;chapters&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildGlossary()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;technical&amp;nbsp;glossary&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setGlossary(&amp;quot;Technical&amp;nbsp;glossary&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;Book&amp;nbsp;getBook()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;return&amp;nbsp;book;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
===&lt;br&gt;
FictionalBookBuilder.java(ConcreteBuilder):&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;FictionalBookBuilder&amp;nbsp;implements&amp;nbsp;BookBuilder{&lt;br&gt;
&amp;nbsp;private&amp;nbsp;Book&amp;nbsp;book;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;FictionalBookBuilder()&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;book=new&amp;nbsp;Book();&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildTableOfContent()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;fictional&amp;nbsp;table&amp;nbsp;of&amp;nbsp;content&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;fictional&amp;nbsp;table&amp;nbsp;of&amp;nbsp;content&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildPreface(){&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;preface&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;preface&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildIntroduction()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;fictional&amp;nbsp;introduction&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setTableOfContent(&amp;quot;fictional&amp;nbsp;introduction&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildChapters()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;fictional&amp;nbsp;chapters&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setChapters(&amp;quot;fictional&amp;nbsp;chapters&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;buildGlossary()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;printing&amp;nbsp;fictional&amp;nbsp;glossary&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;book.setGlossary(&amp;quot;Fictional&amp;nbsp;glossary&amp;quot;);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;Book&amp;nbsp;getBook()&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;return&amp;nbsp;book;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
BookWriter.java(Director):&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BookWriter&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;BookBuilder&amp;nbsp;bookBuilder;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;BookWriter(BookBuilder&amp;nbsp;bookBuilder)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;super();&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder&amp;nbsp;=&amp;nbsp;bookBuilder;&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;Book&amp;nbsp;getBook()&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;return&amp;nbsp;this.bookBuilder.getBook();&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printBook()&lt;br&gt;
&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder.buildTableOfContent();&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder.buildPreface();&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder.buildIntroduction();&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder.buildChapters();&lt;br&gt;
&amp;nbsp;&amp;nbsp;this.bookBuilder.buildGlossary();&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
BuilderDesignPatternMain.java:&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;BuilderDesignPatternMain&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;&lt;br&gt;
&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Printing&amp;nbsp;technical&amp;nbsp;book:&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;BookBuilder&amp;nbsp;technialbookBuilder=new&amp;nbsp;TechnicalBookBuilder();&lt;br&gt;
&amp;nbsp;&amp;nbsp;BookWriter&amp;nbsp;technicalBookWriter=new&amp;nbsp;BookWriter(technialbookBuilder);&lt;br&gt;
&amp;nbsp;&amp;nbsp;technicalBookWriter.printBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;Book&amp;nbsp;technicalbook=technicalBookWriter.getBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Technical&amp;nbsp;Book&amp;nbsp;Printed:&amp;quot;+technicalbook);&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;******************************************&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Printing&amp;nbsp;fictional&amp;nbsp;book:&amp;quot;);&lt;br&gt;
&amp;nbsp;&amp;nbsp;BookBuilder&amp;nbsp;fictionalbookBuilder=new&amp;nbsp;FictionalBookBuilder();&lt;br&gt;
&amp;nbsp;&amp;nbsp;BookWriter&amp;nbsp;fictionalBookWriter=new&amp;nbsp;BookWriter(fictionalbookBuilder);&lt;br&gt;
&amp;nbsp;&amp;nbsp;fictionalBookWriter.printBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;Book&amp;nbsp;fictionalbook=fictionalBookWriter.getBook();&lt;br&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Fictionalbook&amp;nbsp;book&amp;nbsp;printed:&amp;quot;+fictionalbook);&lt;br&gt;
&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_0:6" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Factory&amp;nbsp;method&amp;nbsp;pattern,&amp;nbsp;describe.&lt;br&gt;
What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;Differences&amp;nbsp;between&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&amp;nbsp;and&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;?&amp;nbsp;&lt;br&gt;
Factory&amp;nbsp;method&amp;nbsp;diagram:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object-oriented&amp;nbsp;creational&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to&lt;br&gt;
implement&amp;nbsp;the&amp;nbsp;concept&amp;nbsp;of&amp;nbsp;factories&amp;nbsp;and&amp;nbsp;deals&amp;nbsp;with&amp;nbsp;the&amp;nbsp;problem&amp;nbsp;of&amp;nbsp;creating&lt;br&gt;
objects&amp;nbsp;(products)&amp;nbsp;without&amp;nbsp;specifying&amp;nbsp;the&amp;nbsp;exact&amp;nbsp;class&amp;nbsp;of&amp;nbsp;object&amp;nbsp;that&amp;nbsp;will&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;created.&lt;br&gt;
The&amp;nbsp;essence&amp;nbsp;of&amp;nbsp;this&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;to&amp;nbsp;&amp;quot;Define&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;an&amp;nbsp;object,&lt;br&gt;
but&amp;nbsp;let&amp;nbsp;the&amp;nbsp;classes&amp;nbsp;that&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;interface&amp;nbsp;decide&amp;nbsp;which&amp;nbsp;class&amp;nbsp;to&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instantiate.&amp;nbsp;&lt;br&gt;
The&amp;nbsp;Factory&amp;nbsp;method&amp;nbsp;lets&amp;nbsp;a&amp;nbsp;class&amp;nbsp;defer&amp;nbsp;instantiation&amp;nbsp;to&amp;nbsp;subclasses.&amp;quot;&lt;br&gt;
&lt;br&gt;
Creating&amp;nbsp;an&amp;nbsp;object&amp;nbsp;often&amp;nbsp;requires&amp;nbsp;complex&amp;nbsp;processes&amp;nbsp;not&amp;nbsp;appropriate&amp;nbsp;to&amp;nbsp;include&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;within&amp;nbsp;&lt;br&gt;
a&amp;nbsp;composing&amp;nbsp;object.&amp;nbsp;The&amp;nbsp;object's&amp;nbsp;creation&amp;nbsp;may&amp;nbsp;lead&amp;nbsp;to&amp;nbsp;a&amp;nbsp;significant&lt;br&gt;
duplication&amp;nbsp;of&amp;nbsp;code,&amp;nbsp;may&amp;nbsp;require&amp;nbsp;information&amp;nbsp;not&amp;nbsp;accessible&amp;nbsp;to&amp;nbsp;the&amp;nbsp;composing&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;object,&amp;nbsp;&lt;br&gt;
may&amp;nbsp;not&amp;nbsp;provide&amp;nbsp;a&amp;nbsp;sufficient&amp;nbsp;level&amp;nbsp;of&amp;nbsp;abstraction,&amp;nbsp;or&amp;nbsp;may&amp;nbsp;otherwise&amp;nbsp;not&amp;nbsp;be&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;part&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;br&gt;
composing&amp;nbsp;object's&amp;nbsp;concerns.&amp;nbsp;The&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;handles&amp;nbsp;these&amp;nbsp;&lt;br&gt;
problems&amp;nbsp;by&amp;nbsp;defining&amp;nbsp;a&amp;nbsp;separate&amp;nbsp;method&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;the&amp;nbsp;objects,&amp;nbsp;which&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;subclasses&amp;nbsp;&lt;br&gt;
can&amp;nbsp;then&amp;nbsp;override&amp;nbsp;to&amp;nbsp;specify&amp;nbsp;the&amp;nbsp;derived&amp;nbsp;type&amp;nbsp;of&amp;nbsp;product&amp;nbsp;that&amp;nbsp;will&amp;nbsp;be&amp;nbsp;created.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='450'&amp;nbsp;height='200'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/FactoryMethoduml.jpg'/&gt;&lt;br&gt;
&lt;br&gt;
!!&amp;nbsp;My&amp;nbsp;opinion&lt;br&gt;
This&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;one&amp;nbsp;of&amp;nbsp;the&amp;nbsp;most&amp;nbsp;famous&amp;nbsp;and&amp;nbsp;&lt;br&gt;
simple.&amp;nbsp;I&amp;nbsp;am&amp;nbsp;sure&amp;nbsp;that&amp;nbsp;most&amp;nbsp;readers&amp;nbsp;have&amp;nbsp;seen&amp;nbsp;it&amp;nbsp;many&amp;nbsp;times.&amp;nbsp;&lt;br&gt;
Task&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;is&amp;nbsp;the&amp;nbsp;concealment&amp;nbsp;of&amp;nbsp;a&amp;nbsp;particular&amp;nbsp;class&amp;nbsp;that&amp;nbsp;has&amp;nbsp;&lt;br&gt;
be&amp;nbsp;generated&amp;nbsp;and&amp;nbsp;returned&amp;nbsp;in&amp;nbsp;the&amp;nbsp;guise&amp;nbsp;of&amp;nbsp;a&amp;nbsp;common&amp;nbsp;abstraction.&amp;nbsp;If&amp;nbsp;the&amp;nbsp;method&amp;nbsp;&lt;br&gt;
passed&amp;nbsp;parameters,&amp;nbsp;which&amp;nbsp;depend&amp;nbsp;on&amp;nbsp;which&amp;nbsp;class&amp;nbsp;is&amp;nbsp;created,&amp;nbsp;then&amp;nbsp;the&amp;nbsp;&lt;br&gt;
Factory&amp;nbsp;method&amp;nbsp;called&amp;nbsp;__&amp;nbsp;parameterized&amp;nbsp;__&amp;nbsp;factory&amp;nbsp;method.&lt;br&gt;
&lt;br&gt;
Factory&amp;nbsp;Method.&amp;nbsp;Intent.&amp;nbsp;Define&amp;nbsp;an&amp;nbsp;interface&amp;nbsp;for&amp;nbsp;creating&amp;nbsp;an&amp;nbsp;object,&amp;nbsp;but&amp;nbsp;let&amp;nbsp;&lt;br&gt;
subclasses&amp;nbsp;decide&amp;nbsp;which&amp;nbsp;class&amp;nbsp;to&amp;nbsp;instantiate.&amp;nbsp;&lt;br&gt;
Factory&amp;nbsp;Method&amp;nbsp;lets&amp;nbsp;a&amp;nbsp;class&amp;nbsp;defer&amp;nbsp;instantiation&amp;nbsp;to&amp;nbsp;subclasses.&lt;br&gt;
&lt;br&gt;
&lt;img&amp;nbsp;width='500'&amp;nbsp;height='220'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/FactoryMethodDveri.png'/&gt;&lt;br&gt;
&lt;br&gt;
Example&amp;nbsp;from&amp;nbsp;A.Budaj&amp;nbsp;book&lt;br&gt;
public&amp;nbsp;interface&amp;nbsp;ILogger&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;LogMessage(String&amp;nbsp;message);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;LogError(String&amp;nbsp;message);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void&amp;nbsp;LogVerboseInformation(String&amp;nbsp;message);&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;EnterpriseLogger&amp;nbsp;implements&amp;nbsp;ILogger{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogMessage(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Enterprise&amp;nbsp;logger&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;message);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogError(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogVerboseInformation(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Log4NetLogger&amp;nbsp;&amp;nbsp;implements&amp;nbsp;ILogger{&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogMessage(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Log4net&amp;nbsp;logger&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;nbsp;+&amp;nbsp;message);&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogError(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;LogVerboseInformation(String&amp;nbsp;message)&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;LoggerProviderFactory&amp;nbsp;{&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;static&amp;nbsp;int&amp;nbsp;Enterprise&amp;nbsp;=&amp;nbsp;0;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;final&amp;nbsp;static&amp;nbsp;int&amp;nbsp;Log4Net&amp;nbsp;=&amp;nbsp;1;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;parametrised&amp;nbsp;factory&amp;nbsp;method&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;ILogger&amp;nbsp;GetLoggingProvider(int&amp;nbsp;logProviders){&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch&amp;nbsp;(logProviders){&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case&amp;nbsp;LoggerProviderFactory.Enterprise:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;EnterpriseLogger();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case&amp;nbsp;LoggerProviderFactory.Log4Net:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;Log4NetLogger();&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;default:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;new&amp;nbsp;EnterpriseLogger();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
===&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//int&amp;nbsp;providerType&amp;nbsp;=&amp;nbsp;GetTypeOfLoggingProviderFromConfigFile();&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;providerType&amp;nbsp;=&amp;nbsp;1;&amp;nbsp;//&amp;nbsp;hardcode&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ILogger&amp;nbsp;logger&amp;nbsp;=&amp;nbsp;LoggerProviderFactory.GetLoggingProvider(providerType);&amp;nbsp;&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;logger.LogMessage(&amp;quot;Hello&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;Design&amp;nbsp;Pattern.&amp;quot;);&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
===&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
!!!!&amp;nbsp;From&amp;nbsp;stackoverflow.com&lt;br&gt;
Differences&amp;nbsp;between&amp;nbsp;Abstract&amp;nbsp;Factory&amp;nbsp;Pattern&amp;nbsp;and&amp;nbsp;Factory&amp;nbsp;Method&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;main&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;a&amp;nbsp;&amp;quot;factory&amp;nbsp;method&amp;quot;&amp;nbsp;and&amp;nbsp;an&amp;nbsp;&amp;quot;abstract&amp;nbsp;factory&amp;quot;&lt;br&gt;
is&amp;nbsp;that&amp;nbsp;the&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;is&amp;nbsp;a&amp;nbsp;single&amp;nbsp;method,&amp;nbsp;and&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;is&amp;nbsp;&lt;br&gt;
an&amp;nbsp;object.&amp;nbsp;I&amp;nbsp;think&amp;nbsp;a&amp;nbsp;lot&amp;nbsp;of&amp;nbsp;people&amp;nbsp;get&amp;nbsp;these&amp;nbsp;two&amp;nbsp;terms&amp;nbsp;confused,&lt;br&gt;
and&amp;nbsp;start&amp;nbsp;using&amp;nbsp;them&amp;nbsp;interchangeably.&amp;nbsp;I&amp;nbsp;remember&amp;nbsp;that&amp;nbsp;I&amp;nbsp;had&amp;nbsp;a&amp;nbsp;hard&amp;nbsp;time&amp;nbsp;finding&lt;br&gt;
exactly&amp;nbsp;what&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;was&amp;nbsp;when&amp;nbsp;I&amp;nbsp;learnt&amp;nbsp;them.&lt;br&gt;
&lt;br&gt;
Because&amp;nbsp;the&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;is&amp;nbsp;just&amp;nbsp;a&amp;nbsp;method,&amp;nbsp;it&amp;nbsp;can&amp;nbsp;be&amp;nbsp;overridden&amp;nbsp;in&amp;nbsp;a&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;subclass,&amp;nbsp;&lt;br&gt;
hence&amp;nbsp;the&amp;nbsp;second&amp;nbsp;half&amp;nbsp;of&amp;nbsp;your&amp;nbsp;quote:&lt;br&gt;
...&amp;nbsp;the&amp;nbsp;Factory&amp;nbsp;Method&amp;nbsp;pattern&amp;nbsp;uses&amp;nbsp;inheritance&amp;nbsp;and&amp;nbsp;relies&amp;nbsp;on&amp;nbsp;a&lt;br&gt;
subclass&amp;nbsp;to&amp;nbsp;handle&amp;nbsp;the&amp;nbsp;desired&amp;nbsp;object&amp;nbsp;instantiation.&lt;br&gt;
&lt;br&gt;
The&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;is&amp;nbsp;an&amp;nbsp;object&amp;nbsp;that&amp;nbsp;has&amp;nbsp;multiple&amp;nbsp;factory&amp;nbsp;methods&amp;nbsp;on&amp;nbsp;it.&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_0:7" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Creational&amp;nbsp;patterns&amp;nbsp;:&amp;nbsp;Prototype,&amp;nbsp;describe.&lt;br&gt;
Provide&amp;nbsp;example.&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Simply&amp;nbsp;pattern&amp;nbsp;=)&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;prototype&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;a&amp;nbsp;creational&amp;nbsp;design&amp;nbsp;pattern&amp;nbsp;in&amp;nbsp;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;software&amp;nbsp;development.&amp;nbsp;It&amp;nbsp;is&amp;nbsp;used&amp;nbsp;when&amp;nbsp;the&amp;nbsp;type&amp;nbsp;of&amp;nbsp;objects&amp;nbsp;to&amp;nbsp;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;create&amp;nbsp;is&amp;nbsp;determined&amp;nbsp;by&amp;nbsp;a&amp;nbsp;prototypical&amp;nbsp;instance,&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;which&amp;nbsp;is&amp;nbsp;cloned&amp;nbsp;to&amp;nbsp;produce&amp;nbsp;new&amp;nbsp;objects.&amp;nbsp;This&amp;nbsp;pattern&amp;nbsp;is&amp;nbsp;used&amp;nbsp;to:&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;avoid&amp;nbsp;subclasses&amp;nbsp;of&amp;nbsp;an&amp;nbsp;object&amp;nbsp;creator&amp;nbsp;in&amp;nbsp;the&amp;nbsp;client&amp;nbsp;application,&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;like&amp;nbsp;the&amp;nbsp;abstract&amp;nbsp;factory&amp;nbsp;pattern&amp;nbsp;does.&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;avoid&amp;nbsp;the&amp;nbsp;inherent&amp;nbsp;cost&amp;nbsp;of&amp;nbsp;creating&amp;nbsp;a&amp;nbsp;new&amp;nbsp;object&amp;nbsp;in&amp;nbsp;the&amp;nbsp;standard&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;way&amp;nbsp;(e.g.,&amp;nbsp;using&amp;nbsp;the&amp;nbsp;'new'&amp;nbsp;keyword)&amp;nbsp;when&amp;nbsp;it&amp;nbsp;is&amp;nbsp;prohibitively&amp;nbsp;expensive&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;a&amp;nbsp;given&amp;nbsp;application.&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;To&amp;nbsp;implement&amp;nbsp;the&amp;nbsp;pattern,&amp;nbsp;declare&amp;nbsp;an&amp;nbsp;abstract&amp;nbsp;base&amp;nbsp;class&amp;nbsp;that&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;specifies&amp;nbsp;a&amp;nbsp;pure&amp;nbsp;virtual&amp;nbsp;clone()&amp;nbsp;method.&amp;nbsp;Any&amp;nbsp;class&amp;nbsp;that&amp;nbsp;needs&amp;nbsp;a&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;polymorphic&amp;nbsp;constructor&amp;quot;&amp;nbsp;capability&amp;nbsp;derives&amp;nbsp;itself&amp;nbsp;from&amp;nbsp;the&amp;nbsp;abstract&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;base&amp;nbsp;class,&amp;nbsp;and&amp;nbsp;implements&amp;nbsp;the&amp;nbsp;clone()&amp;nbsp;operation.&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;client,&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;writing&amp;nbsp;code&amp;nbsp;that&amp;nbsp;invokes&amp;nbsp;the&amp;nbsp;&amp;quot;new&amp;quot;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;operator&amp;nbsp;on&amp;nbsp;a&amp;nbsp;hard-coded&amp;nbsp;class&amp;nbsp;name,&amp;nbsp;calls&amp;nbsp;the&amp;nbsp;clone()&amp;nbsp;method&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on&amp;nbsp;the&amp;nbsp;prototype,&amp;nbsp;calls&amp;nbsp;a&amp;nbsp;factory&amp;nbsp;method&amp;nbsp;with&amp;nbsp;a&amp;nbsp;parameter&amp;nbsp;designating&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;the&amp;nbsp;particular&amp;nbsp;concrete&amp;nbsp;derived&amp;nbsp;class&amp;nbsp;desired,&amp;nbsp;or&amp;nbsp;invokes&amp;nbsp;the&amp;nbsp;clone()&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;method&amp;nbsp;through&amp;nbsp;some&amp;nbsp;mechanism&amp;nbsp;provided&amp;nbsp;by&amp;nbsp;another&amp;nbsp;design&amp;nbsp;pattern.&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The&amp;nbsp;rule&amp;nbsp;of&amp;nbsp;thumb&amp;nbsp;could&amp;nbsp;be&amp;nbsp;that&amp;nbsp;you&amp;nbsp;would&amp;nbsp;need&amp;nbsp;to&amp;nbsp;clone()&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;an&amp;nbsp;Object&amp;nbsp;when&amp;nbsp;you&amp;nbsp;want&amp;nbsp;to&amp;nbsp;create&amp;nbsp;another&amp;nbsp;Object&amp;nbsp;at&amp;nbsp;runtime&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that&amp;nbsp;is&amp;nbsp;a&amp;nbsp;true&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;you&amp;nbsp;are&amp;nbsp;cloning.&amp;nbsp;True&amp;nbsp;copy&amp;nbsp;means&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;all&amp;nbsp;the&amp;nbsp;attributes&amp;nbsp;of&amp;nbsp;the&amp;nbsp;newly&amp;nbsp;created&amp;nbsp;Object&amp;nbsp;should&amp;nbsp;be&amp;nbsp;the&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;same&amp;nbsp;as&amp;nbsp;the&amp;nbsp;Object&amp;nbsp;you&amp;nbsp;are&amp;nbsp;cloning.&amp;nbsp;If&amp;nbsp;you&amp;nbsp;could&amp;nbsp;have&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;instantiated&amp;nbsp;the&amp;nbsp;class&amp;nbsp;by&amp;nbsp;using&amp;nbsp;new&amp;nbsp;instead,&amp;nbsp;you&amp;nbsp;would&amp;nbsp;get&amp;nbsp;an&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object&amp;nbsp;with&amp;nbsp;all&amp;nbsp;attributes&amp;nbsp;as&amp;nbsp;their&amp;nbsp;initial&amp;nbsp;values.&amp;nbsp;For&amp;nbsp;example,&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;you&amp;nbsp;are&amp;nbsp;designing&amp;nbsp;a&amp;nbsp;system&amp;nbsp;for&amp;nbsp;performing&amp;nbsp;bank&amp;nbsp;account&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transactions,&amp;nbsp;then&amp;nbsp;you&amp;nbsp;would&amp;nbsp;want&amp;nbsp;to&amp;nbsp;make&amp;nbsp;a&amp;nbsp;copy&amp;nbsp;of&amp;nbsp;the&amp;nbsp;Object&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that&amp;nbsp;holds&amp;nbsp;your&amp;nbsp;account&amp;nbsp;information,&amp;nbsp;perform&amp;nbsp;transactions&amp;nbsp;on&amp;nbsp;it,&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and&amp;nbsp;then&amp;nbsp;replace&amp;nbsp;the&amp;nbsp;original&amp;nbsp;Object&amp;nbsp;with&amp;nbsp;the&amp;nbsp;modified&amp;nbsp;one.&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In&amp;nbsp;such&amp;nbsp;cases,&amp;nbsp;you&amp;nbsp;would&amp;nbsp;want&amp;nbsp;to&amp;nbsp;use&amp;nbsp;clone()&amp;nbsp;instead&amp;nbsp;of&amp;nbsp;new.&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;
&lt;img&amp;nbsp;width='600'&amp;nbsp;height='250'&amp;nbsp;alt='image'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;src='/data/images/600px-Prototype_UML.svg.png'/&gt;&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example&amp;nbsp;:&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Prototype&amp;nbsp;Class&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;Cookie&amp;nbsp;implements&amp;nbsp;Cloneable&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected&amp;nbsp;int&amp;nbsp;weight;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Cookie&amp;nbsp;clone()&amp;nbsp;throws&amp;nbsp;CloneNotSupportedException&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cookie&amp;nbsp;copy&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Cookie();&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;copy.weight&amp;nbsp;=&amp;nbsp;this.weight;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//In&amp;nbsp;an&amp;nbsp;actual&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;this&amp;nbsp;pattern&amp;nbsp;you&amp;nbsp;might&amp;nbsp;now&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;change&amp;nbsp;references&amp;nbsp;to&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//the&amp;nbsp;expensive&amp;nbsp;to&amp;nbsp;produce&amp;nbsp;parts&amp;nbsp;from&amp;nbsp;the&amp;nbsp;copies&amp;nbsp;that&amp;nbsp;are&amp;nbsp;held&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inside&amp;nbsp;the&amp;nbsp;prototype.&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;copy;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Concrete&amp;nbsp;Prototypes&amp;nbsp;to&amp;nbsp;clone&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;CoconutCookie&amp;nbsp;extends&amp;nbsp;Cookie&amp;nbsp;{&amp;nbsp;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&amp;nbsp;you&amp;nbsp;can&amp;nbsp;add&amp;nbsp;something&amp;nbsp;others&amp;nbsp;methods*/&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Client&amp;nbsp;Class&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;CookieMachine&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Cookie&amp;nbsp;cookie;&amp;nbsp;//&amp;nbsp;Could&amp;nbsp;have&amp;nbsp;been&amp;nbsp;a&amp;nbsp;private&amp;nbsp;Cloneable&amp;nbsp;cookie.&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;CookieMachine(Cookie&amp;nbsp;cookie)&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.cookie&amp;nbsp;=&amp;nbsp;cookie;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Cookie&amp;nbsp;makeCookie()&amp;nbsp;throws&amp;nbsp;CloneNotSupportedException&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;(Cookie)&amp;nbsp;this.cookie.clone();&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&lt;br&gt;


&amp;nbsp;&amp;nbsp;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String&amp;nbsp;args[])&amp;nbsp;throws&amp;nbsp;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CloneNotSupportedException&amp;nbsp;{&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cookie&amp;nbsp;tempCookie&amp;nbsp;=&amp;nbsp;null;&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cookie&amp;nbsp;prot&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CoconutCookie();&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CookieMachine&amp;nbsp;cm&amp;nbsp;=&amp;nbsp;new&amp;nbsp;CookieMachine(prot);&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&lt;&amp;nbsp;100;&amp;nbsp;i++){&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tempCookie&amp;nbsp;=&amp;nbsp;cm.makeCookie();&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(tempCookie);&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;


&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;===&lt;br&gt;

&amp;nbsp;&amp;nbsp;</questionanswer>
  </question>
  <question id="2_6_5_0:8" type="2">
    <questiontext>&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What&amp;nbsp;is&amp;nbsp;the&amp;nbsp;difference&amp;nbsp;between&amp;nbsp;Monostate&amp;nbsp;and&amp;nbsp;Singleton&amp;nbsp;,&amp;nbsp;and&amp;nbsp;&lt;br&gt;
between&amp;nbsp;Static&amp;nbsp;Class&amp;nbsp;and&amp;nbsp;Singleton&lt;br&gt;
&amp;nbsp;&amp;nbsp;</questiontext>
    <questionanswer>1)&lt;br&gt;
monostate&amp;nbsp;and&amp;nbsp;singleton&amp;nbsp;are&amp;nbsp;two&amp;nbsp;faces&amp;nbsp;of&amp;nbsp;the&amp;nbsp;same&amp;nbsp;medal&amp;nbsp;(global&amp;nbsp;state):&lt;br&gt;
&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;monostate&amp;nbsp;forces&amp;nbsp;a&amp;nbsp;behaviour&amp;nbsp;(only&amp;nbsp;one&amp;nbsp;value&amp;nbsp;along&amp;nbsp;all&amp;nbsp;class&amp;nbsp;instances&amp;nbsp;using&amp;nbsp;static)&lt;br&gt;
-&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;singleton&amp;nbsp;forces&amp;nbsp;a&amp;nbsp;structural&amp;nbsp;constraint&amp;nbsp;(only&amp;nbsp;one&amp;nbsp;instance)&lt;br&gt;
&lt;br&gt;
singleton&amp;nbsp;usage&amp;nbsp;is&amp;nbsp;not&amp;nbsp;transparent&lt;br&gt;
&lt;br&gt;
i.e.:&lt;br&gt;
&lt;br&gt;
Singleton&amp;nbsp;singleton&amp;nbsp;=&amp;nbsp;Singleton.getInstance();&lt;br&gt;
&lt;br&gt;
monostate&amp;nbsp;usage&amp;nbsp;is&amp;nbsp;transparent&lt;br&gt;
&lt;br&gt;
i.e.:&lt;br&gt;
&lt;br&gt;
MonoState&amp;nbsp;m1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MonoState();&lt;br&gt;
MonoState&amp;nbsp;m2&amp;nbsp;=&amp;nbsp;new&amp;nbsp;MonoState();&amp;nbsp;//&amp;nbsp;same&amp;nbsp;state&amp;nbsp;of&amp;nbsp;m1&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
&amp;nbsp;--&gt;&gt;&amp;nbsp;Not&amp;nbsp;one&amp;nbsp;instance,&amp;nbsp;but&amp;nbsp;multiple&amp;nbsp;instances&amp;nbsp;of&amp;nbsp;a&amp;nbsp;single&amp;nbsp;state&amp;nbsp;"-&amp;nbsp;a&amp;nbsp;shift&lt;br&gt;
class&amp;nbsp;gives&amp;nbsp;additional&amp;nbsp;flexibility.&amp;nbsp;Always&amp;nbsp;possible&amp;nbsp;to&amp;nbsp;add&amp;nbsp;non-static&amp;nbsp;Membury&amp;nbsp;,&lt;br&gt;
making&amp;nbsp;copies&amp;nbsp;of&amp;nbsp;distinct&amp;nbsp;and&amp;nbsp;unique&amp;nbsp;,&amp;nbsp;and&amp;nbsp;vice&amp;nbsp;versa.&amp;nbsp;Technically,&amp;nbsp;the&lt;br&gt;
difference&amp;nbsp;between"&amp;nbsp;monostate&amp;nbsp;"and"&amp;nbsp;regular&amp;nbsp;class&amp;nbsp;"&amp;nbsp;is&amp;nbsp;minimal.&lt;br&gt;
Additional&amp;nbsp;convenience&amp;nbsp;is&amp;nbsp;that&amp;nbsp;changing&amp;nbsp;the&amp;nbsp;implementation&amp;nbsp;of&amp;nbsp;the&amp;nbsp;regular&lt;br&gt;
classroom&amp;nbsp;for&amp;nbsp;MonoState,&amp;nbsp;no&amp;nbsp;need&amp;nbsp;to&amp;nbsp;change&amp;nbsp;the&amp;nbsp;code&amp;nbsp;using&amp;nbsp;it&amp;nbsp;.&lt;br&gt;
&lt;br&gt;
An&amp;nbsp;important&amp;nbsp;point&amp;nbsp;not&amp;nbsp;mentioned&amp;nbsp;in&amp;nbsp;the&amp;nbsp;definition&amp;nbsp;MonoState.&amp;nbsp;Monostate&lt;br&gt;
must&amp;nbsp;&amp;nbsp;---&gt;&gt;&gt;&amp;nbsp;contain&amp;nbsp;static&amp;nbsp;member&amp;nbsp;instance_count,&amp;nbsp;the&amp;nbsp;value&amp;nbsp;of&amp;nbsp;which&amp;nbsp;determines&lt;br&gt;
whether&amp;nbsp;the&amp;nbsp;constructor&amp;nbsp;and&amp;nbsp;destructor&amp;nbsp;to&amp;nbsp;perform&amp;nbsp;their&amp;nbsp;tasks.&lt;br&gt;
&lt;br&gt;
====================&lt;br&gt;
2)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;nbsp;object&amp;nbsp;stores&amp;nbsp;in&amp;nbsp;Heap&amp;nbsp;but,&amp;nbsp;static&amp;nbsp;object&amp;nbsp;stores&amp;nbsp;in&amp;nbsp;stack&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;We&amp;nbsp;can&amp;nbsp;clone&amp;nbsp;the&amp;nbsp;object&amp;nbsp;of&amp;nbsp;Singleton&amp;nbsp;but,&amp;nbsp;we&amp;nbsp;can&amp;nbsp;not&amp;nbsp;clone&amp;nbsp;the&amp;nbsp;static&amp;nbsp;class&amp;nbsp;object&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Singleton&amp;nbsp;class&amp;nbsp;follow&amp;nbsp;the&amp;nbsp;OOP(object&amp;nbsp;oriented&amp;nbsp;principles)&amp;nbsp;but&amp;nbsp;not&amp;nbsp;static&amp;nbsp;class&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;we&amp;nbsp;can&amp;nbsp;implement&amp;nbsp;interface&amp;nbsp;with&amp;nbsp;Singleton&amp;nbsp;class&amp;nbsp;but&amp;nbsp;not&amp;nbsp;with&amp;nbsp;Static&amp;nbsp;class.&lt;br&gt;
&lt;br&gt;
====&lt;br&gt;
and&amp;nbsp;one&amp;nbsp;more&amp;nbsp;answer&amp;nbsp;from&amp;nbsp;stackoverflov:&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
static&amp;nbsp;classes&amp;nbsp;should&amp;nbsp;not&amp;nbsp;do&amp;nbsp;anything&amp;nbsp;need&amp;nbsp;state,&amp;nbsp;it&amp;nbsp;is&amp;nbsp;useful&amp;nbsp;for&amp;nbsp;putting&amp;nbsp;bunch&amp;nbsp;of&lt;br&gt;
functions&amp;nbsp;together&amp;nbsp;i.e&amp;nbsp;Math&amp;nbsp;(or&amp;nbsp;Utils&amp;nbsp;in&amp;nbsp;projects).&amp;nbsp;So&amp;nbsp;the&amp;nbsp;class&amp;nbsp;name&amp;nbsp;just&amp;nbsp;give&amp;nbsp;us&lt;br&gt;
a&amp;nbsp;clue&amp;nbsp;where&amp;nbsp;we&amp;nbsp;can&amp;nbsp;find&amp;nbsp;the&amp;nbsp;functions&amp;nbsp;and&amp;nbsp;there's&amp;nbsp;nothing&amp;nbsp;more.&lt;br&gt;
&lt;br&gt;
Singleton&amp;nbsp;is&amp;nbsp;my&amp;nbsp;favorite&amp;nbsp;pattern&amp;nbsp;and&amp;nbsp;use&amp;nbsp;it&amp;nbsp;to&amp;nbsp;manage&amp;nbsp;something&amp;nbsp;at&amp;nbsp;a&amp;nbsp;single&amp;nbsp;point.&lt;br&gt;
It's&amp;nbsp;more&amp;nbsp;flexible&amp;nbsp;than&amp;nbsp;static&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;can&amp;nbsp;maintain&amp;nbsp;state.&amp;nbsp;It&amp;nbsp;can&amp;nbsp;implement&lt;br&gt;
interfaces,&amp;nbsp;inherit&amp;nbsp;from&amp;nbsp;other&amp;nbsp;classes&amp;nbsp;and&amp;nbsp;allow&amp;nbsp;inheritance.&lt;br&gt;
&lt;br&gt;
My&amp;nbsp;rule&amp;nbsp;for&amp;nbsp;choosing&amp;nbsp;between&amp;nbsp;static&amp;nbsp;and&amp;nbsp;singleton:&lt;br&gt;
&lt;br&gt;
If&amp;nbsp;there&amp;nbsp;are&amp;nbsp;bunch&amp;nbsp;of&amp;nbsp;functions&amp;nbsp;should&amp;nbsp;be&amp;nbsp;kept&amp;nbsp;together,&amp;nbsp;then&amp;nbsp;static&amp;nbsp;is&amp;nbsp;the&lt;br&gt;
choice.&amp;nbsp;Anything&amp;nbsp;else&amp;nbsp;which&amp;nbsp;needs&amp;nbsp;single&amp;nbsp;access&amp;nbsp;to&amp;nbsp;some&amp;nbsp;resources,&amp;nbsp;could&lt;br&gt;
be&amp;nbsp;implemented&amp;nbsp;singleton.&lt;br&gt;
==========================================&lt;br&gt;
Monostate&amp;nbsp;CODE&amp;nbsp;&lt;br&gt;
public&amp;nbsp;class&amp;nbsp;Monostate{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;static&amp;nbsp;int&amp;nbsp;x;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;X&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;get&amp;nbsp;{&amp;nbsp;return&amp;nbsp;x;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set&amp;nbsp;{&amp;nbsp;x&amp;nbsp;=&amp;nbsp;value;&amp;nbsp;}&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
Regardless&amp;nbsp;of&amp;nbsp;the&amp;nbsp;number&amp;nbsp;of&amp;nbsp;times&amp;nbsp;you&amp;nbsp;will&amp;nbsp;create&amp;nbsp;or&amp;nbsp;destroy&amp;nbsp;an&amp;nbsp;instance&amp;nbsp;of&amp;nbsp;this&lt;br&gt;
class,&amp;nbsp;there&amp;nbsp;will&amp;nbsp;only&amp;nbsp;be&amp;nbsp;one&amp;nbsp;value&amp;nbsp;of&amp;nbsp;X,&amp;nbsp;shared&amp;nbsp;across&amp;nbsp;all&amp;nbsp;threads&amp;nbsp;of&amp;nbsp;your&lt;br&gt;
application.&amp;nbsp;In&amp;nbsp;other&amp;nbsp;words,&amp;nbsp;changes&amp;nbsp;made&amp;nbsp;in&amp;nbsp;one&amp;nbsp;of&amp;nbsp;your&amp;nbsp;threads&amp;nbsp;are&lt;br&gt;
immediately&amp;nbsp;and&amp;nbsp;instantaneously&amp;nbsp;visible&amp;nbsp;in&amp;nbsp;all&amp;nbsp;other&amp;nbsp;threads.&amp;nbsp;"Big&amp;nbsp;Deal!"&amp;nbsp;you&lt;br&gt;
say,&amp;nbsp;but&amp;nbsp;it&amp;nbsp;gets&amp;nbsp;much&amp;nbsp;more&amp;nbsp;interesting,&amp;nbsp;once&amp;nbsp;we&amp;nbsp;incorporate&amp;nbsp;Generics&amp;nbsp;and&lt;br&gt;
Concurrent&amp;nbsp;Collections:</questionanswer>
  </question>
</questions>
