/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewQuestionDialog.java
 *
 */

package frames;

import com.ap.configuration.Config;
import com.ap.logic.Classification.Category;
import com.ap.logic.QuizClasses.Question;
import com.ap.logic.xml.ReadWriteClassificationXML;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

/**
 *
 * @author andrew
 */
public class NewQuestionDialog extends javax.swing.JDialog {

    /** Creates new form NewQuestionDialog */
    public NewQuestionDialog(java.awt.Frame parent, boolean modal) {
       super(parent, modal);
       initComponents();

       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionTypeLabel = new javax.swing.JLabel();
        questionTextLabel = new javax.swing.JLabel();
        questionAnswerLabel = new javax.swing.JLabel();
        saveQuestionButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearFormButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        questionTypeComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionTextTextPane = new javax.swing.JTextPane();
        previewButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionAnswerTextPane = new javax.swing.JTextPane();
        addImageButton = new javax.swing.JButton();
        addSourceButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        checkTheUniquenessButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Question");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(500, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        questionTypeLabel.setText("Question Type");

        questionTextLabel.setText("Question Text");

        questionAnswerLabel.setText("Correct Answer");

        saveQuestionButton.setText("Save Question");
        saveQuestionButton.setMaximumSize(new java.awt.Dimension(650, 650));
        saveQuestionButton.setMinimumSize(new java.awt.Dimension(350, 350));
        saveQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveQuestionButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        clearFormButton.setText("Clear Form");
        clearFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        questionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "With Variants", "Yes/No Question", "Detailed Answer Question" }));
        questionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionTypeComboBoxActionPerformed(evt);
            }
        });
        questionTypeComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                questionTypeComboBoxPropertyChange(evt);
            }
        });

        questionTextTextPane.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(questionTextTextPane);
        questionTextTextPane.getAccessibleContext().setAccessibleDescription("text/html");

        previewButton.setLabel("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        questionAnswerTextPane.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(questionAnswerTextPane);
        questionAnswerTextPane.getAccessibleContext().setAccessibleDescription("text/html");

        addImageButton.setText("Add Image");
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });

        addSourceButton.setText("Add Source");
        addSourceButton.setEnabled(false);
        addSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourceButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Debug");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checkTheUniquenessButton.setText("Check the uniqueness");
        checkTheUniquenessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTheUniquenessButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(385, Short.MAX_VALUE)
                .addComponent(previewButton)
                .addGap(90, 90, 90)
                .addComponent(saveQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearFormButton)
                .addGap(10, 10, 10)
                .addComponent(cancelButton)
                .addGap(32, 32, 32))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionAnswerLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(questionTypeLabel)
                                .addGap(40, 40, 40)
                                .addComponent(questionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkTheUniquenessButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addSourceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(questionTextLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)))))
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionTypeLabel)
                    .addComponent(questionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addImageButton)
                    .addComponent(addSourceButton)
                    .addComponent(checkTheUniquenessButton))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionTextLabel)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionAnswerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(clearFormButton)
                    .addComponent(saveQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previewButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        String questionText=this.questionTextTextPane.getText();
        //we will show preview for 4 seconds  
        final  String questionTextOrigin=this.questionTextTextPane.getText();

        if(questionText.contains("alt='image'")){
                                     questionText =questionText.replace("src='",
                                    "src='file://localhost/"+Config.getQuestionerPath());
         }

        this.questionTextTextPane.setContentType("text/html");
        this.questionTextTextPane.setText(questionText//.replaceAll("\n", "&lt;br&gt;")
                .replaceAll("&lt;", "<")
                .replaceAll("&gt;", ">"));


        String questionAnswer=this.questionAnswerTextPane.getText();
        this.questionAnswerTextPane.setContentType("text/html");
        this.questionAnswerTextPane.setText(questionAnswer.replaceAll("\n", "&lt;br&gt;").replaceAll("&lt;", "<").replaceAll("&gt;", ">") );
        
        // display preview for 5 seconds
        Timer  t = new Timer(5000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                        questionTextTextPane.setText(questionTextOrigin);
            }
        });
        t.setRepeats(false);
        t.start();
    }//GEN-LAST:event_previewButtonActionPerformed

    private void questionTypeComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_questionTypeComboBoxPropertyChange
    }//GEN-LAST:event_questionTypeComboBoxPropertyChange

    private void questionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionTypeComboBoxActionPerformed
        
        String selectedQuestionType=this.questionTypeComboBox.getSelectedItem().toString();

        if(selectedQuestionType.equals("With Variants")){
           
            this.questionTextTextPane.setContentType("text/html");
            this.questionTextTextPane.setText("");
            String variants="<br>$v$<br>"+
                            "$v0$ text of variant... $v0end$<br>"+
                            "$v1$$v1end$<br>"+
                            "$v2$$v2end$<br>"+
                            "$v3$$v3end$<br>"+
                            "$vend$";
            this.questionTextTextPane.setText(variants);
            this.questionAnswerTextPane.setText("put here  number of variant (numeration from zero)");
        }

        if(selectedQuestionType.equals("Yes/No Question")){
            this.questionTextTextPane.setContentType("text/html");
            this.questionTextTextPane.setText("");
            // if yes no question in aswet put 'yes' or 'no'
            this.questionAnswerTextPane.setText("put here  'yes' or 'no'");  
        }
        
        if(selectedQuestionType.equals("Detailed Answer Question")){    
            this.questionTextTextPane.setContentType("text/html");
            this.questionTextTextPane.setText("");

            this.questionAnswerTextPane.setText("put here detailed answer");
        }

       if(selectedQuestionType.equals("TIP")){
           this.questionTextTextPane.setContentType("text/html");
           this.questionTextTextPane.setText("");
           this.questionAnswerTextPane.setText("put here tip content");
       }
    }//GEN-LAST:event_questionTypeComboBoxActionPerformed


    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dialogResult=false;
        this.dispose();
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clearFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormButtonActionPerformed
       this.questionTextTextPane.setText("");
       this.questionAnswerTextPane.setText("");
    }//GEN-LAST:event_clearFormButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        questionTypeComboBoxActionPerformed(null);
    }//GEN-LAST:event_formWindowOpened

    private void saveQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveQuestionButtonActionPerformed
        this.resultQuestion=new Question();

        String questionText=this.questionTextTextPane.getText()
                .replaceAll("\n", "<br>")
                .trim(); // remove all \n , we will add new lines with replacing <br>
                
        String questionAnswer=this.questionAnswerTextPane.getText()
                .replaceAll("\n", "<br>")
                .trim();
        
        // it is fucking something bad , so temporary solution
        questionText=questionText.replaceAll("alt='image' <br>", "alt='image'");
        questionAnswer=questionAnswer.replaceAll("alt='image' <br>", "alt='image'");
         
        questionText=questionText.replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("<br>", "<br>\n").replaceAll(" ", "&nbsp;").replaceAll("\t", "&nbsp;&nbsp;&nbsp;&nbsp;"); // we need &nbsp to FORMAT code for exampe(cause html doesnt understand simple spaces) 
        questionAnswer=questionAnswer.replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("<br>", "<br>\n").replaceAll(" ", "&nbsp;").replaceAll("\t", "&nbsp;&nbsp;&nbsp;&nbsp;");

         String selectedQuestionType=this.questionTypeComboBox.getSelectedItem().toString();

         if(questionText.indexOf("<body>")>0){
            this.resultQuestion.setQuestionText(questionText.substring(questionText.indexOf("<body>")+6,questionText.indexOf("</body>")));
         }
         else{
             this.resultQuestion.setQuestionText(questionText);
         }

         if(questionAnswer.indexOf("<body>")>0){
            this.resultQuestion.setQuestionAnswer(questionAnswer.substring(questionAnswer.indexOf("<body>")+6,questionAnswer.indexOf("</body>")));
         }
         else{
             this.resultQuestion.setQuestionAnswer(questionAnswer);
         }

        if(selectedQuestionType.equals("With Variants")){
                this.resultQuestion.setType("0");
        }

        if(selectedQuestionType.equals("Yes/No Question")){
            this.resultQuestion.setType("1");
        }

        if(selectedQuestionType.equals("Detailed Answer Question")){
            this.resultQuestion.setType("2");
        }
       
        this.readerwriterQuestion.addQuestionToXML(this.resultQuestion, this.newQuestionCategory);
        this.dialogResult=true;
        this.dispose();
        this.setVisible(false);
    }//GEN-LAST:event_saveQuestionButtonActionPerformed

    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
        StyledDocument doc = this.questionTextTextPane.getStyledDocument();   
        
        
        // can be url and can be from file system
        JFileChooser chooser=new JFileChooser();
        chooser.showOpenDialog(this);
       // chooser.setCurrentDirectory(new File("/"));
        String imageURL=chooser.getSelectedFile().getAbsolutePath();
        
        if(imageURL==null || imageURL.length()<3){ 
           return;
        }   
     
        //put image to images dir 
        try{    
            BufferedImage image =null;
        
            if(imageURL.contains("http")){

               imageURL = imageURL.substring( imageURL.indexOf("http") );
               if(imageURL.charAt(imageURL.indexOf("http")+2)!='/' )
                  imageURL= imageURL.replace(":/", "://");
            //    JOptionPane.showMessageDialog(this, imageURL);
               image=ImageIO.read(new URL(imageURL));
            }else{
            image = ImageIO.read(new File(imageURL) );
            }

            // for jpg
            ImageIO.write(image, "jpg",new File(Config.imagesPath+
                    imageURL.substring( imageURL.lastIndexOf( Config.fileSeparator )+1, imageURL.length() )));
 
        }catch(IOException e){
            e.printStackTrace();
        }

        try {
            doc.insertString(this.questionTextTextPane.getCaret().getDot(),
                    "<br><img width='300' height='300' alt='image' src='/data/images/"+
                    imageURL.substring( imageURL.lastIndexOf( Config.fileSeparator  )+1, imageURL.length() )+
                    "'/>"
                    ,null);
        } catch (BadLocationException ex) {
            Logger.getLogger(NewQuestionDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addImageButtonActionPerformed

    private void addSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourceButtonActionPerformed
        //adding .rar or zip or smth like this , to question 
        // one question - can have only one file with sources (it generally will be archive)
        
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.showOpenDialog(this);
        
        // add some random number to file , to prefend duplicates
        Random r=new Random();
        
        if(fileChooser.getSelectedFile()!=null){                        
            // copy file to /questioner/data/sources - folder
            InputStream inStream = null;
            OutputStream outStream = null;
            try{
                File selectedFile=fileChooser.getSelectedFile();
               
                 String newFileName=JOptionPane.showInputDialog(this, "Input name for source file",
                 selectedFile.getAbsolutePath().substring(  
                         selectedFile.getAbsolutePath().lastIndexOf('/')+1, 
                         selectedFile.getAbsolutePath().length()));
                 
                if(newFileName==null || newFileName.length()==0) return; 

                newFileName= new StringBuilder(newFileName).insert(
                        newFileName.lastIndexOf("."),"."+r.nextInt(21))
                        .toString();
                File bfile =new File(Config.sourcesPath+newFileName);
                
                inStream = new FileInputStream(selectedFile);
                outStream = new FileOutputStream(bfile);
 
                byte[] buffer = new byte[1024];
 
                int length;
                //copy the file content in bytes 
                while ((length = inStream.read(buffer)) > 0){
                    outStream.write(buffer, 0, length);
                }
 
                inStream.close();
                outStream.close();
 
                StyledDocument doc = this.questionTextTextPane.getStyledDocument();
            
                doc.insertString(doc.getLength(),
                        "<br>$source$ /data/source/"+newFileName+" $endsource$"
                        ,null);
            
                System.out.println("File is copied successful!");
            }   catch(IOException e){
    		e.printStackTrace();
            }
                catch (BadLocationException ex) {
                Logger.getLogger(NewQuestionDialog.class.getName()).log(Level.SEVERE, null, ex);
            }    
            
        }
       
    }//GEN-LAST:event_addSourceButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String temp=this.questionTextTextPane.getText();

        JOptionPane.showMessageDialog(this, temp);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkTheUniquenessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTheUniquenessButtonActionPerformed
        
        // Desktop doesnt work on Linux ((
        if(Desktop.isDesktopSupported()){
            try {
                Desktop.getDesktop().open(new File(Config.questionsPath+
                            this.newQuestionCategory.getFileName()));
            } catch (IOException ex) {
                Logger.getLogger(NewQuestionDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        // solution for linux(ubuntu)
        try {   
            Runtime.getRuntime().exec("google-chrome "+Config.questionsPath+
                             this.newQuestionCategory.getFileName());
        } catch (IOException ex) {
            Logger.getLogger(NewQuestionDialog.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_checkTheUniquenessButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewQuestionDialog dialog = new NewQuestionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addImageButton;
    private javax.swing.JButton addSourceButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkTheUniquenessButton;
    private javax.swing.JButton clearFormButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton previewButton;
    private javax.swing.JLabel questionAnswerLabel;
    private javax.swing.JTextPane questionAnswerTextPane;
    private javax.swing.JLabel questionTextLabel;
    private javax.swing.JTextPane questionTextTextPane;
    private javax.swing.JComboBox questionTypeComboBox;
    private javax.swing.JLabel questionTypeLabel;
    private javax.swing.JButton saveQuestionButton;
    // End of variables declaration//GEN-END:variables

    private  Question resultQuestion=new Question();
    private  Category newQuestionCategory=null;


    private  Boolean dialogResult=false;
    private  ReadWriteClassificationXML readerwriterQuestion=new ReadWriteClassificationXML();

    
    /**
     * @param newQuestionCategory the newQuestionCategory to set
     */
    public void setNewQuestionCategory(Category newQuestionCategory) {
        this.newQuestionCategory = newQuestionCategory;
    }

    public Boolean getDialogResult(){
        return this.dialogResult;
    } 
}
