/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import com.ap.logic.Classification.Category;
import com.ap.logic.Classification.ClassificationItem;
import com.ap.logic.QuizClasses.Quiz;
import com.ap.logic.QuizClasses.QuizResult;
import java.awt.Dimension;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.*;
/**
 *
 * @author olia
 */
public class QuestionsListJFrame extends javax.swing.JFrame {

    /**
     * Creates new form QuestionsListJFrame
     */
    private ClassificationItem categoryOrClass;
    private String [] questionsModel;
    
    
    public QuestionsListJFrame(){
        initComponents();     
    }
    
    public void buildQuestionsModel(){
        this.questionsModel = new String[categoryOrClass.getnOfQuestions()];
        int counter = 0;
        
        Quiz quiz = new Quiz();
        QuizResult quizResult = new QuizResult();
        
        quiz.getCategories().put(categoryOrClass.getId(),
                (Category)categoryOrClass);
        quiz.setMinutes(20);
        quiz.setNofquestions(0);
        quiz.setAllQuestions(true);
        quiz.setIncludeDetailedAnswersQuestions(true);
        quiz.generateQuestions(false);   
        
        Set<String> questionsIds = quiz.getQuestions().keySet();
        
        // populate JList model
        for(String id : questionsIds){
            String questionText = quiz.getQuestions().get(id).getQuestionText();
            questionText = questionText.replace("&nbsp;", " ");
            //questionText = questionText.replace("<br>", "\n");
            //questionText = questionText.replace("&lt;", "<");
            //questionText = questionText.replace("&gt;", ">");
            
            
            questionsModel[counter] = " - " + (counter+1) + "  " +
                //questionText.substring(0, (questionText.length()>120?120:questionText.length()) );
                questionText.substring(0, questionText.length() );
            counter++;
        }
        
        
        
        
        // 'check' this quiz
        quizResult.setQuiz(quiz);
        quizResult.checkQuiz();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        questionsListJList = new javax.swing.JList();
        categoryQuestionsListTitle = new javax.swing.JLabel();
        categoryTitleLabel = new javax.swing.JLabel();
        findQuestionTextTextBox = new javax.swing.JTextField();
        findQuestionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("List of questions");

        questionsListJList.setBackground(new java.awt.Color(204, 255, 204));
        questionsListJList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        questionsListJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        questionsListJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                questionsListJListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(questionsListJList);

        categoryQuestionsListTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        categoryQuestionsListTitle.setText("Questions in category  :");

        categoryTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        findQuestionButton.setText("Find");
        findQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(categoryQuestionsListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoryTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addComponent(findQuestionTextTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryQuestionsListTitle)
                    .addComponent(categoryTitleLabel)
                    .addComponent(findQuestionTextTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findQuestionButton))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void questionsListJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionsListJListMouseClicked
        JTextPane questionContent = new JTextPane();
        JScrollPane scroll = new JScrollPane();
        
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        
        questionContent.setContentType("text/html");
        questionContent.setText(questionsListJList.getSelectedValue().toString());
        
        scroll.setViewportView(questionContent);
        
        scroll.setSize(new Dimension(400, 500));
        questionContent.setSize(new Dimension(400, 500));
        
        if(evt.getClickCount() == 2){
            JOptionPane.showMessageDialog(this, scroll, "Question content", 0);
           // JOptionPane.showMessageDialog(this, scroll.getSize());
            // JOptionPane.showMessageDialog(this, questionContent.getSize());
        }
    }//GEN-LAST:event_questionsListJListMouseClicked

    private void findQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findQuestionButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findQuestionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionsListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionsListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionsListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionsListJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionsListJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel categoryQuestionsListTitle;
    private javax.swing.JLabel categoryTitleLabel;
    private javax.swing.JButton findQuestionButton;
    private javax.swing.JTextField findQuestionTextTextBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList questionsListJList;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the categoryOrClass
     */
    public ClassificationItem getCategoryOrClass() {
        return categoryOrClass;
    }

    /**
     * @param categoryOrClass the categoryOrClass to set
     */
    public void setCategoryOrClass(ClassificationItem categoryOrClass) {
        this.categoryOrClass = categoryOrClass;
        this.categoryTitleLabel.setText(categoryOrClass.toString());
        this.buildQuestionsModel(); ///
        
         this.questionsListJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = questionsModel;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
    }

}
