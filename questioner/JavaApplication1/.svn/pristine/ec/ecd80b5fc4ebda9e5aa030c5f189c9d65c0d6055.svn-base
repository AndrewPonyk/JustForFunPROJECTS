/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import com.ap.logic.Classification.Category;
import com.ap.logic.Classification.Classification;
import com.ap.logic.xml.ReadWriteClassificationXML;
import com.ap.logic.Classification.Class;
import com.ap.logic.Classification.ClassificationItem;
import com.ap.logic.QuizClasses.Quiz;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Random;

import java.util.Set;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
/**

 * @author olia
 */
public class QuestionerJFrame extends JFrame {

    /**
     * Creates new form QuestionerJFrame
     */
    public QuestionerJFrame() {
        initComponents();


        //now create tree with all available categories
        createCategoriesTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryTreePopupMenu = new javax.swing.JPopupMenu();
        addCategoryItem = new javax.swing.JMenuItem();
        removeCategoryItem = new javax.swing.JMenuItem();
        addClassItem = new javax.swing.JMenuItem();
        showInfoItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        addQuestion = new javax.swing.JMenuItem();
        quizPanel = new javax.swing.JPanel();
        quizSetupPanel = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        includeDetailedAnwersLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        quizMinutesTextField = new javax.swing.JTextField();
        startQuizButton = new javax.swing.JButton();
        questionsCountLabel = new javax.swing.JLabel();
        quizQuestionsCountTextField = new javax.swing.JTextField();
        quizTopicsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        quizTopicsTextPane = new javax.swing.JTextPane();
        quizIncludeDetailedAnswersCheckBox = new javax.swing.JCheckBox();
        includeTipsLabel = new javax.swing.JLabel();
        quizIncludeTipsCheckBox = new javax.swing.JCheckBox();
        leftPanel = new javax.swing.JPanel();
        paneWithTree = new javax.swing.JScrollPane();
        classificationTree = new javax.swing.JTree();
        statisticPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        questionerMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveClassificationMenuItem = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        quizMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        addCategoryItem.setText("Add Category");
        addCategoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryItemActionPerformed(evt);
            }
        });
        categoryTreePopupMenu.add(addCategoryItem);

        removeCategoryItem.setText("Remove Category");
        removeCategoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCategoryItemActionPerformed(evt);
            }
        });
        categoryTreePopupMenu.add(removeCategoryItem);

        addClassItem.setText("Add Class");
        addClassItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClassItemActionPerformed(evt);
            }
        });
        categoryTreePopupMenu.add(addClassItem);

        showInfoItem.setText("Show Info");
        showInfoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInfoItemActionPerformed(evt);
            }
        });
        categoryTreePopupMenu.add(showInfoItem);
        categoryTreePopupMenu.add(jSeparator1);

        addQuestion.setText("ADD Question");
        addQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestionActionPerformed(evt);
            }
        });
        categoryTreePopupMenu.add(addQuestion);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Questioner 0.0"); // NOI18N
        setBackground(new java.awt.Color(204, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        quizPanel.setBackground(new java.awt.Color(204, 204, 204));
        quizPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Quiz", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black));

        javax.swing.GroupLayout quizPanelLayout = new javax.swing.GroupLayout(quizPanel);
        quizPanel.setLayout(quizPanelLayout);
        quizPanelLayout.setHorizontalGroup(
            quizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        quizPanelLayout.setVerticalGroup(
            quizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );

        quizSetupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Quiz Setup"));

        timeLabel.setText("Time(min)");

        includeDetailedAnwersLabel.setText("Detailed Ans Questions");

        jLabel7.setText("Frequency From [MHz]:");

        quizMinutesTextField.setText("20");

        startQuizButton.setText("Start Quiz");
        startQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startQuizButtonActionPerformed(evt);
            }
        });

        questionsCountLabel.setText("Quistions Count");

        quizQuestionsCountTextField.setText("10");

        quizTopicsLabel.setText("Quiz Topics");

        quizTopicsTextPane.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(quizTopicsTextPane);

        includeTipsLabel.setText("Include TIPS");

        javax.swing.GroupLayout quizSetupPanelLayout = new javax.swing.GroupLayout(quizSetupPanel);
        quizSetupPanel.setLayout(quizSetupPanelLayout);
        quizSetupPanelLayout.setHorizontalGroup(
            quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizSetupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quizSetupPanelLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(timeLabel)
                            .addComponent(quizTopicsLabel)
                            .addComponent(questionsCountLabel)))
                    .addGroup(quizSetupPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(startQuizButton, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quizSetupPanelLayout.createSequentialGroup()
                        .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(quizQuestionsCountTextField)
                            .addComponent(quizMinutesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 297, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quizSetupPanelLayout.createSequentialGroup()
                        .addComponent(includeDetailedAnwersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quizIncludeDetailedAnswersCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(includeTipsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quizIncludeTipsCheckBox)))
                .addContainerGap())
        );
        quizSetupPanelLayout.setVerticalGroup(
            quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizSetupPanelLayout.createSequentialGroup()
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(quizMinutesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quizQuestionsCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quizTopicsLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(includeTipsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(quizSetupPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(quizSetupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(includeDetailedAnwersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quizIncludeDetailedAnswersCheckBox)))
                    .addComponent(quizIncludeTipsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(startQuizButton))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        classificationTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        classificationTree.setRootVisible(false);
        classificationTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classificationTreeMouseClicked(evt);
            }
        });
        paneWithTree.setViewportView(classificationTree);

        statisticPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton1.setText("jButton1");

        javax.swing.GroupLayout statisticPanelLayout = new javax.swing.GroupLayout(statisticPanel);
        statisticPanel.setLayout(statisticPanelLayout);
        statisticPanelLayout.setHorizontalGroup(
            statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(335, Short.MAX_VALUE))
        );
        statisticPanelLayout.setVerticalGroup(
            statisticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(statisticPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(paneWithTree, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addComponent(paneWithTree, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");
        fileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileMenuMouseClicked(evt);
            }
        });

        saveClassificationMenuItem.setText("Save Classification");
        saveClassificationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClassificationMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveClassificationMenuItem);

        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitMouseEntered(evt);
            }
        });
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        exit.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                exitMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        fileMenu.add(exit);

        questionerMenuBar.add(fileMenu);

        quizMenu.setText("Quiz");

        jMenuItem1.setText("New Quiz");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        quizMenu.add(jMenuItem1);

        questionerMenuBar.add(quizMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("About");
        helpMenu.add(helpMenuItem);

        questionerMenuBar.add(helpMenu);

        setJMenuBar(questionerMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quizPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quizSetupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(quizSetupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quizPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(54, 54, 54))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void classificationTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classificationTreeMouseClicked
        javax.swing.JTree tree = (JTree) evt.getSource(); // get tree component



         TreePath tp = tree.getPathForLocation(evt.getX(), evt.getY()); // get path as [root, subnode ,subnode ..]
   
         if (tp != null){
                    // if we click on some node
                    System.out.println(tp.toString());
            }
         if(tp==null) return ;

         DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();

         if(  evt.getClickCount()==2){
                // dont add dublicates

                if(this.quiz!=null){

                    this.addCategoryOrClassToQuiz((ClassificationItem)node.getUserObject(), quiz);
              //  if(this.quizTopicsTextPane.getText().indexOf(node.getUserObject().toString())<0)
               // this.quizTopicsTextPane.setText(this.quizTopicsTextPane.getText()+node.getUserObject()+"\n");
             return ;
                }
         }

      if(  SwingUtilities.isRightMouseButton(evt)){
             if(tp.toString().equals("[root]")){
                      categoryTreePopupMenu.removeAll();   
                      categoryTreePopupMenu.add(this.addClassItem);
                      categoryTreePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());

                                    classificationTree.setSelectionPath(tp);
                                    classificationTree.scrollPathToVisible(tp);
             }else if(true){
                                    categoryTreePopupMenu.removeAll();
                                    categoryTreePopupMenu.add(this.addCategoryItem);
                                    categoryTreePopupMenu.add(this.removeCategoryItem);
                                    categoryTreePopupMenu.add(this.jSeparator1);
                                    categoryTreePopupMenu.add(this.addQuestion);
                                    categoryTreePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());


                                    classificationTree.setSelectionPath(tp);
                                    classificationTree.scrollPathToVisible(tp);
                            }
      }
    }//GEN-LAST:event_classificationTreeMouseClicked

    private void fileMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMouseClicked
    }//GEN-LAST:event_fileMenuMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
    }//GEN-LAST:event_exitMouseClicked

    private void exitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseEntered
    }//GEN-LAST:event_exitMouseEntered

    private void exitMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_exitMenuKeyPressed

    }//GEN-LAST:event_exitMenuKeyPressed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void saveClassificationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClassificationMenuItemActionPerformed
        System.out.println(this.classification);
    }//GEN-LAST:event_saveClassificationMenuItemActionPerformed

    private void addCategoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryItemActionPerformed

        TreePath tp = classificationTree.getSelectionPath(); // get path as [root, subnode ,subnode ..]
        DefaultMutableTreeNode  currCategoryNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
        DefaultTreeModel model = (DefaultTreeModel) classificationTree.getModel();



        NewCategoryDialog dialog=new NewCategoryDialog(this, true);
         dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        dialog.setVisible(true);
        String newCategoryName=dialog.getNameOfCategoryDialog();
        Boolean newCategoryFile=dialog.getFileOfCategoryDialog();

        if(newCategoryName==null || newCategoryName.length()==0 ) return ;
        

        Category newCategory=new Category();
        newCategory.setId(((ClassificationItem)currCategoryNode.getUserObject()).getId()+"_"+currCategoryNode.getChildCount() );
        newCategory.setName(newCategoryName);
        newCategory.setnOfQuestions(0);
        newCategory.setnOfSubcategories(0);
        if(newCategoryFile  ){
            newCategory.setFileName(newCategoryName.replace(" ", "").toLowerCase() +".xml");
            // create new file for category if needed
            this.reader.addQuestionsFile(this.dataPath+newCategory.getFileName(), newCategory);
        }else{
            newCategory.setFileName(null);
        }

        // add to classification tree
        model.insertNodeInto(new DefaultMutableTreeNode(newCategory), currCategoryNode, currCategoryNode.getChildCount());

        // add to classification.xml  file
        this.reader.addCategoryToXML(newCategory,this.classificationXMLPath,
                ((ClassificationItem)currCategoryNode.getUserObject()).getId());

    }//GEN-LAST:event_addCategoryItemActionPerformed

    private void showInfoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInfoItemActionPerformed
        JOptionPane.showMessageDialog(null, "Show info about selected item");
    }//GEN-LAST:event_showInfoItemActionPerformed

    private void addQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestionActionPerformed

         Category categoryForNewQuestion=((Category)  ((DefaultMutableTreeNode)  classificationTree.
                                                getSelectionPath().getLastPathComponent()).getUserObject());

         DefaultMutableTreeNode  parentOfCategoryForNewQuestion=(DefaultMutableTreeNode)   ((DefaultMutableTreeNode)  classificationTree.
                                                getSelectionPath().getLastPathComponent()).getParent();


     

         

        NewQuestionDialog dialog=new NewQuestionDialog(this, true);
        dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        dialog.setNewQuestionCategory(   categoryForNewQuestion  );
        dialog.setVisible(true);

        if(dialog.getDialogResult()){
            categoryForNewQuestion.setnOfQuestions(categoryForNewQuestion.getnOfQuestions()+1);
            this.reader.updateQuestionsCountInXML(categoryForNewQuestion, 1);

            //update tree number of questions
            
            while( parentOfCategoryForNewQuestion.getUserObject() instanceof   ClassificationItem ){
                ClassificationItem item=(ClassificationItem) parentOfCategoryForNewQuestion.getUserObject();
                item.setnOfQuestions(item.getnOfQuestions()+1);
            
                parentOfCategoryForNewQuestion=(DefaultMutableTreeNode) parentOfCategoryForNewQuestion.getParent();
            }

        }
        
    }//GEN-LAST:event_addQuestionActionPerformed

    private void addClassItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClassItemActionPerformed
        JOptionPane.showMessageDialog(null, "Adding class");
    }//GEN-LAST:event_addClassItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed



        this.quiz=new Quiz();
        this.quizMinutesTextField.setText(this.quiz.getMinutes()+"");
        this.quizQuestionsCountTextField.setText(this.quiz.getNofquestions()+"");
        this.quizTopicsTextPane.setText("");
        this.quizIncludeDetailedAnswersCheckBox.setSelected(this.quiz.getIncludeDetailedAnswersQuestions());
        this.quizIncludeTipsCheckBox.setSelected(this.quiz.getIncludeTips());
        
        this.quizSetupPanel.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.quizSetupPanel.setVisible(false);
        this.quizPanel.setVisible(false);

        String randoms="";
        for(int i=0;i<10;i++)
            randoms+=this.questionerRandom.nextInt(100)+",";
        JOptionPane.showMessageDialog(this, randoms);

    }//GEN-LAST:event_formWindowOpened

    private void startQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startQuizButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Starting new Quiz, categories: " +this.quiz.getCategories().size());

    }//GEN-LAST:event_startQuizButtonActionPerformed

    private void removeCategoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCategoryItemActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "removing category ");
    }//GEN-LAST:event_removeCategoryItemActionPerformed


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } 
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionerJFrame().setVisible(true);
            }
        });
    }

    private void createCategoriesTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");

        this.classification = this.reader.getClassification(this.classificationXMLPath);

        Set<String> classesNames = this.classification.getClasses().keySet();

        for (String item : classesNames) {
            DefaultMutableTreeNode curClassNode = new DefaultMutableTreeNode(this.classification.getClasses().get(item));

            LinkedHashMap<String, Category> categoriesInCurrClass = this.classification.getClasses().get(item).getCategories();
            Set<String> categoriesInCurrClassKeys = categoriesInCurrClass.keySet();

            for (String catKey : categoriesInCurrClassKeys) {
                DefaultMutableTreeNode curCategoryNode = new DefaultMutableTreeNode(categoriesInCurrClass.get(catKey));

                addCategoriesToClassRecursive(categoriesInCurrClass.get(catKey), curCategoryNode);
                curClassNode.add(curCategoryNode);
            }

            root.add(curClassNode);
            
        }

      
        classificationTree.setModel(new javax.swing.tree.DefaultTreeModel(root));
        classificationTree.setRootVisible(true);
        classificationTree.setShowsRootHandles(true);

        paneWithTree.add(classificationTree);
        paneWithTree.setViewportView(classificationTree);

    }

    private void addCategoriesToClassRecursive(Category curCategory, DefaultMutableTreeNode curCategoryNode) {
        if (curCategory.getCategories().size() == 0) {
            return;
        }
        
        LinkedHashMap<String, Category> categoriesInCurrCategory = curCategory.getCategories();
        Set<String> curCategoryKeys = curCategory.getCategories().keySet();


        for (String curCategoryKey : curCategoryKeys) {
            DefaultMutableTreeNode categoryNodeToAdd = new DefaultMutableTreeNode(categoriesInCurrCategory.get(curCategoryKey));

            addCategoriesToClassRecursive(categoriesInCurrCategory.get(curCategoryKey), categoryNodeToAdd);

            curCategoryNode.add(categoryNodeToAdd);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addCategoryItem;
    private javax.swing.JMenuItem addClassItem;
    private javax.swing.JMenuItem addQuestion;
    private javax.swing.JPopupMenu categoryTreePopupMenu;
    private javax.swing.JTree classificationTree;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JLabel includeDetailedAnwersLabel;
    private javax.swing.JLabel includeTipsLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JScrollPane paneWithTree;
    private javax.swing.JMenuBar questionerMenuBar;
    private javax.swing.JLabel questionsCountLabel;
    private javax.swing.JCheckBox quizIncludeDetailedAnswersCheckBox;
    private javax.swing.JCheckBox quizIncludeTipsCheckBox;
    private javax.swing.JMenu quizMenu;
    private javax.swing.JTextField quizMinutesTextField;
    private javax.swing.JPanel quizPanel;
    private javax.swing.JTextField quizQuestionsCountTextField;
    private javax.swing.JPanel quizSetupPanel;
    private javax.swing.JLabel quizTopicsLabel;
    private javax.swing.JTextPane quizTopicsTextPane;
    private javax.swing.JMenuItem removeCategoryItem;
    private javax.swing.JMenuItem saveClassificationMenuItem;
    private javax.swing.JMenuItem showInfoItem;
    private javax.swing.JButton startQuizButton;
    private javax.swing.JPanel statisticPanel;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
    private ReadWriteClassificationXML reader =new ReadWriteClassificationXML();
    private Classification classification = null;
    public String classificationXMLPath="D:\\questioner\\data\\classification.xml";
    public String dataPath="D:\\questioner\\data\\questions\\";
    private Random questionerRandom=new Random(new Date().getTime());
    
    private Quiz quiz=null;


        public void addCategoryOrClassToQuiz (ClassificationItem classorcategory , Quiz quiz){

            if(classorcategory instanceof  Category){
                    Category category=(Category)classorcategory;

                if( category.getFileName()!=null ){
                        
                         if(this.quizTopicsTextPane.getText().indexOf(category.toString())<0  && category.getnOfQuestions()>0 ){
                                this.quizTopicsTextPane.setText(this.quizTopicsTextPane.getText()+category+"\n");
                                quiz.getCategories().put(category.getId(), category);
                         }
                }
                
                if(category.getCategories().size()>0    ){
                        Set<String> childCategoriesKeySet=category.getCategories().keySet();
                        for(String item : childCategoriesKeySet){
                            addCategoryOrClassToQuiz(category.getCategories().get(item), quiz);
                        }
                }else return;

            }

              if(classorcategory instanceof  Class){
                    Class currentClass=(Class)classorcategory;
                    if(currentClass.getCategories().size()>0){
                        Set<String> childCategoriesKeySet=currentClass.getCategories().keySet();
                        for(String item : childCategoriesKeySet){
                            addCategoryOrClassToQuiz(currentClass.getCategories().get(item), quiz);
                        }
                    }

              }

            return ;
    }
}
