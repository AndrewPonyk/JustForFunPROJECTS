var MatrixPlanFunctions = 'package com.agileassetsinc.main;LINESEPARATOR'
+'import com.agileassetsinc.core.*;LINESEPARATOR'
+'import com.agileassetsinc.core.cache.SetupColumnIdCache;LINESEPARATOR'
+'import com.agileassetsinc.core.db.DbIndex;LINESEPARATOR'
+'LINESEPARATOR'
+'import java.util.ArrayList;LINESEPARATOR'
+'import java.util.Arrays;LINESEPARATOR'
+'import java.util.List;LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'/**LINESEPARATOR'
+' * Created by IntelliJ IDEA.LINESEPARATOR'
+' * User: tonyaLINESEPARATOR'
+' * Date: Nov 24, 2006LINESEPARATOR'
+' * Time: 12:14:18 PMLINESEPARATOR'
+' * To change this template use File | Settings | File Templates.LINESEPARATOR'
+' */LINESEPARATOR'
+'public class MatrixPlanFunctions {LINESEPARATOR'
+'    private DataLayer dl;LINESEPARATOR'
+'    private Integer planId;LINESEPARATOR'
+'    private Integer fiscalYear;LINESEPARATOR'
+'    private DataStore dsPlan;LINESEPARATOR'
+'    private DataStore dsTotals;LINESEPARATOR'
+'    private boolean accessRegPlan;LINESEPARATOR'
+'    private double hoursPerDay = 8;LINESEPARATOR'
+'    private boolean restrictZeros = false;LINESEPARATOR'
+'    private int relativeCalendarImportance;LINESEPARATOR'
+'    private Integer columnScale;LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public MatrixPlanFunctions(DataLayer dl, Integer planId, Integer fiscalYear, DataStore dsPlan, DataStore dsTotals, boolean accReg) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	this.dl = dl;LINESEPARATOR'
+'        this.planId = planId;LINESEPARATOR'
+'        this.fiscalYear = fiscalYear;LINESEPARATOR'
+'        this.dsPlan = dsPlan;LINESEPARATOR'
+'        this.dsTotals = dsTotals;LINESEPARATOR'
+'        accessRegPlan = accReg;LINESEPARATOR'
+'LINESEPARATOR'
+'        DataStore ds = dl.createRetrieveDataStore("select CAL_HOURS_PER_DAY from SETUP_CUSTOM_CALENDAR where CALENDAR_ID=1");LINESEPARATOR'
+'        if (ds.rowCount() == 1 && ds.getItemNumber(1,1) > 0)LINESEPARATOR'
+'        	hoursPerDay=ds.getItemNumber(1,1);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void CopyPMSPlan(boolean overwrite,Integer MWPType ) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'        String sql_str="select "+planId+"as plan_id,"+fiscalYear+" as EFF_FISCAL_YEAR, 2 as asset_type_id,a.activity_id,a.comment_str,a.total_cost,a.inv_elem_id,a.owner_id,\n" +LINESEPARATOR'
+'                "  b.unit_cost  AS rate ,\n" +LINESEPARATOR'
+'                "  b.MAN_HOURS as unit_hours,\n" +LINESEPARATOR'
+'                "  b.NUM_MEN,\n" +LINESEPARATOR'
+'                "\tround(case when b.unit_cost is null or b.unit_cost=0 then null else a.total_cost/\t\t  b.unit_cost end,2) as amount    \n" +LINESEPARATOR'
+'                "    from (\n" +LINESEPARATOR'
+'                " select  a.plan_year,a.PMS_TREATMENT_ID,c.activity_id,b.route_id,\n" +LINESEPARATOR'
+'                " greatest(b.lane_dir,lb.lane_dir) as lane_dir,b.lane_id,\n" +LINESEPARATOR'
+'                " greatest(b.offset_from,lb.offset_from) as offset_from ,\n" +LINESEPARATOR'
+'                " \'Route: \'||(Select sr.route_name from setup_route sr where sr.route_id=b.route_id)||\'; Dir:\'||(select sl.lane_dir_name from setup_lane_dir sl where sl.lane_dir=greatest(b.lane_dir,lb.lane_dir))\n" +LINESEPARATOR'
+'                " ||\'; from \'||to_char(greatest(b.offset_from,lb.offset_from))||\' to \'||TO_CHAR(least(b.offset_to, lb.offset_to)) as comment_str,\n" +LINESEPARATOR'
+'                " a.project_price * \n" +LINESEPARATOR'
+'                " case when b.lane_dir=0 and lb.lane_dir>0 then 0.5 else 1 end *\n" +LINESEPARATOR'
+'                " case when b.offset_to > b.offset_from then (least(b.offset_to, lb.offset_to) - greatest(b.offset_from,lb.offset_from) )/(b.offset_to - b.offset_from) else 1 end  as total_cost,\n" +LINESEPARATOR'
+'                " least(b.offset_to, lb.offset_to) as offset_to,\n" +LINESEPARATOR'
+'                "  \n" +LINESEPARATOR'
+'                "  i.section_id  as inv_elem_id,\n" +LINESEPARATOR'
+'                "  i.crew_id as owner_id\n" +LINESEPARATOR'
+'                " from pms_master_wp a,setup_loc_ident b,setup_activity_tcplan c,setup_loc_ident lb,section_inventory i  where \n" +LINESEPARATOR'
+'                " a.PMS_MASTER_WP_TYPE_ID="+MWPType+" and a.approved=1 and a.plan_year="+fiscalYear+" and \n" +LINESEPARATOR'
+'                " a.loc_ident=b.loc_ident and b.sourse_table=\'PMS_MASTER_WP\' and c.PMS_TREATMENT_ID=a.PMS_TREATMENT_ID\n" +LINESEPARATOR'
+'                " and lb.sourse_table=\'SECTION_INVENTORY\'  \n" +LINESEPARATOR'
+'                "and b.route_id=lb.route_id and (b.lane_dir=lb.lane_dir or b.lane_dir=0 or lb.lane_dir =0)\n" +LINESEPARATOR'
+'                "and b.offset_from<lb.offset_to and b.offset_to>lb.offset_from and i.loc_ident=lb.loc_ident and section_status_id=1 and lb.offset_from<lb.offset_to) a,\n" +LINESEPARATOR'
+'                "qg_owner_ref_year b \n" +LINESEPARATOR'
+'                "WHERE b.eff_fiscal_year = "+fiscalYear+" \n" +LINESEPARATOR'
+'                "                            AND b.owner_id = a.owner_id\n" +LINESEPARATOR'
+'                "                           AND b.activity_id = a.activity_id";LINESEPARATOR'
+'LINESEPARATOR'
+'        DataStore ds_source= dl.createDataStore(sql_str) ;LINESEPARATOR'
+'        ds_source.reset();LINESEPARATOR'
+'        ds_source.retrieve( );LINESEPARATOR'
+'//        for (int i=1;i<=ds_source.rowCount();i++)  {LINESEPARATOR'
+'//            ds_source.setItemNumber(i,"PLAN_ID",PlanId);LINESEPARATOR'
+'//            ds_source.setItemNumber(i,"EFF_FISCAL_YEAR",FiscalYear);LINESEPARATOR'
+'//LINESEPARATOR'
+'//        }LINESEPARATOR'
+'        if (overwrite) dsPlan.deleteAllRows();LINESEPARATOR'
+'        dsPlan.insertRows(ds_source);LINESEPARATOR'
+'        if (!overwrite) aggregateRows();LINESEPARATOR'
+'        for (int i=1;i<=dsPlan.rowCount();i++)  distributeMenHours(i);LINESEPARATOR'
+'LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void CopyPlan(boolean overwrite,Integer sourcePlan,Integer sourceFiscalYear) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	LINESEPARATOR'
+'        String sql_str=dsPlan.getSql();LINESEPARATOR'
+'        if (sourcePlan==0)         sql_str=sql_str.replace("MASTER_PLAN_MATRIX","ACCOMPL_PLAN_MATRIX") ;LINESEPARATOR'
+'        DataStore ds_source= dl.createDataStore(sql_str) ;LINESEPARATOR'
+'        ds_source.reset();LINESEPARATOR'
+'        ds_source.retrieve(sourcePlan,sourceFiscalYear);LINESEPARATOR'
+'        for (int i=1;i<=ds_source.rowCount();i++)  {LINESEPARATOR'
+'            ds_source.setItemNumber(i,"PLAN_ID",planId);LINESEPARATOR'
+'            ds_source.setItemNumber(i,"EFF_FISCAL_YEAR",fiscalYear);LINESEPARATOR'
+'LINESEPARATOR'
+'        }LINESEPARATOR'
+'        if (overwrite) dsPlan.deleteAllRows();LINESEPARATOR'
+'        dsPlan.insertRows(ds_source);LINESEPARATOR'
+'        if (!overwrite) aggregateRows();LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    }LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    public void aggregateRows() throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'        DbIndex matrixUniqueIndex = dl.getDbIndex("MASTER_PLAN_MATRIX_UI");LINESEPARATOR'
+'        String index_columns[]= matrixUniqueIndex.getCols();LINESEPARATOR'
+'        String non_index_columns[]= {"FTE_1","FTE_2","FTE_3","FTE_4","FTE_5","FTE_6","FTE_7","FTE_8","FTE_9","FTE_10","FTE_11","FTE_12","TOTAL_FTE","CALC_FTE","DELTA_FTE","TOTAL_COST"};LINESEPARATOR'
+'LINESEPARATOR'
+'        dsPlan.sort(dl, TRDIUtils.join(Arrays.asList(index_columns), ","));LINESEPARATOR'
+'        for (int i=2;i<=dsPlan.rowCount();i++)    {LINESEPARATOR'
+'        boolean combine=true;LINESEPARATOR'
+'            for (String ind_column:index_columns)LINESEPARATOR'
+'            combine=combine && TRDIUtils.areObjectsEqual( dsPlan.getItemInteger(i,ind_column),dsPlan.getItemInteger(i-1,ind_column));LINESEPARATOR'
+'            if (!combine) continue;LINESEPARATOR'
+'            for (String column:non_index_columns) {LINESEPARATOR'
+'                if (dsPlan.getItemNumber(i-1,column)==null)dsPlan.setItemNumber(i-1,column,dsPlan.getItemNumber(i,column))  ;LINESEPARATOR'
+'                else if (dsPlan.getItemNumber(i,column)!=null)LINESEPARATOR'
+'             dsPlan.setItemNumber(i-1,column,dsPlan.getItemNumber(i-1,column)+dsPlan.getItemNumber(i,column));LINESEPARATOR'
+'            }LINESEPARATOR'
+'            if (dsPlan.isValidColumn("COMMENT_STR"))  dsPlan.setItemString(i-1,"COMMENT_STR",(dsPlan.isItemNull(i-1,"COMMENT_STR") ? "" : dsPlan.getItemString(i-1,"COMMENT_STR"))+(dsPlan.isItemNull(i,"COMMENT_STR") ? "" : dsPlan.getItemString(i,"COMMENT_STR")));LINESEPARATOR'
+'            dsPlan.deleteRow(i);LINESEPARATOR'
+'            i--;LINESEPARATOR'
+'LINESEPARATOR'
+'        }LINESEPARATOR'
+'LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Distributes the total monthly hours for this activity.  The result of this is that the total hours areLINESEPARATOR'
+'     * normalized across all months to still sum up to the total activity amount, but the hours are redistributedLINESEPARATOR'
+'     * across the months to follow the same distribution as the equipment (or activity) calendar.LINESEPARATOR'
+'     * @param rows The selected rows in the planned activity that we are attempting to normalize.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public void distributeMenHours(int[] rows) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'	    for (int i = 0; i < rows.length; i++)LINESEPARATOR'
+'	    {LINESEPARATOR'
+'	    	distributeMenHours(rows[i]);LINESEPARATOR'
+'	    }LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Distributes the total monthly hours for this activity.  The result of this is that the total hours areLINESEPARATOR'
+'     * normalized across all months to still sum up to the total activity amount, but the hours are redistributedLINESEPARATOR'
+'     * across the months to follow the same distribution as the equipment (or activity) calendar.LINESEPARATOR'
+'     * @param row The selected row in the planned activity that we are attempting to normalize.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public void distributeMenHours(int currRow) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	if (dsPlan.getItemNumber(currRow,"AMOUNT") == null || dsPlan.getItemNumber(currRow,"UNIT_HOURS") == null)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		throw new TRDIException(949);	// cannot distribute hours because either Amount or Unit dur is nullLINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	double[] coeff = getCalendarCoefficients(dsPlan.getItemInteger(currRow, "OWNER_ID"), dsPlan.getItemInteger(currRow, "ACTIVITY_ID"));LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// get the appropriate scale (defined by scale of TOTAL_FTE column)LINESEPARATOR'
+'    	int precision = getScale();LINESEPARATOR'
+'    	LINESEPARATOR'
+'		Double unitHours = dsPlan.getItemNumber(currRow, "UNIT_HOURS");LINESEPARATOR'
+'		Double totalCost = dsPlan.getItemNumber(currRow, "TOTAL_COST");LINESEPARATOR'
+'		Double rate = dsPlan.getItemNumber(currRow, "RATE");LINESEPARATOR'
+'		double totalHours = unitHours * totalCost / rate / hoursPerDay;LINESEPARATOR'
+'		totalHours = TRDIUtils.roundNumber(totalHours, precision);LINESEPARATOR'
+'    	double activityManHours = TRDIUtils.roundNumber(totalHours * Math.pow(10, precision), 0);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	DataStore dsReq = prepareSolverDS("USER_ANALYSIS_SOLVER_REQ");LINESEPARATOR'
+'    	DataStore dsMain = prepareSolverDS("USER_ANALYSIS_SOLVER_MAIN");LINESEPARATOR'
+'    	DataStore dsSolver = prepareSolverDS("USER_ANALYSIS_SOLVER_LVL");LINESEPARATOR'
+'    	DataStore dsCol = prepareSolverDS("USER_ANALYSIS_SOLVER_COL");LINESEPARATOR'
+'    	DataStore dsBnd = prepareSolverDS("USER_ANALYSIS_SOLVER_BND");LINESEPARATOR'
+'    	String userId = dl.getSession().getUserId();LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// insert the obj function rowLINESEPARATOR'
+'    	int row = dsMain.insertRow(0);LINESEPARATOR'
+'    	dsMain.setItemString(row, "USER_ID", userId);LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONST_SIGN", "N");LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONSTR_NAME", "AAA");LINESEPARATOR'
+'    	dsMain.setItemNumber(row, "IS_MAX", 0);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// insert the K-type constraint (planned activity for the year, for this one activity)LINESEPARATOR'
+'    	row = dsMain.insertRow(0);LINESEPARATOR'
+'    	dsMain.setItemString(row, "USER_ID", userId);LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONST_SIGN", "E");LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONSTR_NAME", "K1");LINESEPARATOR'
+'    	dsMain.setItemNumber(row, "RHS", activityManHours);LINESEPARATOR'
+'    	dsMain.setItemNumber(row, "IS_MAX", 0);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// insert each month for this row into USER_ANALYSIS_SOLVER_LVL so we can retrieve solutionsLINESEPARATOR'
+'    	for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		dsSolver.insertRows(dsPlan, currRow, currRow);LINESEPARATOR'
+'    		dsSolver.setItemNumber(dsSolver.rowCount(), "EFF_FISCAL_MONTH", i);LINESEPARATOR'
+'    		dsSolver.setItemNumber(dsSolver.rowCount(), "PLAN_ROW", currRow);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// number the recordsLINESEPARATOR'
+'    	for (int i = 1; i <= dsSolver.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		dsSolver.setItemString(i, "USER_ID", userId);LINESEPARATOR'
+'    		dsSolver.setItemNumber(i, "REC_NUM", i);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// insert all constraints, signs, and boundsLINESEPARATOR'
+'    	String varNum, paddedNum, X, Y, YH, YL;LINESEPARATOR'
+'    	int padLength = 5;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		varNum = "" + i;LINESEPARATOR'
+'    		paddedNum = TRDIUtils.leftPad(varNum, padLength, \'0\');LINESEPARATOR'
+'    		X = "X" + paddedNum;LINESEPARATOR'
+'    		Y = "Y" + paddedNum;LINESEPARATOR'
+'    		YH = "YH" + varNum;LINESEPARATOR'
+'    		YL = "YL" + varNum;LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		insertDsCol(dsCol, X, "K1", 1);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		// Insert YH and YL constraints so the problem becomes linear (see levelFTE() for more info)LINESEPARATOR'
+'    		insertDsCol(dsCol, X, YH, -1);LINESEPARATOR'
+'    		insertDsCol(dsCol, X, YL, 1);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		insertDsCol(dsCol, Y, "AAA", 1);LINESEPARATOR'
+'    		insertDsCol(dsCol, Y, YH, 1);LINESEPARATOR'
+'    		insertDsCol(dsCol, Y, YL, 1);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		// insert RHS for YH/YL constraintsLINESEPARATOR'
+'    		insertDsReq(dsReq, "G", YH, -1*coeff[i-1]*activityManHours);LINESEPARATOR'
+'    		insertDsReq(dsReq, "G", YL, coeff[i-1]*activityManHours);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		// insert bound for XLINESEPARATOR'
+'    		insertBound(dsBnd, coeff[i-1], X);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	dsReq.insertRows(dsMain);LINESEPARATOR'
+'    	dl.saveData(dsSolver, dsMain, dsReq, dsCol, dsBnd);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// update the objective row in USER_ANALYSIS_SOLVER_MAIN so that maxNode is set high enoughLINESEPARATOR'
+'    	dl.executeSQL("UPDATE USER_ANALYSIS_SOLVER_MAIN \n" +LINESEPARATOR'
+'    					"SET MAX_NODE=(SELECT 2 * COUNT(1) FROM USER_ANALYSIS_SOLVER_LVL WHERE USER_ID=get_user_id()) \n" +LINESEPARATOR'
+'    					"WHERE USER_ID=get_user_id() AND CONST_SIGN=\'N\'");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// with all constraints in the table we want to create our MPS file and call solverLINESEPARATOR'
+'    	CbcSolverWrapper.execute(dl, false, "USER_ANALYSIS_SOLVER_LVL");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// zero out all of the current values in the rowLINESEPARATOR'
+'    	for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		dsPlan.setItemNumber(currRow, "FTE_"+i, 0);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// get solutions back from solver and put them into the appropriate tables to update values in the windowLINESEPARATOR'
+'    	dsSolver.retrieve();LINESEPARATOR'
+'    	for (int i = 1; i <= dsSolver.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		String colName = "FTE_" + dsSolver.getItemInteger(i, "EFF_FISCAL_MONTH");LINESEPARATOR'
+'    		Double solution = dsSolver.getItemNumber(i, "SOLUTION") / Math.pow(10, precision);LINESEPARATOR'
+'    		dsPlan.setItemNumber(currRow, colName, solution);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'LINESEPARATOR'
+'    	dsPlan.setItemNumber(currRow, "TOTAL_FTE", totalHours);LINESEPARATOR'
+'    	dsPlan.setItemNumber(currRow, "DELTA_FTE", 0);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Returns an array of coefficients representing either the equipment schedule, or activity calendar.  As aLINESEPARATOR'
+'     * side effect, this method will set the instance variable restrictZeros to true or false, depending onLINESEPARATOR'
+'     * whether or not the zeros in the returned array are hard constraints to solver.LINESEPARATOR'
+'     * @param ownerId The owner id for the current row in the plan (aggregated plan if we are leveling).LINESEPARATOR'
+'     * @param activityId The activity id for the current row in the plan (aggregated plan if we are leveling).LINESEPARATOR'
+'     * @return An array of coefficients for 12 months.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private double[] getCalendarCoefficients(int ownerId, int activityId) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	/* First we need to check for EQUIPMENT_ACTIVITY_SCHEDULE table.  If it exists then we should pull valuesLINESEPARATOR'
+'    	 * from it.  The getEquipmentCoefficients() method should be updated to no longer use connect by prior,LINESEPARATOR'
+'    	 * and it will be nice if it simply returns an array of 12 values.  If it has a zero for any month thisLINESEPARATOR'
+'    	 * should be a hard constraint that absolutely must be followed.  We need to figure out how to map suchLINESEPARATOR'
+'    	 * a constraint to an X value (is it simply 12*row + monthNumber?).  Also need to figure out where toLINESEPARATOR'
+'    	 * store such constraints so that they will ultimately be written to the mps file.LINESEPARATOR'
+'    	 * LINESEPARATOR'
+'    	 * If there is no EQUIPMENT_ACTIVITY_SCHEDULE table or the returned array is empty then we should takeLINESEPARATOR'
+'    	 * the activity calendar into consideration.  Here we should have a method that returns an array of 12LINESEPARATOR'
+'    	 * values.  It would be nice to also have it return a boolean (so return Object[] ???).  The array willLINESEPARATOR'
+'    	 * define the share for each month and the boolean will define if the user has checked off that all zerosLINESEPARATOR'
+'    	 * must be restricted or not (this is their option when defining the calendar).  As part of this, we needLINESEPARATOR'
+'    	 * to modify QG_OWNER_ACT_CALENDAR_VW to return whether or not the user is restricting zeros.LINESEPARATOR'
+'    	 * LINESEPARATOR'
+'    	 * Finally, if neither of the above is defined then we simply have a uniform activity calendar.  In thisLINESEPARATOR'
+'    	 * case we would want to simply fill the array with 1/12 for each month.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	double[] ret = null;LINESEPARATOR'
+'    	setRestrictZeros(false);	// default to false for each callLINESEPARATOR'
+'    	if (dl.doesTableExist("EQUIPMENT_ACTIVITY_SCHEDULE"))LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		ret = getEquipmentCoefficients(ownerId, activityId);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// if we didn\'t have an equipment schedule then fall back on activity calendar or a uniform calendarLINESEPARATOR'
+'    	if (ret == null)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		ret = getActivityCalendarCoefficients(ownerId, activityId);LINESEPARATOR'
+'    		if (ret == null)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			setRestrictZeros(false);LINESEPARATOR'
+'        		setRelativeCalendarImportance(1);LINESEPARATOR'
+'    			ret = new double[12];LINESEPARATOR'
+'    			for (int i = 0; i < 12; i++)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				ret[i] = 1.0 / 12.0;LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	return ret;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Retrieves the monthly equipment coefficients for the given plan row.  As a side effect, if thisLINESEPARATOR'
+'     * method returns an array then it will also set the instance variable restrictZeros to true, toLINESEPARATOR'
+'     * indicate that the zeros in the returned array are hard constraints to solver.LINESEPARATOR'
+'     * @param ownerId The owner id for the current row in the plan (aggregated plan if we are leveling).LINESEPARATOR'
+'     * @param activityId The activity id for the current row in the plan (aggregated plan if we are leveling).LINESEPARATOR'
+'     * @return An array of coefficients for 12 months or null if there is no equipment schedule.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private double[] getEquipmentCoefficients(int ownerId, int activityId) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	double[] ret = null;LINESEPARATOR'
+'    	DataStore dsEquipCoeff = null;LINESEPARATOR'
+'    	DataStore dsCheck = dl.createDataStore("SELECT COUNT (1) \n" +LINESEPARATOR'
+'                    " FROM plan_activity_equipment a,EQUIPMENT_SCHEDULE_OWNER c \n" +LINESEPARATOR'
+'                    " WHERE a.activity_id = ? \n" +LINESEPARATOR'
+'                    " AND a.owner_id=c.district_id and c.in_subdistrict_id=?");LINESEPARATOR'
+'		dsCheck.retrieve(activityId, ownerId);LINESEPARATOR'
+'		LINESEPARATOR'
+'		LINESEPARATOR'
+'		// if we have at least one row then there are equipment coefficients to be setLINESEPARATOR'
+'		if (dsCheck.getItemInteger(1,1) > 0)LINESEPARATOR'
+'		{LINESEPARATOR'
+'			dsEquipCoeff = dl.createDataStore("SELECT   c.eff_fiscal_month,\n" +LINESEPARATOR'
+'					"           SUM (b.eff_hours)\n" +LINESEPARATOR'
+'					"         / AVG ((SELECT SUM (b.eff_hours) \n" +LINESEPARATOR'
+'					"                   FROM setup_month_year a, setup_custom_calendar_det b\n" +LINESEPARATOR'
+'					"                  WHERE a.calendar_id = 1\n" +LINESEPARATOR'
+'					"                    AND a.eff_fiscal_year = ?\n" +LINESEPARATOR'
+'					"                    AND a.eff_fiscal_month = c.eff_fiscal_month\n" +LINESEPARATOR'
+'					"                    AND a.eff_year = TO_NUMBER (TO_CHAR (b.eff_date, \'YYYY\'))\n" +LINESEPARATOR'
+'					"                    AND a.eff_month = TO_NUMBER (TO_CHAR (b.eff_date, \'MM\')))\n" +LINESEPARATOR'
+'					"               ) AS month_coef\n" +LINESEPARATOR'
+'					"    FROM equipment_activity_schedule a,\n" +LINESEPARATOR'
+'					"         plan_activity_equipment b,\n" +LINESEPARATOR'
+'					"         setup_custom_calendar_det b,\n" +LINESEPARATOR'
+'					"         setup_month_year c\n" +LINESEPARATOR'
+'					"   WHERE a.in_subdistrict_id = ?\n" +LINESEPARATOR'
+'					"     AND   a.equipment_id = b.equipment_id\n" +LINESEPARATOR'
+'					"     AND a.district_id = b.owner_id\n" +LINESEPARATOR'
+'					"     AND b.activity_id = ?\n"+LINESEPARATOR'
+'					"     AND b.calendar_id = 1\n" +LINESEPARATOR'
+'					"     AND b.eff_date BETWEEN a.start_date AND a.end_date\n" +LINESEPARATOR'
+'					"     AND TO_NUMBER (TO_CHAR (b.eff_date, \'YYYY\')) = c.eff_year\n" +LINESEPARATOR'
+'					"     AND TO_NUMBER (TO_CHAR (b.eff_date, \'MM\')) = c.eff_month\n" +LINESEPARATOR'
+'					"     AND c.eff_fiscal_year = ?\n" +LINESEPARATOR'
+'					"GROUP BY c.eff_fiscal_month");LINESEPARATOR'
+'			dsEquipCoeff.retrieve(fiscalYear, ownerId, activityId, fiscalYear);LINESEPARATOR'
+'			LINESEPARATOR'
+'			// set 0 as default and then set the values for the months that have dataLINESEPARATOR'
+'			setRestrictZeros(true);LINESEPARATOR'
+'			ret = new double[12];LINESEPARATOR'
+'			for (int i = 0; i < ret.length; i++)LINESEPARATOR'
+'			{LINESEPARATOR'
+'				ret[i] = 0.0;LINESEPARATOR'
+'			}LINESEPARATOR'
+'			LINESEPARATOR'
+'			for (int i = 1; i <= dsEquipCoeff.rowCount(); i++)LINESEPARATOR'
+'			{LINESEPARATOR'
+'				int pos = dsEquipCoeff.getItemInteger(i, "EFF_FISCAL_MONTH") - 1;LINESEPARATOR'
+'				ret[pos] = dsEquipCoeff.getItemNumber(i, "MONTH_COEF");LINESEPARATOR'
+'			}LINESEPARATOR'
+'		}LINESEPARATOR'
+'		LINESEPARATOR'
+'		return ret;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Retrieve the activity calendar coefficients for the given owner and activity.  As a side effect, thisLINESEPARATOR'
+'     * method will set the instance variable restrictZeros to true or false, depending on whether or not theLINESEPARATOR'
+'     * zeros in the returned array are hard constraints to solver.LINESEPARATOR'
+'     * @param ownerId The owner_id to evaluateLINESEPARATOR'
+'     * @param activityId The activity_id to evaluateLINESEPARATOR'
+'     * @return An array of coefficients for 12 months or null if there is no activity calendar.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private double[] getActivityCalendarCoefficients(int ownerId, int activityId) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	double[] ret = null;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// if we have an equipment activity schedule then we need the monthly coefficients by activity and ownerLINESEPARATOR'
+'    	DataStore dsCalendar = dl.createDataStore("select b.eff_fiscal_month as month_id, coalesce(\n" +LINESEPARATOR'
+'    			"case \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=1 then a.MONTH_1 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=2 then a.MONTH_2 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=3 then a.MONTH_3 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=4 then a.MONTH_4 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=5 then a.MONTH_5 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=6 then a.MONTH_6 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=7 then a.MONTH_7 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=8 then a.MONTH_8 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=9 then a.MONTH_9 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=10 then a.MONTH_10\n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=11 then a.MONTH_11 \n" +LINESEPARATOR'
+'    			"when b.eff_fiscal_month=12 then a.MONTH_12\n" +LINESEPARATOR'
+'    			"else 0 end\n" +LINESEPARATOR'
+'    			",0) as month_coef,\n" +LINESEPARATOR'
+'    			"calendar_importance_id,\n" +LINESEPARATOR'
+'    			"relative_coef\n" + LINESEPARATOR'
+'    			"from QG_OWNER_ACT_CALENDAR_VW a,setup_month_year b " +LINESEPARATOR'
+'    			"where b.EFF_FISCAL_YEAR=?\n" +LINESEPARATOR'
+'    			"and a.activity_id=? and a.owner_id=? order by b.eff_fiscal_month");LINESEPARATOR'
+'LINESEPARATOR'
+'    	dsCalendar.retrieve(fiscalYear, activityId, ownerId);LINESEPARATOR'
+'    	if (dsCalendar.rowCount() == 12)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		ret = new double[12];LINESEPARATOR'
+'    		setRestrictZeros(dsCalendar.getItemInteger(1, "CALENDAR_IMPORTANCE_ID") != 1);LINESEPARATOR'
+'    		setRelativeCalendarImportance(dsCalendar.getItemInteger(1, "RELATIVE_COEF"));LINESEPARATOR'
+'    		double sum = 0.0;LINESEPARATOR'
+'    		for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			sum += dsCalendar.getItemNumber(i, "MONTH_COEF");LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		// if calendar has all zeros then we will return an array of zeros, else we normalizeLINESEPARATOR'
+'    		if (sum == 0.0)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'        			ret[i-1] = 0.0;LINESEPARATOR'
+'        		}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		elseLINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'        			ret[i-1] = dsCalendar.getItemNumber(i, "MONTH_COEF") / sum;LINESEPARATOR'
+'        		}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	return ret;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void copyFromTxPmp() throws TRDIException // TX_PMP_FOR_PLAN_MATRIX case 7091LINESEPARATOR'
+'    {LINESEPARATOR'
+'        copyFrom("TX_PMP_FOR_PLAN_MATRIX","a.amount","a.inv_elem_id,a.CONTRACT_TOTAL_COST,(select b.inv_elem_name from ident_inv_element b " +LINESEPARATOR'
+'        			"where a.inv_elem_id=b.inv_elem_id) as inv_elem_name,"," and a.eff_fiscal_year="+fiscalYear);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void copyFromInventoryBasedPlan() throws TRDIException // QG_INV_FOR_PLAN_MATRIXLINESEPARATOR'
+'    {LINESEPARATOR'
+'        copyFrom("QG_INV_FOR_PLAN_MATRIX","a.amount","","");LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void copyFromScnResults(Integer scenarioNum) throws TRDIException // copy scnLINESEPARATOR'
+'    {LINESEPARATOR'
+'        String additionalWc = "";LINESEPARATOR'
+'        if (scenarioNum != null)LINESEPARATOR'
+'        {LINESEPARATOR'
+'        	additionalWc += " AND A.MMS_SCENARIO_ID=" + scenarioNum;LINESEPARATOR'
+'        }LINESEPARATOR'
+'        copyFrom("SCENARIO_FOR_PLAN_MATRIX","a.amount","", additionalWc);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void copyFromMWP(Integer MWPType) throws TRDIException // copy mwpLINESEPARATOR'
+'    {LINESEPARATOR'
+'        String additionalWc = "";LINESEPARATOR'
+'        if (MWPType != null)LINESEPARATOR'
+'        {LINESEPARATOR'
+'        	additionalWc += " AND A.PMS_MASTER_WP_TYPE_ID=" + MWPType;LINESEPARATOR'
+'        }LINESEPARATOR'
+'        copyFrom("MMWP_FOR_PLAN_MATRIX","a.amount","",additionalWc);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    public void copyFromBacklog(Integer planNum, Integer fiscalYearNum) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'        if (planNum == null || fiscalYearNum == null)LINESEPARATOR'
+'        {LINESEPARATOR'
+'        	return;LINESEPARATOR'
+'        }LINESEPARATOR'
+'        LINESEPARATOR'
+'        copyFrom("BACKLOG_FOR_PLAN_MATRIX", "a.amount", "", " and a.eff_fiscal_year=" + fiscalYearNum  + " and a.plan_id=" + planNum);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    private void copyFrom(String tableName, String amountColumnName, String clientSpecificColumnName, String additionalWc) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	// uses one of the following tables called from the 4 above methods:LINESEPARATOR'
+'    	//		QG_INV_FOR_PLAN_MATRIXLINESEPARATOR'
+'    	//		SCENARIO_FOR_PLAN_MATRIXLINESEPARATOR'
+'    	//		MMWP_FOR_PLAN_MATRIXLINESEPARATOR'
+'    	//		BACKLOG_FOR_PLAN_MATRIXLINESEPARATOR'
+'    	String sqlStr = "SELECT a.owner_id, a.asset_type_id, a.activity_id,\n" +LINESEPARATOR'
+'    			amountColumnName+" as amount,\n" +LINESEPARATOR'
+'    			"       (SELECT b.unit_cost\n" +LINESEPARATOR'
+'    			"          FROM qg_owner_ref_year b\n" +LINESEPARATOR'
+'    			"         WHERE b.eff_fiscal_year = "+fiscalYear+"\n" +LINESEPARATOR'
+'    			"           AND b.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"           AND b.activity_id = a.activity_id) AS rate,\n" +LINESEPARATOR'
+'    			clientSpecificColumnName+LINESEPARATOR'
+'    			"       (SELECT c.man_hours\n" +LINESEPARATOR'
+'    			"          FROM qg_owner_ref_year c\n" +LINESEPARATOR'
+'    			"         WHERE c.eff_fiscal_year = "+fiscalYear+"\n" +LINESEPARATOR'
+'    			"           AND c.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"           AND c.activity_id = a.activity_id) AS unit_hours,\n" +LINESEPARATOR'
+'    			"         (SELECT b.unit_cost\n" +LINESEPARATOR'
+'    			"            FROM qg_owner_ref_year b\n" +LINESEPARATOR'
+'    			"           WHERE b.eff_fiscal_year = "+fiscalYear+"\n" +LINESEPARATOR'
+'    			"             AND b.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"             AND b.activity_id = a.activity_id)\n" +LINESEPARATOR'
+'    			"       * "+amountColumnName+"\n" +LINESEPARATOR'
+'    			"           AS total_cost,\n" +LINESEPARATOR'
+'    			"       (SELECT c.num_men\n" +LINESEPARATOR'
+'    			"          FROM qg_owner_ref_year c\n" +LINESEPARATOR'
+'    			"         WHERE c.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"           AND c.activity_id = a.activity_id\n" +LINESEPARATOR'
+'    			"           AND c.eff_fiscal_year = "+fiscalYear+") AS num_men,\n" +LINESEPARATOR'
+'    			"       ROUND (  (  (SELECT c.man_hours\n" +LINESEPARATOR'
+'    			"                      FROM qg_owner_ref_year c\n" +LINESEPARATOR'
+'    			"                     WHERE c.eff_fiscal_year = "+fiscalYear+"\n" +LINESEPARATOR'
+'    			"                       AND c.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"                       AND c.activity_id = a.activity_id)\n" +LINESEPARATOR'
+'    			"       * "+amountColumnName+"\n" +LINESEPARATOR'
+'    			"                 / "+hoursPerDay+"\n" +LINESEPARATOR'
+'    			"                )\n" +LINESEPARATOR'
+'    			"              / (SELECT c.num_men\n" +LINESEPARATOR'
+'    			"                   FROM qg_owner_ref_year c\n" +LINESEPARATOR'
+'    			"                  WHERE c.owner_id = a.owner_id\n" +LINESEPARATOR'
+'    			"                    AND c.activity_id = a.activity_id\n" +LINESEPARATOR'
+'    			"                    AND c.eff_fiscal_year = "+fiscalYear+"),\n" +LINESEPARATOR'
+'    			"              2\n" +LINESEPARATOR'
+'    			"             ) AS crew_days\n" +LINESEPARATOR'
+'    			"  FROM  " +tableName+" a where 1=1 ";LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	String WhCl = UserSelection.getSelectionWc(dl,false,tableName,"a");LINESEPARATOR'
+'    	if (WhCl != null && WhCl.length() > 0)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		sqlStr+=" AND "+WhCl ;LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	sqlStr += additionalWc;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	if (accessRegPlan)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		sqlStr += " AND a.owner_id=get_owner_id()";LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	DataStore dsData = dl.createDataStore(sqlStr);LINESEPARATOR'
+'    	dsData.retrieve();LINESEPARATOR'
+'    	dsPlan.deleteAllRows();LINESEPARATOR'
+'    	dsPlan.insertRows(dsData);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 1; i <= dsPlan.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		dsPlan.setItemNumber(i,"PLAN_ID",planId);LINESEPARATOR'
+'    		dsPlan.setItemNumber(i,"EFF_FISCAL_YEAR",fiscalYear);LINESEPARATOR'
+'    		if (dsPlan.getItemNumber(i,"AMOUNT") == null || dsPlan.getItemNumber(i,"UNIT_HOURS") == null)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			for (int j = 1; j <= 12; j++) {LINESEPARATOR'
+'    				dsPlan.setItemNumber(i,"FTE_"+j,0);LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		elseLINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			distributeMenHours(i);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    }LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * This method will level labor resources by formulating a linear programming problem, passing the values toLINESEPARATOR'
+'     * solver, and then retrieving solutions.LINESEPARATOR'
+'     * LINESEPARATOR'
+'     * @param monthDays	An array representing the amount of days (or hours -- units don\'t really matter) availableLINESEPARATOR'
+'     * 					for each month of the year.LINESEPARATOR'
+'     * @param activityIsMaster If true this specifies that the plan is dominant, and we should calculate the FTELINESEPARATOR'
+'     * 					required to satisfy that value.  Otherwise, the FTE is dominant and we are returning theLINESEPARATOR'
+'     * 					amount of activity that is possible for the FTE given by the user (or system).LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public void levelFTE(double[] monthDays, boolean activityIsMaster) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	DataStore dsAggPlan = getAggregatedPlan();LINESEPARATOR'
+'    	double[] activityDays = new double[dsAggPlan.rowCount()];LINESEPARATOR'
+'    	for (int i = 1; i <= dsAggPlan.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		activityDays[i-1] = dsAggPlan.getItemNumber(i, "TOTAL_FTE");LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// verify that the arrays have valuesLINESEPARATOR'
+'    	double totalActivity = 0.0;LINESEPARATOR'
+'    	double totalMonthDays = 0.0;LINESEPARATOR'
+'    	for (int i = 0; i < activityDays.length; i++) {LINESEPARATOR'
+'    		totalActivity += activityDays[i];LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	for (int i = 0; i < monthDays.length; i++) {LINESEPARATOR'
+'    		totalMonthDays += monthDays[i];LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	if (totalActivity == 0.0 || totalMonthDays == 0.0) {LINESEPARATOR'
+'    		throw new TRDIException(972);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// scale the two arrays appropriatelyLINESEPARATOR'
+'    	if (activityIsMaster)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		for (int i = 0; i < monthDays.length; i++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			monthDays[i] = (monthDays[i] / totalMonthDays) * totalActivity;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	elseLINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		// first check the rows and throw an error if scaling is not possibleLINESEPARATOR'
+'    		double totalProtected = 0.0;LINESEPARATOR'
+'    		double totalUnprotected = 0.0;LINESEPARATOR'
+'    		double coeff = 1.0;LINESEPARATOR'
+'    		ArrayList<Integer> unprotectedRows = new ArrayList<Integer>();LINESEPARATOR'
+'    		for (int i = 1; i <= dsAggPlan.rowCount(); i++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			if (dsAggPlan.getItemInteger(i, "ELEM_EXISTS") == 0)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				totalUnprotected += dsAggPlan.getItemNumber(i, "TOTAL_FTE");LINESEPARATOR'
+'    				unprotectedRows.add(new Integer(i));LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    			elseLINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				totalProtected += dsAggPlan.getItemNumber(i, "TOTAL_FTE");LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (totalProtected > totalMonthDays)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			// Leveling not possible because there are not enough resources to perform mandatory activities...LINESEPARATOR'
+'    			throw new TRDIException(1613, totalProtected - totalMonthDays);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		else if (totalProtected < totalMonthDays && unprotectedRows.size() == 0)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			// Leveling not possible because there are not enough activities to occupy resources...LINESEPARATOR'
+'    			throw new TRDIException(1614, totalMonthDays - totalProtected);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		else if (totalProtected == totalMonthDays)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			coeff = 0.0;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		// scale only the unprotected rowsLINESEPARATOR'
+'    		if (totalUnprotected != 0)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			coeff = (totalMonthDays - totalProtected) / totalUnprotected;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (coeff != 1.0)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			for (int i = 0; i < unprotectedRows.size(); i++)LINESEPARATOR'
+'	    		{LINESEPARATOR'
+'    				int rowNum = unprotectedRows.get(i);LINESEPARATOR'
+'	    			activityDays[rowNum-1] *= coeff;LINESEPARATOR'
+'	    			// also set scaled value in the TOTAL_FTE column for the corresponding row in dsPlanLINESEPARATOR'
+'	    			dsPlan.setItemNumber(dsAggPlan.getItemInteger(rowNum, "UNAGG_PLAN_ROW"), "TOTAL_FTE", activityDays[rowNum-1]);LINESEPARATOR'
+'	    		}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// determine the precision that we need to use via the TOTAL_MAN_DAYS columnLINESEPARATOR'
+'    	int precision = getScale();LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    	/* Here we have to check for a difference in precision.  Oracle will only store 4 digits after the decimalLINESEPARATOR'
+'    	 * and therefore, rounding errors can occur which cause us to send data to solver which is infeasible.  ForLINESEPARATOR'
+'    	 * this reason we will push the values to the nearest integer.  Since K constraints (activity) have >= signLINESEPARATOR'
+'    	 * we will call floor.  For M constraints we must be <= so we will use ceil.  At the same time we will alsoLINESEPARATOR'
+'    	 * scale the values to the appropriate level of precision.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	for (int i = 0; i < activityDays.length; i++) {LINESEPARATOR'
+'    		activityDays[i] = Math.floor(activityDays[i] * Math.pow(10, precision));LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 0; i < monthDays.length; i++) {LINESEPARATOR'
+'    		monthDays[i] = Math.ceil(monthDays[i] * Math.pow(10, precision));LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	LINESEPARATOR'
+'LINESEPARATOR'
+'    	/* USER_ANALYSIS_SOLVER_REQ (input table for rows):LINESEPARATOR'
+'    	 * Defines the rows (objective and constraints), their signs (in the [in]equality), and right-hand-side (RHS) for all rows,LINESEPARATOR'
+'    	 * including the objective.  This information is sufficient to create the first and third portion of a .mps file.  NoteLINESEPARATOR'
+'    	 * that objective will have no sign and no RHS as this is a value we are attempting to locate.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	DataStore dsReq = prepareSolverDS("USER_ANALYSIS_SOLVER_REQ");LINESEPARATOR'
+'LINESEPARATOR'
+'    	/* USER_ANALYSIS_SOLVER_MAIN (input table for major constraints and objective function):LINESEPARATOR'
+'    	 * Defines the matrix of coefficients for variables and constraints.  This defines the matrix to connect rows with columns.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	DataStore dsMain = prepareSolverDS("USER_ANALYSIS_SOLVER_MAIN");LINESEPARATOR'
+'LINESEPARATOR'
+'    	/* USER_ANALYSIS_SOLVER_LVL (output table which stores solutions from solver):LINESEPARATOR'
+'    	 * For each activity this contains the solution for each month of a plan row.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	DataStore dsSolver = prepareSolverDS("USER_ANALYSIS_SOLVER_LVL");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	/* USER_ANALYSIS_SOLVER_COL (input table for columns):LINESEPARATOR'
+'    	 * Defines the matrix of coefficients for variables and constraints.  This defines the matrix to connect rows with columns.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	DataStore dsCol = prepareSolverDS("USER_ANALYSIS_SOLVER_COL");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	/* USER_ANALYSIS_SOLVER_BND:LINESEPARATOR'
+'    	 * Stores bound information for each X column.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	DataStore dsBnd = prepareSolverDS("USER_ANALYSIS_SOLVER_BND");LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    	String userId = dl.getSession().getUserId();LINESEPARATOR'
+'LINESEPARATOR'
+'    	// insert obj function rowLINESEPARATOR'
+'    	int row = dsMain.insertRow(0);LINESEPARATOR'
+'    	dsMain.setItemString(row, "USER_ID", userId);LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONST_SIGN", "N");LINESEPARATOR'
+'    	dsMain.setItemString(row, "CONSTR_NAME", "AAA");LINESEPARATOR'
+'    	dsMain.setItemNumber(row, "IS_MAX", 0);LINESEPARATOR'
+'LINESEPARATOR'
+'    	// insert the K-type constraints (planned activity for the year, by activity)LINESEPARATOR'
+'    	for (int i = 0; i < activityDays.length; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		if (activityDays[i] == 0.0) {LINESEPARATOR'
+'    			continue;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'LINESEPARATOR'
+'    		row = dsMain.insertRow(0);LINESEPARATOR'
+'    		dsMain.setItemString(row, "USER_ID", userId);LINESEPARATOR'
+'    		dsMain.setItemString(row, "CONST_SIGN", "G");LINESEPARATOR'
+'    		dsMain.setItemString(row, "CONSTR_NAME", "K"+(i+1));LINESEPARATOR'
+'    		dsMain.setItemNumber(row, "RHS", activityDays[i]);LINESEPARATOR'
+'LINESEPARATOR'
+'    		// insert each month for this row into USER_ANALYSIS_SOLVER_LVL so we can retrieve solutionsLINESEPARATOR'
+'    		for (int j = 1; j <= 12; j++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsSolver.insertRows(dsAggPlan, i+1, i+1);LINESEPARATOR'
+'    			dsSolver.setItemNumber(dsSolver.rowCount(), "EFF_FISCAL_MONTH", j);LINESEPARATOR'
+'    			dsSolver.setItemNumber(dsSolver.rowCount(), "PLAN_ROW", i+1);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	// insert the M-type constraints (FTE values for each month)LINESEPARATOR'
+'    	for (int i = 1; i <= 12; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		row = dsMain.insertRow(0);LINESEPARATOR'
+'    		dsMain.setItemString(row, "USER_ID", userId);LINESEPARATOR'
+'    		dsMain.setItemString(row, "CONST_SIGN", "L");LINESEPARATOR'
+'    		dsMain.setItemString(row, "CONSTR_NAME", "M"+i);LINESEPARATOR'
+'    		dsMain.setItemNumber(row, "RHS", monthDays[i-1]);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	for (int i = 1; i <= dsSolver.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		dsSolver.setItemString(i, "USER_ID", userId);LINESEPARATOR'
+'    		dsSolver.setItemNumber(i, "REC_NUM", i);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	String varNum, paddedNum, X, Y, YH, YL;LINESEPARATOR'
+'    	double[] coeff = null;LINESEPARATOR'
+'    	int padLength = 5;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 0; i < activityDays.length; i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		coeff = getCalendarCoefficients(dsAggPlan.getItemInteger(i+1, "OWNER_ID"), dsAggPlan.getItemInteger(i+1, "ACTIVITY_ID"));LINESEPARATOR'
+'    		this.setRestrictZeros(this.isRestrictZeros() || !dsAggPlan.isItemNull(i+1, "PLAN_LINE_PRIORITY"));LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		for (int j = 0; j < coeff.length; j++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			varNum = "" + (12*i + (j+1));LINESEPARATOR'
+'    			paddedNum = TRDIUtils.leftPad(varNum, padLength, \'0\');LINESEPARATOR'
+'    			X = "X" + paddedNum;LINESEPARATOR'
+'    			Y = "Y" + paddedNum;LINESEPARATOR'
+'    			YH = "YH" + varNum;LINESEPARATOR'
+'    			YL = "YL" + varNum;LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			// insert K and M columnsLINESEPARATOR'
+'    			insertDsCol(dsCol, X, "K" + (i+1), 1);LINESEPARATOR'
+'    			insertDsCol(dsCol, X, "M" + (j+1), 1);LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			/* Here we insert YH and YL constraints so that this problem becomes linear.  We are formulating the problem usingLINESEPARATOR'
+'    	    	 * absolute value, which is not linear.  We want the sum of | Xij/Aj - Pij | > min, so we split this into 2 parts:LINESEPARATOR'
+'    	    	 *LINESEPARATOR'
+'    	    	 * 		YH = Yij + Xij/Aj >=  PijLINESEPARATOR'
+'    	    	 * 		YL = Yij - Xij/Aj >= -PijLINESEPARATOR'
+'    	    	 * LINESEPARATOR'
+'    	    	 * LINESEPARATOR'
+'    	    	 * Note that X is the coefficient to solver, A is the totalActivity for this row, and P is the normalizedLINESEPARATOR'
+'    	    	 * percentage of work that is to be done for the current month in the activity calendar.LINESEPARATOR'
+'    	    	 */LINESEPARATOR'
+'    			insertDsCol(dsCol, X, YH, -1/activityDays[i]);LINESEPARATOR'
+'    			insertDsCol(dsCol, X, YL, 1/activityDays[i]);LINESEPARATOR'
+'    			LINESEPARATOR'
+'        		insertDsCol(dsCol, Y, "AAA", getRelativeCalendarImportance());LINESEPARATOR'
+'        		insertDsCol(dsCol, Y, YH, 1);LINESEPARATOR'
+'        		insertDsCol(dsCol, Y, YL, 1);LINESEPARATOR'
+'        		LINESEPARATOR'
+'        		// insert RHS for YH/YL constraintsLINESEPARATOR'
+'        		insertDsReq(dsReq, "G", YH, -1*coeff[j]);LINESEPARATOR'
+'        		insertDsReq(dsReq, "G", YL, coeff[j]);LINESEPARATOR'
+'        		LINESEPARATOR'
+'        		// insert bound for XLINESEPARATOR'
+'        		insertBound(dsBnd, coeff[j], X);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	dsReq.insertRows(dsMain);LINESEPARATOR'
+'    	dl.saveData(dsSolver, dsMain, dsReq, dsCol, dsBnd);LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// update the objective row in USER_ANALYSIS_SOLVER_MAIN so that maxNode is set high enoughLINESEPARATOR'
+'    	dl.executeSQL("UPDATE USER_ANALYSIS_SOLVER_MAIN \n" +LINESEPARATOR'
+'    			"SET MAX_NODE=(SELECT 2 * COUNT(1) FROM USER_ANALYSIS_SOLVER_LVL WHERE USER_ID=get_user_id()) \n" +LINESEPARATOR'
+'    			"WHERE USER_ID=get_user_id() AND CONST_SIGN=\'N\'");LINESEPARATOR'
+'LINESEPARATOR'
+'    	// with all constraints in the table we want to create our MPS file and call solverLINESEPARATOR'
+'    	CbcSolverWrapper.execute(dl, false, "USER_ANALYSIS_SOLVER_LVL");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// zero out all of the current values in the planLINESEPARATOR'
+'    	for (int i = 1; i <= dsPlan.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		for (int j = 1; j <= 12; j++)LINESEPARATOR'
+'    			dsPlan.setItemNumber(i, "FTE_"+j, 0);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	// get solutions back from solver and put them into the appropriate tables to update values in the windowLINESEPARATOR'
+'    	dsSolver.retrieve();LINESEPARATOR'
+'    	int currRow;LINESEPARATOR'
+'    	String colName;LINESEPARATOR'
+'    	Double solution;LINESEPARATOR'
+'    	DataStore dsCurrPlan = dl.isColumnInTable("INV_ELEM_ID", "MASTER_PLAN_MATRIX") ? dsAggPlan : dsPlan;LINESEPARATOR'
+'    	for (int i = 1; i <= dsSolver.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		currRow = dsSolver.getItemInteger(i, "PLAN_ROW");LINESEPARATOR'
+'    		colName = "FTE_" + dsSolver.getItemInteger(i, "EFF_FISCAL_MONTH");LINESEPARATOR'
+'    		solution = dsSolver.getItemNumber(i, "SOLUTION") / Math.pow(10, precision);LINESEPARATOR'
+'    		dsCurrPlan.setItemNumber(currRow, colName, solution);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// unpack the aggregated solutions back into the total planLINESEPARATOR'
+'    	if (dl.isColumnInTable("INV_ELEM_ID", "MASTER_PLAN_MATRIX"))LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		unpackAggregatedSolutions(dsAggPlan);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Aggregates the rows in the {@link DataStore} dsPlan which have the same <OWNER_ID, ACTIVITY_ID> pair,LINESEPARATOR'
+'     * and also have a not-null INV_ELEM_ID.LINESEPARATOR'
+'     * @return The aggregated {@link DataStore} object. LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private DataStore getAggregatedPlan() throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	DataStore dsAggPlan = new DataStore();LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// create appropriate columns in aggregated ds (mostly the same as dsPlan)LINESEPARATOR'
+'    	List<DataColumn> columns = dsPlan.getColumns();LINESEPARATOR'
+'    	for (DataColumn col : columns)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		if (!col.getName().equals("INV_ELEM_ID"))LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsAggPlan.appendColumn(col);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	/* Append ELEM_EXISTS and UNAGG_PLAN_ROW columns.  The UNAGG_PLAN_ROW is really only validLINESEPARATOR'
+'    	 * for rows that have no INV_ELEM_ID, and will be used to "fix" the TOTAL_FTE value forLINESEPARATOR'
+'    	 * unprotected rows when they get scaled in a level by given/existing FTE.LINESEPARATOR'
+'    	 */LINESEPARATOR'
+'    	dsAggPlan.appendColumn(new DataColumn("ELEM_EXISTS", TRDIConstants.DATA_TYPE_INTEGER));LINESEPARATOR'
+'    	dsAggPlan.appendColumn(new DataColumn("UNAGG_PLAN_ROW", TRDIConstants.DATA_TYPE_INTEGER));LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	// NCDOT does not use INV_ELEM_ID so we can\'t perform any aggregation in a case like thatLINESEPARATOR'
+'    	if (!dl.isColumnInTable("INV_ELEM_ID", "MASTER_PLAN_MATRIX"))LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		for (int i = 1; i <= dsPlan.rowCount(); i++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsAggPlan.insertRows(dsPlan, i, i);LINESEPARATOR'
+'    			dsAggPlan.setItemNumber(dsAggPlan.rowCount(), "ELEM_EXISTS", 0);LINESEPARATOR'
+'    			dsAggPlan.setItemNumber(dsAggPlan.rowCount(), "UNAGG_PLAN_ROW", i);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	elseLINESEPARATOR'
+'    	{LINESEPARATOR'
+'	    	Object[] currValues = new Object[3];LINESEPARATOR'
+'	    	dsAggPlan.buildIndex("aggIndex", "OWNER_ID", "ACTIVITY_ID", "ELEM_EXISTS");LINESEPARATOR'
+'	    	LINESEPARATOR'
+'	    	// keep track of max priority and the rows with INV_ELEM_ID and a null priority (so we can fill them)LINESEPARATOR'
+'	    	int maxPriority = 0;LINESEPARATOR'
+'	    	ArrayList<Integer> nullPriorityRows = new ArrayList<Integer>();LINESEPARATOR'
+'	    	LINESEPARATOR'
+'	    	LINESEPARATOR'
+'	    	// create a new row if necessary, or simply add to the current values in an aggregate rowLINESEPARATOR'
+'	    	for (int i = 1; i <= dsPlan.rowCount(); i++)LINESEPARATOR'
+'	    	{LINESEPARATOR'
+'	    		currValues[0] = dsPlan.getItemInteger(i, "OWNER_ID");LINESEPARATOR'
+'	    		currValues[1] = dsPlan.getItemInteger(i, "ACTIVITY_ID");LINESEPARATOR'
+'	    		currValues[2] = dsPlan.isItemNull(i, "INV_ELEM_ID") ? new Integer(0) : new Integer(1);LINESEPARATOR'
+'	    		LINESEPARATOR'
+'	    		int row = dsAggPlan.findByIndex("aggIndex", currValues);LINESEPARATOR'
+'	    		LINESEPARATOR'
+'	    		if (row > 0)	// add to an existing rowLINESEPARATOR'
+'	    		{LINESEPARATOR'
+'	    			double currVal = dsAggPlan.isItemNull(row, "TOTAL_FTE") ? 0 : dsAggPlan.getItemNumber(row, "TOTAL_FTE");LINESEPARATOR'
+'	    			double planVal = dsPlan.isItemNull(i, "TOTAL_FTE") ? 0 : dsPlan.getItemNumber(i, "TOTAL_FTE");LINESEPARATOR'
+'	    			dsAggPlan.setItemNumber(row, "TOTAL_FTE", currVal+planVal);LINESEPARATOR'
+'	    		}LINESEPARATOR'
+'	    		else	// insert a new rowLINESEPARATOR'
+'	    		{LINESEPARATOR'
+'	    			dsAggPlan.insertRows(dsPlan, i, i);LINESEPARATOR'
+'	    			dsAggPlan.setItemNumber(dsAggPlan.rowCount(), "ELEM_EXISTS", (Integer)currValues[2]);LINESEPARATOR'
+'	    			dsAggPlan.setItemNumber(dsAggPlan.rowCount(), "UNAGG_PLAN_ROW", i);LINESEPARATOR'
+'	    		}LINESEPARATOR'
+'	    		LINESEPARATOR'
+'	    		// keep track of max priorityLINESEPARATOR'
+'	    		if (!dsPlan.isItemNull(i, "PLAN_LINE_PRIORITY"))LINESEPARATOR'
+'	    		{LINESEPARATOR'
+'	    			maxPriority = (int)Math.max(maxPriority, dsPlan.getItemInteger(i, "PLAN_LINE_PRIORITY"));LINESEPARATOR'
+'	    		}LINESEPARATOR'
+'	    		else if ((Integer)currValues[2] == 1 && dsPlan.isItemNull(i, "PLAN_LINE_PRIORITY"))LINESEPARATOR'
+'	    		{LINESEPARATOR'
+'	    			nullPriorityRows.add(new Integer(i));LINESEPARATOR'
+'	    		}LINESEPARATOR'
+'	    	}LINESEPARATOR'
+'	    	LINESEPARATOR'
+'	    	// if there are any rows with INV_ELEM_ID defined but no priority, then assign max+1 for when we unpackLINESEPARATOR'
+'	    	maxPriority++;LINESEPARATOR'
+'	    	for (int i = 0; i < nullPriorityRows.size(); i++)LINESEPARATOR'
+'	    	{LINESEPARATOR'
+'	    		dsPlan.setItemNumber(nullPriorityRows.get(i), "PLAN_LINE_PRIORITY", maxPriority);LINESEPARATOR'
+'	    	}LINESEPARATOR'
+'	    }LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	return dsAggPlan;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Unpacks the aggregated solutions back into the plan, where applicable.LINESEPARATOR'
+'     * @param dsAggPlan The {@link DataStore} representing aggregated values for rows in dsPlan that haveLINESEPARATOR'
+'     * the same <OWNER_ID, ACTIVITY_ID> pair and a not-null INV_ELEM_ID as well as all standalone rows.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void unpackAggregatedSolutions(DataStore dsAggPlan) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	dsPlan.sort(dl, "OWNER_ID ASC, ACTIVITY_ID ASC, PLAN_LINE_PRIORITY ASC");LINESEPARATOR'
+'    	dsPlan.buildIndex("ownerActIndex", "OWNER_ID", "ACTIVITY_ID");LINESEPARATOR'
+'    	Object[] indexValues = new Object[2];LINESEPARATOR'
+'    	int[] rows;LINESEPARATOR'
+'    	int currRow;LINESEPARATOR'
+'    	double[] fteValues = new double[12];LINESEPARATOR'
+'    	boolean elemExists;LINESEPARATOR'
+'    	double totalFte;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 1; i <= dsAggPlan.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		for (int month = 0; month < 12; month++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			fteValues[month] = dsAggPlan.getItemNumber(i, "FTE_" + (month+1));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		indexValues[0] = dsAggPlan.getItemInteger(i, "OWNER_ID");LINESEPARATOR'
+'    		indexValues[1] = dsAggPlan.getItemInteger(i, "ACTIVITY_ID");LINESEPARATOR'
+'    		elemExists = dsAggPlan.getItemInteger(i, "ELEM_EXISTS") == 1;LINESEPARATOR'
+'    		rows = dsPlan.findAllByIndex("ownerActIndex", indexValues);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		for (int j = 0; j < rows.length; j++)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			currRow = rows[j];LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			if (elemExists && dsPlan.isItemNull(currRow, "INV_ELEM_ID"))LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				// We are currently working with all aggregated rows (so ignore the row where INV_ELEM_ID is null)LINESEPARATOR'
+'    				continue;LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    			else if (!elemExists && !dsPlan.isItemNull(currRow, "INV_ELEM_ID"))LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				// We are currently working with just one row -- it was not aggregated at all (so ignore everything else)LINESEPARATOR'
+'    				continue;LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			LINESEPARATOR'
+'    			// distribute non-zero months until TOTAL_FTE is exhaustedLINESEPARATOR'
+'    			totalFte = dsPlan.getItemNumber(currRow, "TOTAL_FTE");LINESEPARATOR'
+'    			for (int month = 0; month < 12; month++)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				if (fteValues[month] <= totalFte)LINESEPARATOR'
+'    				{LINESEPARATOR'
+'    					dsPlan.setItemNumber(currRow, "FTE_" + (month+1), fteValues[month]);LINESEPARATOR'
+'    					totalFte -= fteValues[month];LINESEPARATOR'
+'    					fteValues[month] = 0;LINESEPARATOR'
+'    				}LINESEPARATOR'
+'    				elseLINESEPARATOR'
+'    				{LINESEPARATOR'
+'    					dsPlan.setItemNumber(currRow, "FTE_" + (month+1), totalFte);LINESEPARATOR'
+'    					fteValues[month] -= totalFte;LINESEPARATOR'
+'    					break;LINESEPARATOR'
+'    				}LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Inserts a row into the USER_ANALYSIS_SOLVER_COL table.LINESEPARATOR'
+'     * @param dsCol A {@link DataStore} representing the USER_ANALYSIS_SOLVER_COL table.LINESEPARATOR'
+'     * @param columnName The value to insert into the COLUMN_NAME column.LINESEPARATOR'
+'     * @param constrName The value to insert into the CONSTR_NAME column.LINESEPARATOR'
+'     * @param columnCoef The value to insert into the COLUMN_COEF column.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void insertDsCol(DataStore dsCol, String columnName, String constrName, double columnCoef) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	int row = dsCol.insertRow(0);LINESEPARATOR'
+'    	dsCol.setItemString(row, "USER_ID", dl.getSession().getUserId());LINESEPARATOR'
+'    	dsCol.setItemString(row, "COLUMN_NAME", columnName);LINESEPARATOR'
+'		dsCol.setItemString(row, "CONSTR_NAME", constrName);LINESEPARATOR'
+'		dsCol.setItemNumber(row, "COLUMN_COEF", columnCoef);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Inserts a row into the USER_ANALYSIS_SOLVER_REQ table.LINESEPARATOR'
+'     * @param dsReq A {@link DataStore} representing the USER_ANALYSIS_SOLVER_REQ table.LINESEPARATOR'
+'     * @param constSign The value to insert into the CONST_SIGN column.LINESEPARATOR'
+'     * @param constrName The value to insert into the CONSTR_NAME column.LINESEPARATOR'
+'     * @param rhs The value to insert into the RHS column.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void insertDsReq(DataStore dsReq, String constSign, String constrName, double rhs) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	int row = dsReq.insertRow(0);LINESEPARATOR'
+'    	dsReq.setItemString(row, "USER_ID", dl.getSession().getUserId());LINESEPARATOR'
+'    	dsReq.setItemString(row, "CONST_SIGN", constSign);LINESEPARATOR'
+'    	dsReq.setItemString(row, "CONSTR_NAME", constrName);LINESEPARATOR'
+'    	dsReq.setItemNumber(row, "RHS", rhs);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Inserts a row into the USER_ANALYSIS_SOLVER_BND table.LINESEPARATOR'
+'     * @param dsBnd A {@link DataStore} representing the USER_ANALYSIS_SOLVER_BND table.LINESEPARATOR'
+'     * @param columnName The value to insert into the COLUMN_NAME column.LINESEPARATOR'
+'     * @param boundType The value to insert into the BOUND_TYPE column.LINESEPARATOR'
+'     * @param boundRhs The value to insert into the BOUND_RHS column.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void insertDsBnd(DataStore dsBnd, String columnName, String boundType, Integer boundRhs) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	int row = dsBnd.insertRow(0);LINESEPARATOR'
+'    	dsBnd.setItemString(row, "USER_ID", dl.getSession().getUserId());LINESEPARATOR'
+'    	dsBnd.setItemString(row, "COLUMN_NAME", columnName);LINESEPARATOR'
+'    	dsBnd.setItemString(row, "BOUND_TYPE", boundType);LINESEPARATOR'
+'    	dsBnd.setItemNumber(row, "BOUND_RHS", boundRhs);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Inserts a bound for the given <tt>constraint</tt> so the .mps file is created correctly.  If the calendar isLINESEPARATOR'
+'     * restricting zeros (making them mandatory) and the <tt>coeff</tt> is 0, then we will insert a bound to fixLINESEPARATOR'
+'     * <tt>constraint</tt> to 0.  Otherwise, we just let it take any integer value >= 0.LINESEPARATOR'
+'     * @param dsBnd A {@link DataStore} representing the USER_ANALYSIS_SOLVER_BOUND table.LINESEPARATOR'
+'     * @param coeff The activity coefficient for the current month.LINESEPARATOR'
+'     * @param constraint The name of the current constraint.LINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void insertBound(DataStore dsBnd, double coeff, String constraint) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	String boundType = "";LINESEPARATOR'
+'    	Integer boundRhs = null;LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	if (isRestrictZeros() && coeff == 0.0)LINESEPARATOR'
+'		{LINESEPARATOR'
+'			boundType = "FX";LINESEPARATOR'
+'			boundRhs = new Integer(0);LINESEPARATOR'
+'		}LINESEPARATOR'
+'		elseLINESEPARATOR'
+'		{LINESEPARATOR'
+'			boundType = "PL";LINESEPARATOR'
+'			boundRhs = null;LINESEPARATOR'
+'		}LINESEPARATOR'
+'		LINESEPARATOR'
+'		insertDsBnd(dsBnd, constraint, boundType, boundRhs);LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Cleans out (deletes rows from) the specified table for the current USER_ID, and returns a DataStore object with zero rows.LINESEPARATOR'
+'     * LINESEPARATOR'
+'     * @param tableName The table to be cleaned out.LINESEPARATOR'
+'     * @return A {@link DataStore} object representing a "SELECT *" query run against <code>tableName</code>.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private DataStore prepareSolverDS(String tableName) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	dl.executeSQL("delete from " + tableName + " where user_id=get_user_id()");LINESEPARATOR'
+'    	DataStore ds = dl.createDataStore("select * from " + tableName + " where user_id=get_user_id()");LINESEPARATOR'
+'    	ds.retrieve();LINESEPARATOR'
+'    	ds.setUpdateTable(tableName);LINESEPARATOR'
+'    	return ds;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Aggregates data to populate the DataWindow dw_totals (showing Planned, Available, and Difference).LINESEPARATOR'
+'     * LINESEPARATOR'
+'     * @return A {@link DataStore} representing the values for the DataWindow dw_totals.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public DataStore makeTotals() throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	String windowType = dl.getSession().getCurrentMainWindow().getWindowParams();LINESEPARATOR'
+'    	double totalDays;LINESEPARATOR'
+'    	DataStore dsNumMen = null;LINESEPARATOR'
+'    	//todo temp for IN;LINESEPARATOR'
+'LINESEPARATOR'
+'    	if (dl.isColumnInTable("NUM_MEN","QG_OWNER_REF"))LINESEPARATOR'
+'    		dsNumMen=dl.createDataStore("select NUM_MEN from qg_owner_ref_year where owner_id=? and activity_id=? and eff_fiscal_year=?");LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	for (int i = 1; i <= dsPlan.rowCount(); i++)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		totalDays = (dsPlan.getItemNumber(i,"FTE_1")!=null ? dsPlan.getItemNumber(i,"FTE_1") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_2")!=null ? dsPlan.getItemNumber(i,"FTE_2") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_3")!=null ? dsPlan.getItemNumber(i,"FTE_3") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_4")!=null ? dsPlan.getItemNumber(i,"FTE_4") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_5")!=null ? dsPlan.getItemNumber(i,"FTE_5") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_6")!=null ? dsPlan.getItemNumber(i,"FTE_6") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_7")!=null ? dsPlan.getItemNumber(i,"FTE_7") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_8")!=null ? dsPlan.getItemNumber(i,"FTE_8") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_9")!=null ? dsPlan.getItemNumber(i,"FTE_9") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_10")!=null ? dsPlan.getItemNumber(i,"FTE_10") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_11")!=null ? dsPlan.getItemNumber(i,"FTE_11") : 0) +LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"FTE_12")!=null ? dsPlan.getItemNumber(i,"FTE_12") : 0);LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("TOTAL_FTE"))LINESEPARATOR'
+'    			dsPlan.setItemNumber(i,"TOTAL_FTE",totalDays);LINESEPARATOR'
+'LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("CALC_FTE"))LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			// get the appropriate scaleLINESEPARATOR'
+'    			int precision = getScale();LINESEPARATOR'
+'LINESEPARATOR'
+'    			// calculate value, if possible, and round it to appropriate scaleLINESEPARATOR'
+'    			Double unitHours = dsPlan.getItemNumber(i, "UNIT_HOURS");LINESEPARATOR'
+'    			Double totalCost = dsPlan.getItemNumber(i, "TOTAL_COST");LINESEPARATOR'
+'    			Double rate = dsPlan.getItemNumber(i, "RATE");LINESEPARATOR'
+'    			Double number = null;LINESEPARATOR'
+'    			if (unitHours != null && totalCost != null && rate != null && rate > 0)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				number = unitHours * totalCost / rate / hoursPerDay;LINESEPARATOR'
+'    				number = TRDIUtils.roundNumber(number, precision);LINESEPARATOR'
+'    			}LINESEPARATOR'
+'LINESEPARATOR'
+'    			dsPlan.setItemNumber(i, "CALC_FTE", number);LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("AMOUNT"))LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsPlan.setItemNumber(i,"AMOUNT",LINESEPARATOR'
+'    				(dsPlan.getItemNumber(i,"RATE")!=nullLINESEPARATOR'
+'    				&& dsPlan.getItemNumber(i,"RATE")>0LINESEPARATOR'
+'    				&& dsPlan.getItemNumber(i,"TOTAL_COST")!=null?LINESEPARATOR'
+'    						(dsPlan.getItemNumber(i,"TOTAL_COST")/dsPlan.getItemNumber(i,"RATE"))LINESEPARATOR'
+'    						:null));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("DELTA_FTE"))LINESEPARATOR'
+'    			dsPlan.setItemNumber(i,"DELTA_FTE",dsPlan.getItemNumber(i,"TOTAL_FTE") -(dsPlan.getItemNumber(i,"CALC_FTE")!=null ? dsPlan.getItemNumber(i,"CALC_FTE") : 0));LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("CALC_COST")) dsPlan.setItemNumber(i,"CALC_COST",(dsPlan.getItemNumber(i,"UNIT_HOURS")!=null &&LINESEPARATOR'
+'    				dsPlan.getItemNumber(i,"UNIT_HOURS")>0 && dsPlan.getItemNumber(i,"RATE")!=null  ?LINESEPARATOR'
+'    						dsPlan.getItemNumber(i,"RATE")*hoursPerDay*totalDays/ dsPlan.getItemNumber(i,"UNIT_HOURS") :LINESEPARATOR'
+'    							0));LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		//  IN additional columnsLINESEPARATOR'
+'    		if (dsPlan.isValidColumn("CREW_DAYS"))LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			if (dsPlan.getItemNumber(i,"NUM_MEN")==null)LINESEPARATOR'
+'    			{LINESEPARATOR'
+'    				dsNumMen.retrieve(dsPlan.getItemInteger(i,"OWNER_ID"),dsPlan.getItemInteger(i,"ACTIVITY_ID"),fiscalYear);LINESEPARATOR'
+'    				if (dsNumMen.rowCount()>0 && dsNumMen.getItemNumber(1,1)!=null)LINESEPARATOR'
+'    					dsPlan.setItemNumber(i,"NUM_MEN",dsNumMen.getItemNumber(1,1));LINESEPARATOR'
+'LINESEPARATOR'
+'    			}LINESEPARATOR'
+'    			if (dsPlan.getItemNumber(i,"NUM_MEN")!=null && dsPlan.getItemNumber(i,"NUM_MEN")>0)LINESEPARATOR'
+'    				dsPlan.setItemNumber(i,"CREW_DAYS",dsPlan.getItemNumber(i,"TOTAL_FTE")/dsPlan.getItemNumber(i,"NUM_MEN"));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("PLAN_AMOUNT") && dsPlan.getItemNumber(i,"UNIT_HOURS")!=null && dsPlan.getItemNumber(i,"UNIT_HOURS")>0)LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsPlan.setItemNumber(i,"PLAN_AMOUNT",totalDays * hoursPerDay / dsPlan.getItemNumber(i,"UNIT_HOURS"));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		LINESEPARATOR'
+'    		//  TX additional columnsLINESEPARATOR'
+'    		if (dsPlan.isValidColumn("TOTAL_PLAN_COST") && dsPlan.isValidColumn("contract_total_cost") )LINESEPARATOR'
+'    		{LINESEPARATOR'
+'    			dsPlan.setItemNumber(i,"TOTAL_PLAN_COST",  (dsPlan.getItemNumber(i,"CONTRACT_TOTAL_COST")==null?0:dsPlan.getItemNumber(i,"CONTRACT_TOTAL_COST")) + (dsPlan.getItemNumber(i,"TOTAL_COST")==null?0:dsPlan.getItemNumber(i,"TOTAL_COST")));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	dsTotals.deleteAllRows();LINESEPARATOR'
+'    	Double fte_1=0.0,fte_2=0.0,fte_3=0.0,fte_4=0.0,fte_5=0.0,fte_6=0.0,fte_7=0.0,fte_8=0.0,fte_9=0.0,fte_10=0.0,fte_11=0.0,fte_12=0.0,delta_fte=0.0,total_cost=0.0,fte_total;LINESEPARATOR'
+'    	for(int i=1; i<=dsPlan.rowCount(); i++){LINESEPARATOR'
+'    		fte_1 = fte_1 + (dsPlan.getItemNumber(i,"FTE_1")!=null ? dsPlan.getItemNumber(i,"FTE_1") : 0);LINESEPARATOR'
+'    		fte_2 = fte_2 + (dsPlan.getItemNumber(i,"FTE_2")!=null ? dsPlan.getItemNumber(i,"FTE_2") : 0);LINESEPARATOR'
+'    		fte_3 = fte_3 + (dsPlan.getItemNumber(i,"FTE_3")!=null ? dsPlan.getItemNumber(i,"FTE_3") : 0);LINESEPARATOR'
+'    		fte_4 = fte_4 + (dsPlan.getItemNumber(i,"FTE_4")!=null ? dsPlan.getItemNumber(i,"FTE_4") : 0);LINESEPARATOR'
+'    		fte_5 = fte_5 + (dsPlan.getItemNumber(i,"FTE_5")!=null ? dsPlan.getItemNumber(i,"FTE_5") : 0);LINESEPARATOR'
+'    		fte_6 = fte_6 + (dsPlan.getItemNumber(i,"FTE_6")!=null ? dsPlan.getItemNumber(i,"FTE_6") : 0);LINESEPARATOR'
+'    		fte_7 = fte_7 + (dsPlan.getItemNumber(i,"FTE_7")!=null ? dsPlan.getItemNumber(i,"FTE_7") : 0);LINESEPARATOR'
+'    		fte_8 = fte_8 + (dsPlan.getItemNumber(i,"FTE_8")!=null ? dsPlan.getItemNumber(i,"FTE_8") : 0);LINESEPARATOR'
+'    		fte_9 = fte_9 + (dsPlan.getItemNumber(i,"FTE_9")!=null ? dsPlan.getItemNumber(i,"FTE_9") : 0);LINESEPARATOR'
+'    		fte_10 = fte_10 + (dsPlan.getItemNumber(i,"FTE_10")!=null ? dsPlan.getItemNumber(i,"FTE_10") : 0);LINESEPARATOR'
+'    		fte_11 = fte_11 + (dsPlan.getItemNumber(i,"FTE_11")!=null ? dsPlan.getItemNumber(i,"FTE_11") : 0);LINESEPARATOR'
+'    		fte_12 = fte_12 + (dsPlan.getItemNumber(i,"FTE_12")!=null ? dsPlan.getItemNumber(i,"FTE_12") : 0);LINESEPARATOR'
+'    		if (dsPlan.isValidColumn("DELTA_FTE")) delta_fte = delta_fte + (dsPlan.getItemNumber(i,"DELTA_FTE")!=null ? dsPlan.getItemNumber(i,"DELTA_FTE") : 0);LINESEPARATOR'
+'    		total_cost = total_cost + (dsPlan.getItemNumber(i,"TOTAL_COST")!=null ? dsPlan.getItemNumber(i,"TOTAL_COST") : 0);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	fte_total = fte_1+fte_2+fte_3+fte_4+fte_5+fte_6+fte_7+fte_8+fte_9+fte_10+fte_11+fte_12;LINESEPARATOR'
+'LINESEPARATOR'
+'LINESEPARATOR'
+'    	//Summations of the info in Plan - 1-st row  will be processed depending on client business rules:LINESEPARATOR'
+'    	// ut (0)- fte(divide to monthDays), IN (1)- mandays (no processing); WY (2) - manhours   ( (no processing);LINESEPARATOR'
+'    	DataStore ds_planned=dl.createDataStore("select \'Planned  \' as descr," +LINESEPARATOR'
+'    			fte_1+" as FTE_1,"+fte_2+" as FTE_2,"+fte_3+" as FTE_3," +LINESEPARATOR'
+'    			fte_4+" as FTE_4,"+fte_5+" as FTE_5,"+fte_6+" as FTE_6," +LINESEPARATOR'
+'    			fte_7+" as FTE_7,"+fte_8+" as FTE_8,"+fte_9+" as FTE_9," +LINESEPARATOR'
+'    			fte_10+" as FTE_10,"+fte_11+" as FTE_11,"+fte_12+" as FTE_12," +LINESEPARATOR'
+'    			delta_fte+" as DELTA_FTE,\n" +LINESEPARATOR'
+'    			fte_total+" as TOTAL_MAN_DAYS," +LINESEPARATOR'
+'    			total_cost+" as TOTAL_COST\n" +LINESEPARATOR'
+'    			"from dual");LINESEPARATOR'
+'    	ds_planned.retrieve();LINESEPARATOR'
+'LINESEPARATOR'
+'    	dsTotals.copyRows(ds_planned);LINESEPARATOR'
+'    	// available men  - 2-nd row will be processed depending on client business rules:LINESEPARATOR'
+'    	// ut (0)- fte (no Processing), IN (1)- mandays (* to monthDays); WY (2) - manhours  ( * to monthHours)LINESEPARATOR'
+'    	String sql_str = "select \'Available  \' as descr,\n" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_1,0)) as FTE_1,sum(nvl(a.FTE_2,0)) as FTE_2,sum(nvl(a.FTE_3,0)) as FTE_3,\n" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_4,0)) as FTE_4,sum(nvl(a.FTE_5,0)) as FTE_5,sum(nvl(a.FTE_6,0)) as FTE_6,\n" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_7,0)) as FTE_7,sum(nvl(a.FTE_8,0)) as FTE_8,sum(nvl(a.FTE_9,0)) as FTE_9,\n" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_10,0)) as FTE_10,sum(nvl(a.FTE_11,0)) as FTE_11,sum(nvl(a.FTE_12,0)) as FTE_12,\n" +LINESEPARATOR'
+'    			"0 as DELTA_FTE,\n" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_1,0))+sum(nvl(a.FTE_2,0))+sum(nvl(a.FTE_3,0))+" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_4,0))+sum(nvl(a.FTE_5,0))+sum(nvl(a.FTE_6,0))+" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_7,0))+sum(nvl(a.FTE_8,0))+sum(nvl(a.FTE_9,0))+" +LINESEPARATOR'
+'    			"sum(nvl(a.FTE_10,0))+sum(nvl(a.FTE_11,0))+sum(nvl(a.FTE_12,0)) as TOTAL_MAN_DAYS\n" +LINESEPARATOR'
+'    			"from OWNER_MONTH_FTE a where a.module_id=get_module_id() and a.EFF_FISCAL_YEAR = ?";LINESEPARATOR'
+'LINESEPARATOR'
+'    	// make sure to ONLY filter by OWNER_IDLINESEPARATOR'
+'    	List<String> filterCols = new ArrayList<String>();LINESEPARATOR'
+'    	filterCols.add("OWNER_ID");LINESEPARATOR'
+'    	String wc= UserSelection.getSelectionWc(dl,accessRegPlan,filterCols);LINESEPARATOR'
+'    	if (wc!=null && wc.length()>0) sql_str+=" AND "+wc;LINESEPARATOR'
+'    	DataStore ds_available=dl.createDataStore(sql_str);LINESEPARATOR'
+'    	ds_available.retrieve(fiscalYear);LINESEPARATOR'
+'LINESEPARATOR'
+'    	if(ds_available.rowCount()>0)LINESEPARATOR'
+'    		dsTotals.copyRows(ds_available);LINESEPARATOR'
+'LINESEPARATOR'
+'    	sql_str="select a.EFF_FISCAL_MONTH,\n" +LINESEPARATOR'
+'    			"(select sum(eff_hours)  from setup_custom_calendar_det\n" +LINESEPARATOR'
+'    			"where CALENDAR_ID = 1 and TO_NUMBER (TO_CHAR (eff_date, \'YYYY\')) =eff_year\n" +LINESEPARATOR'
+'    			"and TO_NUMBER (TO_CHAR (eff_date, \'MM\')) =eff_month) as month_hours\n" +LINESEPARATOR'
+'    			"from SETUP_MONTH_YEAR a where EFF_FISCAL_YEAR = ? order by eff_fiscal_month";LINESEPARATOR'
+'    	DataStore ds_month_hours = dl.createDataStore(sql_str);LINESEPARATOR'
+'    	ds_month_hours.retrieve(fiscalYear);LINESEPARATOR'
+'    	for (int i=1;i<=12;i++){LINESEPARATOR'
+'    		if(ds_month_hours.isItemNull(i,"MONTH_HOURS")) {LINESEPARATOR'
+'    			throw new TRDIException(1285, new DataColumn("EFF_FISCAL_YEAR").getLabel()+" "+fiscalYear);//\'Please fill calendar for %1\'LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	if(windowType.equalsIgnoreCase("1")) {//ut type using FTELINESEPARATOR'
+'    		double total_man_days_planned=0;LINESEPARATOR'
+'    		double total_man_days_avail=0;LINESEPARATOR'
+'    		for (int i=1;i<=12;i++){LINESEPARATOR'
+'    			double man_days_planned = dsTotals.getItemNumber(1,"FTE_"+i)/ds_month_hours.getItemNumber(i,"MONTH_HOURS")*hoursPerDay;LINESEPARATOR'
+'    			dsTotals.setItemNumber(1,"FTE_"+i, man_days_planned);//converts to FTELINESEPARATOR'
+'    			total_man_days_planned += man_days_planned;LINESEPARATOR'
+'    			double man_days_avail = (dsTotals.getItemNumber(2,"FTE_"+i)!=null ? dsTotals.getItemNumber(2,"FTE_"+i) : 0);  //converts nulls to 0sLINESEPARATOR'
+'    			dsTotals.setItemNumber(2,"FTE_"+i, man_days_avail);LINESEPARATOR'
+'    			total_man_days_avail += man_days_avail;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		dsTotals.setItemNumber(1,"TOTAL_MAN_DAYS" , total_man_days_planned/12); //avg fte per month - not totalsLINESEPARATOR'
+'    		dsTotals.setItemNumber(2,"TOTAL_MAN_DAYS" , total_man_days_avail/12);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	else if(windowType.equalsIgnoreCase("2")) {//WY type using men hoursLINESEPARATOR'
+'    		double total_man_days_planned=0;LINESEPARATOR'
+'    		double total_man_days_avail=0;LINESEPARATOR'
+'    		for (int i=1;i<=12;i++){LINESEPARATOR'
+'    			total_man_days_planned += (dsTotals.getItemNumber(1,"FTE_"+i)!=null ? dsTotals.getItemNumber(1,"FTE_"+i) : 0); //accumulates sum man hours from planLINESEPARATOR'
+'LINESEPARATOR'
+'    			double man_days_avail = (dsTotals.getItemNumber(2,"FTE_"+i)!=null ? dsTotals.getItemNumber(2,"FTE_"+i) : 0)*ds_month_hours.getItemNumber(i,"MONTH_HOURS");LINESEPARATOR'
+'    			dsTotals.setItemNumber(2,"FTE_"+i, man_days_avail);LINESEPARATOR'
+'    			total_man_days_avail += man_days_avail;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		dsTotals.setItemNumber(1,"TOTAL_MAN_DAYS" , total_man_days_planned);LINESEPARATOR'
+'    		dsTotals.setItemNumber(2,"TOTAL_MAN_DAYS" , total_man_days_avail);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	else {//default, IN usind man daysLINESEPARATOR'
+'    		double total_man_days_avail=0;LINESEPARATOR'
+'    		for (int i=1;i<=ds_month_hours.rowCount();i++){LINESEPARATOR'
+'    			double man_days_avail = (dsTotals.getItemNumber(2,"FTE_"+i)!=null ? dsTotals.getItemNumber(2,"FTE_"+i) : 0)*ds_month_hours.getItemNumber(i,"MONTH_HOURS")/hoursPerDay;LINESEPARATOR'
+'    			dsTotals.setItemNumber(2,"FTE_"+i, man_days_avail);LINESEPARATOR'
+'    			total_man_days_avail += man_days_avail;LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    		dsTotals.setItemNumber(2,"TOTAL_MAN_DAYS" , total_man_days_avail);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	if(dl.doesTableExist("OWNER_YEAR_BUDGET")){LINESEPARATOR'
+'    		sql_str = "select sum(a.BUDGET) as BUDGET from OWNER_YEAR_BUDGET a where a.module_id=get_module_id() and a.EFF_FISCAL_YEAR = ?";LINESEPARATOR'
+'    		wc= UserSelection.getSelectionWc(dl,accessRegPlan,"OWNER_YEAR_BUDGET","a");LINESEPARATOR'
+'    		if (wc!=null && wc.length()>0) sql_str+=" AND "+wc;LINESEPARATOR'
+'    		DataStore ds_owner_year_budget = dl.createDataStore(sql_str);LINESEPARATOR'
+'    		ds_owner_year_budget.retrieve(fiscalYear);LINESEPARATOR'
+'    		if(ds_owner_year_budget.rowCount()==1){LINESEPARATOR'
+'    			dsTotals.setItemNumber(2,"total_cost",ds_owner_year_budget.getItemNumber(1,"BUDGET"));LINESEPARATOR'
+'    		}LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	dsTotals.insertRow(0);LINESEPARATOR'
+'    	dsTotals.setItemString(3,"DESCR","Difference");LINESEPARATOR'
+'    	//double total_man_days=0;LINESEPARATOR'
+'    	for (int i=1;i<=12;i++){LINESEPARATOR'
+'    		double man_days = (dsTotals.getItemNumber(1,"FTE_"+i)!=null ? dsTotals.getItemNumber(1,"FTE_"+i) : 0)LINESEPARATOR'
+'    				- (dsTotals.getItemNumber(2,"FTE_"+i)!=null ? dsTotals.getItemNumber(2,"FTE_"+i) : 0);LINESEPARATOR'
+'    		dsTotals.setItemNumber(3,"FTE_"+i, man_days);LINESEPARATOR'
+'    		//total_man_days += man_days;LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	//ds_totals.setItemNumber(3,"TOTAL_MAN_DAYS" , total_man_days);LINESEPARATOR'
+'    	dsTotals.setItemNumber(3,"TOTAL_MAN_DAYS" , (dsTotals.getItemNumber(1,"TOTAL_MAN_DAYS")!=null ? dsTotals.getItemNumber(1,"TOTAL_MAN_DAYS") : 0)LINESEPARATOR'
+'    			- (dsTotals.getItemNumber(2,"TOTAL_MAN_DAYS")!=null ? dsTotals.getItemNumber(2,"TOTAL_MAN_DAYS") : 0));LINESEPARATOR'
+'    	if(dsTotals.getItemNumber(1,"DELTA_FTE") !=null && dsTotals.getItemNumber(2,"DELTA_FTE") !=null){LINESEPARATOR'
+'    		dsTotals.setItemNumber(3,"DELTA_FTE",dsTotals.getItemNumber(1,"DELTA_FTE")-dsTotals.getItemNumber(2,"DELTA_FTE"));LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	if(dsTotals.getItemNumber(1,"TOTAL_COST") !=null && dsTotals.getItemNumber(2,"TOTAL_COST") !=null){LINESEPARATOR'
+'    		dsTotals.setItemNumber(3,"TOTAL_COST",dsTotals.getItemNumber(1,"TOTAL_COST")-dsTotals.getItemNumber(2,"TOTAL_COST"));LINESEPARATOR'
+'    	}LINESEPARATOR'
+'LINESEPARATOR'
+'    	return dsTotals;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    public double getHoursPerDay()LINESEPARATOR'
+'    {LINESEPARATOR'
+'        return hoursPerDay;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Set value of instance variable restrictZerosLINESEPARATOR'
+'     * @param restrictZeros if true then we are prevented from allocating resources to months in activity calendarLINESEPARATOR'
+'     * 						that are set to 0LINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void setRestrictZeros(boolean restrictZeros)LINESEPARATOR'
+'    {LINESEPARATOR'
+'    	this.restrictZeros = restrictZeros;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Get value of instance variable restrictZerosLINESEPARATOR'
+'     * @return true if there is an equipment calendar for the current activity, or the activity calendarLINESEPARATOR'
+'     * 				restricts it explicitlyLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private boolean isRestrictZeros()LINESEPARATOR'
+'    {LINESEPARATOR'
+'    	return this.restrictZeros;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Set value of relative calendar importance.LINESEPARATOR'
+'     * @param importance the level of importance assigned to this calendarLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private void setRelativeCalendarImportance(int importance)LINESEPARATOR'
+'    {LINESEPARATOR'
+'    	this.relativeCalendarImportance = importance;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Get value of instance variable relativeCalendarImportance.LINESEPARATOR'
+'     * @return the level of importance assigned to this calendarLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private int getRelativeCalendarImportance()LINESEPARATOR'
+'    {LINESEPARATOR'
+'    	return this.relativeCalendarImportance;LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Obtains DATA_SCALE column of SETUP_COLUMN_ID WHERE COLUMN_ID=\'TOTAL_FTE\', which represents the number ofLINESEPARATOR'
+'     * digits to be used after the decimal point.  This column should have the same scale as CALC_FTE column. LINESEPARATOR'
+'     * @return The precision that should be used for numbers in the plan matrixLINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public int getScale() throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	if (columnScale == null)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		columnScale = getScale("TOTAL_FTE");LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	return columnScale.intValue();LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Obtains DATA_SCALE column of SETUP_COLUMN_ID WHERE COLUMN_ID=\'<tt>column</tt>\', which represents the number ofLINESEPARATOR'
+'     * digits to be used after the decimal point.LINESEPARATOR'
+'     * @param column The COLUMN_ID that we are evaluatingLINESEPARATOR'
+'     * @return The precision of <tt>column</tt> in SETUP_COLUMN_ID.LINESEPARATOR'
+'     * @throws TRDIExceptionLINESEPARATOR'
+'     */LINESEPARATOR'
+'    private int getScale(String column) throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'    	Integer scale = SetupColumnIdCache.getInstance().getScale(column);LINESEPARATOR'
+'    	if (scale == null)LINESEPARATOR'
+'    	{LINESEPARATOR'
+'    		scale = new Integer(0);LINESEPARATOR'
+'    	}LINESEPARATOR'
+'    	LINESEPARATOR'
+'    	return scale.intValue();LINESEPARATOR'
+'    }LINESEPARATOR'
+'    LINESEPARATOR'
+'    LINESEPARATOR'
+'    /**LINESEPARATOR'
+'     * Checks if the DATA_SCALE column of SETUP_COLUMN_ID matches for the columns TOTAL_FTE and CALC_FTE.LINESEPARATOR'
+'     * @return true if both columns have the same data scale, or CALC_FTE does not existLINESEPARATOR'
+'     */LINESEPARATOR'
+'    public boolean columnScalesMatch() throws TRDIExceptionLINESEPARATOR'
+'    {LINESEPARATOR'
+'		SetupColumnIdCache sci = SetupColumnIdCache.getInstance();LINESEPARATOR'
+'		LINESEPARATOR'
+'		if (!sci.contains("CALC_FTE"))LINESEPARATOR'
+'		{LINESEPARATOR'
+'			return true;LINESEPARATOR'
+'		}LINESEPARATOR'
+'		LINESEPARATOR'
+'		int totalFteScale = getScale();LINESEPARATOR'
+'		int calcFteScale = getScale("CALC_FTE");LINESEPARATOR'
+'		LINESEPARATOR'
+'		return totalFteScale == calcFteScale;LINESEPARATOR'
+'    }LINESEPARATOR'
+'}';